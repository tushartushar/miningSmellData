Implementation smell,Namespace,Class,File,Method,Description
Long Method,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveRequest,The method has 106 lines of code.
Long Method,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveResponse,The method has 139 lines of code.
Long Method,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The method has 114 lines of code.
Complex Method,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,CoAP,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,CoAP,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,CoAP.Channel,UDPChannel,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,Start,Cyclomatic complexity of the method is 8
Complex Method,CoAP.EndPoint.Resources,Resource,C:\repos\smeshlink_CoAP.NET\CoAP.NET\EndPoint\Resources\Resource.cs,AddSubResource,Cyclomatic complexity of the method is 11
Complex Method,CoAP.EndPoint.Resources,Resource,C:\repos\smeshlink_CoAP.NET\CoAP.NET\EndPoint\Resources\Resource.cs,Print,Cyclomatic complexity of the method is 8
Complex Method,CoAP.Net,Matcher,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,SendResponse,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveRequest,Cyclomatic complexity of the method is 9
Complex Method,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,SendResponse,Cyclomatic complexity of the method is 8
Complex Method,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveResponse,Cyclomatic complexity of the method is 14
Complex Method,CoAP.Util,Utils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\Utils.cs,OptionsToString,Cyclomatic complexity of the method is 11
Complex Method,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,TryAddInternal,Cyclomatic complexity of the method is 10
Complex Method,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,CopyTo,Cyclomatic complexity of the method is 8
Complex Method,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,Cyclomatic complexity of the method is 10
Complex Method,System.Threading,SpinWait,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Threading\SpinWait.cs,SpinUntil,Cyclomatic complexity of the method is 8
Long Parameter List,CoAP,CoapClient,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapClient.cs,PostAsync,The method has 5 parameters. Parameters: payload' format' accept' done' fail
Long Parameter List,CoAP,CoapClient,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapClient.cs,PostAsync,The method has 5 parameters. Parameters: payload' format' accept' done' fail
Long Parameter List,CoAP,CoapClient,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapClient.cs,PutAsync,The method has 5 parameters. Parameters: payload' format' accept' done' fail
Long Parameter List,CoAP.Channel,UDPChannel,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,EndReceive,The method has 5 parameters. Parameters: socket' buffer' offset' count' ep
Long Parameter List,CoAP.Stack,Entry,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\Chain.cs,Entry,The method has 6 parameters. Parameters: chain' prevEntry' nextEntry' name' filter' nextFilterFactory
Long Parameter List,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,TryAddInternal,The method has 6 parameters. Parameters: key' hashcode' value' updateIfExists' acquireLock' resultingValue
Long Parameter List,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GetBucketAndLockNo,The method has 5 parameters. Parameters: hashcode' bucketNo' lockNo' bucketCount' lockCount
Long Identifier,CoAP,CoapConfig,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,,The length of the parameter _notificationCheckIntervalTime is 30.
Long Identifier,CoAP,CoapConfig,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,,The length of the parameter _notificationCheckIntervalCount is 31.
Long Identifier,CoAP,CoapConfig,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,,The length of the parameter _notificationReregistrationBackoff is 34.
Long Identifier,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,,The length of the parameter DEFAULT_CONCURRENCY_MULTIPLIER is 30.
Long Identifier,System.Threading,PlatformHelper,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Threading\SpinWait.cs,,The length of the parameter PROCESSOR_COUNT_REFRESH_INTERVAL_MS is 35.
Long Identifier,System.Threading,PlatformHelper,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Threading\SpinWait.cs,,The length of the parameter s_lastProcessorCountRefreshTicks is 32.
Long Identifier,System.Threading,TimeoutHelper,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Threading\SpinWait.cs,UpdateTimeOut,The length of the parameter originalWaitMillisecondsTimeout is 31.
Long Statement,CoAP,CoapConfig,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The length of the statement  "            NotificationCheckIntervalTime = GetInt64(nvc' "NotificationCheckIntervalTime"' "NOTIFICATION_CHECK_INTERVAL"' NotificationCheckIntervalTime); " is 141.
Long Statement,CoAP,CoapConfig,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The length of the statement  "            NotificationCheckIntervalCount = GetInt32(nvc' "NotificationCheckIntervalCount"' "NOTIFICATION_CHECK_INTERVAL_COUNT"' NotificationCheckIntervalCount); " is 150.
Long Statement,CoAP,CoapConfig,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The length of the statement  "            NotificationReregistrationBackoff = GetInt32(nvc' "NotificationReregistrationBackoff"' "NOTIFICATION_REREGISTRATION_BACKOFF"' NotificationReregistrationBackoff); " is 161.
Long Statement,CoAP,CoapConfig,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The length of the statement  "            ChannelReceiveBufferSize = GetInt32(nvc' "ChannelReceiveBufferSize"' "UDP_CONNECTOR_RECEIVE_BUFFER"' ChannelReceiveBufferSize); " is 127.
Long Statement,CoAP,CoapConfig,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The length of the statement  "            ChannelReceivePacketSize = GetInt32(nvc' "ChannelReceivePacketSize"' "UDP_CONNECTOR_DATAGRAM_SIZE"' ChannelReceivePacketSize); " is 126.
Long Statement,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The length of the statement  "            Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24; " is 150.
Long Statement,CoAP.Net,Matcher,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,ReceiveResponse,The length of the statement  "                        log.Warn("Possible MID reuse before lifetime end: " + response.TokenString + " expected MID " + exchange.CurrentRequest.ID + " but received " + response.ID); " is 157.
Long Statement,CoAP.Server.Resources,Resource,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Server\Resources\Resource.cs,RemoveObserveRelation,The length of the statement  "            ((ICollection<KeyValuePair<String' ObserveRelation>>)_observeRelations).Remove(new KeyValuePair<String' ObserveRelation>(relation.Key' relation)); " is 146.
Long Statement,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveRequest,The length of the statement  "                        log.Warn("Wrong block number. Expected " + status.CurrentNUM + " but received " + block1.NUM + ". Respond with 4.08 (Request Entity Incomplete)."); " is 147.
Long Statement,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveResponse,The length of the statement  "                        log.Warn("Wrong block number. Expected " + status.CurrentNUM + " but received " + block2.NUM + ". Reject response; exchange has failed."); " is 138.
Long Statement,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The length of the statement  "                    Int16 high = Int16.Parse(hex[i].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture); " is 140.
Long Statement,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The length of the statement  "                    Int16 low = Int16.Parse(hex[i + 1].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture); " is 143.
Long Statement,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The length of the statement  "                // Compute the new table size. We find the smallest integer larger than twice the previous table size' and not divisible by " is 123.
Long Statement,System.Collections.Concurrent,ConcurrentQueue<T>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentQueue.cs,InitializeFromCollection,The length of the statement  "            Segment localTail = new Segment(0' this);//use this local variable to avoid the extra volatile read/write. this is safe because it is only called from ctor " is 155.
Complex Conditional,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Serialize,The conditional expression  "(!resource.Hidden && (resource.Name.Length > 0) || !recursive)                   && Matches(resource' query)"  is complex.
Complex Conditional,CoAP,Request,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Request.cs,WaitForResponse,The conditional expression  "_currentResponse == null &&                      !IsCancelled && !IsTimedOut && !IsRejected"  is complex.
Complex Conditional,CoAP.Observe,ObserveNotificationOrderer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Observe\ObserveNotificationOrderer.cs,IsNew,The conditional expression  "V1 < V2 && V2 - V1 < 1 << 23                      || V1 > V2 && V1 - V2 > 1 << 23                      || T2 > T1.AddMilliseconds(notifMaxAge)"  is complex.
Complex Conditional,System.Collections.Concurrent,ConcurrentQueue<T>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentQueue.cs,GetHeadTailPositions,The conditional expression  "head != _head || tail != _tail                  //if low and high pointers' retry                  || headLow != head.Low || tailHigh != tail.High                  //if head jumps ahead of tail because of concurrent grow and dequeue' retry                  || head._index > tail._index"  is complex.
Complex Conditional,System.Collections.Generic,HashSet<T>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashSet.cs,HashSet,The conditional expression  "(_count == 0 && _slots.Length > HashHelpers.GetMinPrime()) ||                  (_count > 0 && _slots.Length / _count > ShrinkThreshold)"  is complex.
Empty Catch Block,CoAP,CoapClient,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapClient.cs,Ping,The method has an empty catch block.
Empty Catch Block,CoAP.Channel,UDPChannel,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,SetupUDPSocket,The method has an empty catch block.
Empty Catch Block,CoAP.Channel,UDPChannel,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,BeginReceive,The method has an empty catch block.
Empty Catch Block,CoAP.Channel,UDPChannel,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,BeginSend,The method has an empty catch block.
Empty Catch Block,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,PrepareBlockCleanup,The method has an empty catch block.
Empty Catch Block,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ClearBlockCleanup,The method has an empty catch block.
Empty Catch Block,CoAP.Stack,TransmissionContext,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\ReliabilityLayer.cs,Cancel,The method has an empty catch block.
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,DecodeSZX,The following statement contains a magic number: return 1 << (szx + 4);
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: if (blockSize < 16)                  return 0;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: if (blockSize > 1024)                  return 6;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: if (blockSize > 1024)                  return 6;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: return (Int32)(Math.Log(blockSize) / Math.Log(2)) - 4;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: return (Int32)(Math.Log(blockSize) / Math.Log(2)) - 4;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,ValidSZX,The following statement contains a magic number: return (szx >= 0 && szx <= 6);
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,Encode,The following statement contains a magic number: value |= (m ? 1 : 0) << 3;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,Encode,The following statement contains a magic number: value |= num << 4;
Magic Number,CoAP,CoapConfig,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The following statement contains a magic number: foreach (String line in lines)              {                  String[] tmp = line.Split(new Char[] { '=' }' 2);                  if (tmp.Length == 2)                      nvc[tmp[0]] = tmp[1];              }
Magic Number,CoAP,CoapConfig,C:\repos\smeshlink_CoAP.NET\CoAP.NET\CoapConfig.cs,Load,The following statement contains a magic number: foreach (String line in lines)              {                  String[] tmp = line.Split(new Char[] { '=' }' 2);                  if (tmp.Length == 2)                      nvc[tmp[0]] = tmp[1];              }
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,GetResponseClass,The following statement contains a magic number: return (code >> 5) & 0x7;
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsRequest,The following statement contains a magic number: return (code >= 1) && (code <= 31);
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsResponse,The following statement contains a magic number: return (code >= 64) && (code <= 191);
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsResponse,The following statement contains a magic number: return (code >= 64) && (code <= 191);
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsSuccess,The following statement contains a magic number: return code >= 64 && code < 96;
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsSuccess,The following statement contains a magic number: return code >= 64 && code < 96;
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsValid,The following statement contains a magic number: return (code >= 0) && (code <= 255);
Magic Number,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Parse,The following statement contains a magic number: if (!String.IsNullOrEmpty(linkFormat))              {                  Scanner scanner = new Scanner(linkFormat);                  String path = null;                  while ((path = scanner.Find(ResourceNameRegex)) != null)                  {                      path = path.Substring(1' path.Length - 2);                      WebLink link = new WebLink(path);                        String attr = null;                      while (scanner.Find(DelimiterRegex' 1) == null &&                          (attr = scanner.Find(WordRegex)) != null)                      {                          if (scanner.Find(EqualRegex' 1) == null)                          {                              // flag attribute without value                              link.Attributes.Add(attr);                          }                          else                          {                              String value = null;                              if ((value = scanner.Find(QuotedString)) != null)                              {                                  // trim " "                                  value = value.Substring(1' value.Length - 2);                                  if (Title.Equals(attr))                                      link.Attributes.Add(attr' value);                                  else                                      foreach (String part in BlankRegex.Split(value))                                          link.Attributes.Add(attr' part);                              }                              else if ((value = scanner.Find(WordRegex)) != null)                              {                                  link.Attributes.Set(attr' value);                              }                              else if ((value = scanner.Find(Cardinal)) != null)                              {                                  link.Attributes.Set(attr' value);                              }                          }                      }                        yield return link;                  }              }
Magic Number,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Parse,The following statement contains a magic number: if (!String.IsNullOrEmpty(linkFormat))              {                  Scanner scanner = new Scanner(linkFormat);                  String path = null;                  while ((path = scanner.Find(ResourceNameRegex)) != null)                  {                      path = path.Substring(1' path.Length - 2);                      WebLink link = new WebLink(path);                        String attr = null;                      while (scanner.Find(DelimiterRegex' 1) == null &&                          (attr = scanner.Find(WordRegex)) != null)                      {                          if (scanner.Find(EqualRegex' 1) == null)                          {                              // flag attribute without value                              link.Attributes.Add(attr);                          }                          else                          {                              String value = null;                              if ((value = scanner.Find(QuotedString)) != null)                              {                                  // trim " "                                  value = value.Substring(1' value.Length - 2);                                  if (Title.Equals(attr))                                      link.Attributes.Add(attr' value);                                  else                                      foreach (String part in BlankRegex.Split(value))                                          link.Attributes.Add(attr' part);                              }                              else if ((value = scanner.Find(WordRegex)) != null)                              {                                  link.Attributes.Set(attr' value);                              }                              else if ((value = scanner.Find(Cardinal)) != null)                              {                                  link.Attributes.Set(attr' value);                              }                          }                      }                        yield return link;                  }              }
Magic Number,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Serialize,The following statement contains a magic number: if (recursive)              {                  foreach (Resource sub in resource.GetSubResources())                  {                      String next = Serialize(sub' query' true);                        if (next.Length > 0)                      {                          if (linkFormat.Length > 3)                              linkFormat.Append(Delimiter);                          linkFormat.Append(next);                      }                  }              }
Magic Number,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Deserialize,The following statement contains a magic number: while ((path = scanner.Find(ResourceNameRegex)) != null)              {                  path = path.Substring(1' path.Length - 2);                    // Retrieve specified resource' create if necessary                  RemoteResource resource = new RemoteResource(path);                    LinkAttribute attr = null;                  while (scanner.Find(DelimiterRegex' 1) == null && (attr = ParseAttribute(scanner)) != null)                  {                      AddAttribute(resource.Attributes' attr);                  }                    root.AddSubResource(resource);              }
Magic Number,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,ParseAttribute,The following statement contains a magic number: if (name == null)                  return null;              else              {                  Object value = null;                  // check for name-value-pair                  if (scanner.Find(new Regex("=")' 1) == null)                      // flag attribute                      value = true;                  else                  {                      String s = null;                      if ((s = scanner.Find(QuotedString)) != null)                          // trim " "                          value = s.Substring(1' s.Length - 2);                      else if ((s = scanner.Find(Cardinal)) != null)                          value = Int32.Parse(s);                      // TODO what if both pattern failed?                  }                  return new LinkAttribute(name' value);              }
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,ToString,The following statement contains a magic number: if (payload == null)              {                  payload = "[no payload]";              }              else              {                  Int32 len = payload.Length' nl = payload.IndexOf('\n');                  if (nl >= 0)                      payload = payload.Substring(0' nl);                  if (payload.Length > 24)                      payload = payload.Substring(0' 24);                  payload = "\"" + payload + "\"";                  if (payload.Length != len + 2)                      payload += "... " + PayloadSize + " bytes";              }
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,ToString,The following statement contains a magic number: if (payload == null)              {                  payload = "[no payload]";              }              else              {                  Int32 len = payload.Length' nl = payload.IndexOf('\n');                  if (nl >= 0)                      payload = payload.Substring(0' nl);                  if (payload.Length > 24)                      payload = payload.Substring(0' 24);                  payload = "\"" + payload + "\"";                  if (payload.Length != len + 2)                      payload += "... " + PayloadSize + " bytes";              }
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,ToString,The following statement contains a magic number: if (payload == null)              {                  payload = "[no payload]";              }              else              {                  Int32 len = payload.Length' nl = payload.IndexOf('\n');                  if (nl >= 0)                      payload = payload.Substring(0' nl);                  if (payload.Length > 24)                      payload = payload.Substring(0' 24);                  payload = "\"" + payload + "\"";                  if (payload.Length != len + 2)                      payload += "... " + PayloadSize + " bytes";              }
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddIfMatch,The following statement contains a magic number: if (opaque.Length > 8)                  throw ThrowHelper.Argument("opaque"' "Content of If-Match option is too large: " + ByteArrayUtils.ToHexString(opaque));
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddUriPath,The following statement contains a magic number: if (path.Length > 255)                  throw ThrowHelper.Argument("path"' "Uri Path option's length must be between 0 and 255 inclusive");
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddUriQuery,The following statement contains a magic number: if (query.Length > 255)                  throw ThrowHelper.Argument("query"' "Uri Query option's length must be between 0 and 255 inclusive");
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddLocationPath,The following statement contains a magic number: if (path.Length > 255)                  throw ThrowHelper.Argument("path"' "Location Path option's length must be between 0 and 255 inclusive");
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddLocationQuery,The following statement contains a magic number: if (query.Length > 255)                  throw ThrowHelper.Argument("query"' "Location Query option's length must be between 0 and 255 inclusive");
Magic Number,CoAP,Option,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,GetHashCode,The following statement contains a magic number: const Int32 prime = 31;
Magic Number,CoAP,Option,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,IsUnsafe,The following statement contains a magic number: return ((Int32)type & 2) > 0;
Magic Number,CoAP,Int32Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Decode,The following statement contains a magic number: for (Int32 i = 0; i < bytes.Length; i++)                  {                      bLoop = bytes[i];                      //iOutcome |= (bLoop & 0xFF) << (8 * i);                      iOutcome <<= 8;                      iOutcome |= (bLoop & 0xFF);                  }
Magic Number,CoAP,Int32Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < 4; i++)                  {                      if (value >= 1 << (i * 8) || value < 0)                          len++;                      else                          break;                  }
Magic Number,CoAP,Int32Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < 4; i++)                  {                      if (value >= 1 << (i * 8) || value < 0)                          len++;                      else                          break;                  }
Magic Number,CoAP,Int32Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < len; i++)                  {                      ret[len - i - 1] = (Byte)(value >> i * 8);                  }
Magic Number,CoAP,Int64Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Decode,The following statement contains a magic number: for (Int32 i = 0; i < bytes.Length; i++)                  {                      bLoop = bytes[i];                      iOutcome <<= 8;                      iOutcome |= (bLoop & 0xFFU);                  }
Magic Number,CoAP,Int64Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < 8; i++)                  {                      if (value >= 1L << (i * 8) || value < 0L)                          len++;                      else                          break;                  }
Magic Number,CoAP,Int64Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < 8; i++)                  {                      if (value >= 1L << (i * 8) || value < 0L)                          len++;                      else                          break;                  }
Magic Number,CoAP,Int64Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < len; i++)                  {                      ret[len - i - 1] = (Byte)(value >> i * 8);                  }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,CoAP,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,IsIPv4MappedToIPv6,The following statement contains a magic number: for (Int32 i = 0; i < 10; i++)              {                  if (bytes[i] != 0)                      return false;              }
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,IsIPv4MappedToIPv6,The following statement contains a magic number: return bytes[10] == 0xff && bytes[11] == 0xff;
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,IsIPv4MappedToIPv6,The following statement contains a magic number: return bytes[10] == 0xff && bytes[11] == 0xff;
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv4,The following statement contains a magic number: Int64 newAddress = (UInt32)(bytes[12] & 0xff) | (UInt32)(bytes[13] & 0xff) << 8 | (UInt32)(bytes[14] & 0xff) << 16 | (UInt32)(bytes[15] & 0xff) << 24;
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv6,The following statement contains a magic number: Byte[] newAddress = new Byte[16] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0xff' 0xff' bytes[0]' bytes[1]' bytes[2]' bytes[3] };
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv6,The following statement contains a magic number: Byte[] newAddress = new Byte[16] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0xff' 0xff' bytes[0]' bytes[1]' bytes[2]' bytes[3] };
Magic Number,CoAP.Channel,IPAddressExtensions,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\IPAddressExtensions.cs,MapToIPv6,The following statement contains a magic number: Byte[] newAddress = new Byte[16] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0xff' 0xff' bytes[0]' bytes[1]' bytes[2]' bytes[3] };
Magic Number,CoAP.Channel,UDPChannel,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,Start,The following statement contains a magic number: if (_localEP == null)              {                  try                  {                      _socket = SetupUDPSocket(AddressFamily.InterNetworkV6' _receivePacketSize + 1); // +1 to check for > ReceivePacketSize                  }                  catch (SocketException e)                  {                      if (e.SocketErrorCode == SocketError.AddressFamilyNotSupported)                          _socket = null;                      else                          throw e;                  }                    if (_socket == null)                  {                      // IPv6 is not supported' use IPv4 instead                      _socket = SetupUDPSocket(AddressFamily.InterNetwork' _receivePacketSize + 1);                      _socket.Socket.Bind(new IPEndPoint(IPAddress.Any' _port));                  }                  else                  {                      try                      {                          // Enable IPv4-mapped IPv6 addresses to accept both IPv6 and IPv4 connections in a same socket.                          _socket.Socket.SetSocketOption(SocketOptionLevel.IPv6' (SocketOptionName)27' 0);                      }                      catch                      {                          // IPv4-mapped address seems not to be supported' set up a separated socket of IPv4.                          _socketBackup = SetupUDPSocket(AddressFamily.InterNetwork' _receivePacketSize + 1);                      }                        _socket.Socket.Bind(new IPEndPoint(IPAddress.IPv6Any' _port));                      if (_socketBackup != null)                          _socketBackup.Socket.Bind(new IPEndPoint(IPAddress.Any' _port));                  }              }              else              {                  _socket = SetupUDPSocket(_localEP.AddressFamily' _receivePacketSize + 1);                  _socket.Socket.Bind(_localEP);              }
Magic Number,CoAP.Channel,UDPChannel,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Channel\UDPChannel.cs,SetupUDPSocket,The following statement contains a magic number: const Int32 SIO_UDP_CONNRESET = -1744830452;
Magic Number,CoAP.Codec,DatagramReader,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramReader.cs,ReadBytes,The following statement contains a magic number: if (_currentBitIndex >= 0)              {                  for (Int32 i = 0; i < count; i++)                  {                      bytes[i] = (Byte)Read(8);                  }              }              else              {                  _stream.Read(bytes' 0' bytes.Length);              }
Magic Number,CoAP.Codec,DatagramReader,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramReader.cs,ReadCurrentByte,The following statement contains a magic number: _currentBitIndex = 7;
Magic Number,CoAP.Codec,DatagramWriter,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,DatagramWriter,The following statement contains a magic number: _currentBitIndex = 7;
Magic Number,CoAP.Codec,DatagramWriter,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,Write,The following statement contains a magic number: if (numBits < 32 && data >= (1 << numBits))              {                  if (log.IsWarnEnabled)                      log.Warn(String.Format("Truncating value {0} to {1}-bit integer"' data' numBits));              }
Magic Number,CoAP.Codec,DatagramWriter,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,WriteBytes,The following statement contains a magic number: if (_currentBitIndex < 7)              {                  for (int i = 0; i < bytes.Length; i++)                  {                      Write(bytes[i]' 8);                  }              }              else              {                  // if bit buffer is empty' call can be delegated                  // to byte stream to increase                  _stream.Write(bytes' 0' bytes.Length);              }
Magic Number,CoAP.Codec,DatagramWriter,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,WriteBytes,The following statement contains a magic number: if (_currentBitIndex < 7)              {                  for (int i = 0; i < bytes.Length; i++)                  {                      Write(bytes[i]' 8);                  }              }              else              {                  // if bit buffer is empty' call can be delegated                  // to byte stream to increase                  _stream.Write(bytes' 0' bytes.Length);              }
Magic Number,CoAP.Codec,DatagramWriter,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,WriteCurrentByte,The following statement contains a magic number: if (_currentBitIndex < 7)              {                  _stream.WriteByte(_currentByte);                  _currentByte = 0;                  _currentBitIndex = 7;              }
Magic Number,CoAP.Codec,DatagramWriter,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Codec\DatagramWriter.cs,WriteCurrentByte,The following statement contains a magic number: if (_currentBitIndex < 7)              {                  _stream.WriteByte(_currentByte);                  _currentByte = 0;                  _currentBitIndex = 7;              }
Magic Number,CoAP.Deduplication,CropRotation,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Deduplication\CropRotation.cs,CropRotation,The following statement contains a magic number: _maps = new ConcurrentDictionary<Exchange.KeyID' Exchange>[3];
Magic Number,CoAP.Deduplication,CropRotation,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Deduplication\CropRotation.cs,CropRotation,The following statement contains a magic number: _maps[2] = new ConcurrentDictionary<Exchange.KeyID' Exchange>();
Magic Number,CoAP.Deduplication,CropRotation,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Deduplication\CropRotation.cs,Rotation,The following statement contains a magic number: _second = (_second + 1) % 3;
Magic Number,CoAP.Deduplication,CropRotation,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Deduplication\CropRotation.cs,Clear,The following statement contains a magic number: _maps[2].Clear();
Magic Number,CoAP.EndPoint.Resources,Resource,C:\repos\smeshlink_CoAP.NET\CoAP.NET\EndPoint\Resources\Resource.cs,Print,The following statement contains a magic number: foreach (LinkAttribute attr in Attributes)              {                  if (attr.Name.Equals(LinkFormat.Title))                      continue;                  for (Int32 i = 0; i < indent + 3; i++)                      sb.Append(" ");                  sb.AppendFormat("- ");                  attr.Serialize(sb);                  sb.AppendLine();              }
Magic Number,CoAP.EndPoint.Resources,Resource,C:\repos\smeshlink_CoAP.NET\CoAP.NET\EndPoint\Resources\Resource.cs,Print,The following statement contains a magic number: if (_subResources != null)                  foreach (Resource sub in _subResources.Values)                  {                      sub.Print(sb' indent + 2);                  }
Magic Number,CoAP.Net,KeyID,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Net\Exchange.cs,KeyID,The following statement contains a magic number: _hash = id * 31 + (ep == null ? 0 : ep.GetHashCode());
Magic Number,CoAP.Net,KeyUri,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Net\Exchange.cs,KeyUri,The following statement contains a magic number: _hash = _uri.GetHashCode() * 31 + ep.GetHashCode();
Magic Number,CoAP.Net,Matcher,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,Matcher,The following statement contains a magic number: if (config.UseRandomIDStart)                  _currentID = new Random().Next(1 << 16);
Magic Number,CoAP.Net,Matcher,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,SendRequest,The following statement contains a magic number: if (request.ID == Message.None)                  request.ID = System.Threading.Interlocked.Increment(ref _currentID) % (1 << 16);
Magic Number,CoAP.Net,Matcher,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Net\Matcher.cs,SendResponse,The following statement contains a magic number: if (response.ID == Message.None)                  response.ID = System.Threading.Interlocked.Increment(ref _currentID) % (1 << 16);
Magic Number,CoAP.Observe,ObserveNotificationOrderer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Observe\ObserveNotificationOrderer.cs,GetNextObserveNumber,The following statement contains a magic number: while (next >= 1 << 24)              {                  Interlocked.CompareExchange(ref _number' 0' next);                  next = Interlocked.Increment(ref _number);              }
Magic Number,CoAP.Observe,ObserveNotificationOrderer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Observe\ObserveNotificationOrderer.cs,IsNew,The following statement contains a magic number: if (V1 < V2 && V2 - V1 < 1 << 23                      || V1 > V2 && V1 - V2 > 1 << 23                      || T2 > T1.AddMilliseconds(notifMaxAge))              {                  Timestamp = T2;                  _number = V2;                  return true;              }              else              {                  return false;              }
Magic Number,CoAP.Observe,ObserveNotificationOrderer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Observe\ObserveNotificationOrderer.cs,IsNew,The following statement contains a magic number: if (V1 < V2 && V2 - V1 < 1 << 23                      || V1 > V2 && V1 - V2 > 1 << 23                      || T2 > T1.AddMilliseconds(notifMaxAge))              {                  Timestamp = T2;                  _number = V2;                  return true;              }              else              {                  return false;              }
Magic Number,CoAP.Server.Resources,CoapExchange,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Server\Resources\CoapExchange.cs,Respond,The following statement contains a magic number: if (_maxAge != 60)                  response.MaxAge = _maxAge;
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,ReceiveResponse,The following statement contains a magic number: if (block1 != null)              {                  // TODO: What if request has not been sent blockwise (server error)                  if (log.IsDebugEnabled)                      log.Debug("Response acknowledges block " + block1);                    BlockwiseStatus status = exchange.RequestBlockStatus;                  if (!status.Complete)                  {                      // TODO: the response code should be CONTINUE. Otherwise deliver                      // Send next block                      Int32 currentSize = 1 << (4 + status.CurrentSZX);                      Int32 nextNum = status.CurrentNUM + currentSize / block1.Size;                      if (log.IsDebugEnabled)                          log.Debug("Send next block num = " + nextNum);                      status.CurrentNUM = nextNum;                      status.CurrentSZX = block1.SZX;                      Request nextBlock = GetNextRequestBlock(exchange.Request' status);                      if (nextBlock.Token == null)                          nextBlock.Token = response.Token; // reuse same token                      exchange.CurrentRequest = nextBlock;                      base.SendRequest(nextLayer' exchange' nextBlock);                      // do not deliver response                  }                  else if (!response.HasOption(OptionType.Block2))                  {                      // All request block have been acknowledged and we receive a piggy-backed                      // response that needs no blockwise transfer. Thus' deliver it.                      base.ReceiveResponse(nextLayer' exchange' response);                  }                  else                  {                      if (log.IsDebugEnabled)                          log.Debug("Response has Block2 option and is therefore sent blockwise");                  }              }
Magic Number,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,GetNextRequestBlock,The following statement contains a magic number: Int32 currentSize = 1 << (4 + szx);
Magic Number,CoAP.Stack,BlockwiseLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\BlockwiseLayer.cs,GetNextResponseBlock,The following statement contains a magic number: Int32 currentSize = 1 << (4 + szx);
Magic Number,CoAP.Stack,ObserveLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\ObserveLayer.cs,PrepareReregistration,The following statement contains a magic number: Int64 timeout = response.MaxAge * 1000 + _backoff;
Magic Number,CoAP.Stack,TokenLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\TokenLayer.cs,NewToken,The following statement contains a magic number: return new Byte[]              {                   (Byte)(token >> 24)' (Byte)(token >> 16)'                  (Byte)(token >> 8)' (Byte)token              };
Magic Number,CoAP.Stack,TokenLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\TokenLayer.cs,NewToken,The following statement contains a magic number: return new Byte[]              {                   (Byte)(token >> 24)' (Byte)(token >> 16)'                  (Byte)(token >> 8)' (Byte)token              };
Magic Number,CoAP.Stack,TokenLayer,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Stack\TokenLayer.cs,NewToken,The following statement contains a magic number: return new Byte[]              {                   (Byte)(token >> 24)' (Byte)(token >> 16)'                  (Byte)(token >> 8)' (Byte)token              };
Magic Number,CoAP.Util,ArrayEqualityComparer<T>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ArrayEqualityComparer.cs,GetHashCode,The following statement contains a magic number: Int32 hash = 17;
Magic Number,CoAP.Util,ArrayEqualityComparer<T>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ArrayEqualityComparer.cs,GetHashCode,The following statement contains a magic number: foreach (T item in array)              {                  hash = hash * 23 + _elementComparer.GetHashCode(item);              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ToHexString,The following statement contains a magic number: if (data != null && data.Length > 0)              {                  StringBuilder builder = new StringBuilder(data.Length * 3);                  for (Int32 i = 0; i < data.Length; i++)                  {                      builder.Append(digits[(data[i] >> 4) & 0xF]);                      builder.Append(digits[data[i] & 0xF]);                  }                  return builder.ToString();              }              else              {                  return String.Empty;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ToHexString,The following statement contains a magic number: if (data != null && data.Length > 0)              {                  StringBuilder builder = new StringBuilder(data.Length * 3);                  for (Int32 i = 0; i < data.Length; i++)                  {                      builder.Append(digits[(data[i] >> 4) & 0xF]);                      builder.Append(digits[data[i] & 0xF]);                  }                  return builder.ToString();              }              else              {                  return String.Empty;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The following statement contains a magic number: try              {                  hex = hex.Replace("\""' String.Empty);                  if (hex.Length % 2 == 1)                      hex = "0" + hex;                    Byte[] tmp = new Byte[hex.Length / 2];                  for (Int32 i = 0' j = 0; i < hex.Length; i += 2)                  {                      Int16 high = Int16.Parse(hex[i].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      Int16 low = Int16.Parse(hex[i + 1].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      tmp[j++] = Convert.ToByte(high * 16 + low);                  }                    return tmp;              }              catch { return null; }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The following statement contains a magic number: try              {                  hex = hex.Replace("\""' String.Empty);                  if (hex.Length % 2 == 1)                      hex = "0" + hex;                    Byte[] tmp = new Byte[hex.Length / 2];                  for (Int32 i = 0' j = 0; i < hex.Length; i += 2)                  {                      Int16 high = Int16.Parse(hex[i].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      Int16 low = Int16.Parse(hex[i + 1].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      tmp[j++] = Convert.ToByte(high * 16 + low);                  }                    return tmp;              }              catch { return null; }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The following statement contains a magic number: try              {                  hex = hex.Replace("\""' String.Empty);                  if (hex.Length % 2 == 1)                      hex = "0" + hex;                    Byte[] tmp = new Byte[hex.Length / 2];                  for (Int32 i = 0' j = 0; i < hex.Length; i += 2)                  {                      Int16 high = Int16.Parse(hex[i].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      Int16 low = Int16.Parse(hex[i + 1].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      tmp[j++] = Convert.ToByte(high * 16 + low);                  }                    return tmp;              }              catch { return null; }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The following statement contains a magic number: try              {                  hex = hex.Replace("\""' String.Empty);                  if (hex.Length % 2 == 1)                      hex = "0" + hex;                    Byte[] tmp = new Byte[hex.Length / 2];                  for (Int32 i = 0' j = 0; i < hex.Length; i += 2)                  {                      Int16 high = Int16.Parse(hex[i].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      Int16 low = Int16.Parse(hex[i + 1].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      tmp[j++] = Convert.ToByte(high * 16 + low);                  }                    return tmp;              }              catch { return null; }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,Utils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\Utils.cs,ToString,The following statement contains a magic number: sb.AppendFormat("==[ COAP {0} ]============================================\n"' kind)                  .AppendFormat("ID     : {0}\n"' msg.ID)                  .AppendFormat("Type   : {0}\n"' msg.Type)                  .AppendFormat("Token  : {0}\n"' msg.TokenString)                  .AppendFormat("{1}: {0}\n"' CoAP.Code.ToString(msg.Code)' code.PadRight(7));
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,IsValueWriteAtomic,The following statement contains a magic number: if (!isAtomic && IntPtr.Size == 8)              {                  isAtomic |= valueType == typeof(Double) || valueType == typeof(Int64);              }
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: try              {                  // The thread that first obtains _locks[0] will be the one doing the resize operation                  AcquireLocks(0' 1' ref locksAcquired);                    // Make sure nobody resized the table while we were waiting for lock 0:                  if (tables != _tables)                  {                      // We assume that since the table reference is different' it was already resized (or the budget                      // was adjusted). If we ever decide to do table shrinking' or replace the table for other reasons'                      // we will have to revisit this logic.                      return;                  }                    // Compute the (approx.) total size. Use an Int64 accumulation variable to avoid an overflow.                  long approxCount = 0;                  for (int i = 0; i < tables._countPerLock.Length; i++)                  {                      approxCount += tables._countPerLock[i];                  }                    //                  // If the bucket array is too empty' double the budget instead of resizing the table                  //                  if (approxCount < tables._buckets.Length / 4)                  {                      _budget = 2 * _budget;                      if (_budget < 0)                      {                          _budget = int.MaxValue;                      }                      return;                  }                      // Compute the new table size. We find the smallest integer larger than twice the previous table size' and not divisible by                  // 2'3'5 or 7. We can consider a different table-sizing policy in the future.                  int newLength = 0;                  bool maximizeTableSize = false;                  try                  {                      checked                      {                          // Double the size of the buckets table and add one' so that we have an odd integer.                          newLength = tables._buckets.Length * 2 + 1;                            // Now' we only need to check odd integers' and find the first that is not divisible                          // by 3' 5 or 7.                          while (newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0)                          {                              newLength += 2;                          }                            Assert(newLength % 2 != 0);                            if (newLength > MaxArrayLength)                          {                              maximizeTableSize = true;                          }                      }                  }                  catch (OverflowException)                  {                      maximizeTableSize = true;                  }                    if (maximizeTableSize)                  {                      newLength = MaxArrayLength;                        // We want to make sure that GrowTable will not be called again' since table is at the maximum size.                      // To achieve that' we set the budget to int.MaxValue.                      //                      // (There is one special case that would allow GrowTable() to be called in the future:                       // calling Clear() on the ConcurrentDictionary will shrink the table and lower the budget.)                      _budget = int.MaxValue;                  }                    // Now acquire all other locks for the table                  AcquireLocks(1' tables._locks.Length' ref locksAcquired);                    object[] newLocks = tables._locks;                    // Add more locks                  if (_growLockArray && tables._locks.Length < MAX_LOCK_NUMBER)                  {                      newLocks = new object[tables._locks.Length * 2];                      Array.Copy(tables._locks' 0' newLocks' 0' tables._locks.Length);                      for (int i = tables._locks.Length; i < newLocks.Length; i++)                      {                          newLocks[i] = new object();                      }                  }                    Node[] newBuckets = new Node[newLength];                  int[] newCountPerLock = new int[newLocks.Length];                    // Copy all data into a new table' creating new nodes for all elements                  for (int i = 0; i < tables._buckets.Length; i++)                  {                      Node current = tables._buckets[i];                      while (current != null)                      {                          Node next = current._next;                          int newBucketNo' newLockNo;                          GetBucketAndLockNo(current._hashcode' out newBucketNo' out newLockNo' newBuckets.Length' newLocks.Length);                            newBuckets[newBucketNo] = new Node(current._key' current._value' current._hashcode' newBuckets[newBucketNo]);                            checked                          {                              newCountPerLock[newLockNo]++;                          }                            current = next;                      }                  }                    // Adjust the budget                  _budget = Math.Max(1' newBuckets.Length / newLocks.Length);                    // Replace tables with the new versions                  _tables = new Tables(newBuckets' newLocks' newCountPerLock);              }              finally              {                  // Release all locks that we took earlier                  ReleaseLocks(0' locksAcquired);              }
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: try              {                  // The thread that first obtains _locks[0] will be the one doing the resize operation                  AcquireLocks(0' 1' ref locksAcquired);                    // Make sure nobody resized the table while we were waiting for lock 0:                  if (tables != _tables)                  {                      // We assume that since the table reference is different' it was already resized (or the budget                      // was adjusted). If we ever decide to do table shrinking' or replace the table for other reasons'                      // we will have to revisit this logic.                      return;                  }                    // Compute the (approx.) total size. Use an Int64 accumulation variable to avoid an overflow.                  long approxCount = 0;                  for (int i = 0; i < tables._countPerLock.Length; i++)                  {                      approxCount += tables._countPerLock[i];                  }                    //                  // If the bucket array is too empty' double the budget instead of resizing the table                  //                  if (approxCount < tables._buckets.Length / 4)                  {                      _budget = 2 * _budget;                      if (_budget < 0)                      {                          _budget = int.MaxValue;                      }                      return;                  }                      // Compute the new table size. We find the smallest integer larger than twice the previous table size' and not divisible by                  // 2'3'5 or 7. We can consider a different table-sizing policy in the future.                  int newLength = 0;                  bool maximizeTableSize = false;                  try                  {                      checked                      {                          // Double the size of the buckets table and add one' so that we have an odd integer.                          newLength = tables._buckets.Length * 2 + 1;                            // Now' we only need to check odd integers' and find the first that is not divisible                          // by 3' 5 or 7.                          while (newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0)                          {                              newLength += 2;                          }                            Assert(newLength % 2 != 0);                            if (newLength > MaxArrayLength)                          {                              maximizeTableSize = true;                          }                      }                  }                  catch (OverflowException)                  {                      maximizeTableSize = true;                  }                    if (maximizeTableSize)                  {                      newLength = MaxArrayLength;                        // We want to make sure that GrowTable will not be called again' since table is at the maximum size.                      // To achieve that' we set the budget to int.MaxValue.                      //                      // (There is one special case that would allow GrowTable() to be called in the future:                       // calling Clear() on the ConcurrentDictionary will shrink the table and lower the budget.)                      _budget = int.MaxValue;                  }                    // Now acquire all other locks for the table                  AcquireLocks(1' tables._locks.Length' ref locksAcquired);                    object[] newLocks = tables._locks;                    // Add more locks                  if (_growLockArray && tables._locks.Length < MAX_LOCK_NUMBER)                  {                      newLocks = new object[tables._locks.Length * 2];                      Array.Copy(tables._locks' 0' newLocks' 0' tables._locks.Length);                      for (int i = tables._locks.Length; i < newLocks.Length; i++)                      {                          newLocks[i] = new object();                      }                  }                    Node[] newBuckets = new Node[newLength];                  int[] newCountPerLock = new int[newLocks.Length];                    // Copy all data into a new table' creating new nodes for all elements                  for (int i = 0; i < tables._buckets.Length; i++)                  {                      Node current = tables._buckets[i];                      while (current != null)                      {                          Node next = current._next;                          int newBucketNo' newLockNo;                          GetBucketAndLockNo(current._hashcode' out newBucketNo' out newLockNo' newBuckets.Length' newLocks.Length);                            newBuckets[newBucketNo] = new Node(current._key' current._value' current._hashcode' newBuckets[newBucketNo]);                            checked                          {                              newCountPerLock[newLockNo]++;                          }                            current = next;                      }                  }                    // Adjust the budget                  _budget = Math.Max(1' newBuckets.Length / newLocks.Length);                    // Replace tables with the new versions                  _tables = new Tables(newBuckets' newLocks' newCountPerLock);              }              finally              {                  // Release all locks that we took earlier                  ReleaseLocks(0' locksAcquired);              }
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: try              {                  // The thread that first obtains _locks[0] will be the one doing the resize operation                  AcquireLocks(0' 1' ref locksAcquired);                    // Make sure nobody resized the table while we were waiting for lock 0:                  if (tables != _tables)                  {                      // We assume that since the table reference is different' it was already resized (or the budget                      // was adjusted). If we ever decide to do table shrinking' or replace the table for other reasons'                      // we will have to revisit this logic.                      return;                  }                    // Compute the (approx.) total size. Use an Int64 accumulation variable to avoid an overflow.                  long approxCount = 0;                  for (int i = 0; i < tables._countPerLock.Length; i++)                  {                      approxCount += tables._countPerLock[i];                  }                    //                  // If the bucket array is too empty' double the budget instead of resizing the table                  //                  if (approxCount < tables._buckets.Length / 4)                  {                      _budget = 2 * _budget;                      if (_budget < 0)                      {                          _budget = int.MaxValue;                      }                      return;                  }                      // Compute the new table size. We find the smallest integer larger than twice the previous table size' and not divisible by                  // 2'3'5 or 7. We can consider a different table-sizing policy in the future.                  int newLength = 0;                  bool maximizeTableSize = false;                  try                  {                      checked                      {                          // Double the size of the buckets table and add one' so that we have an odd integer.                          newLength = tables._buckets.Length * 2 + 1;                            // Now' we only need to check odd integers' and find the first that is not divisible                          // by 3' 5 or 7.                          while (newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0)                          {                              newLength += 2;                          }                            Assert(newLength % 2 != 0);                            if (newLength > MaxArrayLength)                          {                              maximizeTableSize = true;                          }                      }                  }                  catch (OverflowException)                  {                      maximizeTableSize = true;                  }                    if (maximizeTableSize)                  {                      newLength = MaxArrayLength;                        // We want to make sure that GrowTable will not be called again' since table is at the maximum size.                      // To achieve that' we set the budget to int.MaxValue.                      //                      // (There is one special case that would allow GrowTable() to be called in the future:                       // calling Clear() on the ConcurrentDictionary will shrink the table and lower the budget.)                      _budget = int.MaxValue;                  }                    // Now acquire all other locks for the table                  AcquireLocks(1' tables._locks.Length' ref locksAcquired);                    object[] newLocks = tables._locks;                    // Add more locks                  if (_growLockArray && tables._locks.Length < MAX_LOCK_NUMBER)                  {                      newLocks = new object[tables._locks.Length * 2];                      Array.Copy(tables._locks' 0' newLocks' 0' tables._locks.Length);                      for (int i = tables._locks.Length; i < newLocks.Length; i++)                      {                          newLocks[i] = new object();                      }                  }                    Node[] newBuckets = new Node[newLength];                  int[] newCountPerLock = new int[newLocks.Length];                    // Copy all data into a new table' creating new nodes for all elements                  for (int i = 0; i < tables._buckets.Length; i++)                  {                      Node current = tables._buckets[i];                      while (current != null)                      {                          Node next = current._next;                          int newBucketNo' newLockNo;                          GetBucketAndLockNo(current._hashcode' out newBucketNo' out newLockNo' newBuckets.Length' newLocks.Length);                            newBuckets[newBucketNo] = new Node(current._key' current._value' current._hashcode' newBuckets[newBucketNo]);                            checked                          {                              newCountPerLock[newLockNo]++;                          }                            current = next;                      }                  }                    // Adjust the budget                  _budget = Math.Max(1' newBuckets.Length / newLocks.Length);                    // Replace tables with the new versions                  _tables = new Tables(newBuckets' newLocks' newCountPerLock);              }              finally              {                  // Release all locks that we took earlier                  ReleaseLocks(0' locksAcquired);              }
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: try              {                  // The thread that first obtains _locks[0] will be the one doing the resize operation                  AcquireLocks(0' 1' ref locksAcquired);                    // Make sure nobody resized the table while we were waiting for lock 0:                  if (tables != _tables)                  {                      // We assume that since the table reference is different' it was already resized (or the budget                      // was adjusted). If we ever decide to do table shrinking' or replace the table for other reasons'                      // we will have to revisit this logic.                      return;                  }                    // Compute the (approx.) total size. Use an Int64 accumulation variable to avoid an overflow.                  long approxCount = 0;                  for (int i = 0; i < tables._countPerLock.Length; i++)                  {                      approxCount += tables._countPerLock[i];                  }                    //                  // If the bucket array is too empty' double the budget instead of resizing the table                  //                  if (approxCount < tables._buckets.Length / 4)                  {                      _budget = 2 * _budget;                      if (_budget < 0)                      {                          _budget = int.MaxValue;                      }                      return;                  }                      // Compute the new table size. We find the smallest integer larger than twice the previous table size' and not divisible by                  // 2'3'5 or 7. We can consider a different table-sizing policy in the future.                  int newLength = 0;                  bool maximizeTableSize = false;                  try                  {                      checked                      {                          // Double the size of the buckets table and add one' so that we have an odd integer.                          newLength = tables._buckets.Length * 2 + 1;                            // Now' we only need to check odd integers' and find the first that is not divisible                          // by 3' 5 or 7.                          while (newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0)                          {                              newLength += 2;                          }                            Assert(newLength % 2 != 0);                            if (newLength > MaxArrayLength)                          {                              maximizeTableSize = true;                          }                      }                  }                  catch (OverflowException)                  {                      maximizeTableSize = true;                  }                    if (maximizeTableSize)                  {                      newLength = MaxArrayLength;                        // We want to make sure that GrowTable will not be called again' since table is at the maximum size.                      // To achieve that' we set the budget to int.MaxValue.                      //                      // (There is one special case that would allow GrowTable() to be called in the future:                       // calling Clear() on the ConcurrentDictionary will shrink the table and lower the budget.)                      _budget = int.MaxValue;                  }                    // Now acquire all other locks for the table                  AcquireLocks(1' tables._locks.Length' ref locksAcquired);                    object[] newLocks = tables._locks;                    // Add more locks                  if (_growLockArray && tables._locks.Length < MAX_LOCK_NUMBER)                  {                      newLocks = new object[tables._locks.Length * 2];                      Array.Copy(tables._locks' 0' newLocks' 0' tables._locks.Length);                      for (int i = tables._locks.Length; i < newLocks.Length; i++)                      {                          newLocks[i] = new object();                      }                  }                    Node[] newBuckets = new Node[newLength];                  int[] newCountPerLock = new int[newLocks.Length];                    // Copy all data into a new table' creating new nodes for all elements                  for (int i = 0; i < tables._buckets.Length; i++)                  {                      Node current = tables._buckets[i];                      while (current != null)                      {                          Node next = current._next;                          int newBucketNo' newLockNo;                          GetBucketAndLockNo(current._hashcode' out newBucketNo' out newLockNo' newBuckets.Length' newLocks.Length);                            newBuckets[newBucketNo] = new Node(current._key' current._value' current._hashcode' newBuckets[newBucketNo]);                            checked                          {                              newCountPerLock[newLockNo]++;                          }                            current = next;                      }                  }                    // Adjust the budget                  _budget = Math.Max(1' newBuckets.Length / newLocks.Length);                    // Replace tables with the new versions                  _tables = new Tables(newBuckets' newLocks' newCountPerLock);              }              finally              {                  // Release all locks that we took earlier                  ReleaseLocks(0' locksAcquired);              }
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: try              {                  // The thread that first obtains _locks[0] will be the one doing the resize operation                  AcquireLocks(0' 1' ref locksAcquired);                    // Make sure nobody resized the table while we were waiting for lock 0:                  if (tables != _tables)                  {                      // We assume that since the table reference is different' it was already resized (or the budget                      // was adjusted). If we ever decide to do table shrinking' or replace the table for other reasons'                      // we will have to revisit this logic.                      return;                  }                    // Compute the (approx.) total size. Use an Int64 accumulation variable to avoid an overflow.                  long approxCount = 0;                  for (int i = 0; i < tables._countPerLock.Length; i++)                  {                      approxCount += tables._countPerLock[i];                  }                    //                  // If the bucket array is too empty' double the budget instead of resizing the table                  //                  if (approxCount < tables._buckets.Length / 4)                  {                      _budget = 2 * _budget;                      if (_budget < 0)                      {                          _budget = int.MaxValue;                      }                      return;                  }                      // Compute the new table size. We find the smallest integer larger than twice the previous table size' and not divisible by                  // 2'3'5 or 7. We can consider a different table-sizing policy in the future.                  int newLength = 0;                  bool maximizeTableSize = false;                  try                  {                      checked                      {                          // Double the size of the buckets table and add one' so that we have an odd integer.                          newLength = tables._buckets.Length * 2 + 1;                            // Now' we only need to check odd integers' and find the first that is not divisible                          // by 3' 5 or 7.                          while (newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0)                          {                              newLength += 2;                          }                            Assert(newLength % 2 != 0);                            if (newLength > MaxArrayLength)                          {                              maximizeTableSize = true;                          }                      }                  }                  catch (OverflowException)                  {                      maximizeTableSize = true;                  }                    if (maximizeTableSize)                  {                      newLength = MaxArrayLength;                        // We want to make sure that GrowTable will not be called again' since table is at the maximum size.                      // To achieve that' we set the budget to int.MaxValue.                      //                      // (There is one special case that would allow GrowTable() to be called in the future:                       // calling Clear() on the ConcurrentDictionary will shrink the table and lower the budget.)                      _budget = int.MaxValue;                  }                    // Now acquire all other locks for the table                  AcquireLocks(1' tables._locks.Length' ref locksAcquired);                    object[] newLocks = tables._locks;                    // Add more locks                  if (_growLockArray && tables._locks.Length < MAX_LOCK_NUMBER)                  {                      newLocks = new object[tables._locks.Length * 2];                      Array.Copy(tables._locks' 0' newLocks' 0' tables._locks.Length);                      for (int i = tables._locks.Length; i < newLocks.Length; i++)                      {                          newLocks[i] = new object();                      }                  }                    Node[] newBuckets = new Node[newLength];                  int[] newCountPerLock = new int[newLocks.Length];                    // Copy all data into a new table' creating new nodes for all elements                  for (int i = 0; i < tables._buckets.Length; i++)                  {                      Node current = tables._buckets[i];                      while (current != null)                      {                          Node next = current._next;                          int newBucketNo' newLockNo;                          GetBucketAndLockNo(current._hashcode' out newBucketNo' out newLockNo' newBuckets.Length' newLocks.Length);                            newBuckets[newBucketNo] = new Node(current._key' current._value' current._hashcode' newBuckets[newBucketNo]);                            checked                          {                              newCountPerLock[newLockNo]++;                          }                            current = next;                      }                  }                    // Adjust the budget                  _budget = Math.Max(1' newBuckets.Length / newLocks.Length);                    // Replace tables with the new versions                  _tables = new Tables(newBuckets' newLocks' newCountPerLock);              }              finally              {                  // Release all locks that we took earlier                  ReleaseLocks(0' locksAcquired);              }
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: try              {                  // The thread that first obtains _locks[0] will be the one doing the resize operation                  AcquireLocks(0' 1' ref locksAcquired);                    // Make sure nobody resized the table while we were waiting for lock 0:                  if (tables != _tables)                  {                      // We assume that since the table reference is different' it was already resized (or the budget                      // was adjusted). If we ever decide to do table shrinking' or replace the table for other reasons'                      // we will have to revisit this logic.                      return;                  }                    // Compute the (approx.) total size. Use an Int64 accumulation variable to avoid an overflow.                  long approxCount = 0;                  for (int i = 0; i < tables._countPerLock.Length; i++)                  {                      approxCount += tables._countPerLock[i];                  }                    //                  // If the bucket array is too empty' double the budget instead of resizing the table                  //                  if (approxCount < tables._buckets.Length / 4)                  {                      _budget = 2 * _budget;                      if (_budget < 0)                      {                          _budget = int.MaxValue;                      }                      return;                  }                      // Compute the new table size. We find the smallest integer larger than twice the previous table size' and not divisible by                  // 2'3'5 or 7. We can consider a different table-sizing policy in the future.                  int newLength = 0;                  bool maximizeTableSize = false;                  try                  {                      checked                      {                          // Double the size of the buckets table and add one' so that we have an odd integer.                          newLength = tables._buckets.Length * 2 + 1;                            // Now' we only need to check odd integers' and find the first that is not divisible                          // by 3' 5 or 7.                          while (newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0)                          {                              newLength += 2;                          }                            Assert(newLength % 2 != 0);                            if (newLength > MaxArrayLength)                          {                              maximizeTableSize = true;                          }                      }                  }                  catch (OverflowException)                  {                      maximizeTableSize = true;                  }                    if (maximizeTableSize)                  {                      newLength = MaxArrayLength;                        // We want to make sure that GrowTable will not be called again' since table is at the maximum size.                      // To achieve that' we set the budget to int.MaxValue.                      //                      // (There is one special case that would allow GrowTable() to be called in the future:                       // calling Clear() on the ConcurrentDictionary will shrink the table and lower the budget.)                      _budget = int.MaxValue;                  }                    // Now acquire all other locks for the table                  AcquireLocks(1' tables._locks.Length' ref locksAcquired);                    object[] newLocks = tables._locks;                    // Add more locks                  if (_growLockArray && tables._locks.Length < MAX_LOCK_NUMBER)                  {                      newLocks = new object[tables._locks.Length * 2];                      Array.Copy(tables._locks' 0' newLocks' 0' tables._locks.Length);                      for (int i = tables._locks.Length; i < newLocks.Length; i++)                      {                          newLocks[i] = new object();                      }                  }                    Node[] newBuckets = new Node[newLength];                  int[] newCountPerLock = new int[newLocks.Length];                    // Copy all data into a new table' creating new nodes for all elements                  for (int i = 0; i < tables._buckets.Length; i++)                  {                      Node current = tables._buckets[i];                      while (current != null)                      {                          Node next = current._next;                          int newBucketNo' newLockNo;                          GetBucketAndLockNo(current._hashcode' out newBucketNo' out newLockNo' newBuckets.Length' newLocks.Length);                            newBuckets[newBucketNo] = new Node(current._key' current._value' current._hashcode' newBuckets[newBucketNo]);                            checked                          {                              newCountPerLock[newLockNo]++;                          }                            current = next;                      }                  }                    // Adjust the budget                  _budget = Math.Max(1' newBuckets.Length / newLocks.Length);                    // Replace tables with the new versions                  _tables = new Tables(newBuckets' newLocks' newCountPerLock);              }              finally              {                  // Release all locks that we took earlier                  ReleaseLocks(0' locksAcquired);              }
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: try              {                  // The thread that first obtains _locks[0] will be the one doing the resize operation                  AcquireLocks(0' 1' ref locksAcquired);                    // Make sure nobody resized the table while we were waiting for lock 0:                  if (tables != _tables)                  {                      // We assume that since the table reference is different' it was already resized (or the budget                      // was adjusted). If we ever decide to do table shrinking' or replace the table for other reasons'                      // we will have to revisit this logic.                      return;                  }                    // Compute the (approx.) total size. Use an Int64 accumulation variable to avoid an overflow.                  long approxCount = 0;                  for (int i = 0; i < tables._countPerLock.Length; i++)                  {                      approxCount += tables._countPerLock[i];                  }                    //                  // If the bucket array is too empty' double the budget instead of resizing the table                  //                  if (approxCount < tables._buckets.Length / 4)                  {                      _budget = 2 * _budget;                      if (_budget < 0)                      {                          _budget = int.MaxValue;                      }                      return;                  }                      // Compute the new table size. We find the smallest integer larger than twice the previous table size' and not divisible by                  // 2'3'5 or 7. We can consider a different table-sizing policy in the future.                  int newLength = 0;                  bool maximizeTableSize = false;                  try                  {                      checked                      {                          // Double the size of the buckets table and add one' so that we have an odd integer.                          newLength = tables._buckets.Length * 2 + 1;                            // Now' we only need to check odd integers' and find the first that is not divisible                          // by 3' 5 or 7.                          while (newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0)                          {                              newLength += 2;                          }                            Assert(newLength % 2 != 0);                            if (newLength > MaxArrayLength)                          {                              maximizeTableSize = true;                          }                      }                  }                  catch (OverflowException)                  {                      maximizeTableSize = true;                  }                    if (maximizeTableSize)                  {                      newLength = MaxArrayLength;                        // We want to make sure that GrowTable will not be called again' since table is at the maximum size.                      // To achieve that' we set the budget to int.MaxValue.                      //                      // (There is one special case that would allow GrowTable() to be called in the future:                       // calling Clear() on the ConcurrentDictionary will shrink the table and lower the budget.)                      _budget = int.MaxValue;                  }                    // Now acquire all other locks for the table                  AcquireLocks(1' tables._locks.Length' ref locksAcquired);                    object[] newLocks = tables._locks;                    // Add more locks                  if (_growLockArray && tables._locks.Length < MAX_LOCK_NUMBER)                  {                      newLocks = new object[tables._locks.Length * 2];                      Array.Copy(tables._locks' 0' newLocks' 0' tables._locks.Length);                      for (int i = tables._locks.Length; i < newLocks.Length; i++)                      {                          newLocks[i] = new object();                      }                  }                    Node[] newBuckets = new Node[newLength];                  int[] newCountPerLock = new int[newLocks.Length];                    // Copy all data into a new table' creating new nodes for all elements                  for (int i = 0; i < tables._buckets.Length; i++)                  {                      Node current = tables._buckets[i];                      while (current != null)                      {                          Node next = current._next;                          int newBucketNo' newLockNo;                          GetBucketAndLockNo(current._hashcode' out newBucketNo' out newLockNo' newBuckets.Length' newLocks.Length);                            newBuckets[newBucketNo] = new Node(current._key' current._value' current._hashcode' newBuckets[newBucketNo]);                            checked                          {                              newCountPerLock[newLockNo]++;                          }                            current = next;                      }                  }                    // Adjust the budget                  _budget = Math.Max(1' newBuckets.Length / newLocks.Length);                    // Replace tables with the new versions                  _tables = new Tables(newBuckets' newLocks' newCountPerLock);              }              finally              {                  // Release all locks that we took earlier                  ReleaseLocks(0' locksAcquired);              }
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: try              {                  // The thread that first obtains _locks[0] will be the one doing the resize operation                  AcquireLocks(0' 1' ref locksAcquired);                    // Make sure nobody resized the table while we were waiting for lock 0:                  if (tables != _tables)                  {                      // We assume that since the table reference is different' it was already resized (or the budget                      // was adjusted). If we ever decide to do table shrinking' or replace the table for other reasons'                      // we will have to revisit this logic.                      return;                  }                    // Compute the (approx.) total size. Use an Int64 accumulation variable to avoid an overflow.                  long approxCount = 0;                  for (int i = 0; i < tables._countPerLock.Length; i++)                  {                      approxCount += tables._countPerLock[i];                  }                    //                  // If the bucket array is too empty' double the budget instead of resizing the table                  //                  if (approxCount < tables._buckets.Length / 4)                  {                      _budget = 2 * _budget;                      if (_budget < 0)                      {                          _budget = int.MaxValue;                      }                      return;                  }                      // Compute the new table size. We find the smallest integer larger than twice the previous table size' and not divisible by                  // 2'3'5 or 7. We can consider a different table-sizing policy in the future.                  int newLength = 0;                  bool maximizeTableSize = false;                  try                  {                      checked                      {                          // Double the size of the buckets table and add one' so that we have an odd integer.                          newLength = tables._buckets.Length * 2 + 1;                            // Now' we only need to check odd integers' and find the first that is not divisible                          // by 3' 5 or 7.                          while (newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0)                          {                              newLength += 2;                          }                            Assert(newLength % 2 != 0);                            if (newLength > MaxArrayLength)                          {                              maximizeTableSize = true;                          }                      }                  }                  catch (OverflowException)                  {                      maximizeTableSize = true;                  }                    if (maximizeTableSize)                  {                      newLength = MaxArrayLength;                        // We want to make sure that GrowTable will not be called again' since table is at the maximum size.                      // To achieve that' we set the budget to int.MaxValue.                      //                      // (There is one special case that would allow GrowTable() to be called in the future:                       // calling Clear() on the ConcurrentDictionary will shrink the table and lower the budget.)                      _budget = int.MaxValue;                  }                    // Now acquire all other locks for the table                  AcquireLocks(1' tables._locks.Length' ref locksAcquired);                    object[] newLocks = tables._locks;                    // Add more locks                  if (_growLockArray && tables._locks.Length < MAX_LOCK_NUMBER)                  {                      newLocks = new object[tables._locks.Length * 2];                      Array.Copy(tables._locks' 0' newLocks' 0' tables._locks.Length);                      for (int i = tables._locks.Length; i < newLocks.Length; i++)                      {                          newLocks[i] = new object();                      }                  }                    Node[] newBuckets = new Node[newLength];                  int[] newCountPerLock = new int[newLocks.Length];                    // Copy all data into a new table' creating new nodes for all elements                  for (int i = 0; i < tables._buckets.Length; i++)                  {                      Node current = tables._buckets[i];                      while (current != null)                      {                          Node next = current._next;                          int newBucketNo' newLockNo;                          GetBucketAndLockNo(current._hashcode' out newBucketNo' out newLockNo' newBuckets.Length' newLocks.Length);                            newBuckets[newBucketNo] = new Node(current._key' current._value' current._hashcode' newBuckets[newBucketNo]);                            checked                          {                              newCountPerLock[newLockNo]++;                          }                            current = next;                      }                  }                    // Adjust the budget                  _budget = Math.Max(1' newBuckets.Length / newLocks.Length);                    // Replace tables with the new versions                  _tables = new Tables(newBuckets' newLocks' newCountPerLock);              }              finally              {                  // Release all locks that we took earlier                  ReleaseLocks(0' locksAcquired);              }
Magic Number,System.Collections.Concurrent,ConcurrentDictionary<TKey;TValue>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Concurrent\ConcurrentDictionary.cs,GrowTable,The following statement contains a magic number: try              {                  // The thread that first obtains _locks[0] will be the one doing the resize operation                  AcquireLocks(0' 1' ref locksAcquired);                    // Make sure nobody resized the table while we were waiting for lock 0:                  if (tables != _tables)                  {                      // We assume that since the table reference is different' it was already resized (or the budget                      // was adjusted). If we ever decide to do table shrinking' or replace the table for other reasons'                      // we will have to revisit this logic.                      return;                  }                    // Compute the (approx.) total size. Use an Int64 accumulation variable to avoid an overflow.                  long approxCount = 0;                  for (int i = 0; i < tables._countPerLock.Length; i++)                  {                      approxCount += tables._countPerLock[i];                  }                    //                  // If the bucket array is too empty' double the budget instead of resizing the table                  //                  if (approxCount < tables._buckets.Length / 4)                  {                      _budget = 2 * _budget;                      if (_budget < 0)                      {                          _budget = int.MaxValue;                      }                      return;                  }                      // Compute the new table size. We find the smallest integer larger than twice the previous table size' and not divisible by                  // 2'3'5 or 7. We can consider a different table-sizing policy in the future.                  int newLength = 0;                  bool maximizeTableSize = false;                  try                  {                      checked                      {                          // Double the size of the buckets table and add one' so that we have an odd integer.                          newLength = tables._buckets.Length * 2 + 1;                            // Now' we only need to check odd integers' and find the first that is not divisible                          // by 3' 5 or 7.                          while (newLength % 3 == 0 || newLength % 5 == 0 || newLength % 7 == 0)                          {                              newLength += 2;                          }                            Assert(newLength % 2 != 0);                            if (newLength > MaxArrayLength)                          {                              maximizeTableSize = true;                          }                      }                  }                  catch (OverflowException)                  {                      maximizeTableSize = true;                  }                    if (maximizeTableSize)                  {                      newLength = MaxArrayLength;                        // We want to make sure that GrowTable will not be called again' since table is at the maximum size.                      // To achieve that' we set the budget to int.MaxValue.                      //                      // (There is one special case that would allow GrowTable() to be called in the future:                       // calling Clear() on the ConcurrentDictionary will shrink the table and lower the budget.)                      _budget = int.MaxValue;                  }                    // Now acquire all other locks for the table                  AcquireLocks(1' tables._locks.Length' ref locksAcquired);                    object[] newLocks = tables._locks;                    // Add more locks                  if (_growLockArray && tables._locks.Length < MAX_LOCK_NUMBER)                  {                      newLocks = new object[tables._locks.Length * 2];                      Array.Copy(tables._locks' 0' newLocks' 0' tables._locks.Length);                      for (int i = tables._locks.Length; i < newLocks.Length; i++)                      {                          newLocks[i] = new object();                      }                  }                    Node[] newBuckets = new Node[newLength];                  int[] newCountPerLock = new int[newLocks.Length];                    // Copy all data into a new table' creating new nodes for all elements                  for (int i = 0; i < tables._buckets.Length; i++)                  {                      Node current = tables._buckets[i];                      while (current != null)                      {                          Node next = current._next;                          int newBucketNo' newLockNo;                          GetBucketAndLockNo(current._hashcode' out newBucketNo' out newLockNo' newBuckets.Length' newLocks.Length);                            newBuckets[newBucketNo] = new Node(current._key' current._value' current._hashcode' newBuckets[newBucketNo]);                            checked                          {                              newCountPerLock[newLockNo]++;                          }                            current = next;                      }                  }                    // Adjust the budget                  _budget = Math.Max(1' newBuckets.Length / newLocks.Length);                    // Replace tables with the new versions                  _tables = new Tables(newBuckets' newLocks' newCountPerLock);              }              finally              {                  // Release all locks that we took earlier                  ReleaseLocks(0' locksAcquired);              }
Magic Number,System.Collections.Generic,HashSet<T>,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashSet.cs,SymmetricExceptWithEnumerable,The following statement contains a magic number: if (intArrayLength <= StackAllocThreshold / 2)              {                  int* itemsToRemovePtr = stackalloc int[intArrayLength];                  itemsToRemove = new BitHelper(itemsToRemovePtr' intArrayLength);                    int* itemsAddedFromOtherPtr = stackalloc int[intArrayLength];                  itemsAddedFromOther = new BitHelper(itemsAddedFromOtherPtr' intArrayLength);              }              else              {                  int[] itemsToRemoveArray = new int[intArrayLength];                  itemsToRemove = new BitHelper(itemsToRemoveArray' intArrayLength);                    int[] itemsAddedFromOtherArray = new int[intArrayLength];                  itemsAddedFromOther = new BitHelper(itemsAddedFromOtherArray' intArrayLength);              }
Magic Number,System.Collections,HashHelpers,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashHelpers.cs,IsPrime,The following statement contains a magic number: if ((candidate & 1) != 0)              {                  int limit = (int)Math.Sqrt(candidate);                  for (int divisor = 3; divisor <= limit; divisor += 2)                  {                      if ((candidate % divisor) == 0)                          return false;                  }                  return true;              }
Magic Number,System.Collections,HashHelpers,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashHelpers.cs,IsPrime,The following statement contains a magic number: if ((candidate & 1) != 0)              {                  int limit = (int)Math.Sqrt(candidate);                  for (int divisor = 3; divisor <= limit; divisor += 2)                  {                      if ((candidate % divisor) == 0)                          return false;                  }                  return true;              }
Magic Number,System.Collections,HashHelpers,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashHelpers.cs,IsPrime,The following statement contains a magic number: return (candidate == 2);
Magic Number,System.Collections,HashHelpers,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashHelpers.cs,GetPrime,The following statement contains a magic number: for (int i = (min | 1); i < Int32.MaxValue; i += 2)              {                  if (IsPrime(i) && ((i - 1) % HashPrime != 0))                      return i;              }
Magic Number,System.Collections,HashHelpers,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Collections.Generic\HashHelpers.cs,ExpandPrime,The following statement contains a magic number: int newSize = 2 * oldSize;
Magic Number,System.Threading,SpinWait,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\System.Threading\SpinWait.cs,SpinOnce,The following statement contains a magic number: if (NextSpinWillYield)              {                  //                  // We must yield.                  //                  // We prefer to call Thread.Yield first' triggering a SwitchToThread. This                  // unfortunately doesn't consider all runnable threads on all OS SKUs. In                  // some cases' it may only consult the runnable threads whose ideal processor                  // is the one currently executing code. Thus we occasionally issue a call to                  // Sleep(0)' which considers all runnable threads at equal priority. Even this                  // is insufficient since we may be spin waiting for lower priority threads to                  // execute; we therefore must call Sleep(1) once in a while too' which considers                  // all runnable threads' regardless of ideal processor and priority' but may                  // remove the thread from the scheduler's queue for 10+ms' if the system is                  // configured to use the (default) coarse-grained system timer.                  //    //#if !FEATURE_CORECLR  //                CdsSyncEtwBCLProvider.Log.SpinWait_NextSpinWillYield();  //#endif                  int yieldsSoFar = (m_count >= YIELD_THRESHOLD ? m_count - YIELD_THRESHOLD : m_count);                    if ((yieldsSoFar % SLEEP_1_EVERY_HOW_MANY_TIMES) == (SLEEP_1_EVERY_HOW_MANY_TIMES - 1))                  {                      Thread.Sleep(1);                  }                  else if ((yieldsSoFar % SLEEP_0_EVERY_HOW_MANY_TIMES) == (SLEEP_0_EVERY_HOW_MANY_TIMES - 1))                  {                      Thread.Sleep(0);                  }                  else                  {                      //Thread.Yield();                      Thread.Sleep(0);                  }              }              else              {                  //                  // Otherwise' we will spin.                  //                  // We do this using the CLR's SpinWait API' which is just a busy loop that                  // issues YIELD/PAUSE instructions to ensure multi-threaded CPUs can react                  // intelligently to avoid starving. (These are NOOPs on other CPUs.) We                  // choose a number for the loop iteration count such that each successive                  // call spins for longer' to reduce cache contention.  We cap the total                  // number of spins we are willing to tolerate to reduce delay to the caller'                  // since we expect most callers will eventually block anyway.                  //                  Thread.SpinWait(4 << m_count);              }
