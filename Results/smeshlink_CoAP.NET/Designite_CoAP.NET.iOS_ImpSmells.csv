Implementation smell,Namespace,Class,File,Method,Description
Long Method,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Long Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The method has 115 lines of code.
Complex Method,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,CoAP,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,CoAP,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,Cyclomatic complexity of the method is 10
Long Statement,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The length of the statement  "                    Int16 high = Int16.Parse(hex[i].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture); " is 140.
Long Statement,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The length of the statement  "                    Int16 low = Int16.Parse(hex[i + 1].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture); " is 143.
Complex Conditional,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Serialize,The conditional expression  "(!resource.Hidden && (resource.Name.Length > 0) || !recursive)                   && Matches(resource' query)"  is complex.
Complex Conditional,CoAP,Request,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Request.cs,WaitForResponse,The conditional expression  "_currentResponse == null &&                      !IsCancelled && !IsTimedOut && !IsRejected"  is complex.
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ToHexString,The following statement contains a magic number: if (data != null && data.Length > 0)              {                  StringBuilder builder = new StringBuilder(data.Length * 3);                  for (Int32 i = 0; i < data.Length; i++)                  {                      builder.Append(digits[(data[i] >> 4) & 0xF]);                      builder.Append(digits[data[i] & 0xF]);                  }                  return builder.ToString();              }              else              {                  return String.Empty;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ToHexString,The following statement contains a magic number: if (data != null && data.Length > 0)              {                  StringBuilder builder = new StringBuilder(data.Length * 3);                  for (Int32 i = 0; i < data.Length; i++)                  {                      builder.Append(digits[(data[i] >> 4) & 0xF]);                      builder.Append(digits[data[i] & 0xF]);                  }                  return builder.ToString();              }              else              {                  return String.Empty;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The following statement contains a magic number: try              {                  hex = hex.Replace("\""' String.Empty);                  if (hex.Length % 2 == 1)                      hex = "0" + hex;                    Byte[] tmp = new Byte[hex.Length / 2];                  for (Int32 i = 0' j = 0; i < hex.Length; i += 2)                  {                      Int16 high = Int16.Parse(hex[i].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      Int16 low = Int16.Parse(hex[i + 1].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      tmp[j++] = Convert.ToByte(high * 16 + low);                  }                    return tmp;              }              catch { return null; }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The following statement contains a magic number: try              {                  hex = hex.Replace("\""' String.Empty);                  if (hex.Length % 2 == 1)                      hex = "0" + hex;                    Byte[] tmp = new Byte[hex.Length / 2];                  for (Int32 i = 0' j = 0; i < hex.Length; i += 2)                  {                      Int16 high = Int16.Parse(hex[i].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      Int16 low = Int16.Parse(hex[i + 1].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      tmp[j++] = Convert.ToByte(high * 16 + low);                  }                    return tmp;              }              catch { return null; }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The following statement contains a magic number: try              {                  hex = hex.Replace("\""' String.Empty);                  if (hex.Length % 2 == 1)                      hex = "0" + hex;                    Byte[] tmp = new Byte[hex.Length / 2];                  for (Int32 i = 0' j = 0; i < hex.Length; i += 2)                  {                      Int16 high = Int16.Parse(hex[i].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      Int16 low = Int16.Parse(hex[i + 1].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      tmp[j++] = Convert.ToByte(high * 16 + low);                  }                    return tmp;              }              catch { return null; }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,FromHexStream,The following statement contains a magic number: try              {                  hex = hex.Replace("\""' String.Empty);                  if (hex.Length % 2 == 1)                      hex = "0" + hex;                    Byte[] tmp = new Byte[hex.Length / 2];                  for (Int32 i = 0' j = 0; i < hex.Length; i += 2)                  {                      Int16 high = Int16.Parse(hex[i].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      Int16 low = Int16.Parse(hex[i + 1].ToString()' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);                      tmp[j++] = Convert.ToByte(high * 16 + low);                  }                    return tmp;              }              catch { return null; }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP.Util,ByteArrayUtils,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Util\ByteArrayUtils.cs,ComputeHash,The following statement contains a magic number: unchecked              {                  const Int32 p = 16777619;                  Int32 hash = (Int32)2166136261;                    for (Int32 i = 0; i < data.Length; i++)                      hash = (hash ^ data[i]) * p;                    hash += hash << 13;                  hash ^= hash >> 7;                  hash += hash << 3;                  hash ^= hash >> 17;                  hash += hash << 5;                  return hash;              }
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,DecodeSZX,The following statement contains a magic number: return 1 << (szx + 4);
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: if (blockSize < 16)                  return 0;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: if (blockSize > 1024)                  return 6;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: if (blockSize > 1024)                  return 6;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: return (Int32)(Math.Log(blockSize) / Math.Log(2)) - 4;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,EncodeSZX,The following statement contains a magic number: return (Int32)(Math.Log(blockSize) / Math.Log(2)) - 4;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,ValidSZX,The following statement contains a magic number: return (szx >= 0 && szx <= 6);
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,Encode,The following statement contains a magic number: value |= (m ? 1 : 0) << 3;
Magic Number,CoAP,BlockOption,C:\repos\smeshlink_CoAP.NET\CoAP.NET\BlockOption.cs,Encode,The following statement contains a magic number: value |= num << 4;
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,GetResponseClass,The following statement contains a magic number: return (code >> 5) & 0x7;
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsRequest,The following statement contains a magic number: return (code >= 1) && (code <= 31);
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsResponse,The following statement contains a magic number: return (code >= 64) && (code <= 191);
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsResponse,The following statement contains a magic number: return (code >= 64) && (code <= 191);
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsSuccess,The following statement contains a magic number: return code >= 64 && code < 96;
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsSuccess,The following statement contains a magic number: return code >= 64 && code < 96;
Magic Number,CoAP,Code,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Code.cs,IsValid,The following statement contains a magic number: return (code >= 0) && (code <= 255);
Magic Number,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Parse,The following statement contains a magic number: if (!String.IsNullOrEmpty(linkFormat))              {                  Scanner scanner = new Scanner(linkFormat);                  String path = null;                  while ((path = scanner.Find(ResourceNameRegex)) != null)                  {                      path = path.Substring(1' path.Length - 2);                      WebLink link = new WebLink(path);                        String attr = null;                      while (scanner.Find(DelimiterRegex' 1) == null &&                          (attr = scanner.Find(WordRegex)) != null)                      {                          if (scanner.Find(EqualRegex' 1) == null)                          {                              // flag attribute without value                              link.Attributes.Add(attr);                          }                          else                          {                              String value = null;                              if ((value = scanner.Find(QuotedString)) != null)                              {                                  // trim " "                                  value = value.Substring(1' value.Length - 2);                                  if (Title.Equals(attr))                                      link.Attributes.Add(attr' value);                                  else                                      foreach (String part in BlankRegex.Split(value))                                          link.Attributes.Add(attr' part);                              }                              else if ((value = scanner.Find(WordRegex)) != null)                              {                                  link.Attributes.Set(attr' value);                              }                              else if ((value = scanner.Find(Cardinal)) != null)                              {                                  link.Attributes.Set(attr' value);                              }                          }                      }                        yield return link;                  }              }
Magic Number,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Parse,The following statement contains a magic number: if (!String.IsNullOrEmpty(linkFormat))              {                  Scanner scanner = new Scanner(linkFormat);                  String path = null;                  while ((path = scanner.Find(ResourceNameRegex)) != null)                  {                      path = path.Substring(1' path.Length - 2);                      WebLink link = new WebLink(path);                        String attr = null;                      while (scanner.Find(DelimiterRegex' 1) == null &&                          (attr = scanner.Find(WordRegex)) != null)                      {                          if (scanner.Find(EqualRegex' 1) == null)                          {                              // flag attribute without value                              link.Attributes.Add(attr);                          }                          else                          {                              String value = null;                              if ((value = scanner.Find(QuotedString)) != null)                              {                                  // trim " "                                  value = value.Substring(1' value.Length - 2);                                  if (Title.Equals(attr))                                      link.Attributes.Add(attr' value);                                  else                                      foreach (String part in BlankRegex.Split(value))                                          link.Attributes.Add(attr' part);                              }                              else if ((value = scanner.Find(WordRegex)) != null)                              {                                  link.Attributes.Set(attr' value);                              }                              else if ((value = scanner.Find(Cardinal)) != null)                              {                                  link.Attributes.Set(attr' value);                              }                          }                      }                        yield return link;                  }              }
Magic Number,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Serialize,The following statement contains a magic number: if (recursive)              {                  foreach (Resource sub in resource.GetSubResources())                  {                      String next = Serialize(sub' query' true);                        if (next.Length > 0)                      {                          if (linkFormat.Length > 3)                              linkFormat.Append(Delimiter);                          linkFormat.Append(next);                      }                  }              }
Magic Number,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,Deserialize,The following statement contains a magic number: while ((path = scanner.Find(ResourceNameRegex)) != null)              {                  path = path.Substring(1' path.Length - 2);                    // Retrieve specified resource' create if necessary                  RemoteResource resource = new RemoteResource(path);                    LinkAttribute attr = null;                  while (scanner.Find(DelimiterRegex' 1) == null && (attr = ParseAttribute(scanner)) != null)                  {                      AddAttribute(resource.Attributes' attr);                  }                    root.AddSubResource(resource);              }
Magic Number,CoAP,LinkFormat,C:\repos\smeshlink_CoAP.NET\CoAP.NET\LinkFormat.cs,ParseAttribute,The following statement contains a magic number: if (name == null)                  return null;              else              {                  Object value = null;                  // check for name-value-pair                  if (scanner.Find(new Regex("=")' 1) == null)                      // flag attribute                      value = true;                  else                  {                      String s = null;                      if ((s = scanner.Find(QuotedString)) != null)                          // trim " "                          value = s.Substring(1' s.Length - 2);                      else if ((s = scanner.Find(Cardinal)) != null)                          value = Int32.Parse(s);                      // TODO what if both pattern failed?                  }                  return new LinkAttribute(name' value);              }
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,ToString,The following statement contains a magic number: if (payload == null)              {                  payload = "[no payload]";              }              else              {                  Int32 len = payload.Length' nl = payload.IndexOf('\n');                  if (nl >= 0)                      payload = payload.Substring(0' nl);                  if (payload.Length > 24)                      payload = payload.Substring(0' 24);                  payload = "\"" + payload + "\"";                  if (payload.Length != len + 2)                      payload += "... " + PayloadSize + " bytes";              }
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,ToString,The following statement contains a magic number: if (payload == null)              {                  payload = "[no payload]";              }              else              {                  Int32 len = payload.Length' nl = payload.IndexOf('\n');                  if (nl >= 0)                      payload = payload.Substring(0' nl);                  if (payload.Length > 24)                      payload = payload.Substring(0' 24);                  payload = "\"" + payload + "\"";                  if (payload.Length != len + 2)                      payload += "... " + PayloadSize + " bytes";              }
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,ToString,The following statement contains a magic number: if (payload == null)              {                  payload = "[no payload]";              }              else              {                  Int32 len = payload.Length' nl = payload.IndexOf('\n');                  if (nl >= 0)                      payload = payload.Substring(0' nl);                  if (payload.Length > 24)                      payload = payload.Substring(0' 24);                  payload = "\"" + payload + "\"";                  if (payload.Length != len + 2)                      payload += "... " + PayloadSize + " bytes";              }
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddIfMatch,The following statement contains a magic number: if (opaque.Length > 8)                  throw ThrowHelper.Argument("opaque"' "Content of If-Match option is too large: " + ByteArrayUtils.ToHexString(opaque));
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddUriPath,The following statement contains a magic number: if (path.Length > 255)                  throw ThrowHelper.Argument("path"' "Uri Path option's length must be between 0 and 255 inclusive");
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddUriQuery,The following statement contains a magic number: if (query.Length > 255)                  throw ThrowHelper.Argument("query"' "Uri Query option's length must be between 0 and 255 inclusive");
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddLocationPath,The following statement contains a magic number: if (path.Length > 255)                  throw ThrowHelper.Argument("path"' "Location Path option's length must be between 0 and 255 inclusive");
Magic Number,CoAP,Message,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Message.cs,AddLocationQuery,The following statement contains a magic number: if (query.Length > 255)                  throw ThrowHelper.Argument("query"' "Location Query option's length must be between 0 and 255 inclusive");
Magic Number,CoAP,Option,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,GetHashCode,The following statement contains a magic number: const Int32 prime = 31;
Magic Number,CoAP,Option,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,IsUnsafe,The following statement contains a magic number: return ((Int32)type & 2) > 0;
Magic Number,CoAP,Int32Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Decode,The following statement contains a magic number: for (Int32 i = 0; i < bytes.Length; i++)                  {                      bLoop = bytes[i];                      //iOutcome |= (bLoop & 0xFF) << (8 * i);                      iOutcome <<= 8;                      iOutcome |= (bLoop & 0xFF);                  }
Magic Number,CoAP,Int32Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < 4; i++)                  {                      if (value >= 1 << (i * 8) || value < 0)                          len++;                      else                          break;                  }
Magic Number,CoAP,Int32Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < 4; i++)                  {                      if (value >= 1 << (i * 8) || value < 0)                          len++;                      else                          break;                  }
Magic Number,CoAP,Int32Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < len; i++)                  {                      ret[len - i - 1] = (Byte)(value >> i * 8);                  }
Magic Number,CoAP,Int64Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Decode,The following statement contains a magic number: for (Int32 i = 0; i < bytes.Length; i++)                  {                      bLoop = bytes[i];                      iOutcome <<= 8;                      iOutcome |= (bLoop & 0xFFU);                  }
Magic Number,CoAP,Int64Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < 8; i++)                  {                      if (value >= 1L << (i * 8) || value < 0L)                          len++;                      else                          break;                  }
Magic Number,CoAP,Int64Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < 8; i++)                  {                      if (value >= 1L << (i * 8) || value < 0L)                          len++;                      else                          break;                  }
Magic Number,CoAP,Int64Convertor,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Option.cs,Encode,The following statement contains a magic number: for (Int32 i = 0; i < len; i++)                  {                      ret[len - i - 1] = (Byte)(value >> i * 8);                  }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,CoAP,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,CoAP,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,CoAP,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,CoAP,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,CoAP,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:  #pragma warning restore 612' 618                      return 14;                  case OptionType.Block2:                      return 13;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 13:                      return OptionType.Block2;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutCode,The following statement contains a magic number: switch (code)              {                  case Code.Content:                      return 80;                  default:                      return (code >> 5) * 40 + (code & 0xf);              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInCode,The following statement contains a magic number: if (code == 80)                  return Code.Content;              else                  return ((code / 40) << 5) + (code % 40);
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapOutMediaType,The following statement contains a magic number: switch (mediaType)              {                  case MediaType.ApplicationXObixBinary:                      return 48;                  case MediaType.ApplicationFastinfoset:                      return 49;                  case MediaType.ApplicationSoapFastinfoset:                      return 50;                  case MediaType.ApplicationJson:                      return 51;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft03,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,MapInMediaType,The following statement contains a magic number: switch (mediaType)              {                  case 48:                      return MediaType.ApplicationXObixBinary;                  case 49:                      return MediaType.ApplicationFastinfoset;                  case 50:                      return MediaType.ApplicationSoapFastinfoset;                  case 51:                      return MediaType.ApplicationJson;                  default:                      return mediaType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: switch (optionType)              {                  case OptionType.Reserved:                      return 0;                  case OptionType.ContentType:                      return 1;                  case OptionType.MaxAge:                      return 2;                  case OptionType.ProxyUri:                      return 3;                  case OptionType.ETag:                      return 4;                  case OptionType.UriHost:                      return 5;                  case OptionType.LocationPath:                      return 6;                  case OptionType.UriPort:                      return 7;                  case OptionType.LocationQuery:                      return 8;                  case OptionType.UriPath:                      return 9;                  case OptionType.Token:                      return 11;                  case OptionType.UriQuery:                      return 15;                  case OptionType.Observe:                      return 10;                  case OptionType.Accept:                      return 12;                  case OptionType.IfMatch:                      return 13;  #pragma warning disable 612' 618                  case OptionType.FencepostDivisor:                      return 14;  #pragma warning restore 612' 618                  case OptionType.Block2:                      return 17;                  case OptionType.Block1:                      return 19;                  case OptionType.IfNoneMatch:                      return 21;                  default:                      return (Int32)optionType;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft08,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: switch (optionNumber)              {                  case 0:                      return OptionType.Reserved;                  case 1:                      return OptionType.ContentType;                  case 2:                      return OptionType.MaxAge;                  case 3:                      return OptionType.ProxyUri;                  case 4:                      return OptionType.ETag;                  case 5:                      return OptionType.UriHost;                  case 6:                      return OptionType.LocationPath;                  case 7:                      return OptionType.UriPort;                  case 8:                      return OptionType.LocationQuery;                  case 9:                      return OptionType.UriPath;                  case 11:                      return OptionType.Token;                  case 15:                      return OptionType.UriQuery;                  case 10:                      return OptionType.Observe;                  case 12:                      return OptionType.Accept;                  case 13:                      return OptionType.IfMatch;  #pragma warning disable 612' 618                  case 14:                      return OptionType.FencepostDivisor;  #pragma warning restore 612' 618                  case 17:                      return OptionType.Block2;                  case 19:                      return OptionType.Block1;                  case 21:                      return OptionType.IfNoneMatch;                  default:                      return (OptionType)optionNumber;              }
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.IsDefault)                          continue;                        Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                        /*                       * The Option Jump mechanism is used when the delta to the next option                       * number is larger than 14.                       */                      if (optionDelta > MaxOptionDelta)                      {                          /*                           * For the formats that include an Option Jump Value' the actual                           * addition to the current Option number is computed as follows:                           * Delta = ((Option Jump Value) + N) * 8 where N is 2 for the                           * one-byte version and N is 258 for the two-byte version.                           */                          if (optionDelta < 30)                          {                              optWriter.Write(0xF1' SingleOptionJumpBits);                              optionDelta -= 15;                          }                          else if (optionDelta < 2064)                          {                              Int32 optionJumpValue = (optionDelta / 8) - 2;                              optionDelta -= (optionJumpValue + 2) * 8;                              optWriter.Write(0xF2' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' SingleOptionJumpBits);                          }                          else if (optionDelta < 526359)                          {                              optionDelta = Math.Min(optionDelta' 526344); // Limit to avoid overflow                              Int32 optionJumpValue = (optionDelta / 8) - 258;                              optionDelta -= (optionJumpValue + 258) * 8;                              optWriter.Write(0xF3' SingleOptionJumpBits);                              optWriter.Write(optionJumpValue' 2 * SingleOptionJumpBits);                          }                          else                          {                              throw new Exception("Option delta too large. Actual delta: " + optionDelta);                          }                      }                        // write option delta                      optWriter.Write(optionDelta' OptionDeltaBits);                        // write option length                      Int32 length = opt.Length;                      if (length <= MaxOptionLengthBase)                      {                          // use option length base field only to encode                          // option lengths less or equal than MAX_OPTIONLENGTH_BASE                          optWriter.Write(length' OptionLengthBaseBits);                      }                      else if (length <= 1034)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte". Options that are                           * longer than 1034 bytes MUST NOT be sent                           */                          optWriter.Write(15' OptionLengthBaseBits);                            Int32 rounds = (length - 15) / 255;                          for (Int32 i = 0; i < rounds; i++)                          {                              optWriter.Write(255' OptionLengthExtendedBits);                          }                          Int32 remainingLength = length - ((rounds * 255) + 15);                          optWriter.Write(remainingLength' OptionLengthExtendedBits);                      }                      else                      {                          throw new Exception("Option length larger than allowed 1034. Actual length: " + length);                      }                        // write option value                      if (length > 0)                          optWriter.WriteBytes(opt.RawValue);                        ++optionCount;                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount < 15)                      writer.Write(optionCount' OptionCountBits);                  else                      writer.Write(15' OptionCountBits);
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageEncoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: if (optionCount > 14)                  {                      // end-of-options marker when there are more than 14 options                      writer.Write(0xf0' 8);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: Boolean hasMoreOptions = _optionCount == 15;
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,MessageDecoder12,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: for (Int32 i = 0; (i < _optionCount || hasMoreOptions) && m_reader.BytesAvailable; i++)                  {                      // first 4 option bits: either option jump or option delta                      Int32 optionDelta = m_reader.Read(OptionDeltaBits);                        if (optionDelta == 15)                      {                          // option jump or end-of-options marker                          Int32 bits = m_reader.Read(4);                          switch (bits)                          {                              case 0:                                  // end-of-options marker read (0xF0)' payload follows                                  hasMoreOptions = false;                                  continue;                              case 1:                                  // 0xF1 (Delta = 15)                                  optionDelta = 15 + m_reader.Read(OptionDeltaBits);                                  break;                              case 2:                                  // Delta = ((Option Jump Value) + 2) * 8                                  optionDelta = (m_reader.Read(8) + 2) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              case 3:                                  // Delta = ((Option Jump Value) + 258) * 8                                  optionDelta = (m_reader.Read(16) + 258) * 8 + m_reader.Read(OptionDeltaBits);                                  break;                              default:                                  break;                          }                      }                        currentOption += optionDelta;                      OptionType currentOptionType = GetOptionType(currentOption);                        Int32 length = m_reader.Read(OptionLengthBaseBits);                      if (length == 15)                      {                          /*                           * When the Length field is set to 15' another byte is added as                           * an 8-bit unsigned integer whose value is added to the 15'                           * allowing option value lengths of 15-270 bytes. For option                           * lengths beyond 270 bytes' we reserve the value 255 of an                           * extension byte to mean                           * "add 255' read another extension byte".                           */                          Int32 additionalLength = 0;                          do                          {                              additionalLength = m_reader.Read(8);                              length += additionalLength;                          } while (additionalLength >= 255);                      }                        // read option                      Option opt = Option.Create(currentOptionType);                      opt.RawValue = m_reader.ReadBytes(length);                        msg.AddOption(opt);                  }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)              {                  return nibble;              }              else if (nibble == 13)              {                  return datagram.Read(8) + 13;              }              else if (nibble == 14)              {                  return datagram.Read(16) + 269;              }              else              {                  // TODO error                  if (log.IsWarnEnabled)                      log.Warn("15 is reserved for payload marker' message format error");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)              {                  return optionValue;              }              else if (optionValue <= 255 + 13)              {                  return 13;              }              else if (optionValue <= 65535 + 269)              {                  return 14;              }              else              {                  // TODO format error                  if (log.IsWarnEnabled)                      log.Warn("The option value (" + optionValue + ") is too large to be encoded; Max allowed is 65804.");                  return 0;              }
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNumber,The following statement contains a magic number: if (optionType == OptionType.Accept)                  return 16;              else                  return (Int32)optionType;
Magic Number,Net,Draft13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionType,The following statement contains a magic number: if (optionNumber == 16)                  return OptionType.Accept;              else                  return (OptionType)optionNumber;
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                      if (opt.IsDefault)                          continue;                        // write 4-bit option delta                      Int32 optNum = GetOptionNumber(opt.Type);                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        lastOptionNumber = optNum;                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder13,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          OptionType currentOptionType = GetOptionType(currentOption);                          Option opt = Option.Create(currentOptionType);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetOptionNibble,The following statement contains a magic number: if (optionValue <= 12)                  return optionValue;              else if (optionValue <= 255 + 13)                  return 13;              else if (optionValue <= 65535 + 269)                  return 14;              else                  throw ThrowHelper.Argument("optionValue"' "Unsupported option delta " + optionValue);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,Draft18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,GetValueFromOptionNibble,The following statement contains a magic number: if (nibble < 13)                  return nibble;              else if (nibble == 13)                  return datagram.Read(8) + 13;              else if (nibble == 14)                  return datagram.Read(16) + 269;              else                  throw ThrowHelper.Argument("nibble"' "Unsupported option delta " + nibble);
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageEncoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,Serialize,The following statement contains a magic number: foreach (Option opt in options)                  {                      if (opt.Type == OptionType.Token)                          continue;                        // write 4-bit option delta                      Int32 optNum = (Int32)opt.Type;                      Int32 optionDelta = optNum - lastOptionNumber;                      Int32 optionDeltaNibble = GetOptionNibble(optionDelta);                      writer.Write(optionDeltaNibble' OptionDeltaBits);                        // write 4-bit option length                      Int32 optionLength = opt.Length;                      Int32 optionLengthNibble = GetOptionNibble(optionLength);                      writer.Write(optionLengthNibble' OptionLengthBits);                        // write extended option delta field (0 - 2 bytes)                      if (optionDeltaNibble == 13)                      {                          writer.Write(optionDelta - 13' 8);                      }                      else if (optionDeltaNibble == 14)                      {                          writer.Write(optionDelta - 269' 16);                      }                        // write extended option length field (0 - 2 bytes)                      if (optionLengthNibble == 13)                      {                          writer.Write(optionLength - 13' 8);                      }                      else if (optionLengthNibble == 14)                      {                          writer.Write(optionLength - 269' 16);                      }                        // write option value                      writer.WriteBytes(opt.RawValue);                        // update last option number                      lastOptionNumber = optNum;                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
Magic Number,Net,MessageDecoder18,C:\repos\smeshlink_CoAP.NET\CoAP.NET\Spec.cs,ParseMessage,The following statement contains a magic number: while (m_reader.BytesAvailable)                  {                      Byte nextByte = m_reader.ReadNextByte();                      if (nextByte == PayloadMarker)                      {                          if (!m_reader.BytesAvailable)                              // the presence of a marker followed by a zero-length payload                              // must be processed as a message format error                              throw new InvalidOperationException();                            msg.Payload = m_reader.ReadBytesLeft();                          break;                      }                      else                      {                          // the first 4 bits of the byte represent the option delta                          Int32 optionDeltaNibble = (0xF0 & nextByte) >> 4;                          currentOption += GetValueFromOptionNibble(optionDeltaNibble' m_reader);                            // the second 4 bits represent the option length                          Int32 optionLengthNibble = (0x0F & nextByte);                          Int32 optionLength = GetValueFromOptionNibble(optionLengthNibble' m_reader);                            // read option                          Option opt = Option.Create((OptionType)currentOption);                          opt.RawValue = m_reader.ReadBytes(optionLength);                            msg.AddOption(opt);                      }                  }
