Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlQueryFormatter,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlQueryFormatter.cs,FormatLikeFunction,The method has 5 parameters. Parameters: startAny' nodeIn' patternIndex' valueIndex' endAny
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,MobileServiceSQLiteStore,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\MobileServiceSQLiteStore.cs,UpsertAsyncInternal,The length of the statement  "                    throw new InvalidOperationException(string.Format("Column with name '{0}' is not defined on the local table '{1}'."' prop.Name' tableName)); " is 140.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,MobileServiceSQLiteStore,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\MobileServiceSQLiteStore.cs,LookupAsync,The length of the statement  "            string sql = string.Format("SELECT * FROM {0} WHERE {1} = @id"' SqlHelpers.FormatTableName(tableName)' MobileServiceSystemColumns.Id); " is 134.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,MobileServiceSQLiteStore,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\MobileServiceSQLiteStore.cs,BatchUpdate,The length of the statement  "                sql.AppendFormat(" WHERE {0} = {1}"' SqlHelpers.FormatMember(MobileServiceSystemColumns.Id)' AddParameter(item' parameters' idColumn)); " is 135.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,MobileServiceSQLiteStore,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\MobileServiceSQLiteStore.cs,ValidateParameterCount,The length of the statement  "                throw new InvalidOperationException(string.Format("The number of fields per entity in an upsert operation is limited to {0}."' MaxParametersPerQuery)); " is 151.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,MobileServiceSQLiteStore,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\MobileServiceSQLiteStore.cs,CreateTableFromObject,The length of the statement  "            var colDefinitions = columns.Where(c => c != idColumn).Select(c => String.Format("{0} {1}"' SqlHelpers.FormatMember(c.Name)' c.StoreType)).ToList(); " is 148.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,MobileServiceSQLiteStore,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\MobileServiceSQLiteStore.cs,CreateTableFromObject,The length of the statement  "                colDefinitions.Insert(0' String.Format("{0} {1} PRIMARY KEY"' SqlHelpers.FormatMember(idColumn.Name)' idColumn.StoreType)); " is 123.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,MobileServiceSQLiteStore,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\MobileServiceSQLiteStore.cs,CreateTableFromObject,The length of the statement  "            String tblSql = string.Format("CREATE TABLE IF NOT EXISTS {0} ({1})"' SqlHelpers.FormatTableName(tableName)' String.Join("' "' colDefinitions)); " is 144.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,MobileServiceSQLiteStoreExtensions,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\MobileServiceSQLiteStoreExtensions.cs,SetNullDefault,The length of the statement  "                else if (contractProperty.PropertyType.GetTypeInfo().IsGenericType && contractProperty.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>)) " is 149.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlQueryFormatter,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlQueryFormatter.cs,FormatFloorFunction,The length of the statement  "            var whenXisPositive = new BinaryOperatorNode(BinaryOperatorKind.GreaterThanOrEqual' nodeIn.Arguments[0]' new ConstantNode(0)); " is 126.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlHelpers,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlHelpers.cs,GetStoreCastType,The length of the statement  "            throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' "Value of type '{0}' is not supported."' type.Name)); " is 129.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlHelpers,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlHelpers.cs,GetStoreType,The length of the statement  "                    throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' "Property of type '{0}' is not supported."' type)); " is 127.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlHelpers,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlHelpers.cs,GetStoreType,The length of the statement  "                    throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' "Property of type '{0}' is not supported."' type)); " is 127.
Long Statement,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlHelpers,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlHelpers.cs,ValidateIdentifier,The length of the statement  "                throw new ArgumentException(string.Format("'{0}' is not a valid identifier. Identifiers must be under 128 characters in length' start with a letter or underscore' and can contain only alpha-numeric and underscore characters."' identifier)' "identifier"); " is 254.
Complex Conditional,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlHelpers,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlHelpers.cs,GetStoreCastType,The conditional expression  "type == typeof(int) ||                      type == typeof(uint) ||                      type == typeof(long) ||                      type == typeof(ulong) ||                      type == typeof(short) ||                      type == typeof(ushort) ||                      type == typeof(byte) ||                      type == typeof(sbyte)"  is complex.
Complex Conditional,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlHelpers,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlHelpers.cs,GetStoreCastType,The conditional expression  "type == typeof(string) ||                      type == typeof(Guid) ||                      type == typeof(byte[]) ||                      type == typeof(Uri) ||                      type == typeof(TimeSpan)"  is complex.
Magic Number,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlQueryFormatter,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlQueryFormatter.cs,FormatSubstringFunction,The following statement contains a magic number: if (nodeIn.Arguments.Count > 1)              {                  this.sql.Append("' ");                  nodeIn.Arguments[1].Accept(this);                  this.sql.Append(" + 1");  // need to add 1 since SQL is 1 based' but OData is zero based                    if (nodeIn.Arguments.Count > 2)                  {                      this.sql.Append("' ");                      nodeIn.Arguments[2].Accept(this);                  }              }
Magic Number,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlQueryFormatter,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlQueryFormatter.cs,FormatSubstringFunction,The following statement contains a magic number: if (nodeIn.Arguments.Count > 1)              {                  this.sql.Append("' ");                  nodeIn.Arguments[1].Accept(this);                  this.sql.Append(" + 1");  // need to add 1 since SQL is 1 based' but OData is zero based                    if (nodeIn.Arguments.Count > 2)                  {                      this.sql.Append("' ");                      nodeIn.Arguments[2].Accept(this);                  }              }
Magic Number,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlHelpers,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlHelpers.cs,SerializeDateTime,The following statement contains a magic number: double unixTimestamp = Math.Round((date.ToUniversalTime() - epoch).TotalSeconds' 3);
Magic Number,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlHelpers,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlHelpers.cs,IsValidIdentifier,The following statement contains a magic number: if (String.IsNullOrWhiteSpace(identifier) || identifier.Length > 128)              {                  return false;              }
Missing Default,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlQueryFormatter,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlQueryFormatter.cs,Visit,The following switch statement is missing a default case: switch (nodeIn.OperatorKind)                  {                      case BinaryOperatorKind.Equal:                          this.sql.Append(" = ");                          break;                      case BinaryOperatorKind.NotEqual:                          this.sql.Append(" != ");                          break;                      case BinaryOperatorKind.LessThan:                          this.sql.Append(" < ");                          break;                      case BinaryOperatorKind.LessThanOrEqual:                          this.sql.Append(" <= ");                          break;                      case BinaryOperatorKind.GreaterThan:                          this.sql.Append(" > ");                          break;                      case BinaryOperatorKind.GreaterThanOrEqual:                          this.sql.Append(" >= ");                          break;                      case BinaryOperatorKind.And:                          this.sql.Append(" AND ");                          break;                      case BinaryOperatorKind.Or:                          this.sql.Append(" OR ");                          break;                      case BinaryOperatorKind.Add:                          this.sql.Append(" + ");                          break;                      case BinaryOperatorKind.Subtract:                          this.sql.Append(" - ");                          break;                      case BinaryOperatorKind.Multiply:                          this.sql.Append(" * ");                          break;                      case BinaryOperatorKind.Divide:                          this.sql.Append(" / ");                          break;                      case BinaryOperatorKind.Modulo:                          this.sql.Append(" % ");                          break;                  }
Missing Default,Microsoft.WindowsAzure.MobileServices.SQLiteStore,SqlQueryFormatter,C:\repos\Azure_azure-mobile-services\sdk\Managed\src\Microsoft.WindowsAzure.MobileServices.SQLiteStore\SqlQueryFormatter.cs,Visit,The following switch statement is missing a default case: switch (nodeIn.Name)              {                  case "day":                      return this.FormatDateFunction("%d"' nodeIn);                  case "month":                      return this.FormatDateFunction("%m"' nodeIn);                  case "year":                      return this.FormatDateFunction("%Y"' nodeIn);                  case "hour":                      return this.FormatDateFunction("%H"' nodeIn);                  case "minute":                      return this.FormatDateFunction("%M"' nodeIn);                  case "second":                      return this.FormatDateFunction("%S"' nodeIn);                  case "floor":                      return this.FormatFloorFunction(nodeIn);                  case "ceiling":                      return this.FormatCeilingFunction(nodeIn);                  case "round":                      return this.FormatRoundFunction(nodeIn);                  case "tolower":                      return this.FormatStringFunction("LOWER"' nodeIn);                  case "toupper":                      return this.FormatStringFunction("UPPER"' nodeIn);                  case "length":                      return this.FormatStringFunction("LENGTH"' nodeIn);                  case "trim":                      return this.FormatStringFunction("TRIM"' nodeIn);                  case "substringof":                      return this.FormatLikeFunction(true' nodeIn' 0' 1' true);                  case "startswith":                      return this.FormatLikeFunction(false' nodeIn' 1' 0' true);                  case "endswith":                      return this.FormatLikeFunction(true' nodeIn' 1' 0' false);                  case "concat":                      return this.FormatConcatFunction(nodeIn);                  case "indexof":                      return this.FormatIndexOfFunction(nodeIn);                  case "replace":                      return this.FormatStringFunction("REPLACE"' nodeIn);                  case "substring":                      return FormatSubstringFunction(nodeIn);              }
