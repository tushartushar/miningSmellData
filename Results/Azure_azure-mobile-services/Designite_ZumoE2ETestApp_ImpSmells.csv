Implementation smell,Namespace,Class,File,Method,Description
Long Method,ZumoE2ETestApp.Framework,Util,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Framework\Util.cs,CompareJson,The method has 103 lines of code.
Long Method,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The method has 137 lines of code.
Long Method,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJTokenApiTest,The method has 119 lines of code.
Long Method,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateCRUDTest,The method has 175 lines of code.
Long Method,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateSystemPropertiesTest,The method has 104 lines of code.
Long Method,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateParameterPassingTest,The method has 113 lines of code.
Long Method,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateBasicTest,The method has 111 lines of code.
Long Method,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The method has 252 lines of code.
Long Method,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTest,The method has 170 lines of code.
Long Method,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The method has 233 lines of code.
Complex Method,ZumoE2ETestApp.Framework,Util,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Framework\Util.cs,CompareArrays,Cyclomatic complexity of the method is 12
Complex Method,ZumoE2ETestApp.Framework,Util,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Framework\Util.cs,CompareJson,Cyclomatic complexity of the method is 21
Complex Method,ZumoE2ETestApp.Framework,ZumoTestGroup,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Framework\ZumoTestGroup.cs,Run,Cyclomatic complexity of the method is 12
Complex Method,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentTestInput,Cyclomatic complexity of the method is 11
Complex Method,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,JsonToXml,Cyclomatic complexity of the method is 10
Complex Method,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,Cyclomatic complexity of the method is 14
Complex Method,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateTests,Cyclomatic complexity of the method is 8
Complex Method,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,ApplyOrdering,Cyclomatic complexity of the method is 8
Complex Method,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,ApplyOrdering,Cyclomatic complexity of the method is 8
Complex Method,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,JObjectFromValue,Cyclomatic complexity of the method is 10
Complex Method,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,ZumoE2ETestApp.Tests.Types,Movie,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\Movie.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,ZumoE2ETestApp.Tests.Types,StringIdMovie,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\Movie.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,Equals,Cyclomatic complexity of the method is 12
Long Parameter List,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateUntypedUpdateTest,The method has 5 parameters. Parameters: testName' itemToInsertJson' itemToUpdateJson' setUpdatedId' useStringIdTable
Long Parameter List,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentTestInput,The method has 9 parameters. Parameters: inputFormat' outputFormat' rndGen' method' content' expectedResult' headers' query' expectedStatus
Long Parameter List,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateCRUDTest,The method has 5 parameters. Parameters: tableName' providerName' tableType' userIsAuthenticated' usingSingleSignOnOrToken
Long Parameter List,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreateToastPushTest,The method has 6 parameters. Parameters: wnsMethod' text1' text2' text3' imageUrl' imageAlt
Long Parameter List,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,BuildXmlToastPayload,The method has 6 parameters. Parameters: wnsMethod' text1' text2' text3' imageUrl' imageAlt
Long Parameter List,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreatePushTest,The method has 5 parameters. Parameters: wnsMethod' nhNotificationType' payload' expectedResult' templatePush
Long Parameter List,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTestIntId,The method has 8 parameters. Parameters: name' whereClause' top' skip' orderBy' selectExpression' includeTotalCount' odataQueryExpression
Long Parameter List,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTestStringId,The method has 8 parameters. Parameters: name' whereClause' top' skip' orderBy' selectExpression' includeTotalCount' odataQueryExpression
Long Parameter List,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTest,The method has 9 parameters. Parameters: name' whereClause' top' skip' orderBy' selectExpression' includeTotalCount' odataQueryExpression' useStringIdTable
Long Parameter List,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTest,The method has 9 parameters. Parameters: name' whereClause' top' skip' orderBy' selectExpression' includeTotalCount' odataExpression' useStringIdTable
Long Identifier,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateTests,The length of the parameter indexOfTestsWithAuthentication is 30.
Long Identifier,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateTests,The length of the parameter providersWithRecycledTokenSupport is 33.
Long Identifier,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,,The length of the parameter OfflineReadyNoVersionAuthenticatedTableName is 43.
Long Statement,ZumoE2ETestApp,MainPage,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\MainPage.xaml.cs,OnNavigatedTo,The length of the statement  "            if (savedAppInfo.LastService != null && !string.IsNullOrEmpty(savedAppInfo.LastService.AppUrl) && !string.IsNullOrEmpty(savedAppInfo.LastService.AppKey)) " is 153.
Long Statement,ZumoE2ETestApp,MainPage,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\MainPage.xaml.cs,lstTestGroups_SelectionChanged_1,The length of the statement  "                    string message = string.Format(CultureInfo.InvariantCulture' "Passed {0} of {1} tests (skipped {2})"' passed' (passed + failed)' skipped); " is 138.
Long Statement,ZumoE2ETestApp,MainPage,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\MainPage.xaml.cs,btnRunTests_Click_1,The length of the statement  "                string message = string.Format(CultureInfo.InvariantCulture' "Passed {0} of {1} tests (skipped {2})"' passed' (passed + failed)' skipped); " is 138.
Long Statement,ZumoE2ETestApp,MainPage,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\MainPage.xaml.cs,InitializeClient,The length of the statement  "                if (savedAppInfo.LastService == null || savedAppInfo.LastService.AppUrl != appUrl || savedAppInfo.LastService.AppKey != appKey) " is 127.
Long Statement,ZumoE2ETestApp,MainPage,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\MainPage.xaml.cs,RunTestGroup,The length of the statement  "                var logsUploadedURL = await Util.UploadLogs(this.txtUploadLogsUrl.Text' string.Join("\n"' testGroup.GetLogs())' "winstorecs"' true); " is 132.
Long Statement,ZumoE2ETestApp,MainPage,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\MainPage.xaml.cs,RunTestGroup,The length of the statement  "                StorageFile logsUploadedFile = await storageFolder.CreateFileAsync(ZumoTestGlobals.LogsLocationFile' CreationCollisionOption.ReplaceExisting); " is 142.
Long Statement,ZumoE2ETestApp.Framework,Util,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Framework\Util.cs,CompareArrays,The length of the statement  "                    errors.Add(string.Format(CultureInfo.InvariantCulture' "Size of first array ({0}) is different than second ({1})"' array1.Length' array2.Length)); " is 146.
Long Statement,ZumoE2ETestApp.Framework,Util,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Framework\Util.cs,CompareArrays,The length of the statement  "                        errors.Add(string.Format(CultureInfo.InvariantCulture' "Difference in item {0}: first = {1}; second = {2}"' i' item1' item2)); " is 126.
Long Statement,ZumoE2ETestApp.Framework,Util,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Framework\Util.cs,CompareJson,The length of the statement  "                        errors.Add(string.Format("Size of arrays are different: expected {0} != actual {1}"' expectedArray.Count' actualArray.Count)); " is 126.
Long Statement,ZumoE2ETestApp.Framework,ZumoTestGroup,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Framework\ZumoTestGroup.cs,GetLogs,The length of the statement  "                result.Add(string.Format(CultureInfo.InvariantCulture' "Passed: {0}; Failed: {1}"' this.testsPassed' this.testsFailed)); " is 120.
Long Statement,ZumoE2ETestApp.Framework,ZumoTestGroup,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Framework\ZumoTestGroup.cs,GetLogs,The length of the statement  "                result.Add(string.Format(CultureInfo.InvariantCulture' "Passed: {0}; Failed: {1}; Skipped: {2}"' this.testsPassed' this.testsFailed' this.testsSkipped)); " is 153.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateTypedUpdateTest("Update typed item"' new RoundTripTableItem(rndGen)' new RoundTripTableItem(rndGen))); " is 123.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "                new RoundTripTableItem(rndGen) { Bool1 = null' ComplexType2 = null' Int1 = null' String1 = null' ComplexType1 = null })); " is 121.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateTypedUpdateTest<RoundTripTableItem' MobileServiceInvalidOperationException>("(Neg) Update typed item' non-existing item id"' " is 145.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateTypedUpdateTest<StringIdRoundTripTableItem' MobileServiceInvalidOperationException>("(Neg) Update typed item' non-existing item id"' " is 153.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateTypedUpdateTest<StringIdRoundTripTableItem' ArgumentException>("(Neg) Update typed item' id = null"' " is 121.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateUntypedUpdateTest("Update untyped item' setting values to null"' toInsertJsonString' toUpdate.ToString())); " is 128.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateUntypedUpdateTest<MobileServiceInvalidOperationException>("(Neg) Update untyped item' non-existing item id"' " is 129.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateUntypedUpdateTest("[string id] Update untyped item"' toInsertJsonString' toUpdateJsonString' true)); " is 121.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateUntypedUpdateTest("[string id] Update untyped item' setting values to null"' toInsertJsonString' toUpdate.ToString()' true)); " is 146.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateUntypedUpdateTest<MobileServiceInvalidOperationException>("(Neg) [string id] Update untyped item' non-existing item id"' " is 141.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateDeleteTest<RoundTripTableItem>("(Neg) Delete typed item with non-existing id"' true' DeleteTestType.NonExistingId)); " is 137.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateDeleteTest<RoundTripTableItem>("(Neg) Delete untyped item with non-existing id"' false' DeleteTestType.NonExistingId)); " is 140.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateDeleteTest<RoundTripTableItem>("(Neg) Delete untyped item without id field"' false' DeleteTestType.NoIdField)); " is 132.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateDeleteTest<StringIdRoundTripTableItem>("[string id] Delete typed item"' true' DeleteTestType.ValidDelete)); " is 128.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateDeleteTest<StringIdRoundTripTableItem>("(Neg) [string id] Delete typed item with non-existing id"' true' DeleteTestType.NonExistingId)); " is 157.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateDeleteTest<StringIdRoundTripTableItem>("[string id] Delete untyped item"' false' DeleteTestType.ValidDelete)); " is 131.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateDeleteTest<StringIdRoundTripTableItem>("(Neg) [string id] Delete untyped item with non-existing id"' false' DeleteTestType.NonExistingId)); " is 160.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateDeleteTest<StringIdRoundTripTableItem>("(Neg) [string id] Delete untyped item without id field"' false' DeleteTestType.NoIdField)); " is 152.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateDeleteTest,The length of the statement  "            }' (typeof(TItemType) == typeof(RoundTripTableItem) ? ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES : ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES)); " is 161.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTypedUpdateTest,The length of the statement  "            return CreateTypedUpdateTest<TRoundTripType' ExceptionTypeWhichWillNeverBeThrown>(testName' itemToInsert' itemToUpdate); " is 120.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTypedUpdateTest,The length of the statement  "                        test.AddLog("Error' retrieved item is different than the expected value. Expected: {0}; actual: {1}"' expectedItem' retrievedItem); " is 131.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTypedUpdateTest,The length of the statement  "            }' (typeof(TRoundTripType) == typeof(RoundTripTableItem) ? ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES : ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES)); " is 166.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateUntypedUpdateTest,The length of the statement  "            return CreateUntypedUpdateTest<ExceptionTypeWhichWillNeverBeThrown>(testName' itemToInsert' itemToUpdate' true' useStringIdTable); " is 130.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateUntypedUpdateTest,The length of the statement  "                var table = client.GetTable(useStringIdTable ? ZumoTestGlobals.StringIdRoundTripTableName : ZumoTestGlobals.RoundTripTableName); " is 128.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateUntypedUpdateTest,The length of the statement  "                        test.AddLog("Error' retrieved item is different than the expected value. Expected: {0}; actual: {1}"' expectedItem' retrievedItem); " is 131.
Long Statement,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateUntypedUpdateTest,The length of the statement  "            }' useStringIdTable ? ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES : ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES); " is 128.
Long Statement,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateTypedApiTest,The length of the statement  "                    StringIdMovie inputTemplate = ZumoQueryTestData.AllStringIdMovies()[rndGen.Next(ZumoQueryTestData.AllStringIdMovies().Length)]; " is 127.
Long Statement,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateTypedApiTest,The length of the statement  "                                actualResult = await client.InvokeApiAsync<StringIdMovie' AllStringIdMovies>(apiUrl' inputTemplate' HttpMethod.Post' queryParams); " is 130.
Long Statement,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentApiTest,The length of the statement  "                    CreateHttpContentTestInput(inputFormat' outputFormat' rndGen' out method' out content' out expectedResult' out headers' out query' out expectedStatus); " is 151.
Long Statement,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJTokenApiTest,The length of the statement  "                            test.AddLog("  -> Using the InvokeApiAsync(string' HttpMethod ({0})' Dictionary<string' string>) overload"' method.Method); " is 123.
Long Statement,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJTokenApiTest,The length of the statement  "                            test.AddLog("  -> Using the InvokeApiAsync(string' JToken' HttpMethod ({0})' Dictionary<string' string>) overload"' method.Method); " is 131.
Long Statement,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateTests,The length of the statement  "                { MobileServiceAuthenticationProvider.Google' false }'   // Known bug - Drop login via Google token until Google client flow is reintroduced " is 140.
Long Statement,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateTests,The length of the statement  "            result.AddTest(ZumoTestCommon.CreateTestWithSingleAlert("In the next few tests you will be prompted for username / password five times.")); " is 139.
Long Statement,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateTests,The length of the statement  "            foreach (MobileServiceAuthenticationProvider provider in Util.EnumGetValues(typeof(MobileServiceAuthenticationProvider))) " is 121.
Long Statement,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateTests,The length of the statement  "                    result.AddTest(CreateCRUDTest(TableUserPermission' provider.ToString()' TablePermission.User' userIsAuthenticated: true' usingSingleSignOnOrToken: true)); " is 154.
Long Statement,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateTests,The length of the statement  "            result.AddTest(ZumoTestCommon.CreateTestWithSingleAlert("We'll log in again; you may or may not be asked for password in the next few moments.")); " is 146.
Long Statement,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateTests,The length of the statement  "                result.AddTest(CreateCRUDTest(TableUserPermission' provider.ToString()' TablePermission.User' userIsAuthenticated: true' usingSingleSignOnOrToken: true)); " is 154.
Long Statement,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateTests,The length of the statement  "            result.AddTest(ZumoTestCommon.CreateTestWithSingleAlert("Now we'll continue running the tests' but you *should not be prompted for the username or password anymore*.")); " is 169.
Long Statement,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateTests,The length of the statement  "                result.AddTest(CreateCRUDTest(TableUserPermission' provider.ToString()' TablePermission.User' userIsAuthenticated: true' usingSingleSignOnOrToken: true)); " is 154.
Long Statement,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateLoginTest,The length of the statement  "            }' provider == MobileServiceAuthenticationProvider.WindowsAzureActiveDirectory ? ZumoTestGlobals.RuntimeFeatureNames.AAD_LOGIN : null' " is 134.
Long Statement,ZumoE2ETestApp.Tests,ZumoLoginTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoLoginTests.cs,CreateLogoutTest,The length of the statement  "                test.AddLog("Logged out. Current logged-in client: {0}"' client.CurrentUser == null ? "<<NULL>>" : client.CurrentUser.UserId); " is 126.
Long Statement,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateOptimisticConcurrencyTest("Conflicts (client side) - Name from client' Number from server"' (clientItem' serverItem) => " is 140.
Long Statement,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateSystemPropertiesTest,The length of the statement  "            return new ZumoTest("System properties in " + (useTypedTable ? "" : "un") + "typed tables"' async delegate(ZumoTest test) " is 121.
Long Statement,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateOptimisticConcurrencyWithServerConflictsTest,The length of the statement  "                await table.UpdateAsync(item' new Dictionary<string' string> { { "conflictPolicy"' clientWins ? "clientWins" : "serverWins" } }); " is 129.
Long Statement,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateParameterPassingTest,The length of the statement  "            return new ZumoTest("Parameter passing test - " + (useTypedTable ? "typed" : "untyped") + " tables"' async delegate(ZumoTest test) " is 130.
Long Statement,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateFilterTestWithMultipleRequests,The length of the statement  "            string testName = string.Format(CultureInfo.InvariantCulture' "Filter which maps one requests to many - {0} client"' typed ? "typed" : "untyped"); " is 146.
Long Statement,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateClient,The length of the statement  "                offlineReadyClient.CurrentUser.MobileServiceAuthenticationToken = globalClient.CurrentUser.MobileServiceAuthenticationToken; " is 124.
Long Statement,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateBasicTest,The length of the statement  "                item.Date = new DateTime(now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second' now.Millisecond' DateTimeKind.Utc); " is 124.
Long Statement,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateToastPushTest("sendToastImageAndText04"' "ts-iat4-1"' "ts-iat4-2"' "ts-iat4-3"' imageUrl' "zumo")); " is 120.
Long Statement,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateTilePushTest("TileWideImageAndText02"' new[] { "tl-wiat2-1"' "tl-wiat2-2" }' new[] { wideImageUrl }' new[] { "zumowide" })); " is 145.
Long Statement,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreateTests,The length of the statement  "                new[] { "large caption"' "tl-wt2-1"' "tl-wt2-2"' "tl-wt2-3"' "tl-wt2-4"' "tl-wt2-5"' "tl-wt2-6"' "tl-wt2-7"' "tl-wt2-8" }' " is 122.
Long Statement,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateTemplateTilePushTest("TileWideImageAndText02"' new[] { "tl-wiat2-1"' "在普通话的世界新闻！" }' new[] { wideImageUrl }' new[] { "zumowide" })); " is 153.
Long Statement,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreatePushTest,The length of the statement  "            }' templatePush ? ZumoTestGlobals.RuntimeFeatureNames.NH_PUSH_ENABLED : ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES); " is 126.
Long Statement,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreateRegisterTemplateChannelTest,The length of the statement  "                        reg = new WnsTemplateRegistration(ZumoPushTests.pushChannel.Uri' toastTemplate.ToString()' ZumoPushTestGlobals.NHToastTemplateName' "World English".Split()); " is 157.
Long Statement,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreateRegisterTemplateChannelTest,The length of the statement  "                        reg = new WnsTemplateRegistration(ZumoPushTests.pushChannel.Uri' rawTemplate' ZumoPushTestGlobals.NHRawTemplateName' "World Mandarin".Split()' wnsHeaders); " is 155.
Long Statement,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreateRegisterTemplateChannelTest,The length of the statement  "                        reg = new WnsTemplateRegistration(ZumoPushTests.pushChannel.Uri' badgeTemplate.ToString()' ZumoPushTestGlobals.NHBadgeTemplateName' "World Badge".Split()); " is 155.
Long Statement,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreateRegisterTemplateChannelTest,The length of the statement  "                        var tileTemplate = BuildXmlTilePayload("TileWideImageAndText02"' new[] { "tl-wiat2-1"' "$(News_Mandarin)" }' new[] { wideImageUrl }' new[] { "zumowide" }); " is 155.
Long Statement,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreateRegisterTemplateChannelTest,The length of the statement  "                        reg = new WnsTemplateRegistration(ZumoPushTests.pushChannel.Uri' tileTemplate.ToString()' ZumoPushTestGlobals.NHTileTemplateName' "World Mandarin".Split()); " is 156.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestIntId("GreaterThan and LessThan - Movies from the 90s"' m => m.Year > 1989 && m.Year < 2000)); " is 124.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestIntId("GreaterEqual and LessEqual - Movies from the 90s"' m => m.Year >= 1990 && m.Year <= 1999)); " is 128.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestIntId("Division' equal and different - Movies from the year 2000 with rating other than R"' " is 121.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestIntId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"' " is 130.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestStringId("GreaterThan and LessThan - Movies from the 90s"' m => m.Year > 1989 && m.Year < 2000)); " is 127.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestStringId("GreaterEqual and LessEqual - Movies from the 90s"' m => m.Year >= 1990 && m.Year <= 1999)); " is 131.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestStringId("Division' equal and different - Movies from the year 2000 with rating other than R"' " is 124.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestStringId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"' " is 133.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestIntId("String field' comparison (not equal) to null - Movies before 1970 with a MPAA rating"' " is 123.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestStringId("String field' comparison (not equal) to null - Movies before 1970 with a MPAA rating"' " is 126.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestIntId("Date: Equal - Movies released on 1994-10-14 (Shawshank Redemption / Pulp Fiction)"' " is 120.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestStringId("Date: Equal - Movies released on 1994-10-14 (Shawshank Redemption / Pulp Fiction)"' " is 123.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestIntId("Skip' take' filter includeTotalCount - movies 11-20 which won a best picture award' ordered by year"' " is 138.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestStringId("Get last ($skip) - 10"' null' null' ZumoQueryTestData.AllStringIdMovies().Length - 10)); " is 128.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestStringId("Skip' take' filter includeTotalCount - movies 11-20 which won a best picture award' ordered by year"' " is 141.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "                m => m.Year >= 1970' 30' null' new[] { new OrderByClause("Duration"' true)' new OrderByClause("Title"' true) }' null' true)); " is 125.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "                m => m.Year >= 1970' 30' null' new[] { new OrderByClause("Duration"' true)' new OrderByClause("Title"' true) }' null' true)); " is 125.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "                m => string.Format("{0} {1} - {2} minutes"' m.Title.PadRight(30)' m.BestPictureWinner ? "(best picture)" : ""' m.Duration))); " is 125.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "                m => string.Format("{0} {1} - {2} minutes"' m.Title.PadRight(30)' m.BestPictureWinner ? "(best picture)" : ""' m.Duration))); " is 125.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestIntId("Passing OData query directly - movies from the 80's' ordered by Title' items 3' 4 and 5"' " is 126.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTestStringId("Passing OData query directly - movies from the 80's' ordered by Title' items 3' 4 and 5"' " is 129.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTest<Movie' MobileServiceInvalidOperationException>("[Int id] (Neg) Very large top value"' m => m.Year > 2000' VeryLargeTopValue)); " is 157.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTest<StringIdMovie' MobileServiceInvalidOperationException>("[String id] (Neg) Very large top value"' m => m.Year > 2000' VeryLargeTopValue)); " is 168.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTest<Movie' NotSupportedException>("[Int id] (Neg) Unsupported predicate: unsupported arithmetic"' " is 124.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateQueryTest<StringIdMovie' NotSupportedException>("[String id] (Neg) Unsupported predicate: unsupported arithmetic"' " is 135.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTestStringId,The length of the statement  "                "[String id] " + name' whereClause' top' skip' orderBy' selectExpression' includeTotalCount' odataQueryExpression' true); " is 121.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTest,The length of the statement  "            return CreateQueryTest<MovieType' ExceptionTypeWhichWillNeverBeThrown>(name' whereClause' top' skip' orderBy' selectExpression' includeTotalCount' odataQueryExpression); " is 169.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTest,The length of the statement  "                    ITotalCountProvider totalCountProvider = (readMovies as ITotalCountProvider) ?? (readProjectedMovies as ITotalCountProvider); " is 125.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTest,The length of the statement  "                            test.AddLog("Total count was requested' but the returned value is incorrect: expected={0}' actual={1}"' expectedTotalCount' actualTotalCount); " is 142.
Long Statement,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTest,The length of the statement  "            }' typeof(MovieType) == typeof(Movie) ? ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES : ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES); " is 146.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("String: large (1000 characters)"' RoundTripTestType.String' new string('*'' 1000))); " is 131.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("String: large (64k+1 characters)"' RoundTripTestType.String' new string('*'' 65537))); " is 133.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("String: non-ASCII characters - Latin"' RoundTripTestType.String' "ãéìôü ÇñÑ")); " is 126.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("String: non-ASCII characters - Arabic"' RoundTripTestType.String' "الكتاب على الطاولة")); " is 136.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("String: non-ASCII characters - Chinese"' RoundTripTestType.String' "这本书在桌子上")); " is 126.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("String: non-ASCII characters - Chinese 2"' RoundTripTestType.String' "⒈①Ⅻㄨㄩ 啊阿鼾齄 丂丄狚狛 狜狝﨨﨩 ˊˋ˙–〇 㐀㐁䶴䶵")); " is 153.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("String: non-ASCII characters - Japanese"' RoundTripTestType.String' "本は机の上に")); " is 126.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("String: non-ASCII characters - Hebrew"' RoundTripTestType.String' "הספר הוא על השולחן")); " is 136.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("String: non-ASCII characters - Russian"' RoundTripTestType.String' "Книга лежит на столе")); " is 139.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("Date: now"' RoundTripTestType.Date' Util.TrimSubMilliseconds(DateTime.Now))); " is 124.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("Date: now (UTC)"' RoundTripTestType.Date' Util.TrimSubMilliseconds(DateTime.UtcNow))); " is 133.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("Date: specific date' before unix 0"' RoundTripTestType.Date' new DateTime(1901' 1' 1))); " is 135.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("Date: specific date' after unix 0"' RoundTripTestType.Date' new DateTime(2000' 12' 31))); " is 136.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("Long: large value' less than max allowed (" + largePositiveValue + ")"' RoundTripTestType.Long' largePositiveValue)); " is 164.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("Long: large negative value' more than min allowed (" + largeNegativeValue + ")"' RoundTripTestType.Long' largeNegativeValue)); " is 173.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest<InvalidOperationException>("(Neg) Long: more than max allowed"' RoundTripTestType.Long' maxAllowedValue + 1)); " is 156.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest<InvalidOperationException>("(Neg) Long: less than min allowed"' RoundTripTestType.Long' minAllowedValue - 1)); " is 156.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleTypedRoundTripTest("Enum (with JSON converter): simple value"' RoundTripTestType.Enum' EnumType.Second)); " is 132.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "                result.AddTest(new ZumoTest("(Neg) string id - insert with invalid id: " + (id.Length > 30 ? (id.Substring(0' 30) + "...") : id)' async delegate(ZumoTest test) " is 159.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: large (1000 characters)"' "string1"' new string('*'' 1000))); " is 126.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: large (64k+1 characters)"' "string1"' new string('*'' 65537))); " is 128.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: non-ASCII characters - Latin"' "string1"' "ãéìôü ÇñÑ")); " is 121.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: non-ASCII characters - Arabic"' "string1"' "الكتاب على الطاولة")); " is 131.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: non-ASCII characters - Chinese"' "string1"' "这本书在桌子上")); " is 121.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: non-ASCII characters - Chinese 2"' "string1"' "⒈①Ⅻㄨㄩ 啊阿鼾齄 丂丄狚狛 狜狝﨨﨩 ˊˋ˙–〇 㐀㐁䶴䶵")); " is 148.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: non-ASCII characters - Japanese"' "string1"' "本は机の上に")); " is 121.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: non-ASCII characters - Hebrew"' "string1"' "הספר הוא על השולחן")); " is 131.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: non-ASCII characters - Russian"' "string1"' "Книга лежит на столе")); " is 134.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped Date: now (UTC)"' "date1"' Util.TrimSubMilliseconds(DateTime.UtcNow))); " is 128.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped Date: specific date' before unix 0"' "date1"' new DateTime(1901' 1' 1))); " is 130.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped Date: specific date' after unix 0"' "date1"' new DateTime(2000' 12' 31))); " is 131.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped Long: more than max allowed (positive) for typed"' "long1"' maxAllowedValue + 1)); " is 139.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "            result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped Long: more than max allowed (negative) for typed"' "long1"' minAllowedValue - 1)); " is 139.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The length of the statement  "                var testName = "(Neg) [string id] Insert item with invalid 'id' property: " + (id.Length > 30 ? (id.Substring(0' 30) + "...") : id); " is 132.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateSetupSchemaTest,The length of the statement  "                    var item2 = new StringIdRoundTripTableItem { Bool = true' Name = "hello"' Number = 1.23' ComplexType = "a b c".Split()' Date = DateTime.UtcNow }; " is 145.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateSimpleUntypedRoundTripTest,The length of the statement  "                var table = client.GetTable(useStringIdTable ? ZumoTestGlobals.StringIdRoundTripTableName : ZumoTestGlobals.RoundTripTableName); " is 128.
Long Statement,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateSimpleUntypedRoundTripTest,The length of the statement  "            }' useStringIdTable ? ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES : ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES); " is 128.
Long Statement,ZumoE2ETestApp.Tests,ZumoTestCommon,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoTestCommon.cs,CreateYesNoTest,The length of the statement  "            string testName = string.Format(CultureInfo.InvariantCulture' "Validation: {0} (expected {1})"' question' expectedAnswer ? "Yes" : "No"); " is 137.
Long Statement,ZumoE2ETestApp.Tests.Types,OfflineReadyItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItem.cs,ToString,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' "OfflineItem[Id={0}'Name={1}'Age={2}'FloatingNumber={3}'Date={4}'Flag={5}'Version={6}"' " is 138.
Long Statement,ZumoE2ETestApp.Tests.Types,OfflineReadyItemNoVersion,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItemNoVersion.cs,ToString,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' "OfflineItem[Id={0}'Name={1}'Age={2}'FloatingNumber={3}'Date={4}'Flag={5}]"' " is 127.
Long Statement,ZumoE2ETestApp.Tests.Types,Movie,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\Movie.cs,ToString,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' "Movie[Title={0}'Duration={1}'Rating={2}'ReleaseDate={3}'BestPictureWinner={4}'Year={5}"' " is 140.
Long Statement,ZumoE2ETestApp.Tests.Types,StringIdMovie,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\Movie.cs,ToString,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' "Movie/string id[Title={0}'Duration={1}'Rating={2}'ReleaseDate={3}'BestPictureWinner={4}'Year={5}"' " is 150.
Long Statement,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,Equals,The length of the statement  "            if (this.Date1.HasValue && !this.Date1.Value.ToUniversalTime().Equals(other.Date1.Value.ToUniversalTime())) return false; " is 121.
Long Statement,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,ToString,The length of the statement  "                "RoundTripTableItem[Bool1={0}'ComplexType1={1}'ComplexType2={2}'Date1={3}'Double1={4}'EnumType={5}'Int1={6}'Long1={7}'String1={8}]"' " is 132.
Complex Conditional,ZumoE2ETestApp.Framework,Util,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Framework\Util.cs,CompareJson,The conditional expression  "expectedObjectValue.Type == JTokenType.Null ||                                  (expectedObjectValue.Type == JTokenType.Integer && expectedObjectValue.Value<long>() == 0) ||                                  (expectedObjectValue.Type == JTokenType.Float && expectedObjectValue.Value<double>() == 0.0)"  is complex.
Magic Number,ZumoE2ETestApp.Framework,Util,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Framework\Util.cs,CompareJson,The following statement contains a magic number: switch (expected.Type)              {                  case JTokenType.Boolean:                      return expected.Value<bool>() == actual.Value<bool>();                  case JTokenType.Null:                      return true;                  case JTokenType.String:                  case JTokenType.Date:                      return expected.Value<string>() == actual.Value<string>();                  case JTokenType.Float:                  case JTokenType.Integer:                      double expectedNumber = expected.Value<double>();                      double actualNumber = actual.Value<double>();                      double delta = 1 - expectedNumber / actualNumber;                      double acceptableEpsilon = 0.000001;                      if (Math.Abs(delta) > acceptableEpsilon)                      {                          errors.Add(string.Format("Numbers differ more than the allowed difference: {0} - {1}"'                              expected' actual));                          return false;                      }                      else                      {                          return true;                      }                  case JTokenType.Array:                      JArray expectedArray = (JArray)expected;                      JArray actualArray = (JArray)actual;                      if (expectedArray.Count != actualArray.Count)                      {                          errors.Add(string.Format("Size of arrays are different: expected {0} != actual {1}"' expectedArray.Count' actualArray.Count));                          return false;                      }                        for (int i = 0; i < expectedArray.Count; i++)                      {                          if (!CompareJson(expectedArray[i]' actualArray[i]' errors))                          {                              errors.Add("Difference in array item at index " + i);                              return false;                          }                      }                        return true;                  case JTokenType.Object:                      JObject expectedObject = (JObject)expected;                      Dictionary<string' string> expectedKeyMap = new Dictionary<string' string>();                      foreach (var child in expectedObject)                      {                          expectedKeyMap.Add(child.Key.ToLowerInvariant()' child.Key);                      }                        JObject actualObject = (JObject)actual;                      Dictionary<string' string> actualKeyMap = new Dictionary<string' string>();                      foreach (var child in actualObject)                      {                          actualKeyMap.Add(child.Key.ToLowerInvariant()' child.Key);                      }                        foreach (var child in expectedObject)                      {                          var key = child.Key.ToLowerInvariant();                          if (key == "id") continue; // set by server' ignored at comparison                            if (!actualKeyMap.ContainsKey(key) || actualObject[actualKeyMap[key]] == null)                          {                              // Still might be OK' if the missing value is default.                              var expectedObjectValue = expectedObject[expectedKeyMap[key]];                                if (expectedObjectValue.Type == JTokenType.Null ||                                  (expectedObjectValue.Type == JTokenType.Integer && expectedObjectValue.Value<long>() == 0) ||                                  (expectedObjectValue.Type == JTokenType.Float && expectedObjectValue.Value<double>() == 0.0))                              {                                  // No problem.                              }                              else                              {                                  errors.Add(string.Format("Expected object contains a pair with key {0}' actual does not."' child.Key));                                  return false;                              }                          }                          else                          {                              if (!CompareJson(expectedObject[expectedKeyMap[key]]' actualObject[actualKeyMap[key]]' errors))                              {                                  errors.Add("Difference in object member with key " + key);                                  return false;                              }                          }                      }                        return true;                  default:                      throw new ArgumentException("Don't know how to compare JToken of type " + expected.Type);              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The following statement contains a magic number: int seed = now.Year * 10000 + now.Month * 100 + now.Day;
Magic Number,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The following statement contains a magic number: int seed = now.Year * 10000 + now.Month * 100 + now.Day;
Magic Number,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateTypedUpdateTest<RoundTripTableItem' MobileServiceInvalidOperationException>("(Neg) Update typed item' non-existing item id"'                  new RoundTripTableItem(rndGen)' new RoundTripTableItem(rndGen) { Id = 1000000000 }' false));
Magic Number,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateTests,The following statement contains a magic number: toUpdate[idName] = 1000000000;
Magic Number,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateDeleteTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var typedTable = client.GetTable<TItemType>();                  var useStringIdTable = typeof(TItemType) == typeof(StringIdRoundTripTableItem);                  var untypedTable = client.GetTable(                      useStringIdTable ?                       ZumoTestGlobals.StringIdRoundTripTableName :                       ZumoTestGlobals.RoundTripTableName);                  TItemType itemToInsert;                  if (useStringIdTable)                  {                      itemToInsert = (TItemType)(object)new StringIdRoundTripTableItem { Name = "will be deleted"' Number = 123 };                  }                  else                  {                      itemToInsert = (TItemType)(object)new RoundTripTableItem { String1 = "will be deleted"' Int1 = 123 };                  }                    await typedTable.InsertAsync(itemToInsert);                  test.AddLog("Inserted item to be deleted");                  object id = itemToInsert.Id;                  switch (testType)                  {                      case DeleteTestType.ValidDelete:                          if (useTypedTable)                          {                              await typedTable.DeleteAsync(itemToInsert);                          }                          else                          {                              await untypedTable.DeleteAsync(new JObject(new JProperty("id"' id)));                          }                            test.AddLog("Delete succeeded; verifying that object isn't in the service anymore.");                          try                          {                              var response = await untypedTable.LookupAsync(id);                              test.AddLog("Error' delete succeeded' but item was returned by the service: {0}"' response);                              return false;                          }                          catch (MobileServiceInvalidOperationException msioe)                          {                              return Validate404Response(test' msioe);                          }                        case DeleteTestType.NonExistingId:                          try                          {                              object nonExistingId = useStringIdTable ? (object)Guid.NewGuid().ToString() : (object)1000000000;                              if (useTypedTable)                              {                                  itemToInsert.Id = nonExistingId;                                  await typedTable.DeleteAsync(itemToInsert);                              }                              else                              {                                  JObject jo = new JObject(new JProperty("id"' nonExistingId));                                  await untypedTable.DeleteAsync(jo);                              }                                test.AddLog("Error' deleting item with non-existing id should fail' but succeeded");                              return false;                          }                          catch (MobileServiceInvalidOperationException msioe)                          {                              return Validate404Response(test' msioe);                          }                        default:                          try                          {                              JObject jo = new JObject(new JProperty("Name"' "hello"));                              await untypedTable.DeleteAsync(jo);                                test.AddLog("Error' deleting item without an id should fail' but succeeded");                              return false;                          }                          catch (ArgumentException ex)                          {                              test.AddLog("Caught expected exception - {0}: {1}"' ex.GetType().FullName' ex.Message);                              return true;                          }                  }              }' (typeof(TItemType) == typeof(RoundTripTableItem) ? ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES : ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES));
Magic Number,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateDeleteTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var typedTable = client.GetTable<TItemType>();                  var useStringIdTable = typeof(TItemType) == typeof(StringIdRoundTripTableItem);                  var untypedTable = client.GetTable(                      useStringIdTable ?                       ZumoTestGlobals.StringIdRoundTripTableName :                       ZumoTestGlobals.RoundTripTableName);                  TItemType itemToInsert;                  if (useStringIdTable)                  {                      itemToInsert = (TItemType)(object)new StringIdRoundTripTableItem { Name = "will be deleted"' Number = 123 };                  }                  else                  {                      itemToInsert = (TItemType)(object)new RoundTripTableItem { String1 = "will be deleted"' Int1 = 123 };                  }                    await typedTable.InsertAsync(itemToInsert);                  test.AddLog("Inserted item to be deleted");                  object id = itemToInsert.Id;                  switch (testType)                  {                      case DeleteTestType.ValidDelete:                          if (useTypedTable)                          {                              await typedTable.DeleteAsync(itemToInsert);                          }                          else                          {                              await untypedTable.DeleteAsync(new JObject(new JProperty("id"' id)));                          }                            test.AddLog("Delete succeeded; verifying that object isn't in the service anymore.");                          try                          {                              var response = await untypedTable.LookupAsync(id);                              test.AddLog("Error' delete succeeded' but item was returned by the service: {0}"' response);                              return false;                          }                          catch (MobileServiceInvalidOperationException msioe)                          {                              return Validate404Response(test' msioe);                          }                        case DeleteTestType.NonExistingId:                          try                          {                              object nonExistingId = useStringIdTable ? (object)Guid.NewGuid().ToString() : (object)1000000000;                              if (useTypedTable)                              {                                  itemToInsert.Id = nonExistingId;                                  await typedTable.DeleteAsync(itemToInsert);                              }                              else                              {                                  JObject jo = new JObject(new JProperty("id"' nonExistingId));                                  await untypedTable.DeleteAsync(jo);                              }                                test.AddLog("Error' deleting item with non-existing id should fail' but succeeded");                              return false;                          }                          catch (MobileServiceInvalidOperationException msioe)                          {                              return Validate404Response(test' msioe);                          }                        default:                          try                          {                              JObject jo = new JObject(new JProperty("Name"' "hello"));                              await untypedTable.DeleteAsync(jo);                                test.AddLog("Error' deleting item without an id should fail' but succeeded");                              return false;                          }                          catch (ArgumentException ex)                          {                              test.AddLog("Caught expected exception - {0}: {1}"' ex.GetType().FullName' ex.Message);                              return true;                          }                  }              }' (typeof(TItemType) == typeof(RoundTripTableItem) ? ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES : ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES));
Magic Number,ZumoE2ETestApp.Tests,ZumoCUDTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCUDTests.cs,CreateDeleteTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var typedTable = client.GetTable<TItemType>();                  var useStringIdTable = typeof(TItemType) == typeof(StringIdRoundTripTableItem);                  var untypedTable = client.GetTable(                      useStringIdTable ?                       ZumoTestGlobals.StringIdRoundTripTableName :                       ZumoTestGlobals.RoundTripTableName);                  TItemType itemToInsert;                  if (useStringIdTable)                  {                      itemToInsert = (TItemType)(object)new StringIdRoundTripTableItem { Name = "will be deleted"' Number = 123 };                  }                  else                  {                      itemToInsert = (TItemType)(object)new RoundTripTableItem { String1 = "will be deleted"' Int1 = 123 };                  }                    await typedTable.InsertAsync(itemToInsert);                  test.AddLog("Inserted item to be deleted");                  object id = itemToInsert.Id;                  switch (testType)                  {                      case DeleteTestType.ValidDelete:                          if (useTypedTable)                          {                              await typedTable.DeleteAsync(itemToInsert);                          }                          else                          {                              await untypedTable.DeleteAsync(new JObject(new JProperty("id"' id)));                          }                            test.AddLog("Delete succeeded; verifying that object isn't in the service anymore.");                          try                          {                              var response = await untypedTable.LookupAsync(id);                              test.AddLog("Error' delete succeeded' but item was returned by the service: {0}"' response);                              return false;                          }                          catch (MobileServiceInvalidOperationException msioe)                          {                              return Validate404Response(test' msioe);                          }                        case DeleteTestType.NonExistingId:                          try                          {                              object nonExistingId = useStringIdTable ? (object)Guid.NewGuid().ToString() : (object)1000000000;                              if (useTypedTable)                              {                                  itemToInsert.Id = nonExistingId;                                  await typedTable.DeleteAsync(itemToInsert);                              }                              else                              {                                  JObject jo = new JObject(new JProperty("id"' nonExistingId));                                  await untypedTable.DeleteAsync(jo);                              }                                test.AddLog("Error' deleting item with non-existing id should fail' but succeeded");                              return false;                          }                          catch (MobileServiceInvalidOperationException msioe)                          {                              return Validate404Response(test' msioe);                          }                        default:                          try                          {                              JObject jo = new JObject(new JProperty("Name"' "hello"));                              await untypedTable.DeleteAsync(jo);                                test.AddLog("Error' deleting item without an id should fail' but succeeded");                              return false;                          }                          catch (ArgumentException ex)                          {                              test.AddLog("Caught expected exception - {0}: {1}"' ex.GetType().FullName' ex.Message);                              return true;                          }                  }              }' (typeof(TItemType) == typeof(RoundTripTableItem) ? ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES : ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES));
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateTests,The following statement contains a magic number: int seed = now.Year * 10000 + now.Month * 100 + now.Day;
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateTests,The following statement contains a magic number: int seed = now.Year * 10000 + now.Month * 100 + now.Day;
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateTypedApiTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var apiName = MovieFinderApiName;                  var testResult = true;                  for (int i = 0; i < 10; i++)                  {                      int seed = seedGenerator.Next();                      test.AddLog("Test with seed = {0}"' seed);                      Random rndGen = new Random(seed);                        StringIdMovie[] expectedResult = null;                      AllStringIdMovies actualResult = null;                      StringIdMovie inputTemplate = ZumoQueryTestData.AllStringIdMovies()[rndGen.Next(ZumoQueryTestData.AllStringIdMovies().Length)];                      test.AddLog("Using movie '{0}' as template"' inputTemplate.Title);                      string apiUrl;                      switch (testType)                      {                          case TypedTestType.GetByTitle:                              apiUrl = apiName + "/title/" + inputTemplate.Title;                              expectedResult = new StringIdMovie[] { inputTemplate };                              actualResult = await client.InvokeApiAsync<AllStringIdMovies>(apiUrl' HttpMethod.Get' null);                              break;                          case TypedTestType.GetByDate:                              var releaseDate = inputTemplate.ReleaseDate;                              apiUrl = apiName + "/date/" + releaseDate.Year + "/" + releaseDate.Month + "/" + releaseDate.Day;                              expectedResult = ZumoQueryTestData.AllStringIdMovies().Where(m => m.ReleaseDate == releaseDate).ToArray();                              actualResult = await client.InvokeApiAsync<AllStringIdMovies>(apiUrl' HttpMethod.Get' null);                              break;                          case TypedTestType.PostByDuration:                          case TypedTestType.PostByYear:                              string orderBy = null;                              switch (rndGen.Next(3))                              {                                  case 0:                                      orderBy = null;                                      break;                                  case 1:                                      orderBy = "id";                                      break;                                  case 2:                                      orderBy = "Title";                                      break;                              }                                Dictionary<string' string> queryParams = orderBy == null ?                                  null :                                  new Dictionary<string' string> { { "orderBy"' orderBy } };                                Func<StringIdMovie' bool> predicate;                              if (testType == TypedTestType.PostByYear)                              {                                  predicate = m => m.Year == inputTemplate.Year;                                  apiUrl = apiName + "/moviesOnSameYear";                              }                              else                              {                                  predicate = m => m.Duration == inputTemplate.Duration;                                  apiUrl = apiName + "/moviesWithSameDuration";                              }                                if (queryParams == null)                              {                                  actualResult = await client.InvokeApiAsync<StringIdMovie' AllStringIdMovies>(apiUrl' inputTemplate);                              }                              else                              {                                  actualResult = await client.InvokeApiAsync<StringIdMovie' AllStringIdMovies>(apiUrl' inputTemplate' HttpMethod.Post' queryParams);                              }                                expectedResult = ZumoQueryTestData.AllStringIdMovies().Where(predicate).ToArray();                              if (orderBy == null || orderBy == "Title")                              {                                  Array.Sort(expectedResult' (m1' m2) => m1.Title.CompareTo(m2.Title));                              }                                break;                          default:                              throw new ArgumentException("Invalid test type: " + testType);                      }                        test.AddLog("  - Sent request to {0}"' apiUrl);                      List<string> errors = new List<string>();                      if (Util.CompareArrays(expectedResult' actualResult.Movies' errors))                      {                          test.AddLog("  - Result is expected");                      }                      else                      {                          foreach (var error in errors)                          {                              test.AddLog("  - {0}"' error);                          }                            test.AddLog("Expected: {0}"' string.Join("' "' expectedResult.Select(m => m.Title)));                          test.AddLog("Actual: {0}"' string.Join("' "' actualResult.Movies.Select(m => m.Title)));                          testResult = false;                          break;                      }                  }                    return testResult;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateTypedApiTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var apiName = MovieFinderApiName;                  var testResult = true;                  for (int i = 0; i < 10; i++)                  {                      int seed = seedGenerator.Next();                      test.AddLog("Test with seed = {0}"' seed);                      Random rndGen = new Random(seed);                        StringIdMovie[] expectedResult = null;                      AllStringIdMovies actualResult = null;                      StringIdMovie inputTemplate = ZumoQueryTestData.AllStringIdMovies()[rndGen.Next(ZumoQueryTestData.AllStringIdMovies().Length)];                      test.AddLog("Using movie '{0}' as template"' inputTemplate.Title);                      string apiUrl;                      switch (testType)                      {                          case TypedTestType.GetByTitle:                              apiUrl = apiName + "/title/" + inputTemplate.Title;                              expectedResult = new StringIdMovie[] { inputTemplate };                              actualResult = await client.InvokeApiAsync<AllStringIdMovies>(apiUrl' HttpMethod.Get' null);                              break;                          case TypedTestType.GetByDate:                              var releaseDate = inputTemplate.ReleaseDate;                              apiUrl = apiName + "/date/" + releaseDate.Year + "/" + releaseDate.Month + "/" + releaseDate.Day;                              expectedResult = ZumoQueryTestData.AllStringIdMovies().Where(m => m.ReleaseDate == releaseDate).ToArray();                              actualResult = await client.InvokeApiAsync<AllStringIdMovies>(apiUrl' HttpMethod.Get' null);                              break;                          case TypedTestType.PostByDuration:                          case TypedTestType.PostByYear:                              string orderBy = null;                              switch (rndGen.Next(3))                              {                                  case 0:                                      orderBy = null;                                      break;                                  case 1:                                      orderBy = "id";                                      break;                                  case 2:                                      orderBy = "Title";                                      break;                              }                                Dictionary<string' string> queryParams = orderBy == null ?                                  null :                                  new Dictionary<string' string> { { "orderBy"' orderBy } };                                Func<StringIdMovie' bool> predicate;                              if (testType == TypedTestType.PostByYear)                              {                                  predicate = m => m.Year == inputTemplate.Year;                                  apiUrl = apiName + "/moviesOnSameYear";                              }                              else                              {                                  predicate = m => m.Duration == inputTemplate.Duration;                                  apiUrl = apiName + "/moviesWithSameDuration";                              }                                if (queryParams == null)                              {                                  actualResult = await client.InvokeApiAsync<StringIdMovie' AllStringIdMovies>(apiUrl' inputTemplate);                              }                              else                              {                                  actualResult = await client.InvokeApiAsync<StringIdMovie' AllStringIdMovies>(apiUrl' inputTemplate' HttpMethod.Post' queryParams);                              }                                expectedResult = ZumoQueryTestData.AllStringIdMovies().Where(predicate).ToArray();                              if (orderBy == null || orderBy == "Title")                              {                                  Array.Sort(expectedResult' (m1' m2) => m1.Title.CompareTo(m2.Title));                              }                                break;                          default:                              throw new ArgumentException("Invalid test type: " + testType);                      }                        test.AddLog("  - Sent request to {0}"' apiUrl);                      List<string> errors = new List<string>();                      if (Util.CompareArrays(expectedResult' actualResult.Movies' errors))                      {                          test.AddLog("  - Result is expected");                      }                      else                      {                          foreach (var error in errors)                          {                              test.AddLog("  - {0}"' error);                          }                            test.AddLog("Expected: {0}"' string.Join("' "' expectedResult.Select(m => m.Title)));                          test.AddLog("Actual: {0}"' string.Join("' "' actualResult.Movies.Select(m => m.Title)));                          testResult = false;                          break;                      }                  }                    return testResult;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateTypedApiTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var apiName = MovieFinderApiName;                  var testResult = true;                  for (int i = 0; i < 10; i++)                  {                      int seed = seedGenerator.Next();                      test.AddLog("Test with seed = {0}"' seed);                      Random rndGen = new Random(seed);                        StringIdMovie[] expectedResult = null;                      AllStringIdMovies actualResult = null;                      StringIdMovie inputTemplate = ZumoQueryTestData.AllStringIdMovies()[rndGen.Next(ZumoQueryTestData.AllStringIdMovies().Length)];                      test.AddLog("Using movie '{0}' as template"' inputTemplate.Title);                      string apiUrl;                      switch (testType)                      {                          case TypedTestType.GetByTitle:                              apiUrl = apiName + "/title/" + inputTemplate.Title;                              expectedResult = new StringIdMovie[] { inputTemplate };                              actualResult = await client.InvokeApiAsync<AllStringIdMovies>(apiUrl' HttpMethod.Get' null);                              break;                          case TypedTestType.GetByDate:                              var releaseDate = inputTemplate.ReleaseDate;                              apiUrl = apiName + "/date/" + releaseDate.Year + "/" + releaseDate.Month + "/" + releaseDate.Day;                              expectedResult = ZumoQueryTestData.AllStringIdMovies().Where(m => m.ReleaseDate == releaseDate).ToArray();                              actualResult = await client.InvokeApiAsync<AllStringIdMovies>(apiUrl' HttpMethod.Get' null);                              break;                          case TypedTestType.PostByDuration:                          case TypedTestType.PostByYear:                              string orderBy = null;                              switch (rndGen.Next(3))                              {                                  case 0:                                      orderBy = null;                                      break;                                  case 1:                                      orderBy = "id";                                      break;                                  case 2:                                      orderBy = "Title";                                      break;                              }                                Dictionary<string' string> queryParams = orderBy == null ?                                  null :                                  new Dictionary<string' string> { { "orderBy"' orderBy } };                                Func<StringIdMovie' bool> predicate;                              if (testType == TypedTestType.PostByYear)                              {                                  predicate = m => m.Year == inputTemplate.Year;                                  apiUrl = apiName + "/moviesOnSameYear";                              }                              else                              {                                  predicate = m => m.Duration == inputTemplate.Duration;                                  apiUrl = apiName + "/moviesWithSameDuration";                              }                                if (queryParams == null)                              {                                  actualResult = await client.InvokeApiAsync<StringIdMovie' AllStringIdMovies>(apiUrl' inputTemplate);                              }                              else                              {                                  actualResult = await client.InvokeApiAsync<StringIdMovie' AllStringIdMovies>(apiUrl' inputTemplate' HttpMethod.Post' queryParams);                              }                                expectedResult = ZumoQueryTestData.AllStringIdMovies().Where(predicate).ToArray();                              if (orderBy == null || orderBy == "Title")                              {                                  Array.Sort(expectedResult' (m1' m2) => m1.Title.CompareTo(m2.Title));                              }                                break;                          default:                              throw new ArgumentException("Invalid test type: " + testType);                      }                        test.AddLog("  - Sent request to {0}"' apiUrl);                      List<string> errors = new List<string>();                      if (Util.CompareArrays(expectedResult' actualResult.Movies' errors))                      {                          test.AddLog("  - Result is expected");                      }                      else                      {                          foreach (var error in errors)                          {                              test.AddLog("  - {0}"' error);                          }                            test.AddLog("Expected: {0}"' string.Join("' "' expectedResult.Select(m => m.Title)));                          test.AddLog("Actual: {0}"' string.Join("' "' actualResult.Movies.Select(m => m.Title)));                          testResult = false;                          break;                      }                  }                    return testResult;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentApiTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var apiName = AppApiName;                  var testResult = true;                  for (int i = 0; i < 10; i++)                  {                      int seed = seedGenerator.Next();                      test.AddLog("Test with seed = {0}"' seed);                      Random rndGen = new Random(seed);                      HttpMethod method;                      HttpContent content;                      JObject expectedResult;                      Dictionary<string' string> headers;                      Dictionary<string' string> query;                      HttpStatusCode expectedStatus;                      CreateHttpContentTestInput(inputFormat' outputFormat' rndGen' out method' out content' out expectedResult' out headers' out query' out expectedStatus);                        HttpResponseMessage response;                      try                      {                          response = await client.InvokeApiAsync(apiName' content' method' headers' query);                      }                      catch (MobileServiceInvalidOperationException ex)                      {                          response = ex.Response;                      }                        using (response)                      {                          test.AddLog("Response: {0}"' response);                          if (!ValidateResponseHeader(test' expectedStatus' headers' response))                          {                              testResult = false;                              break;                          }                            test.AddLog("  - All request / response headers validated successfully");                            string responseContent = null;                          if (response.Content != null)                          {                              responseContent = await response.Content.ReadAsStringAsync();                              test.AddLog("Response content: {0}"' responseContent);                          }                            JToken jsonResponse = null;                          if (outputFormat == DataFormat.Json)                          {                              jsonResponse = JToken.Parse(responseContent);                          }                          else if (outputFormat == DataFormat.Other)                          {                              string decodedContent = responseContent                                  .Replace("__{__"' "{")                                  .Replace("__}__"' "}")                                  .Replace("__[__"' "[")                                  .Replace("__]__"' "]");                              jsonResponse = JToken.Parse(decodedContent);                          }                            bool contentIsExpected = false;                          List<string> errors = new List<string>();                          switch (outputFormat)                          {                              case DataFormat.Json:                              case DataFormat.Other:                                  contentIsExpected = Util.CompareJson(expectedResult' jsonResponse' errors);                                  break;                              case DataFormat.Xml:                                  string expectedResultContent = JsonToXml(expectedResult);                                    // Normalize CRLF                                  expectedResultContent = expectedResultContent.Replace("\r\n"' "\n");                                  responseContent = responseContent.Replace("\r\n"' "\n");                                    contentIsExpected = expectedResultContent == responseContent;                                  if (!contentIsExpected)                                  {                                      errors.Add(string.Format(                                          "Error' response content is incorrect. Expected: {0}. Actual: {1}"'                                          expectedResultContent' responseContent));                                  }                                    break;                          }                            if (!contentIsExpected)                          {                              foreach (var error in errors)                              {                                  test.AddLog("{0}"' error);                              }                                testResult = false;                              break;                          }                            test.AddLog("  - Validation completed successfully");                      }                  }                    return testResult;              });
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentTestInput,The following statement contains a magic number: var choice = rndGen.Next(5);
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentTestInput,The following statement contains a magic number: string value = CreateString(rndGen' 1' 10' Letters);
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentTestInput,The following statement contains a magic number: int[] options = new[] { 400' 404' 500' 201 };
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentTestInput,The following statement contains a magic number: int[] options = new[] { 400' 404' 500' 201 };
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentTestInput,The following statement contains a magic number: int[] options = new[] { 400' 404' 500' 201 };
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentTestInput,The following statement contains a magic number: int[] options = new[] { 400' 404' 500' 201 };
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentTestInput,The following statement contains a magic number: rndGen.Next(4) == 0
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJTokenApiTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  if (apiPermission == ApiPermissions.Public)                  {                      test.AddLog("Public permission' using a client without an application key");                      client = new MobileServiceClient(client.ApplicationUri);                  }                    var testResult = true;                    for (int i = 0; i < 10; i++)                  {                      int seed = seedGenerator.Next();                      test.AddLog("Test with seed = {0}"' seed);                      Random rndGen = new Random(seed);                      var method = CreateHttpMethod(rndGen);                      JToken body = null;                      if (method.Method != "GET" && method.Method != "DELETE")                      {                          if (method.Method == "PATCH" || method.Method == "PUT")                          {                              // verbs which require a body                              body = CreateJson(rndGen' 0' false);                          }                          else if (rndGen.Next(4) > 0)                          {                              body = CreateJson(rndGen);                          }                      }                        var query = CreateQueryParams(rndGen);                        JToken apiResult = null;                      MobileServiceInvalidOperationException exception = null;                      try                      {                          if (body == null && method == HttpMethod.Post && query == null)                          {                              test.AddLog("  -> Using the InvokeApiAsync(string) overload");                              apiResult = await client.InvokeApiAsync(apiNames[apiPermission]);                          }                          else if (method == HttpMethod.Post && query == null)                          {                              test.AddLog("  -> Using the InvokeApiAsync(string' JToken) overload");                              apiResult = await client.InvokeApiAsync(apiNames[apiPermission]' body);                          }                          else if (body == null)                          {                              test.AddLog("  -> Using the InvokeApiAsync(string' HttpMethod ({0})' Dictionary<string' string>) overload"' method.Method);                              apiResult = await client.InvokeApiAsync(apiNames[apiPermission]' method' query);                          }                          else                          {                              test.AddLog("  -> Using the InvokeApiAsync(string' JToken' HttpMethod ({0})' Dictionary<string' string>) overload"' method.Method);                              apiResult = await client.InvokeApiAsync(apiNames[apiPermission]' body' method' query);                          }                      }                      catch (MobileServiceInvalidOperationException ex)                      {                          exception = ex;                      }                        if (expecting401 && exception == null)                      {                          throw new InvalidOperationException("Test should have failed' but didn't - result = " + apiResult);                      }                        if (expecting401)                      {                          if (exception.Response.StatusCode == HttpStatusCode.Unauthorized)                          {                              test.AddLog("  -> Succeeded");                          }                          else                          {                              test.AddLog("Unexpected exception: {0}"' exception);                              test.AddLog("Response: {0}"' exception.Response);                              var respBody = await exception.Response.Content.ReadAsStringAsync();                              test.AddLog("Response body: {0}"' respBody);                              testResult = false;                              break;                          }                      }                      else                      {                          if (exception != null)                          {                              test.AddLog("Unexpected exception: {0}"' exception);                              test.AddLog("Response: {0}"' exception.Response);                              var respBody = await exception.Response.Content.ReadAsStringAsync();                              test.AddLog("Response body: {0}"' respBody);                              testResult = false;                              break;                          }                            JObject expectedResult = new JObject();                          expectedResult.Add("user"' GetUserObject(client));                          if (query != null && query.Count > 0)                          {                              expectedResult.Add("query"' GetQueryObject(query));                          }                            List<string> errors = new List<string>();                          if (Util.CompareJson(expectedResult' apiResult' errors))                          {                              test.AddLog("  -> Succeeded");                          }                          else                          {                              test.AddLog("Results are different");                              foreach (var error in errors)                              {                                  test.AddLog("{0}"' error);                              }                                testResult = false;                              break;                          }                      }                  }                    return testResult;              });
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJTokenApiTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  if (apiPermission == ApiPermissions.Public)                  {                      test.AddLog("Public permission' using a client without an application key");                      client = new MobileServiceClient(client.ApplicationUri);                  }                    var testResult = true;                    for (int i = 0; i < 10; i++)                  {                      int seed = seedGenerator.Next();                      test.AddLog("Test with seed = {0}"' seed);                      Random rndGen = new Random(seed);                      var method = CreateHttpMethod(rndGen);                      JToken body = null;                      if (method.Method != "GET" && method.Method != "DELETE")                      {                          if (method.Method == "PATCH" || method.Method == "PUT")                          {                              // verbs which require a body                              body = CreateJson(rndGen' 0' false);                          }                          else if (rndGen.Next(4) > 0)                          {                              body = CreateJson(rndGen);                          }                      }                        var query = CreateQueryParams(rndGen);                        JToken apiResult = null;                      MobileServiceInvalidOperationException exception = null;                      try                      {                          if (body == null && method == HttpMethod.Post && query == null)                          {                              test.AddLog("  -> Using the InvokeApiAsync(string) overload");                              apiResult = await client.InvokeApiAsync(apiNames[apiPermission]);                          }                          else if (method == HttpMethod.Post && query == null)                          {                              test.AddLog("  -> Using the InvokeApiAsync(string' JToken) overload");                              apiResult = await client.InvokeApiAsync(apiNames[apiPermission]' body);                          }                          else if (body == null)                          {                              test.AddLog("  -> Using the InvokeApiAsync(string' HttpMethod ({0})' Dictionary<string' string>) overload"' method.Method);                              apiResult = await client.InvokeApiAsync(apiNames[apiPermission]' method' query);                          }                          else                          {                              test.AddLog("  -> Using the InvokeApiAsync(string' JToken' HttpMethod ({0})' Dictionary<string' string>) overload"' method.Method);                              apiResult = await client.InvokeApiAsync(apiNames[apiPermission]' body' method' query);                          }                      }                      catch (MobileServiceInvalidOperationException ex)                      {                          exception = ex;                      }                        if (expecting401 && exception == null)                      {                          throw new InvalidOperationException("Test should have failed' but didn't - result = " + apiResult);                      }                        if (expecting401)                      {                          if (exception.Response.StatusCode == HttpStatusCode.Unauthorized)                          {                              test.AddLog("  -> Succeeded");                          }                          else                          {                              test.AddLog("Unexpected exception: {0}"' exception);                              test.AddLog("Response: {0}"' exception.Response);                              var respBody = await exception.Response.Content.ReadAsStringAsync();                              test.AddLog("Response body: {0}"' respBody);                              testResult = false;                              break;                          }                      }                      else                      {                          if (exception != null)                          {                              test.AddLog("Unexpected exception: {0}"' exception);                              test.AddLog("Response: {0}"' exception.Response);                              var respBody = await exception.Response.Content.ReadAsStringAsync();                              test.AddLog("Response body: {0}"' respBody);                              testResult = false;                              break;                          }                            JObject expectedResult = new JObject();                          expectedResult.Add("user"' GetUserObject(client));                          if (query != null && query.Count > 0)                          {                              expectedResult.Add("query"' GetQueryObject(query));                          }                            List<string> errors = new List<string>();                          if (Util.CompareJson(expectedResult' apiResult' errors))                          {                              test.AddLog("  -> Succeeded");                          }                          else                          {                              test.AddLog("Results are different");                              foreach (var error in errors)                              {                                  test.AddLog("{0}"' error);                              }                                testResult = false;                              break;                          }                      }                  }                    return testResult;              });
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateQueryParams,The following statement contains a magic number: rndGen.Next(2) == 0
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateQueryParams,The following statement contains a magic number: var size = rndGen.Next(5);
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateQueryParams,The following statement contains a magic number: var name = CreateString(rndGen' 1' 10' Letters);
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateString,The following statement contains a magic number: rndGen.Next(3) > 0
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: const int maxDepth = 3;
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: int kind = rndGen.Next(15);
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: kind = rndGen.Next(8' 15);
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: kind = rndGen.Next(8' 15);
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateJson,The following statement contains a magic number: switch (kind)              {                  case 0:                      return true;                  case 1:                      return false;                  case 2:                      return rndGen.Next();                  case 3:                      return rndGen.Next() >> rndGen.Next(10);                  case 4:                  case 5:                  case 6:                      return CreateString(rndGen' 0' 10);                  case 7:                      if (canBeNull)                      {                          return JToken.Parse("null");                      }                      else                      {                          return CreateString(rndGen' 0' 10);                      }                  case 8:                  case 9:                  case 10:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JArray result = new JArray();                          for (int i = 0; i < size; i++)                          {                              result.Add(CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }                  default:                      if (currentDepth > maxDepth)                      {                          return "max depth";                      }                      else                      {                          int size = rndGen.Next(5);                          JObject result = new JObject();                          for (int i = 0; i < size; i++)                          {                              string key;                              do                              {                                  key = CreateString(rndGen' 3' 5);                              } while (result[key] != null);                              result.Add(key' CreateJson(rndGen' currentDepth + 1));                          }                            return result;                      }              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpMethod,The following statement contains a magic number: switch (rndGen.Next(10))              {                  case 0:                  case 1:                  case 2:                      return HttpMethod.Post;                  case 3:                  case 4:                  case 5:                  case 6:                      return HttpMethod.Get;                  case 7:                      return HttpMethod.Put;                  case 8:                      return HttpMethod.Delete;                  default:                      return new HttpMethod("PATCH");              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpMethod,The following statement contains a magic number: switch (rndGen.Next(10))              {                  case 0:                  case 1:                  case 2:                      return HttpMethod.Post;                  case 3:                  case 4:                  case 5:                  case 6:                      return HttpMethod.Get;                  case 7:                      return HttpMethod.Put;                  case 8:                      return HttpMethod.Delete;                  default:                      return new HttpMethod("PATCH");              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpMethod,The following statement contains a magic number: switch (rndGen.Next(10))              {                  case 0:                  case 1:                  case 2:                      return HttpMethod.Post;                  case 3:                  case 4:                  case 5:                  case 6:                      return HttpMethod.Get;                  case 7:                      return HttpMethod.Put;                  case 8:                      return HttpMethod.Delete;                  default:                      return new HttpMethod("PATCH");              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpMethod,The following statement contains a magic number: switch (rndGen.Next(10))              {                  case 0:                  case 1:                  case 2:                      return HttpMethod.Post;                  case 3:                  case 4:                  case 5:                  case 6:                      return HttpMethod.Get;                  case 7:                      return HttpMethod.Put;                  case 8:                      return HttpMethod.Delete;                  default:                      return new HttpMethod("PATCH");              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpMethod,The following statement contains a magic number: switch (rndGen.Next(10))              {                  case 0:                  case 1:                  case 2:                      return HttpMethod.Post;                  case 3:                  case 4:                  case 5:                  case 6:                      return HttpMethod.Get;                  case 7:                      return HttpMethod.Put;                  case 8:                      return HttpMethod.Delete;                  default:                      return new HttpMethod("PATCH");              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpMethod,The following statement contains a magic number: switch (rndGen.Next(10))              {                  case 0:                  case 1:                  case 2:                      return HttpMethod.Post;                  case 3:                  case 4:                  case 5:                  case 6:                      return HttpMethod.Get;                  case 7:                      return HttpMethod.Put;                  case 8:                      return HttpMethod.Delete;                  default:                      return new HttpMethod("PATCH");              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpMethod,The following statement contains a magic number: switch (rndGen.Next(10))              {                  case 0:                  case 1:                  case 2:                      return HttpMethod.Post;                  case 3:                  case 4:                  case 5:                  case 6:                      return HttpMethod.Get;                  case 7:                      return HttpMethod.Put;                  case 8:                      return HttpMethod.Delete;                  default:                      return new HttpMethod("PATCH");              }
Magic Number,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpMethod,The following statement contains a magic number: switch (rndGen.Next(10))              {                  case 0:                  case 1:                  case 2:                      return HttpMethod.Post;                  case 3:                  case 4:                  case 5:                  case 6:                      return HttpMethod.Get;                  case 7:                      return HttpMethod.Put;                  case 8:                      return HttpMethod.Delete;                  default:                      return new HttpMethod("PATCH");              }
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(new ZumoTest("Validate that filter can bypass service"' async delegate(ZumoTest test)              {                  string json = "{'id':1''name':'John Doe'''age':33}".Replace('\''' '\"');                  var client = new MobileServiceClient(                      ZumoTestGlobals.Instance.Client.ApplicationUri'                      ZumoTestGlobals.Instance.Client.ApplicationKey'                      new HandlerToBypassService(201' "application/json"' json));                  var table = client.GetTable("TableWhichDoesNotExist");                  var item = new JObject();                  var inserted = await table.InsertAsync(item);                  List<string> errors = new List<string>();                  if (!Util.CompareJson(JObject.Parse(json)' inserted' errors))                  {                      foreach (var error in errors)                      {                          test.AddLog(error);                      }                        test.AddLog("Error comparing object returned by the filter");                      return false;                  }                  else                  {                      return true;                  }              }' ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES));
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateSystemPropertiesTest,The following statement contains a magic number: return new ZumoTest("System properties in " + (useTypedTable ? "" : "un") + "typed tables"' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var typedTable = client.GetTable<VersionedType>();                  var untypedTable = client.GetTable(ZumoTestGlobals.StringIdRoundTripTableName);                  untypedTable.SystemProperties =                      MobileServiceSystemProperties.CreatedAt |                      MobileServiceSystemProperties.UpdatedAt |                      MobileServiceSystemProperties.Version;                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  VersionedType item = null;                  JObject untypedItem = null;                  DateTime createdAt' updatedAt;                  string id;                  if (useTypedTable)                  {                      item = new VersionedType(rndGen);                      await typedTable.InsertAsync(item);                      test.AddLog("Inserted: {0}"' item);                      id = item.Id;                      createdAt = item.CreatedAt;                      updatedAt = item.UpdatedAt;                  }                  else                  {                      untypedItem = new JObject();                      untypedItem.Add("name"' "unused");                      untypedItem = (JObject)(await untypedTable.InsertAsync(untypedItem));                      test.AddLog("Inserted: {0}"' untypedItem);                      id = (string)untypedItem["id"];                      createdAt = untypedItem["__createdAt"].ToObject<DateTime>();                      updatedAt = untypedItem["__updatedAt"].ToObject<DateTime>();                  }                    test.AddLog("Now adding a new item");                  DateTime otherCreatedAt' otherUpdatedAt;                  string otherId;                  if (useTypedTable)                  {                      item = new VersionedType(rndGen);                      await typedTable.InsertAsync(item);                      test.AddLog("Inserted: {0}"' item);                      otherId = item.Id;                      otherCreatedAt = item.CreatedAt;                      otherUpdatedAt = item.UpdatedAt;                  }                  else                  {                      untypedItem = new JObject();                      untypedItem.Add("name"' "unused");                      untypedItem = (JObject)(await untypedTable.InsertAsync(untypedItem));                      test.AddLog("Inserted: {0}"' untypedItem);                      otherId = (string)untypedItem["id"];                      otherCreatedAt = untypedItem["__createdAt"].ToObject<DateTime>();                      otherUpdatedAt = untypedItem["__updatedAt"].ToObject<DateTime>();                  }                    if (createdAt >= otherCreatedAt)                  {                      test.AddLog("Error' first __createdAt value is not smaller than second one");                      return false;                  }                    if (updatedAt >= otherUpdatedAt)                  {                      test.AddLog("Error' first __updatedAt value is not smaller than second one");                      return false;                  }                    createdAt = otherCreatedAt;                  updatedAt = otherUpdatedAt;                    test.AddLog("Now updating the item");                  if (useTypedTable)                  {                      item = new VersionedType(rndGen) { Id = otherId };                      await typedTable.UpdateAsync(item);                      test.AddLog("Updated: {0}"' item);                      otherUpdatedAt = item.UpdatedAt;                      otherCreatedAt = item.CreatedAt;                  }                  else                  {                      untypedItem = new JObject(new JProperty("id"' otherId)' new JProperty("name"' "other name"));                      untypedItem = (JObject)(await untypedTable.UpdateAsync(untypedItem));                      test.AddLog("Updated: {0}"' untypedItem);                      otherCreatedAt = untypedItem["__createdAt"].ToObject<DateTime>();                      otherUpdatedAt = untypedItem["__updatedAt"].ToObject<DateTime>();                  }                    if (createdAt != otherCreatedAt)                  {                      test.AddLog("Error' update changed the value of the __createdAt property");                      return false;                  }                    if (otherUpdatedAt <= updatedAt)                  {                      test.AddLog("Error' update did not change the __updatedAt property to a later value");                      return false;                  }                    test.AddLog("Cleanup: deleting items");                  await untypedTable.DeleteAsync(new JObject(new JProperty("id"' id)));                  await untypedTable.DeleteAsync(new JObject(new JProperty("id"' otherId)));                  return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateSystemPropertiesTest,The following statement contains a magic number: return new ZumoTest("System properties in " + (useTypedTable ? "" : "un") + "typed tables"' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var typedTable = client.GetTable<VersionedType>();                  var untypedTable = client.GetTable(ZumoTestGlobals.StringIdRoundTripTableName);                  untypedTable.SystemProperties =                      MobileServiceSystemProperties.CreatedAt |                      MobileServiceSystemProperties.UpdatedAt |                      MobileServiceSystemProperties.Version;                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  VersionedType item = null;                  JObject untypedItem = null;                  DateTime createdAt' updatedAt;                  string id;                  if (useTypedTable)                  {                      item = new VersionedType(rndGen);                      await typedTable.InsertAsync(item);                      test.AddLog("Inserted: {0}"' item);                      id = item.Id;                      createdAt = item.CreatedAt;                      updatedAt = item.UpdatedAt;                  }                  else                  {                      untypedItem = new JObject();                      untypedItem.Add("name"' "unused");                      untypedItem = (JObject)(await untypedTable.InsertAsync(untypedItem));                      test.AddLog("Inserted: {0}"' untypedItem);                      id = (string)untypedItem["id"];                      createdAt = untypedItem["__createdAt"].ToObject<DateTime>();                      updatedAt = untypedItem["__updatedAt"].ToObject<DateTime>();                  }                    test.AddLog("Now adding a new item");                  DateTime otherCreatedAt' otherUpdatedAt;                  string otherId;                  if (useTypedTable)                  {                      item = new VersionedType(rndGen);                      await typedTable.InsertAsync(item);                      test.AddLog("Inserted: {0}"' item);                      otherId = item.Id;                      otherCreatedAt = item.CreatedAt;                      otherUpdatedAt = item.UpdatedAt;                  }                  else                  {                      untypedItem = new JObject();                      untypedItem.Add("name"' "unused");                      untypedItem = (JObject)(await untypedTable.InsertAsync(untypedItem));                      test.AddLog("Inserted: {0}"' untypedItem);                      otherId = (string)untypedItem["id"];                      otherCreatedAt = untypedItem["__createdAt"].ToObject<DateTime>();                      otherUpdatedAt = untypedItem["__updatedAt"].ToObject<DateTime>();                  }                    if (createdAt >= otherCreatedAt)                  {                      test.AddLog("Error' first __createdAt value is not smaller than second one");                      return false;                  }                    if (updatedAt >= otherUpdatedAt)                  {                      test.AddLog("Error' first __updatedAt value is not smaller than second one");                      return false;                  }                    createdAt = otherCreatedAt;                  updatedAt = otherUpdatedAt;                    test.AddLog("Now updating the item");                  if (useTypedTable)                  {                      item = new VersionedType(rndGen) { Id = otherId };                      await typedTable.UpdateAsync(item);                      test.AddLog("Updated: {0}"' item);                      otherUpdatedAt = item.UpdatedAt;                      otherCreatedAt = item.CreatedAt;                  }                  else                  {                      untypedItem = new JObject(new JProperty("id"' otherId)' new JProperty("name"' "other name"));                      untypedItem = (JObject)(await untypedTable.UpdateAsync(untypedItem));                      test.AddLog("Updated: {0}"' untypedItem);                      otherCreatedAt = untypedItem["__createdAt"].ToObject<DateTime>();                      otherUpdatedAt = untypedItem["__updatedAt"].ToObject<DateTime>();                  }                    if (createdAt != otherCreatedAt)                  {                      test.AddLog("Error' update changed the value of the __createdAt property");                      return false;                  }                    if (otherUpdatedAt <= updatedAt)                  {                      test.AddLog("Error' update did not change the __updatedAt property to a later value");                      return false;                  }                    test.AddLog("Cleanup: deleting items");                  await untypedTable.DeleteAsync(new JObject(new JProperty("id"' id)));                  await untypedTable.DeleteAsync(new JObject(new JProperty("id"' otherId)));                  return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateOptimisticConcurrencyTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<VersionedType>();                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  var item = new VersionedType(rndGen);                  await table.InsertAsync(item);                  test.AddLog("[client 1] Inserted item: {0}"' item);                    var client2 = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey);                  var table2 = client.GetTable<VersionedType>();                  var item2 = await table2.LookupAsync(item.Id);                  test.AddLog("[client 2] Retrieved the item");                  item2.Name = Util.CreateSimpleRandomString(rndGen' 20);                  item2.Number = rndGen.Next(100000);                  test.AddLog("[client 2] Updated the item' will update on the server now");                  await table2.UpdateAsync(item2);                  test.AddLog("[client 2] Item has been updated: {0}"' item2);                    test.AddLog("[client 1] Will try to update; should fail");                  MobileServicePreconditionFailedException<VersionedType> ex = null;                  try                  {                      item.Name = Util.CreateSimpleRandomString(rndGen' 20);                      await table.UpdateAsync(item);                      test.AddLog("[client 1] Error' the update succeeded' but it should have failed. Item = {0}"' item);                      return false;                  }                  catch (MobileServicePreconditionFailedException<VersionedType> e)                  {                      test.AddLog("[client 1] Received expected exception; server item = {0}"' e.Item);                      ex = e;                  }                    var serverItem = ex.Item;                  if (serverItem.Version != item2.Version)                  {                      test.AddLog("[client 1] Error' server item's version is not the same as the second item version");                      return false;                  }                    var cachedMergedItem = mergingPolicy(item' serverItem);                  var mergedItem = mergingPolicy(item' serverItem);                  test.AddLog("[client 1] Merged item: {0}"' mergedItem);                  test.AddLog("[client 1] Trying to update it again' should succeed this time");                    await table.UpdateAsync(mergedItem);                  test.AddLog("[client 1] Updated the item: {0}"' mergedItem);                    if (!cachedMergedItem.Equals(mergedItem))                  {                      test.AddLog("[client 1] Error' the server version of the merged item doesn't match the client one");                      return false;                  }                    test.AddLog("[client 2] Refreshing the item");                  await table2.RefreshAsync(item2);                  test.AddLog("[client 2] Refreshed the item: {0}"' item2);                    if (!item2.Equals(mergedItem))                  {                      test.AddLog("[client] Error' item is different than the item from the client 1");                      return false;                  }                    return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateOptimisticConcurrencyTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<VersionedType>();                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  var item = new VersionedType(rndGen);                  await table.InsertAsync(item);                  test.AddLog("[client 1] Inserted item: {0}"' item);                    var client2 = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey);                  var table2 = client.GetTable<VersionedType>();                  var item2 = await table2.LookupAsync(item.Id);                  test.AddLog("[client 2] Retrieved the item");                  item2.Name = Util.CreateSimpleRandomString(rndGen' 20);                  item2.Number = rndGen.Next(100000);                  test.AddLog("[client 2] Updated the item' will update on the server now");                  await table2.UpdateAsync(item2);                  test.AddLog("[client 2] Item has been updated: {0}"' item2);                    test.AddLog("[client 1] Will try to update; should fail");                  MobileServicePreconditionFailedException<VersionedType> ex = null;                  try                  {                      item.Name = Util.CreateSimpleRandomString(rndGen' 20);                      await table.UpdateAsync(item);                      test.AddLog("[client 1] Error' the update succeeded' but it should have failed. Item = {0}"' item);                      return false;                  }                  catch (MobileServicePreconditionFailedException<VersionedType> e)                  {                      test.AddLog("[client 1] Received expected exception; server item = {0}"' e.Item);                      ex = e;                  }                    var serverItem = ex.Item;                  if (serverItem.Version != item2.Version)                  {                      test.AddLog("[client 1] Error' server item's version is not the same as the second item version");                      return false;                  }                    var cachedMergedItem = mergingPolicy(item' serverItem);                  var mergedItem = mergingPolicy(item' serverItem);                  test.AddLog("[client 1] Merged item: {0}"' mergedItem);                  test.AddLog("[client 1] Trying to update it again' should succeed this time");                    await table.UpdateAsync(mergedItem);                  test.AddLog("[client 1] Updated the item: {0}"' mergedItem);                    if (!cachedMergedItem.Equals(mergedItem))                  {                      test.AddLog("[client 1] Error' the server version of the merged item doesn't match the client one");                      return false;                  }                    test.AddLog("[client 2] Refreshing the item");                  await table2.RefreshAsync(item2);                  test.AddLog("[client 2] Refreshed the item: {0}"' item2);                    if (!item2.Equals(mergedItem))                  {                      test.AddLog("[client] Error' item is different than the item from the client 1");                      return false;                  }                    return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateOptimisticConcurrencyTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<VersionedType>();                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  var item = new VersionedType(rndGen);                  await table.InsertAsync(item);                  test.AddLog("[client 1] Inserted item: {0}"' item);                    var client2 = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey);                  var table2 = client.GetTable<VersionedType>();                  var item2 = await table2.LookupAsync(item.Id);                  test.AddLog("[client 2] Retrieved the item");                  item2.Name = Util.CreateSimpleRandomString(rndGen' 20);                  item2.Number = rndGen.Next(100000);                  test.AddLog("[client 2] Updated the item' will update on the server now");                  await table2.UpdateAsync(item2);                  test.AddLog("[client 2] Item has been updated: {0}"' item2);                    test.AddLog("[client 1] Will try to update; should fail");                  MobileServicePreconditionFailedException<VersionedType> ex = null;                  try                  {                      item.Name = Util.CreateSimpleRandomString(rndGen' 20);                      await table.UpdateAsync(item);                      test.AddLog("[client 1] Error' the update succeeded' but it should have failed. Item = {0}"' item);                      return false;                  }                  catch (MobileServicePreconditionFailedException<VersionedType> e)                  {                      test.AddLog("[client 1] Received expected exception; server item = {0}"' e.Item);                      ex = e;                  }                    var serverItem = ex.Item;                  if (serverItem.Version != item2.Version)                  {                      test.AddLog("[client 1] Error' server item's version is not the same as the second item version");                      return false;                  }                    var cachedMergedItem = mergingPolicy(item' serverItem);                  var mergedItem = mergingPolicy(item' serverItem);                  test.AddLog("[client 1] Merged item: {0}"' mergedItem);                  test.AddLog("[client 1] Trying to update it again' should succeed this time");                    await table.UpdateAsync(mergedItem);                  test.AddLog("[client 1] Updated the item: {0}"' mergedItem);                    if (!cachedMergedItem.Equals(mergedItem))                  {                      test.AddLog("[client 1] Error' the server version of the merged item doesn't match the client one");                      return false;                  }                    test.AddLog("[client 2] Refreshing the item");                  await table2.RefreshAsync(item2);                  test.AddLog("[client 2] Refreshed the item: {0}"' item2);                    if (!item2.Equals(mergedItem))                  {                      test.AddLog("[client] Error' item is different than the item from the client 1");                      return false;                  }                    return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateOptimisticConcurrencyTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<VersionedType>();                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  var item = new VersionedType(rndGen);                  await table.InsertAsync(item);                  test.AddLog("[client 1] Inserted item: {0}"' item);                    var client2 = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey);                  var table2 = client.GetTable<VersionedType>();                  var item2 = await table2.LookupAsync(item.Id);                  test.AddLog("[client 2] Retrieved the item");                  item2.Name = Util.CreateSimpleRandomString(rndGen' 20);                  item2.Number = rndGen.Next(100000);                  test.AddLog("[client 2] Updated the item' will update on the server now");                  await table2.UpdateAsync(item2);                  test.AddLog("[client 2] Item has been updated: {0}"' item2);                    test.AddLog("[client 1] Will try to update; should fail");                  MobileServicePreconditionFailedException<VersionedType> ex = null;                  try                  {                      item.Name = Util.CreateSimpleRandomString(rndGen' 20);                      await table.UpdateAsync(item);                      test.AddLog("[client 1] Error' the update succeeded' but it should have failed. Item = {0}"' item);                      return false;                  }                  catch (MobileServicePreconditionFailedException<VersionedType> e)                  {                      test.AddLog("[client 1] Received expected exception; server item = {0}"' e.Item);                      ex = e;                  }                    var serverItem = ex.Item;                  if (serverItem.Version != item2.Version)                  {                      test.AddLog("[client 1] Error' server item's version is not the same as the second item version");                      return false;                  }                    var cachedMergedItem = mergingPolicy(item' serverItem);                  var mergedItem = mergingPolicy(item' serverItem);                  test.AddLog("[client 1] Merged item: {0}"' mergedItem);                  test.AddLog("[client 1] Trying to update it again' should succeed this time");                    await table.UpdateAsync(mergedItem);                  test.AddLog("[client 1] Updated the item: {0}"' mergedItem);                    if (!cachedMergedItem.Equals(mergedItem))                  {                      test.AddLog("[client 1] Error' the server version of the merged item doesn't match the client one");                      return false;                  }                    test.AddLog("[client 2] Refreshing the item");                  await table2.RefreshAsync(item2);                  test.AddLog("[client 2] Refreshed the item: {0}"' item2);                    if (!item2.Equals(mergedItem))                  {                      test.AddLog("[client] Error' item is different than the item from the client 1");                      return false;                  }                    return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateOptimisticConcurrencyTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<VersionedType>();                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  var item = new VersionedType(rndGen);                  await table.InsertAsync(item);                  test.AddLog("[client 1] Inserted item: {0}"' item);                    var client2 = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey);                  var table2 = client.GetTable<VersionedType>();                  var item2 = await table2.LookupAsync(item.Id);                  test.AddLog("[client 2] Retrieved the item");                  item2.Name = Util.CreateSimpleRandomString(rndGen' 20);                  item2.Number = rndGen.Next(100000);                  test.AddLog("[client 2] Updated the item' will update on the server now");                  await table2.UpdateAsync(item2);                  test.AddLog("[client 2] Item has been updated: {0}"' item2);                    test.AddLog("[client 1] Will try to update; should fail");                  MobileServicePreconditionFailedException<VersionedType> ex = null;                  try                  {                      item.Name = Util.CreateSimpleRandomString(rndGen' 20);                      await table.UpdateAsync(item);                      test.AddLog("[client 1] Error' the update succeeded' but it should have failed. Item = {0}"' item);                      return false;                  }                  catch (MobileServicePreconditionFailedException<VersionedType> e)                  {                      test.AddLog("[client 1] Received expected exception; server item = {0}"' e.Item);                      ex = e;                  }                    var serverItem = ex.Item;                  if (serverItem.Version != item2.Version)                  {                      test.AddLog("[client 1] Error' server item's version is not the same as the second item version");                      return false;                  }                    var cachedMergedItem = mergingPolicy(item' serverItem);                  var mergedItem = mergingPolicy(item' serverItem);                  test.AddLog("[client 1] Merged item: {0}"' mergedItem);                  test.AddLog("[client 1] Trying to update it again' should succeed this time");                    await table.UpdateAsync(mergedItem);                  test.AddLog("[client 1] Updated the item: {0}"' mergedItem);                    if (!cachedMergedItem.Equals(mergedItem))                  {                      test.AddLog("[client 1] Error' the server version of the merged item doesn't match the client one");                      return false;                  }                    test.AddLog("[client 2] Refreshing the item");                  await table2.RefreshAsync(item2);                  test.AddLog("[client 2] Refreshed the item: {0}"' item2);                    if (!item2.Equals(mergedItem))                  {                      test.AddLog("[client] Error' item is different than the item from the client 1");                      return false;                  }                    return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateOptimisticConcurrencyWithServerConflictsTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<VersionedType>();                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  var item = new VersionedType(rndGen);                  await table.InsertAsync(item);                  test.AddLog("[client 1] Inserted item: {0}"' item);                    var client2 = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey);                  var table2 = client.GetTable<VersionedType>();                  var item2 = await table2.LookupAsync(item.Id);                  test.AddLog("[client 2] Retrieved the item");                  item2.Name = Util.CreateSimpleRandomString(rndGen' 20);                  item2.Number = rndGen.Next(100000);                  test.AddLog("[client 2] Updated the item' will update on the server now");                  await table2.UpdateAsync(item2);                  test.AddLog("[client 2] Item has been updated: {0}"' item2);                    test.AddLog("[client 1] Will try to update - using policy that data on {0} wins"' clientWins ? "client" : "server");                  string oldName = item2.Name;                  string newName = Util.CreateSimpleRandomString(rndGen' 20);                  item.Name = newName;                  await table.UpdateAsync(item' new Dictionary<string' string> { { "conflictPolicy"' clientWins ? "clientWins" : "serverWins" } });                  test.AddLog("[client 1] Updated the item: {0}"' item);                    test.AddLog("[client 2] Now refreshing the second item");                  await table2.RefreshAsync(item2);                  test.AddLog("[client 2] Refreshed: {0}"' item2);                  if (clientWins)                  {                      // The name should be the new one                      if (item.Name != newName || item2.Name != newName)                      {                          test.AddLog("Error' name wasn't updated in a 'client wins' policy");                          return false;                      }                  }                  else                  {                      // The name should have remained the old one                      if (item.Name != oldName || item2.Name != oldName)                      {                          test.AddLog("Error' name was updated in a 'server wins' policy");                          return false;                      }                  }                    test.AddLog("Table operations behaved as expected. Cleaning up...");                  await table.DeleteAsync(item);                  test.AddLog("...done");                  return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateOptimisticConcurrencyWithServerConflictsTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<VersionedType>();                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  var item = new VersionedType(rndGen);                  await table.InsertAsync(item);                  test.AddLog("[client 1] Inserted item: {0}"' item);                    var client2 = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey);                  var table2 = client.GetTable<VersionedType>();                  var item2 = await table2.LookupAsync(item.Id);                  test.AddLog("[client 2] Retrieved the item");                  item2.Name = Util.CreateSimpleRandomString(rndGen' 20);                  item2.Number = rndGen.Next(100000);                  test.AddLog("[client 2] Updated the item' will update on the server now");                  await table2.UpdateAsync(item2);                  test.AddLog("[client 2] Item has been updated: {0}"' item2);                    test.AddLog("[client 1] Will try to update - using policy that data on {0} wins"' clientWins ? "client" : "server");                  string oldName = item2.Name;                  string newName = Util.CreateSimpleRandomString(rndGen' 20);                  item.Name = newName;                  await table.UpdateAsync(item' new Dictionary<string' string> { { "conflictPolicy"' clientWins ? "clientWins" : "serverWins" } });                  test.AddLog("[client 1] Updated the item: {0}"' item);                    test.AddLog("[client 2] Now refreshing the second item");                  await table2.RefreshAsync(item2);                  test.AddLog("[client 2] Refreshed: {0}"' item2);                  if (clientWins)                  {                      // The name should be the new one                      if (item.Name != newName || item2.Name != newName)                      {                          test.AddLog("Error' name wasn't updated in a 'client wins' policy");                          return false;                      }                  }                  else                  {                      // The name should have remained the old one                      if (item.Name != oldName || item2.Name != oldName)                      {                          test.AddLog("Error' name was updated in a 'server wins' policy");                          return false;                      }                  }                    test.AddLog("Table operations behaved as expected. Cleaning up...");                  await table.DeleteAsync(item);                  test.AddLog("...done");                  return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateOptimisticConcurrencyWithServerConflictsTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<VersionedType>();                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  var item = new VersionedType(rndGen);                  await table.InsertAsync(item);                  test.AddLog("[client 1] Inserted item: {0}"' item);                    var client2 = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey);                  var table2 = client.GetTable<VersionedType>();                  var item2 = await table2.LookupAsync(item.Id);                  test.AddLog("[client 2] Retrieved the item");                  item2.Name = Util.CreateSimpleRandomString(rndGen' 20);                  item2.Number = rndGen.Next(100000);                  test.AddLog("[client 2] Updated the item' will update on the server now");                  await table2.UpdateAsync(item2);                  test.AddLog("[client 2] Item has been updated: {0}"' item2);                    test.AddLog("[client 1] Will try to update - using policy that data on {0} wins"' clientWins ? "client" : "server");                  string oldName = item2.Name;                  string newName = Util.CreateSimpleRandomString(rndGen' 20);                  item.Name = newName;                  await table.UpdateAsync(item' new Dictionary<string' string> { { "conflictPolicy"' clientWins ? "clientWins" : "serverWins" } });                  test.AddLog("[client 1] Updated the item: {0}"' item);                    test.AddLog("[client 2] Now refreshing the second item");                  await table2.RefreshAsync(item2);                  test.AddLog("[client 2] Refreshed: {0}"' item2);                  if (clientWins)                  {                      // The name should be the new one                      if (item.Name != newName || item2.Name != newName)                      {                          test.AddLog("Error' name wasn't updated in a 'client wins' policy");                          return false;                      }                  }                  else                  {                      // The name should have remained the old one                      if (item.Name != oldName || item2.Name != oldName)                      {                          test.AddLog("Error' name was updated in a 'server wins' policy");                          return false;                      }                  }                    test.AddLog("Table operations behaved as expected. Cleaning up...");                  await table.DeleteAsync(item);                  test.AddLog("...done");                  return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateOptimisticConcurrencyWithServerConflictsTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<VersionedType>();                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  var item = new VersionedType(rndGen);                  await table.InsertAsync(item);                  test.AddLog("[client 1] Inserted item: {0}"' item);                    var client2 = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey);                  var table2 = client.GetTable<VersionedType>();                  var item2 = await table2.LookupAsync(item.Id);                  test.AddLog("[client 2] Retrieved the item");                  item2.Name = Util.CreateSimpleRandomString(rndGen' 20);                  item2.Number = rndGen.Next(100000);                  test.AddLog("[client 2] Updated the item' will update on the server now");                  await table2.UpdateAsync(item2);                  test.AddLog("[client 2] Item has been updated: {0}"' item2);                    test.AddLog("[client 1] Will try to update - using policy that data on {0} wins"' clientWins ? "client" : "server");                  string oldName = item2.Name;                  string newName = Util.CreateSimpleRandomString(rndGen' 20);                  item.Name = newName;                  await table.UpdateAsync(item' new Dictionary<string' string> { { "conflictPolicy"' clientWins ? "clientWins" : "serverWins" } });                  test.AddLog("[client 1] Updated the item: {0}"' item);                    test.AddLog("[client 2] Now refreshing the second item");                  await table2.RefreshAsync(item2);                  test.AddLog("[client 2] Refreshed: {0}"' item2);                  if (clientWins)                  {                      // The name should be the new one                      if (item.Name != newName || item2.Name != newName)                      {                          test.AddLog("Error' name wasn't updated in a 'client wins' policy");                          return false;                      }                  }                  else                  {                      // The name should have remained the old one                      if (item.Name != oldName || item2.Name != oldName)                      {                          test.AddLog("Error' name was updated in a 'server wins' policy");                          return false;                      }                  }                    test.AddLog("Table operations behaved as expected. Cleaning up...");                  await table.DeleteAsync(item);                  test.AddLog("...done");                  return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateOptimisticConcurrencyWithServerConflictsTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<VersionedType>();                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using seed: {0}"' seed);                  Random rndGen = new Random(seed);                  var item = new VersionedType(rndGen);                  await table.InsertAsync(item);                  test.AddLog("[client 1] Inserted item: {0}"' item);                    var client2 = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey);                  var table2 = client.GetTable<VersionedType>();                  var item2 = await table2.LookupAsync(item.Id);                  test.AddLog("[client 2] Retrieved the item");                  item2.Name = Util.CreateSimpleRandomString(rndGen' 20);                  item2.Number = rndGen.Next(100000);                  test.AddLog("[client 2] Updated the item' will update on the server now");                  await table2.UpdateAsync(item2);                  test.AddLog("[client 2] Item has been updated: {0}"' item2);                    test.AddLog("[client 1] Will try to update - using policy that data on {0} wins"' clientWins ? "client" : "server");                  string oldName = item2.Name;                  string newName = Util.CreateSimpleRandomString(rndGen' 20);                  item.Name = newName;                  await table.UpdateAsync(item' new Dictionary<string' string> { { "conflictPolicy"' clientWins ? "clientWins" : "serverWins" } });                  test.AddLog("[client 1] Updated the item: {0}"' item);                    test.AddLog("[client 2] Now refreshing the second item");                  await table2.RefreshAsync(item2);                  test.AddLog("[client 2] Refreshed: {0}"' item2);                  if (clientWins)                  {                      // The name should be the new one                      if (item.Name != newName || item2.Name != newName)                      {                          test.AddLog("Error' name wasn't updated in a 'client wins' policy");                          return false;                      }                  }                  else                  {                      // The name should have remained the old one                      if (item.Name != oldName || item2.Name != oldName)                      {                          test.AddLog("Error' name was updated in a 'server wins' policy");                          return false;                      }                  }                    test.AddLog("Table operations behaved as expected. Cleaning up...");                  await table.DeleteAsync(item);                  test.AddLog("...done");                  return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateUserAgentValidationTest,The following statement contains a magic number: return new ZumoTest("Validation User-Agent header"' async delegate(ZumoTest test)              {                  var handler = new HandlerToCaptureHttpTraffic();                  MobileServiceClient client = new MobileServiceClient(                      ZumoTestGlobals.Instance.Client.ApplicationUri'                      ZumoTestGlobals.Instance.Client.ApplicationKey'                      handler);                  var table = client.GetTable<RoundTripTableItem>();                  var item = new RoundTripTableItem { String1 = "hello" };                  await table.InsertAsync(item);                  Action<string> dumpAndValidateHeaders = delegate(string operation)                  {                      test.AddLog("Headers for {0}:"' operation);                      test.AddLog("  Request:");                      foreach (var header in handler.RequestHeaders.Keys)                      {                          test.AddLog("    {0}: {1}"' header' handler.RequestHeaders[header]);                      }                        test.AddLog("  Response:");                      foreach (var header in handler.ResponseHeaders.Keys)                      {                          test.AddLog("    {0}: {1}"' header' handler.ResponseHeaders[header]);                      }                        string userAgent;                      if (!handler.RequestHeaders.TryGetValue("User-Agent"' out userAgent))                      {                          test.AddLog("No user-agent header in the request");                          throw new InvalidOperationException("This will fail the test");                      }                      else                      {                          Regex expected = new Regex(@"^ZUMO\/\d.\d");                          if (expected.IsMatch(userAgent))                          {                              test.AddLog("User-Agent validated correclty");                          }                          else                          {                              test.AddLog("User-Agent didn't validate properly.");                              throw new InvalidOperationException("This will fail the test");                          }                      }                  };                    dumpAndValidateHeaders("Insert");                    item.Double1 = 123;                  await table.UpdateAsync(item);                  dumpAndValidateHeaders("Update");                    var item2 = await table.LookupAsync(item.Id);                  dumpAndValidateHeaders("Read");                    await table.DeleteAsync(item);                  dumpAndValidateHeaders("Delete");                    return true;              }' ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateFilterTestWithMultipleRequests,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  int numberOfRequests = new Random().Next(2' 5);                  var handler = new HandlerWithMultipleRequests(test' numberOfRequests);                  test.AddLog("Created a filter which will replay the request {0} times"' numberOfRequests);                  var filteredClient = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey' handler);                    var typedTable = filteredClient.GetTable<RoundTripTableItem>();                  var untypedTable = filteredClient.GetTable(ZumoTestGlobals.RoundTripTableName);                  var uniqueId = Guid.NewGuid().ToString("N");                  if (typed)                  {                      var item = new RoundTripTableItem { String1 = uniqueId };                      await typedTable.InsertAsync(item);                  }                  else                  {                      var item = new JObject(new JProperty("string1"' uniqueId));                      await untypedTable.InsertAsync(item);                  }                    if (handler.TestFailed)                  {                      test.AddLog("Filter reported a test failure. Aborting.");                      return false;                  }                    test.AddLog("Inserted the data; now retrieving it to see how many items we have inserted.");                  handler.NumberOfRequests = 1; // no need to send it multiple times anymore                    var items = await untypedTable.ReadAsync("$select=string1'id&$filter=string1 eq '" + uniqueId + "'");                  var array = (JArray)items;                  bool passed;                  if (array.Count == numberOfRequests)                  {                      test.AddLog("Filter inserted correct number of items.");                      passed = true;                  }                  else                  {                      test.AddLog("Error' filtered client should have inserted {0} items' but there are {1}"' numberOfRequests' array.Count);                      passed = false;                  }                    // Cleanup                  foreach (var item in array)                  {                      await untypedTable.DeleteAsync(item as JObject);                  }                    test.AddLog("Cleanup: removed added items.");                  return passed;              }' ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoMiscTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoMiscTests.cs,CreateFilterTestWithMultipleRequests,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  int numberOfRequests = new Random().Next(2' 5);                  var handler = new HandlerWithMultipleRequests(test' numberOfRequests);                  test.AddLog("Created a filter which will replay the request {0} times"' numberOfRequests);                  var filteredClient = new MobileServiceClient(client.ApplicationUri' client.ApplicationKey' handler);                    var typedTable = filteredClient.GetTable<RoundTripTableItem>();                  var untypedTable = filteredClient.GetTable(ZumoTestGlobals.RoundTripTableName);                  var uniqueId = Guid.NewGuid().ToString("N");                  if (typed)                  {                      var item = new RoundTripTableItem { String1 = uniqueId };                      await typedTable.InsertAsync(item);                  }                  else                  {                      var item = new JObject(new JProperty("string1"' uniqueId));                      await untypedTable.InsertAsync(item);                  }                    if (handler.TestFailed)                  {                      test.AddLog("Filter reported a test failure. Aborting.");                      return false;                  }                    test.AddLog("Inserted the data; now retrieving it to see how many items we have inserted.");                  handler.NumberOfRequests = 1; // no need to send it multiple times anymore                    var items = await untypedTable.ReadAsync("$select=string1'id&$filter=string1 eq '" + uniqueId + "'");                  var array = (JArray)items;                  bool passed;                  if (array.Count == numberOfRequests)                  {                      test.AddLog("Filter inserted correct number of items.");                      passed = true;                  }                  else                  {                      test.AddLog("Error' filtered client should have inserted {0} items' but there are {1}"' numberOfRequests' array.Count);                      passed = false;                  }                    // Cleanup                  foreach (var item in array)                  {                      await untypedTable.DeleteAsync(item as JObject);                  }                    test.AddLog("Cleanup: removed added items.");                  return passed;              }' ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateSyncTestForAuthenticatedTable,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    var offlineReadyClient = CreateClient();                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItemNoVersion>();                    await offlineReadyClient.SyncContext.InitializeAsync(localStore);                  test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItemNoVersion>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItemNoVersion>();                    var item = new OfflineReadyItemNoVersion(rndGen);                  await localTable.InsertAsync(item);                  test.AddLog("Inserted the item to the local store:"' item);                    try                  {                      await offlineReadyClient.SyncContext.PushAsync();                      test.AddLog("Pushed the changes to the server");                      if (isLoggedIn)                      {                          test.AddLog("As expected' push succeeded");                      }                      else                      {                          test.AddLog("Error' table should only work with authenticated access' but user is not logged in");                          return false;                      }                  }                  catch (MobileServicePushFailedException ex)                  {                      if (isLoggedIn)                      {                          test.AddLog("Error' user is logged in but push operation failed: {0}"' ex);                          return false;                      }                        test.AddLog("Got expected exception: {0}: {1}"' ex.GetType().FullName' ex.Message);                      Exception inner = ex.InnerException;                      while (inner != null)                      {                          test.AddLog("  {0}: {1}"' inner.GetType().FullName' inner.Message);                          inner = inner.InnerException;                      }                  }                    if (!isLoggedIn)                  {                      test.AddLog("Push should have failed' so now will try to log in to complete the push operation");                      await offlineReadyClient.LoginAsync(MobileServiceAuthenticationProvider.Facebook);                      test.AddLog("Logged in as {0}"' offlineReadyClient.CurrentUser.UserId);                      await offlineReadyClient.SyncContext.PushAsync();                      test.AddLog("Push succeeded");                  }                    await localTable.PurgeAsync();                  test.AddLog("Purged the local table");                  await localTable.PullAsync(null' localTable.Where(i => i.Id == item.Id));                  test.AddLog("Pulled the data into the local table");                  List<OfflineReadyItemNoVersion> serverItems = await localTable.ToListAsync();                  test.AddLog("Retrieved items from the local table");                    test.AddLog("Removing item from the remote table");                  await remoteTable.DeleteAsync(item);                    if (!isLoggedIn)                  {                      offlineReadyClient.Logout();                      test.AddLog("Logged out again");                  }                    var firstServerItem = serverItems.FirstOrDefault();                  bool testResult = true;                  if (item.Equals(firstServerItem))                  {                      test.AddLog("Data round-tripped successfully");                  }                  else                  {                      test.AddLog("Error' data did not round-trip successfully. Expected: {0}' actual: {1}"' item' firstServerItem);                      testResult = false;                  }                    test.AddLog("Cleaning up");                  await localTable.PurgeAsync();                  test.AddLog("Done");                  return testResult;              })              {                  CanRunUnattended = false              };
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateSyncTestForAuthenticatedTable,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    var offlineReadyClient = CreateClient();                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItemNoVersion>();                    await offlineReadyClient.SyncContext.InitializeAsync(localStore);                  test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItemNoVersion>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItemNoVersion>();                    var item = new OfflineReadyItemNoVersion(rndGen);                  await localTable.InsertAsync(item);                  test.AddLog("Inserted the item to the local store:"' item);                    try                  {                      await offlineReadyClient.SyncContext.PushAsync();                      test.AddLog("Pushed the changes to the server");                      if (isLoggedIn)                      {                          test.AddLog("As expected' push succeeded");                      }                      else                      {                          test.AddLog("Error' table should only work with authenticated access' but user is not logged in");                          return false;                      }                  }                  catch (MobileServicePushFailedException ex)                  {                      if (isLoggedIn)                      {                          test.AddLog("Error' user is logged in but push operation failed: {0}"' ex);                          return false;                      }                        test.AddLog("Got expected exception: {0}: {1}"' ex.GetType().FullName' ex.Message);                      Exception inner = ex.InnerException;                      while (inner != null)                      {                          test.AddLog("  {0}: {1}"' inner.GetType().FullName' inner.Message);                          inner = inner.InnerException;                      }                  }                    if (!isLoggedIn)                  {                      test.AddLog("Push should have failed' so now will try to log in to complete the push operation");                      await offlineReadyClient.LoginAsync(MobileServiceAuthenticationProvider.Facebook);                      test.AddLog("Logged in as {0}"' offlineReadyClient.CurrentUser.UserId);                      await offlineReadyClient.SyncContext.PushAsync();                      test.AddLog("Push succeeded");                  }                    await localTable.PurgeAsync();                  test.AddLog("Purged the local table");                  await localTable.PullAsync(null' localTable.Where(i => i.Id == item.Id));                  test.AddLog("Pulled the data into the local table");                  List<OfflineReadyItemNoVersion> serverItems = await localTable.ToListAsync();                  test.AddLog("Retrieved items from the local table");                    test.AddLog("Removing item from the remote table");                  await remoteTable.DeleteAsync(item);                    if (!isLoggedIn)                  {                      offlineReadyClient.Logout();                      test.AddLog("Logged out again");                  }                    var firstServerItem = serverItems.FirstOrDefault();                  bool testResult = true;                  if (item.Equals(firstServerItem))                  {                      test.AddLog("Data round-tripped successfully");                  }                  else                  {                      test.AddLog("Error' data did not round-trip successfully. Expected: {0}' actual: {1}"' item' firstServerItem);                      testResult = false;                  }                    test.AddLog("Cleaning up");                  await localTable.PurgeAsync();                  test.AddLog("Done");                  return testResult;              })              {                  CanRunUnattended = false              };
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateAbortPushDuringSyncTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    var offlineReadyClient = CreateClient();                    var items = Enumerable.Range(0' 10).Select(_ => new OfflineReadyItem(rndGen)).ToArray();                  foreach (var item in items)                  {                      item.Id = Guid.NewGuid().ToString("D");                  }                    int abortIndex = abortLocation == SyncAbortLocation.Start ? 0 :                      (abortLocation == SyncAbortLocation.End ? items.Length - 1 : rndGen.Next(1' items.Length - 1));                  var idToAbort = items[abortIndex].Id;                  test.AddLog("Will send {0} items' aborting when id = {1}"' items.Length' idToAbort);                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItem>();                    var syncHandler = new AbortingSyncHandler(test' id => id == idToAbort);                  await offlineReadyClient.SyncContext.InitializeAsync(localStore' syncHandler);                  test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItem>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItem>();                    foreach (var item in items)                  {                      await localTable.InsertAsync(item);                  }                    test.AddLog("Inserted {0} items in the local table. Now pushing those");                    try                  {                      await offlineReadyClient.SyncContext.PushAsync();                      test.AddLog("Error' push call should have failed");                      return false;                  }                  catch (MobileServicePushFailedException ex)                  {                      test.AddLog("Caught (expected) exception: {0}"' ex);                  }                    var expectedOperationQueueSize = items.Length - abortIndex;                  test.AddLog("Current operation queue size: {0}"' offlineReadyClient.SyncContext.PendingOperations);                  if (expectedOperationQueueSize != offlineReadyClient.SyncContext.PendingOperations)                  {                      test.AddLog("Error' expected {0} items in the queue"' expectedOperationQueueSize);                      return false;                  }                    foreach (var allItemsPushed in new bool[] { false' true })                  {                      HashSet<OfflineReadyItem> itemsInServer' itemsNotInServer;                      if (allItemsPushed)                      {                          itemsInServer = new HashSet<OfflineReadyItem>(items.ToArray());                          itemsNotInServer = new HashSet<OfflineReadyItem>(Enumerable.Empty<OfflineReadyItem>());                      }                      else                      {                          itemsInServer = new HashSet<OfflineReadyItem>(items.Where((item' index) => index < abortIndex));                          itemsNotInServer = new HashSet<OfflineReadyItem>(items.Where((item' index) => index >= abortIndex));                      }                        foreach (var item in items)                      {                          var itemFromServer = (await remoteTable.Where(i => i.Id == item.Id).Take(1).ToEnumerableAsync()).FirstOrDefault();                          test.AddLog("Item with id = {0} from server: {1}"' item.Id'                              itemFromServer == null ? "<<null>>" : itemFromServer.ToString());                          if (itemsInServer.Contains(item) && itemFromServer == null)                          {                              test.AddLog("Error' the item {0} should have made to the server"' item.Id);                              return false;                          }                          else if (itemsNotInServer.Contains(item) && itemFromServer != null)                          {                              test.AddLog("Error' the item {0} should not have made to the server"' item.Id);                              return false;                          }                      }                        if (!allItemsPushed)                      {                          test.AddLog("Changing the handler so that it doesn't abort anymore.");                          syncHandler.AbortCondition = _ => false;                          test.AddLog("Pushing again");                          await offlineReadyClient.SyncContext.PushAsync();                          test.AddLog("Finished pushing all elements");                      }                  }                    test.AddLog("Changing the handler so that it doesn't abort anymore.");                  syncHandler.AbortCondition = _ => false;                    test.AddLog("Cleaning up");                  foreach (var item in items)                  {                      await localTable.DeleteAsync(item);                  }                    await offlineReadyClient.SyncContext.PushAsync();                  test.AddLog("Done");                    return true;              });
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateAbortPushDuringSyncTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    var offlineReadyClient = CreateClient();                    var items = Enumerable.Range(0' 10).Select(_ => new OfflineReadyItem(rndGen)).ToArray();                  foreach (var item in items)                  {                      item.Id = Guid.NewGuid().ToString("D");                  }                    int abortIndex = abortLocation == SyncAbortLocation.Start ? 0 :                      (abortLocation == SyncAbortLocation.End ? items.Length - 1 : rndGen.Next(1' items.Length - 1));                  var idToAbort = items[abortIndex].Id;                  test.AddLog("Will send {0} items' aborting when id = {1}"' items.Length' idToAbort);                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItem>();                    var syncHandler = new AbortingSyncHandler(test' id => id == idToAbort);                  await offlineReadyClient.SyncContext.InitializeAsync(localStore' syncHandler);                  test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItem>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItem>();                    foreach (var item in items)                  {                      await localTable.InsertAsync(item);                  }                    test.AddLog("Inserted {0} items in the local table. Now pushing those");                    try                  {                      await offlineReadyClient.SyncContext.PushAsync();                      test.AddLog("Error' push call should have failed");                      return false;                  }                  catch (MobileServicePushFailedException ex)                  {                      test.AddLog("Caught (expected) exception: {0}"' ex);                  }                    var expectedOperationQueueSize = items.Length - abortIndex;                  test.AddLog("Current operation queue size: {0}"' offlineReadyClient.SyncContext.PendingOperations);                  if (expectedOperationQueueSize != offlineReadyClient.SyncContext.PendingOperations)                  {                      test.AddLog("Error' expected {0} items in the queue"' expectedOperationQueueSize);                      return false;                  }                    foreach (var allItemsPushed in new bool[] { false' true })                  {                      HashSet<OfflineReadyItem> itemsInServer' itemsNotInServer;                      if (allItemsPushed)                      {                          itemsInServer = new HashSet<OfflineReadyItem>(items.ToArray());                          itemsNotInServer = new HashSet<OfflineReadyItem>(Enumerable.Empty<OfflineReadyItem>());                      }                      else                      {                          itemsInServer = new HashSet<OfflineReadyItem>(items.Where((item' index) => index < abortIndex));                          itemsNotInServer = new HashSet<OfflineReadyItem>(items.Where((item' index) => index >= abortIndex));                      }                        foreach (var item in items)                      {                          var itemFromServer = (await remoteTable.Where(i => i.Id == item.Id).Take(1).ToEnumerableAsync()).FirstOrDefault();                          test.AddLog("Item with id = {0} from server: {1}"' item.Id'                              itemFromServer == null ? "<<null>>" : itemFromServer.ToString());                          if (itemsInServer.Contains(item) && itemFromServer == null)                          {                              test.AddLog("Error' the item {0} should have made to the server"' item.Id);                              return false;                          }                          else if (itemsNotInServer.Contains(item) && itemFromServer != null)                          {                              test.AddLog("Error' the item {0} should not have made to the server"' item.Id);                              return false;                          }                      }                        if (!allItemsPushed)                      {                          test.AddLog("Changing the handler so that it doesn't abort anymore.");                          syncHandler.AbortCondition = _ => false;                          test.AddLog("Pushing again");                          await offlineReadyClient.SyncContext.PushAsync();                          test.AddLog("Finished pushing all elements");                      }                  }                    test.AddLog("Changing the handler so that it doesn't abort anymore.");                  syncHandler.AbortCondition = _ => false;                    test.AddLog("Cleaning up");                  foreach (var item in items)                  {                      await localTable.DeleteAsync(item);                  }                    await offlineReadyClient.SyncContext.PushAsync();                  test.AddLog("Done");                    return true;              });
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateAbortPushDuringSyncTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    var offlineReadyClient = CreateClient();                    var items = Enumerable.Range(0' 10).Select(_ => new OfflineReadyItem(rndGen)).ToArray();                  foreach (var item in items)                  {                      item.Id = Guid.NewGuid().ToString("D");                  }                    int abortIndex = abortLocation == SyncAbortLocation.Start ? 0 :                      (abortLocation == SyncAbortLocation.End ? items.Length - 1 : rndGen.Next(1' items.Length - 1));                  var idToAbort = items[abortIndex].Id;                  test.AddLog("Will send {0} items' aborting when id = {1}"' items.Length' idToAbort);                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItem>();                    var syncHandler = new AbortingSyncHandler(test' id => id == idToAbort);                  await offlineReadyClient.SyncContext.InitializeAsync(localStore' syncHandler);                  test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItem>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItem>();                    foreach (var item in items)                  {                      await localTable.InsertAsync(item);                  }                    test.AddLog("Inserted {0} items in the local table. Now pushing those");                    try                  {                      await offlineReadyClient.SyncContext.PushAsync();                      test.AddLog("Error' push call should have failed");                      return false;                  }                  catch (MobileServicePushFailedException ex)                  {                      test.AddLog("Caught (expected) exception: {0}"' ex);                  }                    var expectedOperationQueueSize = items.Length - abortIndex;                  test.AddLog("Current operation queue size: {0}"' offlineReadyClient.SyncContext.PendingOperations);                  if (expectedOperationQueueSize != offlineReadyClient.SyncContext.PendingOperations)                  {                      test.AddLog("Error' expected {0} items in the queue"' expectedOperationQueueSize);                      return false;                  }                    foreach (var allItemsPushed in new bool[] { false' true })                  {                      HashSet<OfflineReadyItem> itemsInServer' itemsNotInServer;                      if (allItemsPushed)                      {                          itemsInServer = new HashSet<OfflineReadyItem>(items.ToArray());                          itemsNotInServer = new HashSet<OfflineReadyItem>(Enumerable.Empty<OfflineReadyItem>());                      }                      else                      {                          itemsInServer = new HashSet<OfflineReadyItem>(items.Where((item' index) => index < abortIndex));                          itemsNotInServer = new HashSet<OfflineReadyItem>(items.Where((item' index) => index >= abortIndex));                      }                        foreach (var item in items)                      {                          var itemFromServer = (await remoteTable.Where(i => i.Id == item.Id).Take(1).ToEnumerableAsync()).FirstOrDefault();                          test.AddLog("Item with id = {0} from server: {1}"' item.Id'                              itemFromServer == null ? "<<null>>" : itemFromServer.ToString());                          if (itemsInServer.Contains(item) && itemFromServer == null)                          {                              test.AddLog("Error' the item {0} should have made to the server"' item.Id);                              return false;                          }                          else if (itemsNotInServer.Contains(item) && itemFromServer != null)                          {                              test.AddLog("Error' the item {0} should not have made to the server"' item.Id);                              return false;                          }                      }                        if (!allItemsPushed)                      {                          test.AddLog("Changing the handler so that it doesn't abort anymore.");                          syncHandler.AbortCondition = _ => false;                          test.AddLog("Pushing again");                          await offlineReadyClient.SyncContext.PushAsync();                          test.AddLog("Finished pushing all elements");                      }                  }                    test.AddLog("Changing the handler so that it doesn't abort anymore.");                  syncHandler.AbortCondition = _ => false;                    test.AddLog("Cleaning up");                  foreach (var item in items)                  {                      await localTable.DeleteAsync(item);                  }                    await offlineReadyClient.SyncContext.PushAsync();                  test.AddLog("Done");                    return true;              });
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateBasicTest,The following statement contains a magic number: return new ZumoTest("Basic offline scenario"' async delegate(ZumoTest test)              {                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    CountingHandler handler = new CountingHandler();                  var requestsSentToServer = 0;                  var offlineReadyClient = CreateClient(handler);                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItem>();                    await offlineReadyClient.SyncContext.InitializeAsync(localStore);                  test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItem>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItem>();                    var item = new OfflineReadyItem(rndGen);                  await localTable.InsertAsync(item);                  test.AddLog("Inserted the item to the local store:"' item);                    test.AddLog("Validating that the item is not in the server table");                  try                  {                      requestsSentToServer++;                      await remoteTable.LookupAsync(item.Id);                      test.AddLog("Error' item is present in the server");                      return false;                  }                  catch (MobileServiceInvalidOperationException ex)                  {                      test.AddLog("Ok' item is not in the server: {0}"' ex.Message);                  }                    Func<int' bool> validateRequestCount = expectedCount =>                  {                      test.AddLog("So far {0} requests sent to the server"' handler.RequestCount);                      if (handler.RequestCount != expectedCount)                      {                          test.AddLog("Error' expected {0} requests to have been sent to the server"' expectedCount);                          return false;                      }                      else                      {                          return true;                      }                  };                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Pushing changes to the server");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer++;                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Push done; now verifying that item is in the server");                    var serverItem = await remoteTable.LookupAsync(item.Id);                  requestsSentToServer++;                  test.AddLog("Retrieved item from server: {0}"' serverItem);                  if (serverItem.Equals(item))                  {                      test.AddLog("Items are the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    test.AddLog("Now updating the item locally");                  item.Flag = !item.Flag;                  item.Age++;                  item.Date = new DateTime(now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second' now.Millisecond' DateTimeKind.Utc);                  await localTable.UpdateAsync(item);                  test.AddLog("Item has been updated");                    var newItem = new OfflineReadyItem(rndGen);                  test.AddLog("Adding a new item to the local table: {0}"' newItem);                  await localTable.InsertAsync(newItem);                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Pushing the new changes to the server");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer += 2;                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Push done. Verifying changes on the server");                  serverItem = await remoteTable.LookupAsync(item.Id);                  requestsSentToServer++;                  if (serverItem.Equals(item))                  {                      test.AddLog("Updated items are the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    serverItem = await remoteTable.LookupAsync(newItem.Id);                  requestsSentToServer++;                  if (serverItem.Equals(newItem))                  {                      test.AddLog("New inserted item is the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    test.AddLog("Cleaning up");                  await localTable.DeleteAsync(item);                  await localTable.DeleteAsync(newItem);                  test.AddLog("Local table cleaned up. Now sync'ing once more");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer += 2;                  if (!validateRequestCount(requestsSentToServer)) return false;                  test.AddLog("Done");                  return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateBasicTest,The following statement contains a magic number: return new ZumoTest("Basic offline scenario"' async delegate(ZumoTest test)              {                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    CountingHandler handler = new CountingHandler();                  var requestsSentToServer = 0;                  var offlineReadyClient = CreateClient(handler);                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItem>();                    await offlineReadyClient.SyncContext.InitializeAsync(localStore);                  test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItem>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItem>();                    var item = new OfflineReadyItem(rndGen);                  await localTable.InsertAsync(item);                  test.AddLog("Inserted the item to the local store:"' item);                    test.AddLog("Validating that the item is not in the server table");                  try                  {                      requestsSentToServer++;                      await remoteTable.LookupAsync(item.Id);                      test.AddLog("Error' item is present in the server");                      return false;                  }                  catch (MobileServiceInvalidOperationException ex)                  {                      test.AddLog("Ok' item is not in the server: {0}"' ex.Message);                  }                    Func<int' bool> validateRequestCount = expectedCount =>                  {                      test.AddLog("So far {0} requests sent to the server"' handler.RequestCount);                      if (handler.RequestCount != expectedCount)                      {                          test.AddLog("Error' expected {0} requests to have been sent to the server"' expectedCount);                          return false;                      }                      else                      {                          return true;                      }                  };                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Pushing changes to the server");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer++;                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Push done; now verifying that item is in the server");                    var serverItem = await remoteTable.LookupAsync(item.Id);                  requestsSentToServer++;                  test.AddLog("Retrieved item from server: {0}"' serverItem);                  if (serverItem.Equals(item))                  {                      test.AddLog("Items are the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    test.AddLog("Now updating the item locally");                  item.Flag = !item.Flag;                  item.Age++;                  item.Date = new DateTime(now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second' now.Millisecond' DateTimeKind.Utc);                  await localTable.UpdateAsync(item);                  test.AddLog("Item has been updated");                    var newItem = new OfflineReadyItem(rndGen);                  test.AddLog("Adding a new item to the local table: {0}"' newItem);                  await localTable.InsertAsync(newItem);                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Pushing the new changes to the server");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer += 2;                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Push done. Verifying changes on the server");                  serverItem = await remoteTable.LookupAsync(item.Id);                  requestsSentToServer++;                  if (serverItem.Equals(item))                  {                      test.AddLog("Updated items are the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    serverItem = await remoteTable.LookupAsync(newItem.Id);                  requestsSentToServer++;                  if (serverItem.Equals(newItem))                  {                      test.AddLog("New inserted item is the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    test.AddLog("Cleaning up");                  await localTable.DeleteAsync(item);                  await localTable.DeleteAsync(newItem);                  test.AddLog("Local table cleaned up. Now sync'ing once more");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer += 2;                  if (!validateRequestCount(requestsSentToServer)) return false;                  test.AddLog("Done");                  return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateBasicTest,The following statement contains a magic number: return new ZumoTest("Basic offline scenario"' async delegate(ZumoTest test)              {                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    CountingHandler handler = new CountingHandler();                  var requestsSentToServer = 0;                  var offlineReadyClient = CreateClient(handler);                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItem>();                    await offlineReadyClient.SyncContext.InitializeAsync(localStore);                  test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItem>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItem>();                    var item = new OfflineReadyItem(rndGen);                  await localTable.InsertAsync(item);                  test.AddLog("Inserted the item to the local store:"' item);                    test.AddLog("Validating that the item is not in the server table");                  try                  {                      requestsSentToServer++;                      await remoteTable.LookupAsync(item.Id);                      test.AddLog("Error' item is present in the server");                      return false;                  }                  catch (MobileServiceInvalidOperationException ex)                  {                      test.AddLog("Ok' item is not in the server: {0}"' ex.Message);                  }                    Func<int' bool> validateRequestCount = expectedCount =>                  {                      test.AddLog("So far {0} requests sent to the server"' handler.RequestCount);                      if (handler.RequestCount != expectedCount)                      {                          test.AddLog("Error' expected {0} requests to have been sent to the server"' expectedCount);                          return false;                      }                      else                      {                          return true;                      }                  };                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Pushing changes to the server");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer++;                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Push done; now verifying that item is in the server");                    var serverItem = await remoteTable.LookupAsync(item.Id);                  requestsSentToServer++;                  test.AddLog("Retrieved item from server: {0}"' serverItem);                  if (serverItem.Equals(item))                  {                      test.AddLog("Items are the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    test.AddLog("Now updating the item locally");                  item.Flag = !item.Flag;                  item.Age++;                  item.Date = new DateTime(now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second' now.Millisecond' DateTimeKind.Utc);                  await localTable.UpdateAsync(item);                  test.AddLog("Item has been updated");                    var newItem = new OfflineReadyItem(rndGen);                  test.AddLog("Adding a new item to the local table: {0}"' newItem);                  await localTable.InsertAsync(newItem);                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Pushing the new changes to the server");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer += 2;                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Push done. Verifying changes on the server");                  serverItem = await remoteTable.LookupAsync(item.Id);                  requestsSentToServer++;                  if (serverItem.Equals(item))                  {                      test.AddLog("Updated items are the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    serverItem = await remoteTable.LookupAsync(newItem.Id);                  requestsSentToServer++;                  if (serverItem.Equals(newItem))                  {                      test.AddLog("New inserted item is the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    test.AddLog("Cleaning up");                  await localTable.DeleteAsync(item);                  await localTable.DeleteAsync(newItem);                  test.AddLog("Local table cleaned up. Now sync'ing once more");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer += 2;                  if (!validateRequestCount(requestsSentToServer)) return false;                  test.AddLog("Done");                  return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateBasicTest,The following statement contains a magic number: return new ZumoTest("Basic offline scenario"' async delegate(ZumoTest test)              {                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    CountingHandler handler = new CountingHandler();                  var requestsSentToServer = 0;                  var offlineReadyClient = CreateClient(handler);                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItem>();                    await offlineReadyClient.SyncContext.InitializeAsync(localStore);                  test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItem>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItem>();                    var item = new OfflineReadyItem(rndGen);                  await localTable.InsertAsync(item);                  test.AddLog("Inserted the item to the local store:"' item);                    test.AddLog("Validating that the item is not in the server table");                  try                  {                      requestsSentToServer++;                      await remoteTable.LookupAsync(item.Id);                      test.AddLog("Error' item is present in the server");                      return false;                  }                  catch (MobileServiceInvalidOperationException ex)                  {                      test.AddLog("Ok' item is not in the server: {0}"' ex.Message);                  }                    Func<int' bool> validateRequestCount = expectedCount =>                  {                      test.AddLog("So far {0} requests sent to the server"' handler.RequestCount);                      if (handler.RequestCount != expectedCount)                      {                          test.AddLog("Error' expected {0} requests to have been sent to the server"' expectedCount);                          return false;                      }                      else                      {                          return true;                      }                  };                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Pushing changes to the server");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer++;                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Push done; now verifying that item is in the server");                    var serverItem = await remoteTable.LookupAsync(item.Id);                  requestsSentToServer++;                  test.AddLog("Retrieved item from server: {0}"' serverItem);                  if (serverItem.Equals(item))                  {                      test.AddLog("Items are the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    test.AddLog("Now updating the item locally");                  item.Flag = !item.Flag;                  item.Age++;                  item.Date = new DateTime(now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second' now.Millisecond' DateTimeKind.Utc);                  await localTable.UpdateAsync(item);                  test.AddLog("Item has been updated");                    var newItem = new OfflineReadyItem(rndGen);                  test.AddLog("Adding a new item to the local table: {0}"' newItem);                  await localTable.InsertAsync(newItem);                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Pushing the new changes to the server");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer += 2;                    if (!validateRequestCount(requestsSentToServer)) return false;                    test.AddLog("Push done. Verifying changes on the server");                  serverItem = await remoteTable.LookupAsync(item.Id);                  requestsSentToServer++;                  if (serverItem.Equals(item))                  {                      test.AddLog("Updated items are the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    serverItem = await remoteTable.LookupAsync(newItem.Id);                  requestsSentToServer++;                  if (serverItem.Equals(newItem))                  {                      test.AddLog("New inserted item is the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    test.AddLog("Cleaning up");                  await localTable.DeleteAsync(item);                  await localTable.DeleteAsync(newItem);                  test.AddLog("Local table cleaned up. Now sync'ing once more");                  await offlineReadyClient.SyncContext.PushAsync();                  requestsSentToServer += 2;                  if (!validateRequestCount(requestsSentToServer)) return false;                  test.AddLog("Done");                  return true;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateNoOptimisticConcurrencyTest,The following statement contains a magic number: return new ZumoTest("Offline without version column"' async delegate(ZumoTest test)              {                  if (ZumoTestGlobals.Instance.IsNetRuntime)                  {                      return true;                  }                    DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    var offlineReadyClient = CreateClient();                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItemNoVersion>();                    await offlineReadyClient.SyncContext.InitializeAsync(localStore);                  test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItemNoVersion>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItemNoVersion>();                    var item = new OfflineReadyItemNoVersion(rndGen);                  await localTable.InsertAsync(item);                  test.AddLog("Inserted the item to the local store:"' item);                    await offlineReadyClient.SyncContext.PushAsync();                  test.AddLog("Pushed the changes to the server");                    var serverItem = await remoteTable.LookupAsync(item.Id);                  serverItem.Name = "changed name";                  serverItem.Age = 0;                  await remoteTable.UpdateAsync(serverItem);                  test.AddLog("Server item updated (changes will be overwritten later");                    item.Age = item.Age + 1;                  item.Name = item.Name + " - modified";                  await localTable.UpdateAsync(item);                  test.AddLog("Updated item locally' will now push changes to the server: {0}"' item);                  await offlineReadyClient.SyncContext.PushAsync();                    serverItem = await remoteTable.LookupAsync(item.Id);                  test.AddLog("Retrieved the item from the server: {0}"' serverItem);                    if (serverItem.Equals(item))                  {                      test.AddLog("Items are the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    test.AddLog("Cleaning up");                  await localTable.DeleteAsync(item);                  test.AddLog("Local table cleaned up. Now sync'ing once more");                  await offlineReadyClient.SyncContext.PushAsync();                  test.AddLog("Done");                  return true;              });
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateNoOptimisticConcurrencyTest,The following statement contains a magic number: return new ZumoTest("Offline without version column"' async delegate(ZumoTest test)              {                  if (ZumoTestGlobals.Instance.IsNetRuntime)                  {                      return true;                  }                    DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    var offlineReadyClient = CreateClient();                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItemNoVersion>();                    await offlineReadyClient.SyncContext.InitializeAsync(localStore);                  test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItemNoVersion>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItemNoVersion>();                    var item = new OfflineReadyItemNoVersion(rndGen);                  await localTable.InsertAsync(item);                  test.AddLog("Inserted the item to the local store:"' item);                    await offlineReadyClient.SyncContext.PushAsync();                  test.AddLog("Pushed the changes to the server");                    var serverItem = await remoteTable.LookupAsync(item.Id);                  serverItem.Name = "changed name";                  serverItem.Age = 0;                  await remoteTable.UpdateAsync(serverItem);                  test.AddLog("Server item updated (changes will be overwritten later");                    item.Age = item.Age + 1;                  item.Name = item.Name + " - modified";                  await localTable.UpdateAsync(item);                  test.AddLog("Updated item locally' will now push changes to the server: {0}"' item);                  await offlineReadyClient.SyncContext.PushAsync();                    serverItem = await remoteTable.LookupAsync(item.Id);                  test.AddLog("Retrieved the item from the server: {0}"' serverItem);                    if (serverItem.Equals(item))                  {                      test.AddLog("Items are the same");                  }                  else                  {                      test.AddLog("Items are different. Local: {0}; remote: {1}"' item' serverItem);                      return false;                  }                    test.AddLog("Cleaning up");                  await localTable.DeleteAsync(item);                  test.AddLog("Local table cleaned up. Now sync'ing once more");                  await offlineReadyClient.SyncContext.PushAsync();                  test.AddLog("Done");                  return true;              });
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateSyncConflictTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    var offlineReadyClient = CreateClient();                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItem>();                    ConflictResolvingSyncHandler<OfflineReadyItem>.ConflictResolution conflictHandlingPolicy;                  conflictHandlingPolicy = (client' server) =>                          new OfflineReadyItem                          {                              Id = client.Id'                              Age = Math.Max(client.Age' server.Age)'                              Date = client.Date > server.Date ? client.Date : server.Date'                              Flag = client.Flag || server.Flag'                              FloatingNumber = Math.Max(client.FloatingNumber' server.FloatingNumber)'                              Name = client.Name                          };                  if (resolveConflictsOnClient)                  {                      var handler = new ConflictResolvingSyncHandler<OfflineReadyItem>(test' offlineReadyClient' conflictHandlingPolicy);                      await offlineReadyClient.SyncContext.InitializeAsync(localStore' handler);                  }                  else                  {                      await offlineReadyClient.SyncContext.InitializeAsync(localStore);                  }                    test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItem>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItem>();                    await localTable.PurgeAsync();                  test.AddLog("Removed all items from the local table");                    var item = new OfflineReadyItem(rndGen);                  await remoteTable.InsertAsync(item);                  test.AddLog("Inserted the item to the remote store:"' item);                    var pullQuery = "$filter=id eq '" + item.Id + "'";                  await localTable.PullAsync(null' pullQuery);                    test.AddLog("Changing the item on the server");                  item.Age++;                  await remoteTable.UpdateAsync(item);                  test.AddLog("Updated the item: {0}"' item);                    var localItem = await localTable.LookupAsync(item.Id);                  test.AddLog("Retrieved the item from the local table' now updating it");                  localItem.Date = localItem.Date.AddDays(1);                  await localTable.UpdateAsync(localItem);                  test.AddLog("Updated the item on the local table");                    test.AddLog("Now trying to pull changes from the server (will trigger a push)");                  bool testResult = true;                  try                  {                      await localTable.PullAsync(null' pullQuery);                      if (!autoResolve)                      {                          test.AddLog("Error' pull (push) should have caused a conflict' but none happened.");                          testResult = false;                      }                      else                      {                          var expectedMergedItem = conflictHandlingPolicy(localItem' item);                          var localMergedItem = await localTable.LookupAsync(item.Id);                          if (localMergedItem.Equals(expectedMergedItem))                          {                              test.AddLog("Item was merged correctly.");                          }                          else                          {                              test.AddLog("Error' item not merged correctly. Expected: {0}' Actual: {1}"' expectedMergedItem' localMergedItem);                              testResult = false;                          }                      }                  }                  catch (MobileServicePushFailedException ex)                  {                      test.AddLog("Push exception: {0}"' ex);                      if (autoResolve)                      {                          test.AddLog("Error' push should have succeeded.");                          testResult = false;                      }                      else                      {                          test.AddLog("Expected exception was thrown.");                      }                  }                    test.AddLog("Cleaning up");                  await localTable.DeleteAsync(item);                  test.AddLog("Local table cleaned up. Now sync'ing once more");                  await offlineReadyClient.SyncContext.PushAsync();                  test.AddLog("Done");                    return testResult;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoOfflineTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoOfflineTests.cs,CreateSyncConflictTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  DateTime now = DateTime.UtcNow;                  int seed = now.Year * 10000 + now.Month * 100 + now.Day;                  test.AddLog("Using random seed: {0}"' seed);                  Random rndGen = new Random(seed);                    var offlineReadyClient = CreateClient();                    var localStore = new MobileServiceSQLiteStore(StoreFileName);                  test.AddLog("Defined the table on the local store");                  localStore.DefineTable<OfflineReadyItem>();                    ConflictResolvingSyncHandler<OfflineReadyItem>.ConflictResolution conflictHandlingPolicy;                  conflictHandlingPolicy = (client' server) =>                          new OfflineReadyItem                          {                              Id = client.Id'                              Age = Math.Max(client.Age' server.Age)'                              Date = client.Date > server.Date ? client.Date : server.Date'                              Flag = client.Flag || server.Flag'                              FloatingNumber = Math.Max(client.FloatingNumber' server.FloatingNumber)'                              Name = client.Name                          };                  if (resolveConflictsOnClient)                  {                      var handler = new ConflictResolvingSyncHandler<OfflineReadyItem>(test' offlineReadyClient' conflictHandlingPolicy);                      await offlineReadyClient.SyncContext.InitializeAsync(localStore' handler);                  }                  else                  {                      await offlineReadyClient.SyncContext.InitializeAsync(localStore);                  }                    test.AddLog("Initialized the store and sync context");                    var localTable = offlineReadyClient.GetSyncTable<OfflineReadyItem>();                  var remoteTable = offlineReadyClient.GetTable<OfflineReadyItem>();                    await localTable.PurgeAsync();                  test.AddLog("Removed all items from the local table");                    var item = new OfflineReadyItem(rndGen);                  await remoteTable.InsertAsync(item);                  test.AddLog("Inserted the item to the remote store:"' item);                    var pullQuery = "$filter=id eq '" + item.Id + "'";                  await localTable.PullAsync(null' pullQuery);                    test.AddLog("Changing the item on the server");                  item.Age++;                  await remoteTable.UpdateAsync(item);                  test.AddLog("Updated the item: {0}"' item);                    var localItem = await localTable.LookupAsync(item.Id);                  test.AddLog("Retrieved the item from the local table' now updating it");                  localItem.Date = localItem.Date.AddDays(1);                  await localTable.UpdateAsync(localItem);                  test.AddLog("Updated the item on the local table");                    test.AddLog("Now trying to pull changes from the server (will trigger a push)");                  bool testResult = true;                  try                  {                      await localTable.PullAsync(null' pullQuery);                      if (!autoResolve)                      {                          test.AddLog("Error' pull (push) should have caused a conflict' but none happened.");                          testResult = false;                      }                      else                      {                          var expectedMergedItem = conflictHandlingPolicy(localItem' item);                          var localMergedItem = await localTable.LookupAsync(item.Id);                          if (localMergedItem.Equals(expectedMergedItem))                          {                              test.AddLog("Item was merged correctly.");                          }                          else                          {                              test.AddLog("Error' item not merged correctly. Expected: {0}' Actual: {1}"' expectedMergedItem' localMergedItem);                              testResult = false;                          }                      }                  }                  catch (MobileServicePushFailedException ex)                  {                      test.AddLog("Push exception: {0}"' ex);                      if (autoResolve)                      {                          test.AddLog("Error' push should have succeeded.");                          testResult = false;                      }                      else                      {                          test.AddLog("Expected exception was thrown.");                      }                  }                    test.AddLog("Cleaning up");                  await localTable.DeleteAsync(item);                  test.AddLog("Local table cleaned up. Now sync'ing once more");                  await offlineReadyClient.SyncContext.PushAsync();                  test.AddLog("Done");                    return testResult;              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateBadgePushTest(4));
Magic Number,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,BuildXmlToastPayload,The following statement contains a magic number: binding.Add(new XElement("text"' new XAttribute("id"' 2)' new XText(text2)));
Magic Number,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,BuildXmlToastPayload,The following statement contains a magic number: binding.Add(new XElement("text"' new XAttribute("id"' 3)' new XText(text3)));
Magic Number,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreatePushTest,The following statement contains a magic number: testName += payloadString.Length < 15 ? payloadString : (payloadString.Substring(0' 15) + "...");
Magic Number,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreatePushTest,The following statement contains a magic number: testName += payloadString.Length < 15 ? payloadString : (payloadString.Substring(0' 15) + "...");
Magic Number,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreatePushTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  test.AddLog("Test for method {0}' with payload {1}"' wnsMethod' payload);                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable(ZumoTestGlobals.PushTestTableName);                    // Workaround for multiple registration bug                  ZumoPushTests.pushesReceived.Clear();                    PushWatcher watcher = new PushWatcher();                  var item = new JObject();                  item.Add("method"' wnsMethod);                  item.Add("channelUri"' pushChannelUri);                  item.Add("payload"' payload);                  item.Add("xmlPayload"' expectedResult.ToString());                  item.Add("templateNotification"' ZumoPushTestGlobals.TemplateNotification);                  if (ZumoTestGlobals.Instance.IsNHPushEnabled)                  {                      item.Add("usingNH"' true);                      item.Add("nhNotificationType"' nhNotificationType);                  }                  var pushResult = await table.InsertAsync(item);                  test.AddLog("Push result: {0}"' pushResult);                  var notificationResult = await watcher.WaitForPush(TimeSpan.FromSeconds(10));                  if (notificationResult == null)                  {                      test.AddLog("Error' push not received on the timeout allowed");                      return false;                  }                  else                  {                      test.AddLog("Push notification received:");                      XElement receivedPushInfo = null;                      switch (notificationResult.NotificationType)                      {                          case PushNotificationType.Raw:                              if (nhNotificationType == "template")                              {                                  receivedPushInfo = XElement.Parse(notificationResult.RawNotification.Content);                              }                              else                              {                                  receivedPushInfo = new XElement("raw"' new XText(notificationResult.RawNotification.Content));                              }                              break;                          case PushNotificationType.Toast:                              receivedPushInfo = XElement.Parse(notificationResult.ToastNotification.Content.GetXml());                              break;                          case PushNotificationType.Badge:                              receivedPushInfo = XElement.Parse(notificationResult.BadgeNotification.Content.GetXml());                              break;                          case PushNotificationType.Tile:                              receivedPushInfo = XElement.Parse(notificationResult.TileNotification.Content.GetXml());                              break;                      }                        test.AddLog("  {0}: {1}"' notificationResult.NotificationType' receivedPushInfo);                        bool passed;                      if (expectedResult.ToString(SaveOptions.DisableFormatting) == receivedPushInfo.ToString(SaveOptions.DisableFormatting))                      {                          test.AddLog("Received notification is the expected one.");                          passed = true;                      }                      else                      {                          test.AddLog("Received notification is not the expected one. Expected:");                          test.AddLog(expectedResult.ToString());                          test.AddLog("Actual:");                          test.AddLog(receivedPushInfo.ToString());                          passed = false;                      }                        await Task.Delay(5000); // leave some time between pushes                      return passed;                  }              }' templatePush ? ZumoTestGlobals.RuntimeFeatureNames.NH_PUSH_ENABLED : ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreatePushTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  test.AddLog("Test for method {0}' with payload {1}"' wnsMethod' payload);                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable(ZumoTestGlobals.PushTestTableName);                    // Workaround for multiple registration bug                  ZumoPushTests.pushesReceived.Clear();                    PushWatcher watcher = new PushWatcher();                  var item = new JObject();                  item.Add("method"' wnsMethod);                  item.Add("channelUri"' pushChannelUri);                  item.Add("payload"' payload);                  item.Add("xmlPayload"' expectedResult.ToString());                  item.Add("templateNotification"' ZumoPushTestGlobals.TemplateNotification);                  if (ZumoTestGlobals.Instance.IsNHPushEnabled)                  {                      item.Add("usingNH"' true);                      item.Add("nhNotificationType"' nhNotificationType);                  }                  var pushResult = await table.InsertAsync(item);                  test.AddLog("Push result: {0}"' pushResult);                  var notificationResult = await watcher.WaitForPush(TimeSpan.FromSeconds(10));                  if (notificationResult == null)                  {                      test.AddLog("Error' push not received on the timeout allowed");                      return false;                  }                  else                  {                      test.AddLog("Push notification received:");                      XElement receivedPushInfo = null;                      switch (notificationResult.NotificationType)                      {                          case PushNotificationType.Raw:                              if (nhNotificationType == "template")                              {                                  receivedPushInfo = XElement.Parse(notificationResult.RawNotification.Content);                              }                              else                              {                                  receivedPushInfo = new XElement("raw"' new XText(notificationResult.RawNotification.Content));                              }                              break;                          case PushNotificationType.Toast:                              receivedPushInfo = XElement.Parse(notificationResult.ToastNotification.Content.GetXml());                              break;                          case PushNotificationType.Badge:                              receivedPushInfo = XElement.Parse(notificationResult.BadgeNotification.Content.GetXml());                              break;                          case PushNotificationType.Tile:                              receivedPushInfo = XElement.Parse(notificationResult.TileNotification.Content.GetXml());                              break;                      }                        test.AddLog("  {0}: {1}"' notificationResult.NotificationType' receivedPushInfo);                        bool passed;                      if (expectedResult.ToString(SaveOptions.DisableFormatting) == receivedPushInfo.ToString(SaveOptions.DisableFormatting))                      {                          test.AddLog("Received notification is the expected one.");                          passed = true;                      }                      else                      {                          test.AddLog("Received notification is not the expected one. Expected:");                          test.AddLog(expectedResult.ToString());                          test.AddLog("Actual:");                          test.AddLog(receivedPushInfo.ToString());                          passed = false;                      }                        await Task.Delay(5000); // leave some time between pushes                      return passed;                  }              }' templatePush ? ZumoTestGlobals.RuntimeFeatureNames.NH_PUSH_ENABLED : ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,PushWatcher,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,WaitForPush,The following statement contains a magic number: await Task.Delay(500);
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("GreaterThan and LessThan - Movies from the 90s"' m => m.Year > 1989 && m.Year < 2000));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("GreaterThan and LessThan - Movies from the 90s"' m => m.Year > 1989 && m.Year < 2000));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("GreaterEqual and LessEqual - Movies from the 90s"' m => m.Year >= 1990 && m.Year <= 1999));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("GreaterEqual and LessEqual - Movies from the 90s"' m => m.Year >= 1990 && m.Year <= 1999));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Compound statement - OR of ANDs - Movies from the 30s and 50s"'                  m => ((m.Year >= 1930) && (m.Year < 1940)) || ((m.Year >= 1950) && (m.Year < 1960))));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Compound statement - OR of ANDs - Movies from the 30s and 50s"'                  m => ((m.Year >= 1930) && (m.Year < 1940)) || ((m.Year >= 1950) && (m.Year < 1960))));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Compound statement - OR of ANDs - Movies from the 30s and 50s"'                  m => ((m.Year >= 1930) && (m.Year < 1940)) || ((m.Year >= 1950) && (m.Year < 1960))));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Compound statement - OR of ANDs - Movies from the 30s and 50s"'                  m => ((m.Year >= 1930) && (m.Year < 1940)) || ((m.Year >= 1950) && (m.Year < 1960))));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Division' equal and different - Movies from the year 2000 with rating other than R"'                  m => ((m.Year / 1000.0) == 2) && (m.MPAARating != "R")));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Division' equal and different - Movies from the year 2000 with rating other than R"'                  m => ((m.Year / 1000.0) == 2) && (m.MPAARating != "R")));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"'                  m => ((m.Year - 1900) >= 80) && (m.Year + 10 < 2000) && (m.Duration < 120)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"'                  m => ((m.Year - 1900) >= 80) && (m.Year + 10 < 2000) && (m.Duration < 120)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"'                  m => ((m.Year - 1900) >= 80) && (m.Year + 10 < 2000) && (m.Duration < 120)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"'                  m => ((m.Year - 1900) >= 80) && (m.Year + 10 < 2000) && (m.Duration < 120)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"'                  m => ((m.Year - 1900) >= 80) && (m.Year + 10 < 2000) && (m.Duration < 120)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("GreaterThan and LessThan - Movies from the 90s"' m => m.Year > 1989 && m.Year < 2000));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("GreaterThan and LessThan - Movies from the 90s"' m => m.Year > 1989 && m.Year < 2000));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("GreaterEqual and LessEqual - Movies from the 90s"' m => m.Year >= 1990 && m.Year <= 1999));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("GreaterEqual and LessEqual - Movies from the 90s"' m => m.Year >= 1990 && m.Year <= 1999));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Compound statement - OR of ANDs - Movies from the 30s and 50s"'                  m => ((m.Year >= 1930) && (m.Year < 1940)) || ((m.Year >= 1950) && (m.Year < 1960))));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Compound statement - OR of ANDs - Movies from the 30s and 50s"'                  m => ((m.Year >= 1930) && (m.Year < 1940)) || ((m.Year >= 1950) && (m.Year < 1960))));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Compound statement - OR of ANDs - Movies from the 30s and 50s"'                  m => ((m.Year >= 1930) && (m.Year < 1940)) || ((m.Year >= 1950) && (m.Year < 1960))));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Compound statement - OR of ANDs - Movies from the 30s and 50s"'                  m => ((m.Year >= 1930) && (m.Year < 1940)) || ((m.Year >= 1950) && (m.Year < 1960))));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Division' equal and different - Movies from the year 2000 with rating other than R"'                  m => ((m.Year / 1000.0) == 2) && (m.MPAARating != "R")));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Division' equal and different - Movies from the year 2000 with rating other than R"'                  m => ((m.Year / 1000.0) == 2) && (m.MPAARating != "R")));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"'                  m => ((m.Year - 1900) >= 80) && (m.Year + 10 < 2000) && (m.Duration < 120)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"'                  m => ((m.Year - 1900) >= 80) && (m.Year + 10 < 2000) && (m.Duration < 120)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"'                  m => ((m.Year - 1900) >= 80) && (m.Year + 10 < 2000) && (m.Duration < 120)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"'                  m => ((m.Year - 1900) >= 80) && (m.Year + 10 < 2000) && (m.Duration < 120)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Addition' subtraction' relational' AND - Movies from the 1980s which last less than 2 hours"'                  m => ((m.Year - 1900) >= 80) && (m.Year + 10 < 2000) && (m.Duration < 120)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("String: StartsWith - Movies which starts with 'The'"'                  m => m.Title.StartsWith("The")' 100));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("String: StartsWith' case insensitive - Movies which start with 'the'"'                  m => m.Title.ToLower().StartsWith("the")' 100));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("String: Length - Movies with small names"'                  m => m.Title.Length < 10' 200));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("String: Length - Movies with small names"'                  m => m.Title.Length < 10' 200));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("String: Concat - Movies rated 'PG' or 'PG-13' from the 2000s"'                  m => m.Year >= 2000 && string.Concat(m.MPAARating' "-13").StartsWith("PG-13")));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("String: StartsWith - Movies which starts with 'The'"'                  m => m.Title.StartsWith("The")' 100));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("String: StartsWith' case insensitive - Movies which start with 'the'"'                  m => m.Title.ToLower().StartsWith("the")' 100));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("String: Length - Movies with small names"'                  m => m.Title.Length < 10' 200));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("String: Length - Movies with small names"'                  m => m.Title.Length < 10' 200));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("String: Concat - Movies rated 'PG' or 'PG-13' from the 2000s"'                  m => m.Year >= 2000 && string.Concat(m.MPAARating' "-13").StartsWith("PG-13")));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("String equals - Movies since 1980 with rating PG-13"'                  m => m.Year >= 1980 && m.MPAARating == "PG-13"' 100));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("String equals - Movies since 1980 with rating PG-13"'                  m => m.Year >= 1980 && m.MPAARating == "PG-13"' 100));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("String field' comparison to null - Movies since 1980 without a MPAA rating"'                  m => m.Year >= 1980 && m.MPAARating == null));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("String field' comparison (not equal) to null - Movies before 1970 with a MPAA rating"'                  m => m.Year < 1970 && m.MPAARating != null));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("String equals - Movies since 1980 with rating PG-13"'                  m => m.Year >= 1980 && m.MPAARating == "PG-13"' 100));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("String equals - Movies since 1980 with rating PG-13"'                  m => m.Year >= 1980 && m.MPAARating == "PG-13"' 100));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("String field' comparison to null - Movies since 1980 without a MPAA rating"'                  m => m.Year >= 1980 && m.MPAARating == null));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("String field' comparison (not equal) to null - Movies before 1970 with a MPAA rating"'                  m => m.Year < 1970 && m.MPAARating != null));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Floor - Movies which last more than 3 hours"'                  m => Math.Floor(m.Duration / 60.0) >= 3));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Floor - Movies which last more than 3 hours"'                  m => Math.Floor(m.Duration / 60.0) >= 3));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Ceiling - Best picture winners which last at most 2 hours"'                  m => m.BestPictureWinner == true && Math.Ceiling(m.Duration / 60.0) == 2));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Ceiling - Best picture winners which last at most 2 hours"'                  m => m.BestPictureWinner == true && Math.Ceiling(m.Duration / 60.0) == 2));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Round - Best picture winners which last more than 2.5 hours"'                  m => m.BestPictureWinner == true && Math.Round(m.Duration / 60.0) > 2));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Round - Best picture winners which last more than 2.5 hours"'                  m => m.BestPictureWinner == true && Math.Round(m.Duration / 60.0) > 2));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Floor - Movies which last more than 3 hours"'                  m => Math.Floor(m.Duration / 60.0) >= 3));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Floor - Movies which last more than 3 hours"'                  m => Math.Floor(m.Duration / 60.0) >= 3));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Ceiling - Best picture winners which last at most 2 hours"'                  m => m.BestPictureWinner == true && Math.Ceiling(m.Duration / 60.0) == 2));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Ceiling - Best picture winners which last at most 2 hours"'                  m => m.BestPictureWinner == true && Math.Ceiling(m.Duration / 60.0) == 2));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Round - Best picture winners which last more than 2.5 hours"'                  m => m.BestPictureWinner == true && Math.Round(m.Duration / 60.0) > 2));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Round - Best picture winners which last more than 2.5 hours"'                  m => m.BestPictureWinner == true && Math.Round(m.Duration / 60.0) > 2));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Greater than' less than - Movies with release date in the 70s"'                  m => m.ReleaseDate > new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1971' 1' 1' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Greater than' less than - Movies with release date in the 70s"'                  m => m.ReleaseDate > new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1971' 1' 1' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Greater than' less than - Movies with release date in the 70s"'                  m => m.ReleaseDate > new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1971' 1' 1' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Greater than' less than - Movies with release date in the 70s"'                  m => m.ReleaseDate > new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1971' 1' 1' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Equal - Movies released on 1994-10-14 (Shawshank Redemption / Pulp Fiction)"'                  m => m.ReleaseDate == new DateTime(1994' 10' 14' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Equal - Movies released on 1994-10-14 (Shawshank Redemption / Pulp Fiction)"'                  m => m.ReleaseDate == new DateTime(1994' 10' 14' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date: Equal - Movies released on 1994-10-14 (Shawshank Redemption / Pulp Fiction)"'                  m => m.ReleaseDate == new DateTime(1994' 10' 14' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Greater than' less than - Movies with release date in the 70s"'                  m => m.ReleaseDate > new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1971' 1' 1' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Greater than' less than - Movies with release date in the 70s"'                  m => m.ReleaseDate > new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1971' 1' 1' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Greater than' less than - Movies with release date in the 70s"'                  m => m.ReleaseDate > new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1971' 1' 1' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Greater than' less than - Movies with release date in the 70s"'                  m => m.ReleaseDate > new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1971' 1' 1' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Greater than' less than - Movies with release date in the 80s"'                  m => m.ReleaseDate >= new DateTime(1980' 1' 1' 0' 0' 0' DateTimeKind.Utc) &&                      m.ReleaseDate < new DateTime(1989' 12' 31' 23' 59' 59' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Equal - Movies released on 1994-10-14 (Shawshank Redemption / Pulp Fiction)"'                  m => m.ReleaseDate == new DateTime(1994' 10' 14' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Equal - Movies released on 1994-10-14 (Shawshank Redemption / Pulp Fiction)"'                  m => m.ReleaseDate == new DateTime(1994' 10' 14' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date: Equal - Movies released on 1994-10-14 (Shawshank Redemption / Pulp Fiction)"'                  m => m.ReleaseDate == new DateTime(1994' 10' 14' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date (month): Movies released in November"'                  m => m.ReleaseDate.Month == 11));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Date (year): Movies whose year is different than its release year"'                  m => m.ReleaseDate.Year != m.Year' 100));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date (month): Movies released in November"'                  m => m.ReleaseDate.Month == 11));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Date (year): Movies whose year is different than its release year"'                  m => m.ReleaseDate.Year != m.Year' 100));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Bool: equal to true - Best picture winners before 1950"'                  m => m.Year < 1950 && m.BestPictureWinner == true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Bool: equal to false - Best picture winners after 2000"'                  m => m.Year >= 2000 && !(m.BestPictureWinner == false)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Bool: not equal to false - Best picture winners after 2000"'                  m => m.BestPictureWinner != false && m.Year >= 2000));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Bool: equal to true - Best picture winners before 1950"'                  m => m.Year < 1950 && m.BestPictureWinner == true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Bool: equal to false - Best picture winners after 2000"'                  m => m.Year >= 2000 && !(m.BestPictureWinner == false)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Bool: not equal to false - Best picture winners after 2000"'                  m => m.BestPictureWinner != false && m.Year >= 2000));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Get all using large $top - 500"' null' 500));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Skip all using large skip - 500"' null' null' 500));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Get first ($top) - 10"' null' 10));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Get last ($skip) - 10"' null' null' ZumoQueryTestData.AllMovies.Length - 10));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Skip' take' includeTotalCount - movies 11-20' ordered by title"'                  null' 10' 10' new[] { new OrderByClause("Title"' true) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Skip' take' includeTotalCount - movies 11-20' ordered by title"'                  null' 10' 10' new[] { new OrderByClause("Title"' true) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Skip' take' filter includeTotalCount - movies 11-20 which won a best picture award' ordered by year"'                  m => m.BestPictureWinner == true' 10' 10' new[] { new OrderByClause("Year"' false) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Skip' take' filter includeTotalCount - movies 11-20 which won a best picture award' ordered by year"'                  m => m.BestPictureWinner == true' 10' 10' new[] { new OrderByClause("Year"' false) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Get all using large $top - 500"' null' 500));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Skip all using large skip - 500"' null' null' 500));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Get first ($top) - 10"' null' 10));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Get last ($skip) - 10"' null' null' ZumoQueryTestData.AllStringIdMovies().Length - 10));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Skip' take' includeTotalCount - movies 11-20' ordered by title"'                  null' 10' 10' new[] { new OrderByClause("Title"' true) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Skip' take' includeTotalCount - movies 11-20' ordered by title"'                  null' 10' 10' new[] { new OrderByClause("Title"' true) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Skip' take' filter includeTotalCount - movies 11-20 which won a best picture award' ordered by year"'                  m => m.BestPictureWinner == true' 10' 10' new[] { new OrderByClause("Year"' false) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Skip' take' filter includeTotalCount - movies 11-20 which won a best picture award' ordered by year"'                  m => m.BestPictureWinner == true' 10' 10' new[] { new OrderByClause("Year"' false) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Order by date and string - 50 movies' ordered by release date' then title"'                  null' 50' null' new[] { new OrderByClause("ReleaseDate"' false)' new OrderByClause("Title"' true) }));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Order by number - 30 shortest movies since 1970"'                  m => m.Year >= 1970' 30' null' new[] { new OrderByClause("Duration"' true)' new OrderByClause("Title"' true) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Order by number - 30 shortest movies since 1970"'                  m => m.Year >= 1970' 30' null' new[] { new OrderByClause("Duration"' true)' new OrderByClause("Title"' true) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Order by date and string - 50 movies' ordered by release date' then title"'                  null' 50' null' new[] { new OrderByClause("ReleaseDate"' false)' new OrderByClause("Title"' true) }));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Order by number - 30 shortest movies since 1970"'                  m => m.Year >= 1970' 30' null' new[] { new OrderByClause("Duration"' true)' new OrderByClause("Title"' true) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Order by number - 30 shortest movies since 1970"'                  m => m.Year >= 1970' 30' null' new[] { new OrderByClause("Duration"' true)' new OrderByClause("Title"' true) }' null' true));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Select one field - Only title of movies from 2008"'                  m => m.Year == 2008' null' null' null' m => m.Title));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Select multiple fields - Nicely formatted list of movies from the 2000's"'                  m => m.Year >= 2000' 200' null' new[] { new OrderByClause("ReleaseDate"' false)' new OrderByClause("Title"' true) }'                  m => string.Format("{0} {1} - {2} minutes"' m.Title.PadRight(30)' m.BestPictureWinner ? "(best picture)" : ""' m.Duration)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Select multiple fields - Nicely formatted list of movies from the 2000's"'                  m => m.Year >= 2000' 200' null' new[] { new OrderByClause("ReleaseDate"' false)' new OrderByClause("Title"' true) }'                  m => string.Format("{0} {1} - {2} minutes"' m.Title.PadRight(30)' m.BestPictureWinner ? "(best picture)" : ""' m.Duration)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Select multiple fields - Nicely formatted list of movies from the 2000's"'                  m => m.Year >= 2000' 200' null' new[] { new OrderByClause("ReleaseDate"' false)' new OrderByClause("Title"' true) }'                  m => string.Format("{0} {1} - {2} minutes"' m.Title.PadRight(30)' m.BestPictureWinner ? "(best picture)" : ""' m.Duration)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Select one field - Only title of movies from 2008"'                  m => m.Year == 2008' null' null' null' m => m.Title));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Select multiple fields - Nicely formatted list of movies from the 2000's"'                  m => m.Year >= 2000' 200' null' new[] { new OrderByClause("ReleaseDate"' false)' new OrderByClause("Title"' true) }'                  m => string.Format("{0} {1} - {2} minutes"' m.Title.PadRight(30)' m.BestPictureWinner ? "(best picture)" : ""' m.Duration)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Select multiple fields - Nicely formatted list of movies from the 2000's"'                  m => m.Year >= 2000' 200' null' new[] { new OrderByClause("ReleaseDate"' false)' new OrderByClause("Title"' true) }'                  m => string.Format("{0} {1} - {2} minutes"' m.Title.PadRight(30)' m.BestPictureWinner ? "(best picture)" : ""' m.Duration)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Select multiple fields - Nicely formatted list of movies from the 2000's"'                  m => m.Year >= 2000' 200' null' new[] { new OrderByClause("ReleaseDate"' false)' new OrderByClause("Title"' true) }'                  m => string.Format("{0} {1} - {2} minutes"' m.Title.PadRight(30)' m.BestPictureWinner ? "(best picture)" : ""' m.Duration)));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Passing OData query directly - movies from the 80's' ordered by Title' items 3' 4 and 5"'                  whereClause: m => m.Year >= 1980 && m.Year <= 1989'                  top: 3' skip: 2'                  orderBy: new OrderByClause[] { new OrderByClause("Title"' true) }'                  odataQueryExpression: "$filter=((Year ge 1980) and (Year le 1989))&$top=3&$skip=2&$orderby=Title asc"));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Passing OData query directly - movies from the 80's' ordered by Title' items 3' 4 and 5"'                  whereClause: m => m.Year >= 1980 && m.Year <= 1989'                  top: 3' skip: 2'                  orderBy: new OrderByClause[] { new OrderByClause("Title"' true) }'                  odataQueryExpression: "$filter=((Year ge 1980) and (Year le 1989))&$top=3&$skip=2&$orderby=Title asc"));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Passing OData query directly - movies from the 80's' ordered by Title' items 3' 4 and 5"'                  whereClause: m => m.Year >= 1980 && m.Year <= 1989'                  top: 3' skip: 2'                  orderBy: new OrderByClause[] { new OrderByClause("Title"' true) }'                  odataQueryExpression: "$filter=((Year ge 1980) and (Year le 1989))&$top=3&$skip=2&$orderby=Title asc"));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestIntId("Passing OData query directly - movies from the 80's' ordered by Title' items 3' 4 and 5"'                  whereClause: m => m.Year >= 1980 && m.Year <= 1989'                  top: 3' skip: 2'                  orderBy: new OrderByClause[] { new OrderByClause("Title"' true) }'                  odataQueryExpression: "$filter=((Year ge 1980) and (Year le 1989))&$top=3&$skip=2&$orderby=Title asc"));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Passing OData query directly - movies from the 80's' ordered by Title' items 3' 4 and 5"'                  whereClause: m => m.Year >= 1980 && m.Year <= 1989'                  top: 3' skip: 2'                  orderBy: new OrderByClause[] { new OrderByClause("Title"' true) }'                  odataQueryExpression: "$filter=((Year ge 1980) and (Year le 1989))&$top=3&$skip=2&$orderby=Title asc"));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Passing OData query directly - movies from the 80's' ordered by Title' items 3' 4 and 5"'                  whereClause: m => m.Year >= 1980 && m.Year <= 1989'                  top: 3' skip: 2'                  orderBy: new OrderByClause[] { new OrderByClause("Title"' true) }'                  odataQueryExpression: "$filter=((Year ge 1980) and (Year le 1989))&$top=3&$skip=2&$orderby=Title asc"));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Passing OData query directly - movies from the 80's' ordered by Title' items 3' 4 and 5"'                  whereClause: m => m.Year >= 1980 && m.Year <= 1989'                  top: 3' skip: 2'                  orderBy: new OrderByClause[] { new OrderByClause("Title"' true) }'                  odataQueryExpression: "$filter=((Year ge 1980) and (Year le 1989))&$top=3&$skip=2&$orderby=Title asc"));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTestStringId("Passing OData query directly - movies from the 80's' ordered by Title' items 3' 4 and 5"'                  whereClause: m => m.Year >= 1980 && m.Year <= 1989'                  top: 3' skip: 2'                  orderBy: new OrderByClause[] { new OrderByClause("Title"' true) }'                  odataQueryExpression: "$filter=((Year ge 1980) and (Year le 1989))&$top=3&$skip=2&$orderby=Title asc"));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTest<Movie' MobileServiceInvalidOperationException>("[Int id] (Neg) Very large top value"' m => m.Year > 2000' VeryLargeTopValue));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTest<StringIdMovie' MobileServiceInvalidOperationException>("[String id] (Neg) Very large top value"' m => m.Year > 2000' VeryLargeTopValue));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTest<Movie' NotSupportedException>("[Int id] (Neg) Unsupported predicate: unsupported arithmetic"'                  m => Math.Sqrt(m.Year) > 43));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateQueryTest<StringIdMovie' NotSupportedException>("[String id] (Neg) Unsupported predicate: unsupported arithmetic"'                  m => Math.Sqrt(m.Year) > 43));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(new ZumoTest("ToCollection - displaying movies on a ListBox"' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<StringIdMovie>();                  var query = from m in table                              where m.Year > 1980                              orderby m.ReleaseDate descending                              select new                              {                                  Date = m.ReleaseDate.ToUniversalTime().ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)'                                  Title = m.Title                              };                  query = query.Take(50);                  var expectedItems = ZumoQueryTestData.AllMovies                      .Where(m => m.Year > 1980)                      .OrderByDescending(m => m.ReleaseDate)                      .Select(m => string.Format(                          "{0} - {1}"'                          m.ReleaseDate.ToUniversalTime().ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)'                          m.Title))                      .Take(50)                      .ToList();                  var newPage = new MoviesDisplayControl();                  var collection = await query.ToCollectionAsync();                  newPage.SetMoviesSource(collection);                    test.AddLog("Displaying the movie display control with the bound collection");                  await newPage.Display();                  test.AddLog("Dialog displayed' verifying that the items displayed are correct...");                  var pageItems = newPage.ItemsAsString;                  List<string> errors = new List<string>();                  if (Util.CompareArrays(expectedItems.ToArray()' pageItems.ToArray()' errors))                  {                      test.AddLog("Movies were displayed correctly.");                      return true;                  }                  else                  {                      test.AddLog("Error comparing the movies:");                      foreach (var error in errors)                      {                          test.AddLog("  {0}"' error);                      }                        return false;                  }              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(new ZumoTest("ToCollection - displaying movies on a ListBox"' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<StringIdMovie>();                  var query = from m in table                              where m.Year > 1980                              orderby m.ReleaseDate descending                              select new                              {                                  Date = m.ReleaseDate.ToUniversalTime().ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)'                                  Title = m.Title                              };                  query = query.Take(50);                  var expectedItems = ZumoQueryTestData.AllMovies                      .Where(m => m.Year > 1980)                      .OrderByDescending(m => m.ReleaseDate)                      .Select(m => string.Format(                          "{0} - {1}"'                          m.ReleaseDate.ToUniversalTime().ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)'                          m.Title))                      .Take(50)                      .ToList();                  var newPage = new MoviesDisplayControl();                  var collection = await query.ToCollectionAsync();                  newPage.SetMoviesSource(collection);                    test.AddLog("Displaying the movie display control with the bound collection");                  await newPage.Display();                  test.AddLog("Dialog displayed' verifying that the items displayed are correct...");                  var pageItems = newPage.ItemsAsString;                  List<string> errors = new List<string>();                  if (Util.CompareArrays(expectedItems.ToArray()' pageItems.ToArray()' errors))                  {                      test.AddLog("Movies were displayed correctly.");                      return true;                  }                  else                  {                      test.AddLog("Error comparing the movies:");                      foreach (var error in errors)                      {                          test.AddLog("  {0}"' error);                      }                        return false;                  }              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(new ZumoTest("ToCollection - displaying movies on a ListBox"' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<StringIdMovie>();                  var query = from m in table                              where m.Year > 1980                              orderby m.ReleaseDate descending                              select new                              {                                  Date = m.ReleaseDate.ToUniversalTime().ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)'                                  Title = m.Title                              };                  query = query.Take(50);                  var expectedItems = ZumoQueryTestData.AllMovies                      .Where(m => m.Year > 1980)                      .OrderByDescending(m => m.ReleaseDate)                      .Select(m => string.Format(                          "{0} - {1}"'                          m.ReleaseDate.ToUniversalTime().ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)'                          m.Title))                      .Take(50)                      .ToList();                  var newPage = new MoviesDisplayControl();                  var collection = await query.ToCollectionAsync();                  newPage.SetMoviesSource(collection);                    test.AddLog("Displaying the movie display control with the bound collection");                  await newPage.Display();                  test.AddLog("Dialog displayed' verifying that the items displayed are correct...");                  var pageItems = newPage.ItemsAsString;                  List<string> errors = new List<string>();                  if (Util.CompareArrays(expectedItems.ToArray()' pageItems.ToArray()' errors))                  {                      test.AddLog("Movies were displayed correctly.");                      return true;                  }                  else                  {                      test.AddLog("Error comparing the movies:");                      foreach (var error in errors)                      {                          test.AddLog("  {0}"' error);                      }                        return false;                  }              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(new ZumoTest("ToCollection - displaying movies on a ListBox"' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<StringIdMovie>();                  var query = from m in table                              where m.Year > 1980                              orderby m.ReleaseDate descending                              select new                              {                                  Date = m.ReleaseDate.ToUniversalTime().ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)'                                  Title = m.Title                              };                  query = query.Take(50);                  var expectedItems = ZumoQueryTestData.AllMovies                      .Where(m => m.Year > 1980)                      .OrderByDescending(m => m.ReleaseDate)                      .Select(m => string.Format(                          "{0} - {1}"'                          m.ReleaseDate.ToUniversalTime().ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)'                          m.Title))                      .Take(50)                      .ToList();                  var newPage = new MoviesDisplayControl();                  var collection = await query.ToCollectionAsync();                  newPage.SetMoviesSource(collection);                    test.AddLog("Displaying the movie display control with the bound collection");                  await newPage.Display();                  test.AddLog("Dialog displayed' verifying that the items displayed are correct...");                  var pageItems = newPage.ItemsAsString;                  List<string> errors = new List<string>();                  if (Util.CompareArrays(expectedItems.ToArray()' pageItems.ToArray()' errors))                  {                      test.AddLog("Movies were displayed correctly.");                      return true;                  }                  else                  {                      test.AddLog("Error comparing the movies:");                      foreach (var error in errors)                      {                          test.AddLog("  {0}"' error);                      }                        return false;                  }              }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES));
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreatePopulateTableTest,The following statement contains a magic number: return new ZumoTest("Populate movies table' if necessary"' new TestExecution(async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<AllMovies>();                  AllMovies allMovies = new AllMovies                  {                      Movies = ZumoQueryTestData.AllMovies                  };                  await table.InsertAsync(allMovies);                    for (int i = 0; i < 20; i++)                  {                      var counter = await table.Take(0).IncludeTotalCount().ToListAsync();                      var totalCount = ((ITotalCountProvider)counter).TotalCount;                      if (totalCount == allMovies.Movies.Length)                      {                          test.AddLog("Result of populating table: {0}"' allMovies.Status);                          return true;                      }                      else                      {                          test.AddLog("Already inserted {0} items' waiting for insertion to complete"' totalCount);                          await Util.TaskDelay(5000);                      }                  }                    test.AddLog("Result of populating table: Time out. Not populate enough data.");                  return false;              })' ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreatePopulateTableTest,The following statement contains a magic number: return new ZumoTest("Populate movies table' if necessary"' new TestExecution(async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<AllMovies>();                  AllMovies allMovies = new AllMovies                  {                      Movies = ZumoQueryTestData.AllMovies                  };                  await table.InsertAsync(allMovies);                    for (int i = 0; i < 20; i++)                  {                      var counter = await table.Take(0).IncludeTotalCount().ToListAsync();                      var totalCount = ((ITotalCountProvider)counter).TotalCount;                      if (totalCount == allMovies.Movies.Length)                      {                          test.AddLog("Result of populating table: {0}"' allMovies.Status);                          return true;                      }                      else                      {                          test.AddLog("Already inserted {0} items' waiting for insertion to complete"' totalCount);                          await Util.TaskDelay(5000);                      }                  }                    test.AddLog("Result of populating table: Time out. Not populate enough data.");                  return false;              })' ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreatePopulateStringIdTableTest,The following statement contains a magic number: return new ZumoTest("Populate [string id] movies table' if necessary"' new TestExecution(async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<AllStringIdMovies>();                  AllStringIdMovies allMovies = new AllStringIdMovies                  {                      Movies = new StringIdMovie[ZumoQueryTestData.AllStringIdMovies().Length]                  };                  for (int i = 0; i < allMovies.Movies.Length; i++)                  {                      allMovies.Movies[i] = new StringIdMovie(string.Format("Movie {0:000}"' i)' ZumoQueryTestData.AllMovies[i]);                  }                  await table.InsertAsync(allMovies);                    for (int i = 0; i < 20; i++)                  {                      var counter = await table.Take(0).IncludeTotalCount().ToListAsync();                      var totalCount = ((ITotalCountProvider)counter).TotalCount;                      if (totalCount == allMovies.Movies.Length)                      {                          test.AddLog("Result of populating [string id] table: {0}"' allMovies.Status);                          return true;                      }                      else                      {                          test.AddLog("Already inserted {0} items' waiting for insertion to complete"' totalCount);                          await Util.TaskDelay(5000);                      }                  }                    test.AddLog("Result of populating [string id] table: Time out. Not populate enough data.");                  return false;              })' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreatePopulateStringIdTableTest,The following statement contains a magic number: return new ZumoTest("Populate [string id] movies table' if necessary"' new TestExecution(async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<AllStringIdMovies>();                  AllStringIdMovies allMovies = new AllStringIdMovies                  {                      Movies = new StringIdMovie[ZumoQueryTestData.AllStringIdMovies().Length]                  };                  for (int i = 0; i < allMovies.Movies.Length; i++)                  {                      allMovies.Movies[i] = new StringIdMovie(string.Format("Movie {0:000}"' i)' ZumoQueryTestData.AllMovies[i]);                  }                  await table.InsertAsync(allMovies);                    for (int i = 0; i < 20; i++)                  {                      var counter = await table.Take(0).IncludeTotalCount().ToListAsync();                      var totalCount = ((ITotalCountProvider)counter).TotalCount;                      if (totalCount == allMovies.Movies.Length)                      {                          test.AddLog("Result of populating [string id] table: {0}"' allMovies.Status);                          return true;                      }                      else                      {                          test.AddLog("Already inserted {0} items' waiting for insertion to complete"' totalCount);                          await Util.TaskDelay(5000);                      }                  }                    test.AddLog("Result of populating [string id] table: Time out. Not populate enough data.");                  return false;              })' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTest,The following statement contains a magic number: return new ZumoTest(name' async delegate(ZumoTest test)              {                  try                  {                      var table = ZumoTestGlobals.Instance.Client.GetTable<MovieType>();                      IEnumerable<MovieType> readMovies = null;                      IEnumerable<string> readProjectedMovies = null;                        if (odataExpression == null)                      {                          IMobileServiceTableQuery<MovieType> query = null;                          IMobileServiceTableQuery<string> selectedQuery = null;                            if (whereClause != null)                          {                              query = table.Where(whereClause);                          }                            if (orderBy != null)                          {                              if (query == null)                              {                                  query = table.Where(m => m.Duration == m.Duration);                              }                                query = ApplyOrdering(query' orderBy);                          }                            if (top.HasValue)                          {                              query = query == null ? table.Take(top.Value) : query.Take(top.Value);                          }                            if (skip.HasValue)                          {                              query = query == null ? table.Skip(skip.Value) : query.Skip(skip.Value);                          }                            if (selectExpression != null)                          {                              selectedQuery = query == null ? table.Select(selectExpression) : query.Select(selectExpression);                          }                            if (includeTotalCount.HasValue)                          {                              query = query.IncludeTotalCount();                          }                            if (selectedQuery == null)                          {                              // Both ways of querying should be equivalent' so using both with equal probability here.                              var tickCount = Environment.TickCount;                              if ((tickCount % 2) == 0)                              {                                  test.AddLog("Querying using MobileServiceTableQuery<T>.ToEnumerableAsync");                                  readMovies = await query.ToEnumerableAsync();                              }                              else                              {                                  test.AddLog("Querying using IMobileServiceTable<T>.ReadAsync(MobileServiceTableQuery<U>)");                                  readMovies = await table.ReadAsync(query);                              }                          }                          else                          {                              readProjectedMovies = await selectedQuery.ToEnumerableAsync();                          }                      }                      else                      {                          test.AddLog("Using the OData query directly");                          JToken result = await table.ReadAsync(odataExpression);                          if (ZumoTestGlobals.Instance.IsNetRuntime)                          {                              var serializer = new JsonSerializer();                              serializer.Converters.Add(new MobileServiceIsoDateTimeConverter());                              readMovies = result.ToObject<IEnumerable<MovieType>>(serializer);                          }                          else                          {                              readMovies = result.ToObject<IEnumerable<MovieType>>();                          }                      }                        long actualTotalCount = -1;                      ITotalCountProvider totalCountProvider = (readMovies as ITotalCountProvider) ?? (readProjectedMovies as ITotalCountProvider);                      if (totalCountProvider != null)                      {                          actualTotalCount = totalCountProvider.TotalCount;                      }                        if (ZumoTestGlobals.Instance.IsNetRuntime && top.HasValue && top.Value == VeryLargeTopValue)                      {                          test.AddLog("NetRuntime throttles to 100 and does not throw");                          return readMovies.Count() == 100;                      }                        IEnumerable<MovieType> expectedData;                      if (useStringIdTable)                      {                          var movies = ZumoQueryTestData.AllStringIdMovies();                          expectedData = new MovieType[movies.Length];                          for (var i = 0; i < movies.Length; i++)                          {                              ((MovieType[])expectedData)[i] = (MovieType)(IMovie)movies[i];                          }                      }                      else                      {                          expectedData = ZumoQueryTestData.AllMovies.Select(s => (MovieType)(IMovie)s);                      }                        if (whereClause != null)                      {                          expectedData = expectedData.Where(whereClause.Compile());                      }                        long expectedTotalCount = -1;                      if (includeTotalCount.HasValue && includeTotalCount.Value)                      {                          expectedTotalCount = expectedData.Count();                      }                        if (orderBy != null)                      {                          expectedData = ApplyOrdering(expectedData' orderBy);                      }                        if (skip.HasValue)                      {                          expectedData = expectedData.Skip(skip.Value);                      }                        if (top.HasValue)                      {                          expectedData = expectedData.Take(top.Value);                      }                          if (includeTotalCount.HasValue)                      {                          if (expectedTotalCount != actualTotalCount)                          {                              test.AddLog("Total count was requested' but the returned value is incorrect: expected={0}' actual={1}"' expectedTotalCount' actualTotalCount);                              return false;                          }                      }                        List<string> errors = new List<string>();                      bool expectedDataIsSameAsReadData;                        if (selectExpression != null)                      {                          string[] expectedProjectedData = expectedData.Select(selectExpression.Compile()).ToArray();                          expectedDataIsSameAsReadData = Util.CompareArrays(expectedProjectedData' readProjectedMovies.ToArray()' errors);                      }                      else                      {                          expectedDataIsSameAsReadData = Util.CompareArrays(expectedData.ToArray()' readMovies.ToArray()' errors);                      }                        if (!expectedDataIsSameAsReadData)                      {                          foreach (var error in errors)                          {                              test.AddLog(error);                          }                            test.AddLog("Expected data is different");                          return false;                      }                      else                      {                          if (typeof(TExpectedException) == typeof(ExceptionTypeWhichWillNeverBeThrown))                          {                              return true;                          }                          else                          {                              test.AddLog("Error' test should have failed with {0}' but succeeded."' typeof(TExpectedException).FullName);                              return false;                          }                      }                  }                  catch (TExpectedException ex)                  {                      test.AddLog("Caught expected exception - {0}: {1}"' ex.GetType().FullName' ex.Message);                      return true;                  }              }' typeof(MovieType) == typeof(Movie) ? ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES : ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoQueryTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoQueryTests.cs,CreateQueryTest,The following statement contains a magic number: return new ZumoTest(name' async delegate(ZumoTest test)              {                  try                  {                      var table = ZumoTestGlobals.Instance.Client.GetTable<MovieType>();                      IEnumerable<MovieType> readMovies = null;                      IEnumerable<string> readProjectedMovies = null;                        if (odataExpression == null)                      {                          IMobileServiceTableQuery<MovieType> query = null;                          IMobileServiceTableQuery<string> selectedQuery = null;                            if (whereClause != null)                          {                              query = table.Where(whereClause);                          }                            if (orderBy != null)                          {                              if (query == null)                              {                                  query = table.Where(m => m.Duration == m.Duration);                              }                                query = ApplyOrdering(query' orderBy);                          }                            if (top.HasValue)                          {                              query = query == null ? table.Take(top.Value) : query.Take(top.Value);                          }                            if (skip.HasValue)                          {                              query = query == null ? table.Skip(skip.Value) : query.Skip(skip.Value);                          }                            if (selectExpression != null)                          {                              selectedQuery = query == null ? table.Select(selectExpression) : query.Select(selectExpression);                          }                            if (includeTotalCount.HasValue)                          {                              query = query.IncludeTotalCount();                          }                            if (selectedQuery == null)                          {                              // Both ways of querying should be equivalent' so using both with equal probability here.                              var tickCount = Environment.TickCount;                              if ((tickCount % 2) == 0)                              {                                  test.AddLog("Querying using MobileServiceTableQuery<T>.ToEnumerableAsync");                                  readMovies = await query.ToEnumerableAsync();                              }                              else                              {                                  test.AddLog("Querying using IMobileServiceTable<T>.ReadAsync(MobileServiceTableQuery<U>)");                                  readMovies = await table.ReadAsync(query);                              }                          }                          else                          {                              readProjectedMovies = await selectedQuery.ToEnumerableAsync();                          }                      }                      else                      {                          test.AddLog("Using the OData query directly");                          JToken result = await table.ReadAsync(odataExpression);                          if (ZumoTestGlobals.Instance.IsNetRuntime)                          {                              var serializer = new JsonSerializer();                              serializer.Converters.Add(new MobileServiceIsoDateTimeConverter());                              readMovies = result.ToObject<IEnumerable<MovieType>>(serializer);                          }                          else                          {                              readMovies = result.ToObject<IEnumerable<MovieType>>();                          }                      }                        long actualTotalCount = -1;                      ITotalCountProvider totalCountProvider = (readMovies as ITotalCountProvider) ?? (readProjectedMovies as ITotalCountProvider);                      if (totalCountProvider != null)                      {                          actualTotalCount = totalCountProvider.TotalCount;                      }                        if (ZumoTestGlobals.Instance.IsNetRuntime && top.HasValue && top.Value == VeryLargeTopValue)                      {                          test.AddLog("NetRuntime throttles to 100 and does not throw");                          return readMovies.Count() == 100;                      }                        IEnumerable<MovieType> expectedData;                      if (useStringIdTable)                      {                          var movies = ZumoQueryTestData.AllStringIdMovies();                          expectedData = new MovieType[movies.Length];                          for (var i = 0; i < movies.Length; i++)                          {                              ((MovieType[])expectedData)[i] = (MovieType)(IMovie)movies[i];                          }                      }                      else                      {                          expectedData = ZumoQueryTestData.AllMovies.Select(s => (MovieType)(IMovie)s);                      }                        if (whereClause != null)                      {                          expectedData = expectedData.Where(whereClause.Compile());                      }                        long expectedTotalCount = -1;                      if (includeTotalCount.HasValue && includeTotalCount.Value)                      {                          expectedTotalCount = expectedData.Count();                      }                        if (orderBy != null)                      {                          expectedData = ApplyOrdering(expectedData' orderBy);                      }                        if (skip.HasValue)                      {                          expectedData = expectedData.Skip(skip.Value);                      }                        if (top.HasValue)                      {                          expectedData = expectedData.Take(top.Value);                      }                          if (includeTotalCount.HasValue)                      {                          if (expectedTotalCount != actualTotalCount)                          {                              test.AddLog("Total count was requested' but the returned value is incorrect: expected={0}' actual={1}"' expectedTotalCount' actualTotalCount);                              return false;                          }                      }                        List<string> errors = new List<string>();                      bool expectedDataIsSameAsReadData;                        if (selectExpression != null)                      {                          string[] expectedProjectedData = expectedData.Select(selectExpression.Compile()).ToArray();                          expectedDataIsSameAsReadData = Util.CompareArrays(expectedProjectedData' readProjectedMovies.ToArray()' errors);                      }                      else                      {                          expectedDataIsSameAsReadData = Util.CompareArrays(expectedData.ToArray()' readMovies.ToArray()' errors);                      }                        if (!expectedDataIsSameAsReadData)                      {                          foreach (var error in errors)                          {                              test.AddLog(error);                          }                            test.AddLog("Expected data is different");                          return false;                      }                      else                      {                          if (typeof(TExpectedException) == typeof(ExceptionTypeWhichWillNeverBeThrown))                          {                              return true;                          }                          else                          {                              test.AddLog("Error' test should have failed with {0}' but succeeded."' typeof(TExpectedException).FullName);                              return false;                          }                      }                  }                  catch (TExpectedException ex)                  {                      test.AddLog("Caught expected exception - {0}: {1}"' ex.GetType().FullName' ex.Message);                      return true;                  }              }' typeof(MovieType) == typeof(Movie) ? ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES : ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: int seed = now.Year * 10000 + now.Month * 100 + now.Day;
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: int seed = now.Year * 10000 + now.Month * 100 + now.Day;
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleTypedRoundTripTest("String: random value"'                  RoundTripTestType.String' Util.CreateSimpleRandomString(rndGen' 10)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleTypedRoundTripTest("String: large (1000 characters)"' RoundTripTestType.String' new string('*'' 1000)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleTypedRoundTripTest("String: large (64k+1 characters)"' RoundTripTestType.String' new string('*'' 65537)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleTypedRoundTripTest("Date: specific date' before unix 0"' RoundTripTestType.Date' new DateTime(1901' 1' 1)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleTypedRoundTripTest("Date: specific date' after unix 0"' RoundTripTestType.Date' new DateTime(2000' 12' 31)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleTypedRoundTripTest("Date: specific date' after unix 0"' RoundTripTestType.Date' new DateTime(2000' 12' 31)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleTypedRoundTripTest("Date: specific date' after unix 0"' RoundTripTestType.Date' new DateTime(2000' 12' 31)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: var invalidIds = new string[] { "."' ".."' "control\u0010characters"' "large id " + new string('*'' 260) };
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(new ZumoTest("(Neg) string id - insert with invalid id: " + (id.Length > 30 ? (id.Substring(0' 30) + "...") : id)' async delegate(ZumoTest test)                  {                      var client = ZumoTestGlobals.Instance.Client;                      var table = client.GetTable<StringIdRoundTripTableItem>();                      var item = new StringIdRoundTripTableItem { Id = id' Name = "should not work" };                      try                      {                          await table.InsertAsync(item);                          test.AddLog("Error' insert operation should have failed. Inserted id = {0}"' item.Id);                          return false;                      }                      catch (InvalidOperationException ex)                      {                          test.AddLog("Caught expected exception: {0}"' ex);                          return true;                      }                  }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(new ZumoTest("(Neg) string id - insert with invalid id: " + (id.Length > 30 ? (id.Substring(0' 30) + "...") : id)' async delegate(ZumoTest test)                  {                      var client = ZumoTestGlobals.Instance.Client;                      var table = client.GetTable<StringIdRoundTripTableItem>();                      var item = new StringIdRoundTripTableItem { Id = id' Name = "should not work" };                      try                      {                          await table.InsertAsync(item);                          test.AddLog("Error' insert operation should have failed. Inserted id = {0}"' item.Id);                          return false;                      }                      catch (InvalidOperationException ex)                      {                          test.AddLog("Caught expected exception: {0}"' ex);                          return true;                      }                  }' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: random value"'                  "string1"' Util.CreateSimpleRandomString(rndGen' 10)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: large (1000 characters)"' "string1"' new string('*'' 1000)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped String: large (64k+1 characters)"' "string1"' new string('*'' 65537)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped Date: specific date' before unix 0"' "date1"' new DateTime(1901' 1' 1)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped Date: specific date' after unix 0"' "date1"' new DateTime(2000' 12' 31)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped Date: specific date' after unix 0"' "date1"' new DateTime(2000' 12' 31)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: result.AddTest(CreateSimpleUntypedRoundTripTest("Untyped Date: specific date' after unix 0"' "date1"' new DateTime(2000' 12' 31)));
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: var testName = "(Neg) [string id] Insert item with invalid 'id' property: " + (id.Length > 30 ? (id.Substring(0' 30) + "...") : id);
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateTests,The following statement contains a magic number: var testName = "(Neg) [string id] Insert item with invalid 'id' property: " + (id.Length > 30 ? (id.Substring(0' 30) + "...") : id);
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateSetupSchemaTest,The following statement contains a magic number: return new ZumoTest("Setup dynamic schema"' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  Random rndGen = new Random(1);                  try                  {                      if (!ZumoTestGlobals.Instance.IsNetRuntime)                      {                          var table = client.GetTable<RoundTripTableItem>();                          RoundTripTableItem item = new RoundTripTableItem                          {                              Bool1 = true'                              ComplexType1 = new ComplexType[] { new ComplexType(rndGen) }'                              ComplexType2 = new ComplexType2(rndGen)'                              Date1 = DateTime.Now'                              Double1 = 123.456'                              EnumType = EnumType.First'                              Int1 = 1'                              Long1 = 1'                              String1 = "hello"'                          };                            await table.InsertAsync(item);                          test.AddLog("Inserted item to create schema on the int id table");                      }                        var table2 = client.GetTable<StringIdRoundTripTableItem>();                      var item2 = new StringIdRoundTripTableItem { Bool = true' Name = "hello"' Number = 1.23' ComplexType = "a b c".Split()' Date = DateTime.UtcNow };                      await table2.InsertAsync(item2);                      test.AddLog("Inserted item to create schema on the string id table");                        return true;                  }                  catch (Exception ex)                  {                      test.AddLog("Error setting up the dynamic schema: {0}"' ex);                      return false;                  }              }' ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateSetupSchemaTest,The following statement contains a magic number: return new ZumoTest("Setup dynamic schema"' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  Random rndGen = new Random(1);                  try                  {                      if (!ZumoTestGlobals.Instance.IsNetRuntime)                      {                          var table = client.GetTable<RoundTripTableItem>();                          RoundTripTableItem item = new RoundTripTableItem                          {                              Bool1 = true'                              ComplexType1 = new ComplexType[] { new ComplexType(rndGen) }'                              ComplexType2 = new ComplexType2(rndGen)'                              Date1 = DateTime.Now'                              Double1 = 123.456'                              EnumType = EnumType.First'                              Int1 = 1'                              Long1 = 1'                              String1 = "hello"'                          };                            await table.InsertAsync(item);                          test.AddLog("Inserted item to create schema on the int id table");                      }                        var table2 = client.GetTable<StringIdRoundTripTableItem>();                      var item2 = new StringIdRoundTripTableItem { Bool = true' Name = "hello"' Number = 1.23' ComplexType = "a b c".Split()' Date = DateTime.UtcNow };                      await table2.InsertAsync(item2);                      test.AddLog("Inserted item to create schema on the string id table");                        return true;                  }                  catch (Exception ex)                  {                      test.AddLog("Error setting up the dynamic schema: {0}"' ex);                      return false;                  }              }' ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES' ZumoTestGlobals.RuntimeFeatureNames.STRING_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateSimpleTypedRoundTripTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<RoundTripTableItem>();                  var item = new RoundTripTableItem();                  switch (type)                  {                      case RoundTripTestType.Bool:                          item.Bool1 = (bool?)value;                          break;                      case RoundTripTestType.ComplexWithConverter:                          item.ComplexType1 = (ComplexType[])value;                          break;                      case RoundTripTestType.ComplexWithCustomSerialization:                          item.ComplexType2 = (ComplexType2)value;                          break;                      case RoundTripTestType.Date:                          item.Date1 = (DateTime?)value;                          break;                      case RoundTripTestType.Double:                          item.Double1 = (double)value;                          break;                      case RoundTripTestType.Enum:                          item.EnumType = (EnumType)value;                          break;                      case RoundTripTestType.Int:                          item.Int1 = (int)value;                          break;                      case RoundTripTestType.Long:                          item.Long1 = (long)value;                          break;                      case RoundTripTestType.String:                          item.String1 = (string)value;                          break;                      case RoundTripTestType.Id:                          item.Id = (int)value;                          break;                      default:                          throw new ArgumentException("Invalid type");                  }                    RoundTripTableItem originalItem = item.Clone();                  try                  {                      await table.InsertAsync(item);                      test.AddLog("Inserted item' id = {0}"' item.Id);                      if (item.Id <= 0)                      {                          test.AddLog("Error' insert didn't succeed (id == 0)");                          return false;                      }                        RoundTripTableItem roundTripped = await table.LookupAsync(item.Id);                      test.AddLog("Retrieved the item from the service");                      bool testResult;                      if (!originalItem.Equals(roundTripped))                      {                          test.AddLog("Round-tripped item is different! Expected: {0}; actual: {1}"' originalItem' roundTripped);                          testResult = false;                      }                        if (type == RoundTripTestType.String && item.String1 != null && item.String1.Length < 50)                      {                          test.AddLog("Now querying the table for the item (validating characters on query)");                          var queried = await table.Where(i => i.Id > (item.Id - 40) && i.String1 == item.String1).ToListAsync();                          var lastItem = queried.Where(i => i.Id == item.Id).First();                          if (originalItem.Equals(lastItem))                          {                              test.AddLog("Query for item succeeded");                          }                          else                          {                              test.AddLog("Round-tripped (queried) item is different! Expected: {0}; actual: {1}"' originalItem' lastItem);                              testResult = false;                          }                      }                        if (typeof(TExpectedException) == typeof(ExceptionTypeWhichWillNeverBeThrown))                      {                          testResult = true;                      }                      else                      {                          test.AddLog("Error' test should have failed with {0}' but succeeded."' typeof(TExpectedException).FullName);                          testResult = false;                      }                        test.AddLog("Cleaning up...");                      await table.DeleteAsync(roundTripped);                      test.AddLog("Item deleted");                        return testResult;                  }                  catch (TExpectedException ex)                  {                      test.AddLog("Caught expected exception - {0}: {1}"' ex.GetType().FullName' ex.Message);                      return true;                  }              }' ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests,ZumoRoundTripTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoRoundTripTests.cs,CreateSimpleTypedRoundTripTest,The following statement contains a magic number: return new ZumoTest(testName' async delegate(ZumoTest test)              {                  var client = ZumoTestGlobals.Instance.Client;                  var table = client.GetTable<RoundTripTableItem>();                  var item = new RoundTripTableItem();                  switch (type)                  {                      case RoundTripTestType.Bool:                          item.Bool1 = (bool?)value;                          break;                      case RoundTripTestType.ComplexWithConverter:                          item.ComplexType1 = (ComplexType[])value;                          break;                      case RoundTripTestType.ComplexWithCustomSerialization:                          item.ComplexType2 = (ComplexType2)value;                          break;                      case RoundTripTestType.Date:                          item.Date1 = (DateTime?)value;                          break;                      case RoundTripTestType.Double:                          item.Double1 = (double)value;                          break;                      case RoundTripTestType.Enum:                          item.EnumType = (EnumType)value;                          break;                      case RoundTripTestType.Int:                          item.Int1 = (int)value;                          break;                      case RoundTripTestType.Long:                          item.Long1 = (long)value;                          break;                      case RoundTripTestType.String:                          item.String1 = (string)value;                          break;                      case RoundTripTestType.Id:                          item.Id = (int)value;                          break;                      default:                          throw new ArgumentException("Invalid type");                  }                    RoundTripTableItem originalItem = item.Clone();                  try                  {                      await table.InsertAsync(item);                      test.AddLog("Inserted item' id = {0}"' item.Id);                      if (item.Id <= 0)                      {                          test.AddLog("Error' insert didn't succeed (id == 0)");                          return false;                      }                        RoundTripTableItem roundTripped = await table.LookupAsync(item.Id);                      test.AddLog("Retrieved the item from the service");                      bool testResult;                      if (!originalItem.Equals(roundTripped))                      {                          test.AddLog("Round-tripped item is different! Expected: {0}; actual: {1}"' originalItem' roundTripped);                          testResult = false;                      }                        if (type == RoundTripTestType.String && item.String1 != null && item.String1.Length < 50)                      {                          test.AddLog("Now querying the table for the item (validating characters on query)");                          var queried = await table.Where(i => i.Id > (item.Id - 40) && i.String1 == item.String1).ToListAsync();                          var lastItem = queried.Where(i => i.Id == item.Id).First();                          if (originalItem.Equals(lastItem))                          {                              test.AddLog("Query for item succeeded");                          }                          else                          {                              test.AddLog("Round-tripped (queried) item is different! Expected: {0}; actual: {1}"' originalItem' lastItem);                              testResult = false;                          }                      }                        if (typeof(TExpectedException) == typeof(ExceptionTypeWhichWillNeverBeThrown))                      {                          testResult = true;                      }                      else                      {                          test.AddLog("Error' test should have failed with {0}' but succeeded."' typeof(TExpectedException).FullName);                          testResult = false;                      }                        test.AddLog("Cleaning up...");                      await table.DeleteAsync(roundTripped);                      test.AddLog("Item deleted");                        return testResult;                  }                  catch (TExpectedException ex)                  {                      test.AddLog("Caught expected exception - {0}: {1}"' ex.GetType().FullName' ex.Message);                      return true;                  }              }' ZumoTestGlobals.RuntimeFeatureNames.INT_ID_TABLES);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItem.cs,OfflineReadyItem,The following statement contains a magic number: this.Name = Util.CreateSimpleRandomString(rndGen' 10);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItem.cs,OfflineReadyItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItem.cs,OfflineReadyItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItem.cs,OfflineReadyItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItem.cs,OfflineReadyItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItem.cs,OfflineReadyItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItem.cs,OfflineReadyItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItem.cs,OfflineReadyItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItem.cs,OfflineReadyItem,The following statement contains a magic number: this.Flag = rndGen.Next(2) == 0;
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItem.cs,Equals,The following statement contains a magic number: const double acceptableDifference = 1e-6;
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItemNoVersion,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItemNoVersion.cs,OfflineReadyItemNoVersion,The following statement contains a magic number: this.Name = Util.CreateSimpleRandomString(rndGen' 10);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItemNoVersion,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItemNoVersion.cs,OfflineReadyItemNoVersion,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItemNoVersion,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItemNoVersion.cs,OfflineReadyItemNoVersion,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItemNoVersion,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItemNoVersion.cs,OfflineReadyItemNoVersion,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItemNoVersion,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItemNoVersion.cs,OfflineReadyItemNoVersion,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItemNoVersion,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItemNoVersion.cs,OfflineReadyItemNoVersion,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItemNoVersion,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItemNoVersion.cs,OfflineReadyItemNoVersion,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItemNoVersion,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItemNoVersion.cs,OfflineReadyItemNoVersion,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItemNoVersion,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItemNoVersion.cs,OfflineReadyItemNoVersion,The following statement contains a magic number: this.Flag = rndGen.Next(2) == 0;
Magic Number,ZumoE2ETestApp.Tests.Types,OfflineReadyItemNoVersion,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\OfflineReadyItemNoVersion.cs,Equals,The following statement contains a magic number: const double acceptableDifference = 1e-6;
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.Name = Util.CreateSimpleRandomString(rndGen' 5);
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.Date = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.Bool = rndGen.Next(2) == 0;
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.Number = rndGen.Next(10000) * rndGen.NextDouble();
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.ComplexType = Enumerable.Range(0' rndGen.Next(3' 5)).Select(_ => Util.CreateSimpleRandomString(rndGen' 10)).ToArray();
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.ComplexType = Enumerable.Range(0' rndGen.Next(3' 5)).Select(_ => Util.CreateSimpleRandomString(rndGen' 10)).ToArray();
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,StringIdRoundTripTableItem,The following statement contains a magic number: this.ComplexType = Enumerable.Range(0' rndGen.Next(3' 5)).Select(_ => Util.CreateSimpleRandomString(rndGen' 10)).ToArray();
Magic Number,ZumoE2ETestApp.Tests.Types,StringIdRoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\StringIdRoundTripTableItem.cs,Equals,The following statement contains a magic number: const double acceptableDifference = 1e-6;
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,RoundTripTableItem,The following statement contains a magic number: this.String1 = Util.CreateSimpleRandomString(rndGen' 5);
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,RoundTripTableItem,The following statement contains a magic number: this.Date1 = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,RoundTripTableItem,The following statement contains a magic number: this.Date1 = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,RoundTripTableItem,The following statement contains a magic number: this.Date1 = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,RoundTripTableItem,The following statement contains a magic number: this.Date1 = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,RoundTripTableItem,The following statement contains a magic number: this.Date1 = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,RoundTripTableItem,The following statement contains a magic number: this.Date1 = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,RoundTripTableItem,The following statement contains a magic number: this.Date1 = new DateTime(rndGen.Next(1980' 2000)' rndGen.Next(1' 12)' rndGen.Next(1' 25)' rndGen.Next(0' 24)' rndGen.Next(0' 60)' rndGen.Next(0' 60)' DateTimeKind.Utc);
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,RoundTripTableItem,The following statement contains a magic number: this.Bool1 = rndGen.Next(2) == 0;
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,RoundTripTableItem,The following statement contains a magic number: this.Double1 = rndGen.Next(10000) * rndGen.NextDouble();
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,RoundTripTableItem,The following statement contains a magic number: this.EnumType = (Types.EnumType)rndGen.Next(3);
Magic Number,ZumoE2ETestApp.Tests.Types,RoundTripTableItem,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,Equals,The following statement contains a magic number: const double acceptableDifference = 1e-6;
Magic Number,ZumoE2ETestApp.Tests.Types,ComplexType2,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,ComplexType2,The following statement contains a magic number: this.Name = Util.CreateSimpleRandomString(rndGen' 10);
Magic Number,ZumoE2ETestApp.Tests.Types,ComplexType2,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,ComplexType2,The following statement contains a magic number: this.Age = rndGen.Next(80);
Magic Number,ZumoE2ETestApp.Tests.Types,ComplexType2,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,ComplexType2,The following statement contains a magic number: this.Friends = Enumerable.Range(1' 5)                  .Select(_ => Util.CreateSimpleRandomString(rndGen' 5))                  .ToArray();
Magic Number,ZumoE2ETestApp.Tests.Types,ComplexType2,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,ComplexType2,The following statement contains a magic number: this.Friends = Enumerable.Range(1' 5)                  .Select(_ => Util.CreateSimpleRandomString(rndGen' 5))                  .ToArray();
Magic Number,ZumoE2ETestApp.Tests.Types,ComplexType,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,ComplexType,The following statement contains a magic number: this.Name = Util.CreateSimpleRandomString(rndGen' 10);
Magic Number,ZumoE2ETestApp.Tests.Types,ComplexType,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\RoundTripTableItem.cs,ComplexType,The following statement contains a magic number: this.Age = rndGen.Next(80);
Magic Number,ZumoE2ETestApp.Tests.Types,VersionedType,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\VersionedType.cs,VersionedType,The following statement contains a magic number: this.Name = Util.CreateSimpleRandomString(rndGen' 20);
Magic Number,ZumoE2ETestApp.Tests.Types,VersionedType,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\Types\VersionedType.cs,VersionedType,The following statement contains a magic number: this.Number = rndGen.Next(10000);
Magic Number,ZumoE2ETestApp.UIElements,MoviesDisplayControl,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\UIElements\MoviesDisplayControl.xaml.cs,Display,The following statement contains a magic number: Task.Run(async delegate              {                  await Task.Delay(3000);                    await this.Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Normal' delegate                  {                      this.btnClose_Click_1(this.btnClose' new RoutedEventArgs());                  });              });
Missing Default,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateTypedApiTest,The following switch statement is missing a default case: switch (rndGen.Next(3))                              {                                  case 0:                                      orderBy = null;                                      break;                                  case 1:                                      orderBy = "id";                                      break;                                  case 2:                                      orderBy = "Title";                                      break;                              }
Missing Default,ZumoE2ETestApp.Tests,ZumoCustomApiTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoCustomApiTests.cs,CreateHttpContentApiTest,The following switch statement is missing a default case: switch (outputFormat)                          {                              case DataFormat.Json:                              case DataFormat.Other:                                  contentIsExpected = Util.CompareJson(expectedResult' jsonResponse' errors);                                  break;                              case DataFormat.Xml:                                  string expectedResultContent = JsonToXml(expectedResult);                                    // Normalize CRLF                                  expectedResultContent = expectedResultContent.Replace("\r\n"' "\n");                                  responseContent = responseContent.Replace("\r\n"' "\n");                                    contentIsExpected = expectedResultContent == responseContent;                                  if (!contentIsExpected)                                  {                                      errors.Add(string.Format(                                          "Error' response content is incorrect. Expected: {0}. Actual: {1}"'                                          expectedResultContent' responseContent));                                  }                                    break;                          }
Missing Default,ZumoE2ETestApp.Tests,ZumoPushTests,D:\research\architectureSmells\repos\Azure_azure-mobile-services\test\PLib\ZumoE2ETestApp\ZumoE2ETestApp\Tests\ZumoPushTests.cs,CreatePushTest,The following switch statement is missing a default case: switch (notificationResult.NotificationType)                      {                          case PushNotificationType.Raw:                              if (nhNotificationType == "template")                              {                                  receivedPushInfo = XElement.Parse(notificationResult.RawNotification.Content);                              }                              else                              {                                  receivedPushInfo = new XElement("raw"' new XText(notificationResult.RawNotification.Content));                              }                              break;                          case PushNotificationType.Toast:                              receivedPushInfo = XElement.Parse(notificationResult.ToastNotification.Content.GetXml());                              break;                          case PushNotificationType.Badge:                              receivedPushInfo = XElement.Parse(notificationResult.BadgeNotification.Content.GetXml());                              break;                          case PushNotificationType.Tile:                              receivedPushInfo = XElement.Parse(notificationResult.TileNotification.Content.GetXml());                              break;                      }
