Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,OpenTokSDK,OpenTok,C:\repos\opentok_Opentok-.NET-SDK\OpenTok\OpenTok.cs,StartArchive,The method has 5 parameters. Parameters: sessionId' name' hasVideo' hasAudio' outputMode
Long Parameter List,OpenTokSDK,Session,C:\repos\opentok_Opentok-.NET-SDK\OpenTok\Session.cs,Session,The method has 6 parameters. Parameters: sessionId' apiKey' apiSecret' location' mediaMode' archiveMode
Long Parameter List,OpenTokSDK,Session,C:\repos\opentok_Opentok-.NET-SDK\OpenTok\Session.cs,BuildDataString,The method has 5 parameters. Parameters: role' expireTime' connectionData' createTime' nonce
Long Statement,OpenTokSDK,OpenTok,C:\repos\opentok_Opentok-.NET-SDK\OpenTok\OpenTok.cs,StartArchive,The length of the statement  "            var data = new Dictionary<string' object>() { { "sessionId"' sessionId }' { "name"' name }' { "hasVideo"' hasVideo }' { "hasAudio"' hasAudio }' { "outputMode"' outputMode.ToString().ToLowerInvariant() } }; " is 205.
Empty Catch Block,OpenTokSDK.Util,OpenTokUtils,C:\repos\opentok_Opentok-.NET-SDK\OpenTok\Util\OpenTokUtils.cs,Decode64,The method has an empty catch block.
Magic Number,OpenTokSDK,Session,C:\repos\opentok_Opentok-.NET-SDK\OpenTok\Session.cs,CheckExpireTime,The following statement contains a magic number: if (expireTime == 0)              {                  return false;              }              else if (expireTime > createTime && expireTime <= OpenTokUtils.GetCurrentUnixTimeStamp() + 2592000)              {                  return true;              }              else              {                  throw new OpenTokArgumentException("Invalid expiration time for token " + expireTime + ". Expiration time " +                                                          " has to be positive and less than 30 days");              }
Magic Number,OpenTokSDK.Util,OpenTokUtils,C:\repos\opentok_Opentok-.NET-SDK\OpenTok\Util\OpenTokUtils.cs,Decode64,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  try                  {                      byte[] data = Convert.FromBase64String(encodedString);                      return Encoding.UTF8.GetString(data);                  }                  catch (FormatException)                  {                      // We don't do anything here because we need to try to                       // decode the string again                  }                  encodedString = encodedString + "=";              }
Magic Number,OpenTokSDK.Util,OpenTokUtils,C:\repos\opentok_Opentok-.NET-SDK\OpenTok\Util\OpenTokUtils.cs,GetUnixTimeStampForDate,The following statement contains a magic number: return (date - new DateTime(1970' 1' 1' 0' 0' 0)).TotalSeconds;
Magic Number,OpenTokSDK.Util,OpenTokUtils,C:\repos\opentok_Opentok-.NET-SDK\OpenTok\Util\OpenTokUtils.cs,UnixTimeStampToDateTime,The following statement contains a magic number: DateTime dateTime = new DateTime(1970' 1' 1' 0' 0' 0' 0' System.DateTimeKind.Utc);
Magic Number,OpenTokSDK.Util,OpenTokUtils,C:\repos\opentok_Opentok-.NET-SDK\OpenTok\Util\OpenTokUtils.cs,GetRandomNumber,The following statement contains a magic number: return random.Next(0' 999999);
Magic Number,OpenTokSDK.Util,OpenTokUtils,C:\repos\opentok_Opentok-.NET-SDK\OpenTok\Util\OpenTokUtils.cs,GetPartnerIdFromSessionId,The following statement contains a magic number: string[] splittedSessionId = OpenTokUtils.SplitString(formatedSessionId' '_'' 2);
