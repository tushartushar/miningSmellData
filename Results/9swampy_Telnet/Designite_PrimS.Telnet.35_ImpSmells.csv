Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,Cyclomatic complexity of the method is 18
Long Parameter List,PrimS.Telnet,Client,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.40\Client.cs,TryLogin,The method has 5 parameters. Parameters: userName' password' loginTimeOutMs' terminator' linefeed
Long Statement,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,Read,The length of the statement  " await this.IsResponseAnticipated(IsInitialResponseReceived(sb)' endInitialTimeout' rollingTimeout)).ConfigureAwait(false); " is 122.
Empty Catch Block,PrimS.Telnet,BaseClient,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\BaseClient.cs,Dispose,The method has an empty catch block.
Magic Number,PrimS.Telnet,BaseClient,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\BaseClient.cs,Dispose,The following statement contains a magic number: are.WaitOne(100);
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,ExtendRollingTimeout,The following statement contains a magic number: return DateTime.Now.Add(TimeSpan.FromMilliseconds(timeout.TotalMilliseconds / 100));
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,ByteStreamHandler,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\ByteStreamHandler.cs,RetrieveAndParseResponse,The following statement contains a magic number: switch (input)          {            case -1:              break;            case (int)Commands.InterpretAsCommand:              // interpret as command              int inputVerb = this.byteStream.ReadByte();              if (inputVerb == -1)              {                break;              }                switch (inputVerb)              {                case (int)Commands.InterpretAsCommand:                  // literal IAC = 255 escaped' so append char 255 to string                  sb.Append(inputVerb);                  break;                case (int)Commands.Do:                case (int)Commands.Dont:                case (int)Commands.Will:                case (int)Commands.Wont:                  this.ReplyToCommand(inputVerb);                  break;                default:                  break;              }                break;            case 1: // Start of Heading              sb.Append("\n \n");              break;            case 2: // Start of Text              sb.Append("\t");              break;            case 3: // End of Text or "break" CTRL+C              sb.Append("^C");              System.Diagnostics.Debug.WriteLine("^C");              break;            case 4: // End of Transmission              sb.Append("^D");              break;            case 5: // Enquiry              this.byteStream.WriteByte((byte)6); // Send ACK              break;            case 6: // Acknowledge              // We got an ACK              break;            case 7: // Bell character              Console.Beep();              break;            case 8: // Backspace              // We could delete a character from sb' or just swallow the char here.              break;            case 11: // Vertical TAB            case 12: // Form Feed              sb.Append(Environment.NewLine);              break;            case 21:              sb.Append("NAK: Retransmit last message.");              System.Diagnostics.Debug.WriteLine("ERROR NAK: Retransmit last message.");              break;            case 31: // Unit Separator              sb.Append("'");              break;            default:              sb.Append((char)input);              break;          }
Magic Number,PrimS.Telnet,TcpByteStream,D:\research\architectureSmells\repos\9swampy_Telnet\PrimS.Telnet.NetStandard\TcpByteStream.cs,TcpByteStream,The following statement contains a magic number: are.WaitOne(20);
