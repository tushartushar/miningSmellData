Implementation smell,Namespace,Class,File,Method,Description
Long Method,PayPal,HttpConnection,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\HttpConnection.cs,Execute,The method has 104 lines of code.
Complex Method,PayPal,APIService,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\APIService.cs,MakeRequestUsing,Cyclomatic complexity of the method is 10
Complex Method,PayPal.Log,TraceSourceUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Log\TraceSourceUtil.cs,GetTraceSourceWithListenersSyncLock,Cyclomatic complexity of the method is 8
Complex Method,PayPal.Manager,ConfigManager,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Manager\ConfigManager.cs,ConfigManager,Cyclomatic complexity of the method is 11
Complex Method,PayPal.Manager,CredentialManager,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Manager\CredentialManager.cs,GetAccount,Cyclomatic complexity of the method is 11
Complex Method,PayPal.Util,ReflectionUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\ReflectionUtil.cs,generateMapFromResponse,Cyclomatic complexity of the method is 12
Complex Method,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,FormatURIPath,Cyclomatic complexity of the method is 9
Long Parameter List,PayPal,PayPalResource,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\PayPalResource.cs,ConfigureAndExecute,The method has 5 parameters. Parameters: apiContext' httpMethod' resource' headersMap' payload
Long Parameter List,PayPal,PayPalResource,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\PayPalResource.cs,CreateIAPICallPreHandler,The method has 6 parameters. Parameters: config' headersMap' authorizationToken' requestId' payLoad' sdkVersion
Long Parameter List,PayPal.Authentication,CertificateCredential,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Authentication\CertificateCredential.cs,CertificateCredential,The method has 5 parameters. Parameters: usrName' pssWord' certFile' priKeyPassword' thrdPartyAuthorization
Long Parameter List,PayPal.NVP,PlatformAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\NVP\PlatformAPICallPreHandler.cs,PlatformAPICallPreHandler,The method has 7 parameters. Parameters: config' rawPayload' serviceName' method' apiUserName' accessToken' accesstokenSecret
Long Parameter List,PayPal.NVP,PlatformAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\NVP\PlatformAPICallPreHandler.cs,PlatformAPICallPreHandler,The method has 5 parameters. Parameters: config' rawPayload' serviceName' method' credential
Long Parameter List,PayPal.SOAP,MerchantAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\SOAP\MerchantAPICallPreHandler.cs,MerchantAPICallPreHandler,The method has 5 parameters. Parameters: config' apiCallHandler' apiUserName' accessToken' tokenSecret
Long Identifier,PayPal,BaseConstants,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\BaseConstants.cs,,The length of the parameter PayPalSandboxEmailAddressDefault is 32.
Long Identifier,PayPal,BaseConstants,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\BaseConstants.cs,,The length of the parameter PayPalAuthorizationPlatformHeader is 33.
Long Identifier,PayPal,BaseConstants,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\BaseConstants.cs,,The length of the parameter PayPalAuthorizationMerchantHeader is 33.
Long Identifier,PayPal,BaseConstants,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\BaseConstants.cs,,The length of the parameter PayPalResponseDataFormatHeader is 30.
Long Identifier,PayPal,BaseConstants,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\BaseConstants.cs,,The length of the parameter PayPalSandboxEmailAddressHeader is 31.
Long Identifier,PayPal,BaseConstants,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\BaseConstants.cs,,The length of the parameter MerchantCertificateLiveEndpoint is 31.
Long Identifier,PayPal,BaseConstants,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\BaseConstants.cs,,The length of the parameter MerchantCertificateSandboxEndpoint is 34.
Long Identifier,PayPal,BaseConstants,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\BaseConstants.cs,,The length of the parameter MerchantSignatureSandboxEndpoint is 32.
Long Identifier,PayPal,BaseConstants,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\BaseConstants.cs,,The length of the parameter MerchantCertificateTestSandboxEndpoint is 38.
Long Identifier,PayPal,BaseConstants,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\BaseConstants.cs,,The length of the parameter MerchantSignatureTestSandboxEndpoint is 36.
Long Identifier,PayPal,BaseConstants,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\BaseConstants.cs,,The length of the parameter PayPalSandboxEmailAddressConfig is 31.
Long Identifier,PayPal,OAuthTokenCredential,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuthTokenCredential.cs,,The length of the parameter _accessTokenExpirationInSeconds is 31.
Long Identifier,PayPal,OAuthTokenCredential,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuthTokenCredential.cs,,The length of the parameter _accessTokenExpirationSafetyGapInSeconds is 40.
Long Identifier,PayPal.Log,Log4netLogger,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Log\Log4netLogger.cs,,The length of the parameter log4netCoreLoggerManagerGetMethodGetLogger is 42.
Long Identifier,PayPal.Log,Log4netLogger,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Log\Log4netLogger.cs,,The length of the parameter log4netCoreLoggerManagerGetMethodGetLoggerInvoke is 48.
Long Identifier,PayPal.Log,Log4netLogger,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Log\Log4netLogger.cs,,The length of the parameter log4netCoreILoggerGetMethodLog is 30.
Long Identifier,PayPal.Log,Log4netLogger,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Log\Log4netLogger.cs,,The length of the parameter log4netCoreILoggerGetMethodIsEnabledFor is 39.
Long Identifier,PayPal.NVP,PlatformAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\NVP\PlatformAPICallPreHandler.cs,GetHeaderMap,The length of the parameter signatureHttpHeaderAuthStrategy is 31.
Long Identifier,PayPal.NVP,PlatformAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\NVP\PlatformAPICallPreHandler.cs,GetHeaderMap,The length of the parameter certificateHttpHeaderAuthStrategy is 33.
Long Identifier,PayPal.OpenIdConnect,Tokeninfo,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OpenIdConnect\TokenInfo.cs,CreateFromAuthorizationCode,The length of the parameter createFromAuthorizationCodeParameters is 37.
Long Identifier,PayPal.OpenIdConnect,Tokeninfo,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OpenIdConnect\TokenInfo.cs,CreateFromAuthorizationCode,The length of the parameter createFromAuthorizationCodeParameters is 37.
Long Identifier,PayPal.OpenIdConnect,Tokeninfo,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OpenIdConnect\TokenInfo.cs,CreateFromAuthorizationCodeForFuturePayments,The length of the parameter createFromAuthorizationCodeParameters is 37.
Long Identifier,PayPal.OpenIdConnect,Tokeninfo,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OpenIdConnect\TokenInfo.cs,CreateFromAuthorizationCodeParameters,The length of the parameter createFromAuthorizationCodeParameters is 37.
Long Identifier,PayPal.OpenIdConnect,Tokeninfo,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OpenIdConnect\TokenInfo.cs,CreateFromRefreshToken,The length of the parameter createFromRefreshTokenParameters is 32.
Long Identifier,PayPal.OpenIdConnect,Tokeninfo,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OpenIdConnect\TokenInfo.cs,CreateFromRefreshToken,The length of the parameter createFromRefreshTokenParameters is 32.
Long Identifier,PayPal.SOAP,MerchantAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\SOAP\MerchantAPICallPreHandler.cs,GetHeaderMap,The length of the parameter signatureHttpHeaderAuthStrategy is 31.
Long Identifier,PayPal.SOAP,MerchantAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\SOAP\MerchantAPICallPreHandler.cs,GetHeaderMap,The length of the parameter certificateHttpHeaderAuthStrategy is 33.
Long Statement,PayPal,DefaultSOAPAPICallHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\DefaultSOAPAPICallHandler.cs,GetSOAPEnvelopeAsNode,The length of the statement  "                xmlDocument.DocumentElement.GetElementsByTagName(SOAPBodyQname.Substring(SOAPBodyQname.IndexOf(':') + 1)' SOAPEnvelopeNS).Item(0).AppendChild(xmlDocument.ImportNode(GetNode(BodyContent.ToXMLString())' true)); " is 208.
Long Statement,PayPal,DefaultSOAPAPICallHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\DefaultSOAPAPICallHandler.cs,GetSOAPEnvelopeAsNode,The length of the statement  "                xmlDocument.DocumentElement.GetElementsByTagName(SOAPHeaderQname.Substring(SOAPHeaderQname.IndexOf(':') + 1)' SOAPEnvelopeNS).Item(0).AppendChild(xmlDocument.ImportNode(GetNode(HeaderContent.ToXMLString())' true)); " is 214.
Long Statement,PayPal,HttpConnection,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\HttpConnection.cs,Execute,The length of the statement  "            throw new PayPalException("Retried " + retriesConfigured + " times.... Exception in PayPal.HttpConnection.Execute(). Check log for more details."); " is 147.
Long Statement,PayPal,IPNMessage,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\IPNMessage.cs,GetIPNEndpoint,The length of the statement  "            if(config.ContainsKey(BaseConstants.IPNEndpointConfig) && !string.IsNullOrEmpty(config[BaseConstants.IPNEndpointConfig])) " is 121.
Long Statement,PayPal,IPNMessage,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\IPNMessage.cs,GetIPNEndpoint,The length of the statement  "            throw new ConfigException("IPN endpoint could not be determined based on the current PayPal configuration settings. The configuration must either define 'mode' (sandbox/live) or 'IPNEndpoint'."); " is 195.
Long Statement,PayPal,OAuthTokenCredential,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuthTokenCredential.cs,GenerateOAuthToken,The length of the statement  "            UserAgentHeader userAgentHeader = new UserAgentHeader(SdkVersion == null ? "" : SdkVersion.GetSDKId()' SdkVersion == null ? "" : SdkVersion.GetSDKVersion()); " is 157.
Long Statement,PayPal,OAuthTokenCredential,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuthTokenCredential.cs,GenerateOAuthToken,The length of the statement  "                Encoding iso8851 = Encoding.GetEncoding("iso-8859-1"' new EncoderReplacementFallback(string.Empty)' new DecoderExceptionFallback()); " is 132.
Long Statement,PayPal,PayPalResource,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\PayPalResource.cs,ConfigureAndExecute,The length of the statement  "            IAPICallPreHandler apiCallPreHandler = CreateIAPICallPreHandler(config' headersMap' authorizationToken' requestId' payload' apiContext.SdkVersion); " is 147.
Long Statement,PayPal,PayPalResource,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\PayPalResource.cs,ConfigureAndExecute,The length of the statement  "                        Encoding iso8851 = Encoding.GetEncoding("iso-8859-1"' new EncoderReplacementFallback(string.Empty)' new DecoderExceptionFallback()); " is 132.
Long Statement,PayPal,PayPalResource,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\PayPalResource.cs,ConfigureAndExecute,The length of the statement  "                        byte[] bytes = Encoding.Convert(Encoding.UTF8' iso8851' Encoding.UTF8.GetBytes(headersMap[BaseConstants.UserAgentHeader])); " is 123.
Long Statement,PayPal,RESTAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\RESTAPICallPreHandler.cs,FormUserAgentHeader,The length of the statement  "            UserAgentHeader userAgentHeader = new UserAgentHeader((SdkVersion == null)? null : SdkVersion.GetSDKId()' (SdkVersion == null)? null : SdkVersion.GetSDKVersion()); " is 163.
Long Statement,PayPal.Authentication,OAuthGenerator,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\OAuthGenerator.cs,NormalizeUri,The length of the statement  "            string normalizedUri = string.Empty' port = string.Empty' scheme = string.Empty' path = string.Empty' authority = string.Empty; " is 127.
Long Statement,PayPal.Exception,PayPalException,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Exception\PayPalException.cs,LogMessage,The length of the statement  "            string errorMessage = string.IsNullOrEmpty(this.ExceptionMessagePrefix) ? message : string.Format("{0}: {1}"' this.ExceptionMessagePrefix' message); " is 148.
Long Statement,PayPal.Log,Log4netLogger,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Log\Log4netLogger.cs,Reflect,The length of the statement  "                    log4netCoreLoggerManagerGetMethodGetLogger = log4netCoreLoggerManager.GetMethod("GetLogger"' new Type[] { typeof(Assembly)' typeof(Type) }); " is 140.
Long Statement,PayPal.Log,Log4netLogger,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Log\Log4netLogger.cs,Reflect,The length of the statement  "                    log4netCoreILoggerGetMethodLog = log4netCoreILogger.GetMethod("Log"' new Type[] { typeof(Type)' log4netCoreLevel' typeof(object)' typeof(System.Exception) }); " is 158.
Long Statement,PayPal.Log,Log4netLogger,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Log\Log4netLogger.cs,Reflect,The length of the statement  "                    log4netCoreILoggerGetMethodIsEnabledFor = log4netCoreILogger.GetMethod("IsEnabledFor"' new Type[] { log4netCoreLevel }); " is 120.
Long Statement,PayPal.Manager,ConnectionManager,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Manager\ConnectionManager.cs,GetConnection,The length of the statement  "                logger.Warn("SECURITY WARNING: TLSv1.2 is not supported on this system. Please update your .NET framework to a version that supports TLSv1.2."); " is 144.
Long Statement,PayPal.Manager,CredentialManager,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Manager\CredentialManager.cs,GetAccount,The length of the statement  "                        int index = Convert.ToInt32(kvPair.Key.Substring(accountPrefix.Length' kvPair.Key.IndexOf('.') - accountPrefix.Length )); " is 121.
Long Statement,PayPal.Manager,CredentialManager,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Manager\CredentialManager.cs,GetCredentials,The length of the statement  "                CertificateCredential certCredential = new CertificateCredential(accnt.APIUserName' accnt.APIPassword' accnt.APICertificate' accnt.PrivateKeyPassword); " is 151.
Long Statement,PayPal.NVP,CertificateHttpHeaderAuthStrategy,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\NVP\CertificateHttpHeaderAuthStrategy.cs,ProcessTokenAuthorization,The length of the statement  "                logger.DebugFormat("token = " + tokenAuthorize.AccessToken + " tokenSecret=" + tokenAuthorize.AccessTokenSecret + " uri=" + endpointUrl); " is 137.
Long Statement,PayPal.NVP,PlatformAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\NVP\PlatformAPICallPreHandler.cs,GetHeaderMap,The length of the statement  "                        CertificateHttpHeaderAuthStrategy certificateHttpHeaderAuthStrategy = new CertificateHttpHeaderAuthStrategy(GetEndpoint()); " is 123.
Long Statement,PayPal.NVP,SignatureHttpHeaderAuthStrategy,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\NVP\SignatureHttpHeaderAuthStrategy.cs,ProcessTokenAuthorization,The length of the statement  "                logger.DebugFormat("token = " + tokenAuthorize.AccessToken + " tokenSecret=" + tokenAuthorize.AccessTokenSecret + " uri=" + endpointUrl); " is 137.
Long Statement,PayPal.OpenIdConnect,Session,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OpenIdConnect\Session.cs,GetRedirectUrl,The length of the statement  "            builder.Append("client_id=").Append(HttpUtility.UrlEncode((config.ContainsKey(BaseConstants.ClientId)) ? config[BaseConstants.ClientId] : string.Empty)).Append("&response_type=").Append("code").Append("&scope="); " is 212.
Long Statement,PayPal.OpenIdConnect,Tokeninfo,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OpenIdConnect\TokenInfo.cs,CreateFromAuthorizationCodeForFuturePayments,The length of the statement  "            string pattern = "v1/oauth2/token?grant_type=authorization_code&response_type=token&redirect_uri=urn:ietf:wg:oauth:2.0:oob&code={0}"; " is 133.
Long Statement,PayPal.OpenIdConnect,Tokeninfo,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OpenIdConnect\TokenInfo.cs,CreateFromRefreshToken,The length of the statement  "            string pattern = "v1/identity/openidconnect/tokenservice?grant_type={0}&refresh_token={1}&scope={2}&client_id={3}&client_secret={4}"; " is 133.
Long Statement,PayPal.SOAP,CertificateHttpHeaderAuthStrategy,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\SOAP\CertificateHttpHeaderAuthStrategy.cs,ProcessTokenAuthorization,The length of the statement  "                logger.DebugFormat("token = " + tokenAuthorize.AccessToken + " tokenSecret=" + tokenAuthorize.AccessTokenSecret + " uri=" + endpointUrl); " is 137.
Long Statement,PayPal.SOAP,MerchantAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\SOAP\MerchantAPICallPreHandler.cs,GetHeaderMap,The length of the statement  "                        CertificateHttpHeaderAuthStrategy certificateHttpHeaderAuthStrategy = new CertificateHttpHeaderAuthStrategy(GetEndpoint()); " is 123.
Long Statement,PayPal.SOAP,MerchantAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\SOAP\MerchantAPICallPreHandler.cs,GetAttributeNamespace,The length of the statement  "		    string attributeNamespace = "xmlns:ns=\"urn:ebay:api:PayPalAPI\" xmlns:ebl=\"urn:ebay:apis:eBLBaseComponents\" xmlns:cc=\"urn:ebay:apis:CoreComponentTypes\" xmlns:ed=\"urn:ebay:apis:EnhancedDataTypes\""; " is 203.
Long Statement,PayPal.SOAP,SignatureHttpHeaderAuthStrategy,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\SOAP\SignatureHttpHeaderAuthStrategy.cs,ProcessTokenAuthorization,The length of the statement  "                logger.DebugFormat("token = " + tokenAuthorize.AccessToken + " tokenSecret=" + tokenAuthorize.AccessTokenSecret + " uri=" + endpointUrl);" is 137.
Long Statement,PayPal.Util,ReflectionEnumUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\ReflectionEnumUtil.cs,GetDescription,The length of the statement  "            DescriptionAttribute[] attributes = (DescriptionAttribute[])value.GetType().GetField(value.ToString()).GetCustomAttributes(typeof(DescriptionAttribute)' false); " is 160.
Long Statement,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,FormatURIPath,The length of the statement  "                    stringBuilder.Append(HttpUtility.UrlEncode(entry.Key' Encoding.UTF8)).Append("=").Append(HttpUtility.UrlEncode(entry.Value' Encoding.UTF8)).Append("&"); " is 152.
Long Statement,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,GetHighestInstalledNetVersion,The length of the statement  "                using (var ndpKey = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine' "").OpenSubKey(@"SOFTWARE\Microsoft\NET Framework Setup\NDP\")) " is 140.
Complex Conditional,PayPal.Authentication,CertificateCredential,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Authentication\CertificateCredential.cs,CertificateCredential,The conditional expression  "string.IsNullOrEmpty(userNameCredential) || string.IsNullOrEmpty(passwordCredential) ||                  string.IsNullOrEmpty(certFile) || string.IsNullOrEmpty(pvtKeyPassword)"  is complex.
Complex Conditional,PayPal.Authentication,OAuthGenerator,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\OAuthGenerator.cs,ComputeSignature,The conditional expression  "token == string.Empty || tokenSecret.Length == 0 || requestUri == string.Empty || tokenTimestamp == string.Empty"  is complex.
Complex Conditional,PayPal.Log,Log4netLogger,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Log\Log4netLogger.cs,Reflect,The conditional expression  "log4netCoreLoggerManagerGetMethodGetLogger == null ||                           log4netCoreILoggerGetMethodIsEnabledFor == null ||                           log4netCoreILogger == null ||                          log4netCoreLevel == null ||                          log4netCoreILoggerGetMethodLog == null"  is complex.
Complex Conditional,PayPal.OAuth,PayPalUrlEncoder,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\PayPalURLEncoder.cs,encode,The conditional expression  "(ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')                      || (ch >= '0' && ch <= '9') || " _".IndexOf(ch) > -1"  is complex.
Virtual Method Call from Constructor,PayPal.Exception,PayPalException,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Exception\PayPalException.cs,PayPalException,The constructor "PayPalException" calls a virtual method "LogDefaultMessage".
Empty Catch Block,PayPal,DefaultSOAPAPICallHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\DefaultSOAPAPICallHandler.cs,GetPayload,The method has an empty catch block.
Empty Catch Block,PayPal.Exception,HttpException,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Exception\HttpException.cs,TryConvertTo,The method has an empty catch block.
Empty Catch Block,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,GetHighestInstalledNetVersion,The method has an empty catch block.
Empty Catch Block,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,GetHighestInstalledNetVersion,The method has an empty catch block.
Empty Catch Block,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,GetHighestInstalledNetVersion,The method has an empty catch block.
Magic Number,PayPal,OAuthTokenCredential,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuthTokenCredential.cs,OAuthTokenCredential,The following statement contains a magic number: this.AccessTokenExpirationSafetyGapInSeconds = 120;
Magic Number,PayPal.Authentication,OAuthGenerator,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\OAuthGenerator.cs,NormalizeUri,The following statement contains a magic number: try              {                  i = uri.IndexOf(":");                  if (i == -1)                  {                      throw new OAuthException("Invalid URI.");                  }                  else                  {                      scheme = uri.Substring(0' i);                  }                    // find next : in URL                  j = uri.IndexOf(":"' i + 2);                  if (j != -1)                  {                      // port has specified in URI                      authority = uri.Substring(scheme.Length + 3' (j - (scheme.Length + 3)));                      k = uri.IndexOf("/"' j);                      if (k != -1)                          port = uri.Substring(j + 1' (k - (j + 1)));                      else                          port = uri.Substring(j + 1);                  }                  else                  {                      // no port specified in uri                      k = uri.IndexOf("/"' scheme.Length + 3);                      if (k != -1)                          authority = uri.Substring(scheme.Length + 3' (k - (scheme.Length + 3)));                      else                          authority = uri.Substring(scheme.Length + 3);                  }                    if (k != -1)                      path = uri.Substring(k);                    normalizedUri = scheme.ToLower();                  normalizedUri += "://";                  normalizedUri += authority.ToLower();                    if (scheme != null && port.Length > 0)                  {                      if (scheme.Equals("http") && Convert.ToInt32(port) != 80)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                      else if (scheme.Equals("https") && Convert.ToInt32(port) != 443)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                  }              }              catch (FormatException nfe)              {                  throw new OAuthException("Invalid URI."' nfe);              }              catch (ArgumentOutOfRangeException are)              {                  throw new OAuthException("Out Of Range."' are);              }
Magic Number,PayPal.Authentication,OAuthGenerator,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\OAuthGenerator.cs,NormalizeUri,The following statement contains a magic number: try              {                  i = uri.IndexOf(":");                  if (i == -1)                  {                      throw new OAuthException("Invalid URI.");                  }                  else                  {                      scheme = uri.Substring(0' i);                  }                    // find next : in URL                  j = uri.IndexOf(":"' i + 2);                  if (j != -1)                  {                      // port has specified in URI                      authority = uri.Substring(scheme.Length + 3' (j - (scheme.Length + 3)));                      k = uri.IndexOf("/"' j);                      if (k != -1)                          port = uri.Substring(j + 1' (k - (j + 1)));                      else                          port = uri.Substring(j + 1);                  }                  else                  {                      // no port specified in uri                      k = uri.IndexOf("/"' scheme.Length + 3);                      if (k != -1)                          authority = uri.Substring(scheme.Length + 3' (k - (scheme.Length + 3)));                      else                          authority = uri.Substring(scheme.Length + 3);                  }                    if (k != -1)                      path = uri.Substring(k);                    normalizedUri = scheme.ToLower();                  normalizedUri += "://";                  normalizedUri += authority.ToLower();                    if (scheme != null && port.Length > 0)                  {                      if (scheme.Equals("http") && Convert.ToInt32(port) != 80)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                      else if (scheme.Equals("https") && Convert.ToInt32(port) != 443)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                  }              }              catch (FormatException nfe)              {                  throw new OAuthException("Invalid URI."' nfe);              }              catch (ArgumentOutOfRangeException are)              {                  throw new OAuthException("Out Of Range."' are);              }
Magic Number,PayPal.Authentication,OAuthGenerator,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\OAuthGenerator.cs,NormalizeUri,The following statement contains a magic number: try              {                  i = uri.IndexOf(":");                  if (i == -1)                  {                      throw new OAuthException("Invalid URI.");                  }                  else                  {                      scheme = uri.Substring(0' i);                  }                    // find next : in URL                  j = uri.IndexOf(":"' i + 2);                  if (j != -1)                  {                      // port has specified in URI                      authority = uri.Substring(scheme.Length + 3' (j - (scheme.Length + 3)));                      k = uri.IndexOf("/"' j);                      if (k != -1)                          port = uri.Substring(j + 1' (k - (j + 1)));                      else                          port = uri.Substring(j + 1);                  }                  else                  {                      // no port specified in uri                      k = uri.IndexOf("/"' scheme.Length + 3);                      if (k != -1)                          authority = uri.Substring(scheme.Length + 3' (k - (scheme.Length + 3)));                      else                          authority = uri.Substring(scheme.Length + 3);                  }                    if (k != -1)                      path = uri.Substring(k);                    normalizedUri = scheme.ToLower();                  normalizedUri += "://";                  normalizedUri += authority.ToLower();                    if (scheme != null && port.Length > 0)                  {                      if (scheme.Equals("http") && Convert.ToInt32(port) != 80)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                      else if (scheme.Equals("https") && Convert.ToInt32(port) != 443)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                  }              }              catch (FormatException nfe)              {                  throw new OAuthException("Invalid URI."' nfe);              }              catch (ArgumentOutOfRangeException are)              {                  throw new OAuthException("Out Of Range."' are);              }
Magic Number,PayPal.Authentication,OAuthGenerator,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\OAuthGenerator.cs,NormalizeUri,The following statement contains a magic number: try              {                  i = uri.IndexOf(":");                  if (i == -1)                  {                      throw new OAuthException("Invalid URI.");                  }                  else                  {                      scheme = uri.Substring(0' i);                  }                    // find next : in URL                  j = uri.IndexOf(":"' i + 2);                  if (j != -1)                  {                      // port has specified in URI                      authority = uri.Substring(scheme.Length + 3' (j - (scheme.Length + 3)));                      k = uri.IndexOf("/"' j);                      if (k != -1)                          port = uri.Substring(j + 1' (k - (j + 1)));                      else                          port = uri.Substring(j + 1);                  }                  else                  {                      // no port specified in uri                      k = uri.IndexOf("/"' scheme.Length + 3);                      if (k != -1)                          authority = uri.Substring(scheme.Length + 3' (k - (scheme.Length + 3)));                      else                          authority = uri.Substring(scheme.Length + 3);                  }                    if (k != -1)                      path = uri.Substring(k);                    normalizedUri = scheme.ToLower();                  normalizedUri += "://";                  normalizedUri += authority.ToLower();                    if (scheme != null && port.Length > 0)                  {                      if (scheme.Equals("http") && Convert.ToInt32(port) != 80)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                      else if (scheme.Equals("https") && Convert.ToInt32(port) != 443)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                  }              }              catch (FormatException nfe)              {                  throw new OAuthException("Invalid URI."' nfe);              }              catch (ArgumentOutOfRangeException are)              {                  throw new OAuthException("Out Of Range."' are);              }
Magic Number,PayPal.Authentication,OAuthGenerator,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\OAuthGenerator.cs,NormalizeUri,The following statement contains a magic number: try              {                  i = uri.IndexOf(":");                  if (i == -1)                  {                      throw new OAuthException("Invalid URI.");                  }                  else                  {                      scheme = uri.Substring(0' i);                  }                    // find next : in URL                  j = uri.IndexOf(":"' i + 2);                  if (j != -1)                  {                      // port has specified in URI                      authority = uri.Substring(scheme.Length + 3' (j - (scheme.Length + 3)));                      k = uri.IndexOf("/"' j);                      if (k != -1)                          port = uri.Substring(j + 1' (k - (j + 1)));                      else                          port = uri.Substring(j + 1);                  }                  else                  {                      // no port specified in uri                      k = uri.IndexOf("/"' scheme.Length + 3);                      if (k != -1)                          authority = uri.Substring(scheme.Length + 3' (k - (scheme.Length + 3)));                      else                          authority = uri.Substring(scheme.Length + 3);                  }                    if (k != -1)                      path = uri.Substring(k);                    normalizedUri = scheme.ToLower();                  normalizedUri += "://";                  normalizedUri += authority.ToLower();                    if (scheme != null && port.Length > 0)                  {                      if (scheme.Equals("http") && Convert.ToInt32(port) != 80)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                      else if (scheme.Equals("https") && Convert.ToInt32(port) != 443)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                  }              }              catch (FormatException nfe)              {                  throw new OAuthException("Invalid URI."' nfe);              }              catch (ArgumentOutOfRangeException are)              {                  throw new OAuthException("Out Of Range."' are);              }
Magic Number,PayPal.Authentication,OAuthGenerator,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\OAuthGenerator.cs,NormalizeUri,The following statement contains a magic number: try              {                  i = uri.IndexOf(":");                  if (i == -1)                  {                      throw new OAuthException("Invalid URI.");                  }                  else                  {                      scheme = uri.Substring(0' i);                  }                    // find next : in URL                  j = uri.IndexOf(":"' i + 2);                  if (j != -1)                  {                      // port has specified in URI                      authority = uri.Substring(scheme.Length + 3' (j - (scheme.Length + 3)));                      k = uri.IndexOf("/"' j);                      if (k != -1)                          port = uri.Substring(j + 1' (k - (j + 1)));                      else                          port = uri.Substring(j + 1);                  }                  else                  {                      // no port specified in uri                      k = uri.IndexOf("/"' scheme.Length + 3);                      if (k != -1)                          authority = uri.Substring(scheme.Length + 3' (k - (scheme.Length + 3)));                      else                          authority = uri.Substring(scheme.Length + 3);                  }                    if (k != -1)                      path = uri.Substring(k);                    normalizedUri = scheme.ToLower();                  normalizedUri += "://";                  normalizedUri += authority.ToLower();                    if (scheme != null && port.Length > 0)                  {                      if (scheme.Equals("http") && Convert.ToInt32(port) != 80)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                      else if (scheme.Equals("https") && Convert.ToInt32(port) != 443)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                  }              }              catch (FormatException nfe)              {                  throw new OAuthException("Invalid URI."' nfe);              }              catch (ArgumentOutOfRangeException are)              {                  throw new OAuthException("Out Of Range."' are);              }
Magic Number,PayPal.Authentication,OAuthGenerator,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\OAuthGenerator.cs,NormalizeUri,The following statement contains a magic number: try              {                  i = uri.IndexOf(":");                  if (i == -1)                  {                      throw new OAuthException("Invalid URI.");                  }                  else                  {                      scheme = uri.Substring(0' i);                  }                    // find next : in URL                  j = uri.IndexOf(":"' i + 2);                  if (j != -1)                  {                      // port has specified in URI                      authority = uri.Substring(scheme.Length + 3' (j - (scheme.Length + 3)));                      k = uri.IndexOf("/"' j);                      if (k != -1)                          port = uri.Substring(j + 1' (k - (j + 1)));                      else                          port = uri.Substring(j + 1);                  }                  else                  {                      // no port specified in uri                      k = uri.IndexOf("/"' scheme.Length + 3);                      if (k != -1)                          authority = uri.Substring(scheme.Length + 3' (k - (scheme.Length + 3)));                      else                          authority = uri.Substring(scheme.Length + 3);                  }                    if (k != -1)                      path = uri.Substring(k);                    normalizedUri = scheme.ToLower();                  normalizedUri += "://";                  normalizedUri += authority.ToLower();                    if (scheme != null && port.Length > 0)                  {                      if (scheme.Equals("http") && Convert.ToInt32(port) != 80)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                      else if (scheme.Equals("https") && Convert.ToInt32(port) != 443)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                  }              }              catch (FormatException nfe)              {                  throw new OAuthException("Invalid URI."' nfe);              }              catch (ArgumentOutOfRangeException are)              {                  throw new OAuthException("Out Of Range."' are);              }
Magic Number,PayPal.Authentication,OAuthGenerator,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\OAuthGenerator.cs,NormalizeUri,The following statement contains a magic number: try              {                  i = uri.IndexOf(":");                  if (i == -1)                  {                      throw new OAuthException("Invalid URI.");                  }                  else                  {                      scheme = uri.Substring(0' i);                  }                    // find next : in URL                  j = uri.IndexOf(":"' i + 2);                  if (j != -1)                  {                      // port has specified in URI                      authority = uri.Substring(scheme.Length + 3' (j - (scheme.Length + 3)));                      k = uri.IndexOf("/"' j);                      if (k != -1)                          port = uri.Substring(j + 1' (k - (j + 1)));                      else                          port = uri.Substring(j + 1);                  }                  else                  {                      // no port specified in uri                      k = uri.IndexOf("/"' scheme.Length + 3);                      if (k != -1)                          authority = uri.Substring(scheme.Length + 3' (k - (scheme.Length + 3)));                      else                          authority = uri.Substring(scheme.Length + 3);                  }                    if (k != -1)                      path = uri.Substring(k);                    normalizedUri = scheme.ToLower();                  normalizedUri += "://";                  normalizedUri += authority.ToLower();                    if (scheme != null && port.Length > 0)                  {                      if (scheme.Equals("http") && Convert.ToInt32(port) != 80)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                      else if (scheme.Equals("https") && Convert.ToInt32(port) != 443)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                  }              }              catch (FormatException nfe)              {                  throw new OAuthException("Invalid URI."' nfe);              }              catch (ArgumentOutOfRangeException are)              {                  throw new OAuthException("Out Of Range."' are);              }
Magic Number,PayPal.Authentication,OAuthGenerator,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\OAuthGenerator.cs,NormalizeUri,The following statement contains a magic number: try              {                  i = uri.IndexOf(":");                  if (i == -1)                  {                      throw new OAuthException("Invalid URI.");                  }                  else                  {                      scheme = uri.Substring(0' i);                  }                    // find next : in URL                  j = uri.IndexOf(":"' i + 2);                  if (j != -1)                  {                      // port has specified in URI                      authority = uri.Substring(scheme.Length + 3' (j - (scheme.Length + 3)));                      k = uri.IndexOf("/"' j);                      if (k != -1)                          port = uri.Substring(j + 1' (k - (j + 1)));                      else                          port = uri.Substring(j + 1);                  }                  else                  {                      // no port specified in uri                      k = uri.IndexOf("/"' scheme.Length + 3);                      if (k != -1)                          authority = uri.Substring(scheme.Length + 3' (k - (scheme.Length + 3)));                      else                          authority = uri.Substring(scheme.Length + 3);                  }                    if (k != -1)                      path = uri.Substring(k);                    normalizedUri = scheme.ToLower();                  normalizedUri += "://";                  normalizedUri += authority.ToLower();                    if (scheme != null && port.Length > 0)                  {                      if (scheme.Equals("http") && Convert.ToInt32(port) != 80)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                      else if (scheme.Equals("https") && Convert.ToInt32(port) != 443)                      {                          normalizedUri += ":";                          normalizedUri += port;                      }                  }              }              catch (FormatException nfe)              {                  throw new OAuthException("Invalid URI."' nfe);              }              catch (ArgumentOutOfRangeException are)              {                  throw new OAuthException("Out Of Range."' are);              }
Magic Number,PayPal.Manager,ConnectionManager,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Manager\ConnectionManager.cs,GetConnection,The following statement contains a magic number: if(config.ContainsKey(BaseConstants.HttpProxyAddressConfig))              {                  WebProxy requestProxy = new WebProxy();                  requestProxy.Address = new Uri(config[BaseConstants.HttpProxyAddressConfig]);                                  if (config.ContainsKey(BaseConstants.HttpProxyCredentialConfig))                  {                      string proxyCredentials = config[BaseConstants.HttpProxyCredentialConfig];                      string[] proxyDetails = proxyCredentials.Split(':');                      if (proxyDetails.Length == 2)                      {                          requestProxy.Credentials = new NetworkCredential(proxyDetails[0]' proxyDetails[1]);                      }                  }                                  httpRequest.Proxy = requestProxy;              }
Magic Number,PayPal.OAuth,PayPalUrlEncoder,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\PayPalURLEncoder.cs,encode,The following statement contains a magic number: StringBuilder builder = new StringBuilder(message.Length + 16);
Magic Number,PayPal.OAuth,PayPalUrlEncoder,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\OAuth\PayPalURLEncoder.cs,Convert,The following statement contains a magic number: for (int j = 0; j < bytes.Length; j++)              {                  builder.Append('%');                  builder.Append(Digits[((bytes[j] & 0xf0) >> 4)]);                  builder.Append(Digits[(bytes[j] & 0xf)]);              }
Magic Number,PayPal.Util,NVPUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\NVPUtil.cs,ParseNVPString,The following statement contains a magic number: foreach (string pair in keyValuePairs)              {                  string[] keyValue = pair.Split('=');                  if (keyValue.Length == 2)                  {                      nvpMap.Add(keyValue[0]' HttpUtility.UrlDecode(keyValue[1]' BaseConstants.ENCODING_FORMAT));                  }              }
Magic Number,PayPal.Util,ReflectionUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\ReflectionUtil.cs,generateMapFromResponse,The following statement contains a magic number: foreach (MethodInfo method in methods)              {                  if (method.Name.StartsWith("get_"))                  {                      nameSpce = method.ReturnType.Namespace;                      if (prefix.Length != 0)                      {                          propertyName = prefix + "."                                  + method.Name.Substring(4);                      }                      else                      {                          propertyName = method.Name.Substring(4);                      }                      if (nameSpce != null)                      {                          if (!nameSpce.StartsWith("PayPal"))                          {                              returnObject = method.Invoke(responseType' null);                              if (returnObject != null && returnObject.GetType().IsGenericType)                              {                                  System.Collections.IList list = (System.Collections.IList)returnObject;                                  int i = 0;                                  foreach (object obj in list)                                  {                                      if (obj.GetType().Namespace.StartsWith("PayPal"))                                      {                                          returnDictionary = generateMapFromResponse(obj' propertyName + "(" + i + ")");                                          if (returnDictionary != null && returnDictionary.Count > 0)                                          {                                              foreach (KeyValuePair<string' object> entry in returnDictionary)                                              {                                                  responseDictionary.Add(entry.Key' entry.Value);                                              }                                          }                                      }                                      else                                      {                                          responseDictionary.Add(propertyName + "(" + i + ")"' obj);                                      }                                      i++;                                  }                              }                              else if (returnObject != null && returnObject.GetType().IsEnum)                              {                                  Enum e = (Enum)returnObject;                                  responseDictionary.Add(propertyName' ReflectionEnumUtil.GetDescription(e));                              }                              else if (returnObject != null)                              {                                  if (currentType.Name.EndsWith("ErrorParameter") &&                                      propertyName.EndsWith("value"))                                  {                                      propertyName = propertyName.Substring(0' propertyName.LastIndexOf("."));                                  }                                  responseDictionary.Add(propertyName' returnObject);                              }                            }                          else                          {                              returnObject = method.Invoke(responseType' null);                              if (returnObject != null && method.ReturnType.IsEnum)                              {                                  //To be coded                              }                              else if(returnObject != null)                              {                                  returnDictionary = generateMapFromResponse(returnObject' propertyName);                                  if (returnDictionary != null && returnDictionary.Count > 0)                                  {                                      foreach (KeyValuePair<string' object> entry in returnDictionary)                                      {                                          responseDictionary.Add(entry.Key' entry.Value);                                      }                                  }                                }                          }                        }                      else                      {                          responseDictionary.Add(propertyName' method.Invoke(responseType' null));                      }                    }              }
Magic Number,PayPal.Util,ReflectionUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\ReflectionUtil.cs,generateMapFromResponse,The following statement contains a magic number: foreach (MethodInfo method in methods)              {                  if (method.Name.StartsWith("get_"))                  {                      nameSpce = method.ReturnType.Namespace;                      if (prefix.Length != 0)                      {                          propertyName = prefix + "."                                  + method.Name.Substring(4);                      }                      else                      {                          propertyName = method.Name.Substring(4);                      }                      if (nameSpce != null)                      {                          if (!nameSpce.StartsWith("PayPal"))                          {                              returnObject = method.Invoke(responseType' null);                              if (returnObject != null && returnObject.GetType().IsGenericType)                              {                                  System.Collections.IList list = (System.Collections.IList)returnObject;                                  int i = 0;                                  foreach (object obj in list)                                  {                                      if (obj.GetType().Namespace.StartsWith("PayPal"))                                      {                                          returnDictionary = generateMapFromResponse(obj' propertyName + "(" + i + ")");                                          if (returnDictionary != null && returnDictionary.Count > 0)                                          {                                              foreach (KeyValuePair<string' object> entry in returnDictionary)                                              {                                                  responseDictionary.Add(entry.Key' entry.Value);                                              }                                          }                                      }                                      else                                      {                                          responseDictionary.Add(propertyName + "(" + i + ")"' obj);                                      }                                      i++;                                  }                              }                              else if (returnObject != null && returnObject.GetType().IsEnum)                              {                                  Enum e = (Enum)returnObject;                                  responseDictionary.Add(propertyName' ReflectionEnumUtil.GetDescription(e));                              }                              else if (returnObject != null)                              {                                  if (currentType.Name.EndsWith("ErrorParameter") &&                                      propertyName.EndsWith("value"))                                  {                                      propertyName = propertyName.Substring(0' propertyName.LastIndexOf("."));                                  }                                  responseDictionary.Add(propertyName' returnObject);                              }                            }                          else                          {                              returnObject = method.Invoke(responseType' null);                              if (returnObject != null && method.ReturnType.IsEnum)                              {                                  //To be coded                              }                              else if(returnObject != null)                              {                                  returnDictionary = generateMapFromResponse(returnObject' propertyName);                                  if (returnDictionary != null && returnDictionary.Count > 0)                                  {                                      foreach (KeyValuePair<string' object> entry in returnDictionary)                                      {                                          responseDictionary.Add(entry.Key' entry.Value);                                      }                                  }                                }                          }                        }                      else                      {                          responseDictionary.Add(propertyName' method.Invoke(responseType' null));                      }                    }              }
Magic Number,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,RemoveNullsFromQueryString,The following statement contains a magic number: if (formatString != null && formatString.Length != 0)              {                  string[] parts = formatString.Split('?');                    //Process the query string part                  if (parts.Length == 2)                  {                      string queryString = parts[1];                      string[] queryStringSplit = queryString.Split('&');                      if (queryStringSplit.Length > 0)                      {                          StringBuilder builder = new StringBuilder();                          foreach (string query in queryStringSplit)                          {                              string[] valueSplit = query.Split('=');                              if (valueSplit.Length == 2)                              {                                  if (valueSplit[1].Trim().ToLower().Equals("null"))                                  {                                      continue;                                  }                                  else if (valueSplit[1].Trim().Length == 0)                                  {                                      continue;                                  }                                  else                                  {                                      builder.Append(query).Append("&");                                  }                              }                              else if (valueSplit.Length < 2)                              {                                  continue;                              }                          }                          formatString = (!builder.ToString().EndsWith("&")) ? builder.ToString()                              : builder.ToString().Substring(0' builder.ToString().Length - 1);                      }                        //Append the query string delimiter                      formatString = (parts[0].Trim() + "?") + formatString;                  }              }
Magic Number,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,RemoveNullsFromQueryString,The following statement contains a magic number: if (formatString != null && formatString.Length != 0)              {                  string[] parts = formatString.Split('?');                    //Process the query string part                  if (parts.Length == 2)                  {                      string queryString = parts[1];                      string[] queryStringSplit = queryString.Split('&');                      if (queryStringSplit.Length > 0)                      {                          StringBuilder builder = new StringBuilder();                          foreach (string query in queryStringSplit)                          {                              string[] valueSplit = query.Split('=');                              if (valueSplit.Length == 2)                              {                                  if (valueSplit[1].Trim().ToLower().Equals("null"))                                  {                                      continue;                                  }                                  else if (valueSplit[1].Trim().Length == 0)                                  {                                      continue;                                  }                                  else                                  {                                      builder.Append(query).Append("&");                                  }                              }                              else if (valueSplit.Length < 2)                              {                                  continue;                              }                          }                          formatString = (!builder.ToString().EndsWith("&")) ? builder.ToString()                              : builder.ToString().Substring(0' builder.ToString().Length - 1);                      }                        //Append the query string delimiter                      formatString = (parts[0].Trim() + "?") + formatString;                  }              }
Magic Number,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,RemoveNullsFromQueryString,The following statement contains a magic number: if (formatString != null && formatString.Length != 0)              {                  string[] parts = formatString.Split('?');                    //Process the query string part                  if (parts.Length == 2)                  {                      string queryString = parts[1];                      string[] queryStringSplit = queryString.Split('&');                      if (queryStringSplit.Length > 0)                      {                          StringBuilder builder = new StringBuilder();                          foreach (string query in queryStringSplit)                          {                              string[] valueSplit = query.Split('=');                              if (valueSplit.Length == 2)                              {                                  if (valueSplit[1].Trim().ToLower().Equals("null"))                                  {                                      continue;                                  }                                  else if (valueSplit[1].Trim().Length == 0)                                  {                                      continue;                                  }                                  else                                  {                                      builder.Append(query).Append("&");                                  }                              }                              else if (valueSplit.Length < 2)                              {                                  continue;                              }                          }                          formatString = (!builder.ToString().EndsWith("&")) ? builder.ToString()                              : builder.ToString().Substring(0' builder.ToString().Length - 1);                      }                        //Append the query string delimiter                      formatString = (parts[0].Trim() + "?") + formatString;                  }              }
Magic Number,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,SplitParameters,The following statement contains a magic number: if (query != null && query.Length == 2 && query[1].Contains("={"))              {                  NameValueCollection queryParts = HttpUtility.ParseQueryString(query[1]);                    foreach (string k in queryParts.AllKeys)                  {                      string val = string.Empty;                      if (parameters.TryGetValue(k.Trim()' out val))                      {                          objectList.Add(val);                      }                      else                      {                          objectList.Add(null);                      }                    }              }
Magic Number,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,GetAssemblyVersionForType,The following statement contains a magic number: return type.Assembly.GetName().Version.ToString(3);
Magic Number,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,IsNet45OrLaterDetected,The following statement contains a magic number: return highestNetVersion == null ? false : highestNetVersion >= new Version(4' 5' 0' 0);
Magic Number,PayPal.Util,SDKUtil,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\Util\SDKUtil.cs,IsNet45OrLaterDetected,The following statement contains a magic number: return highestNetVersion == null ? false : highestNetVersion >= new Version(4' 5' 0' 0);
Missing Default,PayPal,IPNMessage,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\IPNMessage.cs,GetIPNEndpoint,The following switch statement is missing a default case: switch (config[BaseConstants.ApplicationModeConfig].ToLower())                  {                      case BaseConstants.SandboxMode:                          return BaseConstants.IPNSandboxEndpoint;                        case BaseConstants.TestSandboxMode:                          return BaseConstants.IPNTestSandboxEndpoint;                        case BaseConstants.LiveMode:                          return BaseConstants.IPNLiveEndpoint;                  }
Missing Default,PayPal,RESTAPICallPreHandler,C:\repos\PayPal_sdk-core-dotnet\Source\SDK\RESTAPICallPreHandler.cs,GetProcessedEndPoint,The following switch statement is missing a default case: switch (config[BaseConstants.ApplicationModeConfig])                  {                      case BaseConstants.LiveMode:                          endpoint = BaseConstants.RESTLiveEndpoint;                          break;                      case BaseConstants.SandboxMode:                          endpoint = BaseConstants.RESTSandboxEndpoint;                          break;                      case BaseConstants.TestSandboxMode:                          endpoint = BaseConstants.RESTTestSandboxEndpoint;                          break;                  }
