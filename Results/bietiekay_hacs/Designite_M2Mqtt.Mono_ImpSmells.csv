Implementation smell,Namespace,Class,File,Method,Description
Long Method,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,ReceiveThread,The method has 231 lines of code.
Long Method,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,DispatchEventThread,The method has 138 lines of code.
Long Method,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,ProcessInflightThread,The method has 564 lines of code.
Long Method,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The method has 100 lines of code.
Long Method,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The method has 152 lines of code.
Complex Method,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,DispatchEventThread,Cyclomatic complexity of the method is 8
Complex Method,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,Cyclomatic complexity of the method is 12
Complex Method,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,Cyclomatic complexity of the method is 9
Complex Method,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,Cyclomatic complexity of the method is 9
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,MqttClient,The method has 6 parameters. Parameters: brokerIpAddress' brokerPort' secure' caCert' clientCert' sslProtocol
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,MqttClient,The method has 6 parameters. Parameters: brokerHostName' brokerPort' secure' caCert' clientCert' sslProtocol
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,MqttClient,The method has 7 parameters. Parameters: brokerHostName' brokerPort' secure' caCert' clientCert' sslProtocol' userCertificateValidationCallback
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,MqttClient,The method has 6 parameters. Parameters: brokerHostName' brokerPort' secure' sslProtocol' userCertificateValidationCallback' userCertificateSelectionCallback
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,MqttClient,The method has 8 parameters. Parameters: brokerHostName' brokerPort' secure' caCert' clientCert' sslProtocol' userCertificateValidationCallback' userCertificateSelectionCallback
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,Init,The method has 8 parameters. Parameters: brokerHostName' brokerPort' secure' caCert' clientCert' sslProtocol' userCertificateValidationCallback' userCertificateSelectionCallback
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,Connect,The method has 5 parameters. Parameters: clientId' username' password' cleanSession' keepAlivePeriod
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,Connect,The method has 10 parameters. Parameters: clientId' username' password' willRetain' willQosLevel' willFlag' willTopic' willMessage' cleanSession' keepAlivePeriod
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,MqttNetworkChannel,The method has 6 parameters. Parameters: socket' secure' serverCert' sslProtocol' userCertificateValidationCallback' userCertificateSelectionCallback
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,MqttNetworkChannel,The method has 8 parameters. Parameters: remoteHostName' remotePort' secure' caCert' clientCert' sslProtocol' userCertificateValidationCallback' userCertificateSelectionCallback
Long Parameter List,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,MqttMsgConnect,The method has 11 parameters. Parameters: clientId' username' password' willRetain' willQosLevel' willFlag' willTopic' willMessage' cleanSession' keepAlivePeriod' protocolVersion
Long Parameter List,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPublish.cs,MqttMsgPublish,The method has 5 parameters. Parameters: topic' message' dupFlag' qosLevel' retain
Long Parameter List,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublishEventArgs,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPublishEventArgs.cs,MqttMsgPublishEventArgs,The method has 5 parameters. Parameters: topic' message' dupFlag' qosLevel' retain
Long Parameter List,uPLibrary.Networking.M2Mqtt.Utility,Trace,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Utility\Trace.cs,WriteLine,The method has 5 parameters. Parameters: level' format' arg1' arg2' arg3
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,MqttClient,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,MqttClient,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,MqttClient,The length of the parameter userCertificateSelectionCallback is 32.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,MqttClient,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,MqttClient,The length of the parameter userCertificateSelectionCallback is 32.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,Init,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,Init,The length of the parameter userCertificateSelectionCallback is 32.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,MqttNetworkChannel,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,MqttNetworkChannel,The length of the parameter userCertificateSelectionCallback is 32.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,MqttNetworkChannel,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,MqttNetworkChannel,The length of the parameter userCertificateSelectionCallback is 32.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,,The length of the parameter userCertificateSelectionCallback is 32.
Long Identifier,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgBase.cs,,The length of the parameter MQTT_MSG_UNSUBSCRIBE_FLAG_BITS is 30.
Long Identifier,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnack,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnack.cs,,The length of the parameter CONN_REFUSED_SERVER_UNAVAILABLE is 31.
Long Identifier,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnack,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnack.cs,,The length of the parameter CONN_REFUSED_USERNAME_PASSWORD is 30.
Long Identifier,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnack,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnack.cs,,The length of the parameter TOPIC_NAME_COMP_RESP_BYTE_OFFSET is 32.
Long Identifier,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnack,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnack.cs,,The length of the parameter TOPIC_NAME_COMP_RESP_BYTE_SIZE is 30.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,Init,The length of the statement  "            this.channel = new MqttNetworkChannel(this.brokerHostName' this.brokerPort' secure' caCert' clientCert' sslProtocol' userCertificateValidationCallback' userCertificateSelectionCallback); " is 186.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,Connect,The length of the statement  "            return this.Connect(clientId' null' null' false' MqttMsgConnect.QOS_LEVEL_AT_MOST_ONCE' false' null' null' true' MqttMsgConnect.KEEP_ALIVE_PERIOD_DEFAULT); " is 155.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,Connect,The length of the statement  "            return this.Connect(clientId' username' password' false' MqttMsgConnect.QOS_LEVEL_AT_MOST_ONCE' false' null' null' true' MqttMsgConnect.KEEP_ALIVE_PERIOD_DEFAULT); " is 163.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,Connect,The length of the statement  "            return this.Connect(clientId' username' password' false' MqttMsgConnect.QOS_LEVEL_AT_MOST_ONCE' false' null' null' cleanSession' keepAlivePeriod); " is 146.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,ReceiveThread,The length of the statement  "                                MqttMsgUnsubscribe unsubscribe = MqttMsgUnsubscribe.Parse(fixedHeaderFirstByte[0]' (byte)this.ProtocolVersion' this.channel); " is 125.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,ReceiveThread,The length of the statement  "                                MqttMsgDisconnect disconnect = MqttMsgDisconnect.Parse(fixedHeaderFirstByte[0]' (byte)this.ProtocolVersion' this.channel); " is 122.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,ReceiveThread,The length of the statement  "                             ((e.InnerException != null) && (e.InnerException.GetType() == typeof(SocketException)))) // added for SSL/TLS incoming connection that use SslStream that wraps SocketException " is 175.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,ProcessInflightThread,The length of the statement  "                                                if (((msgReceived.Type == MqttMsgBase.MQTT_MSG_PUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_PUBLISH_TYPE) && (msgReceived.MessageId == msgInflight.MessageId)) || " is 174.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,ProcessInflightThread,The length of the statement  "                                                    ((msgReceived.Type == MqttMsgBase.MQTT_MSG_SUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_SUBSCRIBE_TYPE) && (msgReceived.MessageId == msgInflight.MessageId)) || " is 172.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,ProcessInflightThread,The length of the statement  "                                                    ((msgReceived.Type == MqttMsgBase.MQTT_MSG_UNSUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_UNSUBSCRIBE_TYPE) && (msgReceived.MessageId == msgInflight.MessageId))) " is 174.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,GetMessageId,The length of the statement  "            this.messageIdCounter = ((this.messageIdCounter % UInt16.MaxValue) != 0) ? (ushort)(this.messageIdCounter + 1) : (ushort)1; " is 123.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,Connect,The length of the statement  "                this.sslStream = new SslStream(this.netStream' false' this.userCertificateValidationCallback' this.userCertificateSelectionCallback); " is 133.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,Accept,The length of the statement  "                this.sslStream = new SslStream(this.netStream' false' this.userCertificateValidationCallback' this.userCertificateSelectionCallback); " is 133.
Long Statement,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The length of the statement  "            byte[] willMessageUtf8 = (this.willFlag && (this.willMessage != null)) ? Encoding.UTF8.GetBytes(this.willMessage) : null; " is 121.
Long Statement,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The length of the statement  "            byte[] usernameUtf8 = ((this.username != null) && (this.username.Length > 0)) ? Encoding.UTF8.GetBytes(this.username) : null; " is 125.
Long Statement,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The length of the statement  "            byte[] passwordUtf8 = ((this.password != null) && (this.password.Length > 0)) ? Encoding.UTF8.GetBytes(this.password) : null; " is 125.
Long Statement,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,ToString,The length of the statement  "                new object[] { "protocolName"' "protocolVersion"' "clientId"' "willFlag"' "willRetain"' "willQosLevel"' "willTopic"' "willMessage"' "username"' "password"' "cleanSession"' "keepAlivePeriod" }' " is 192.
Long Statement,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,ToString,The length of the statement  "                new object[] { this.protocolName' this.protocolVersion' this.clientId' this.willFlag' this.willRetain' this.willQosLevel' this.willTopic' this.willMessage' this.username' this.password' this.cleanSession' this.keepAlivePeriod }); " is 229.
Complex Conditional,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,ReceiveThread,The conditional expression  "(e.GetType() == typeof(IOException)) || (e.GetType() == typeof(SocketException)) ||                               ((e.InnerException != null) && (e.InnerException.GetType() == typeof(SocketException)))"  is complex.
Complex Conditional,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,ProcessInflightThread,The conditional expression  "((msgReceived.Type == MqttMsgBase.MQTT_MSG_PUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_PUBLISH_TYPE) && (msgReceived.MessageId == msgInflight.MessageId)) ||                                                      ((msgReceived.Type == MqttMsgBase.MQTT_MSG_SUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_SUBSCRIBE_TYPE) && (msgReceived.MessageId == msgInflight.MessageId)) ||                                                      ((msgReceived.Type == MqttMsgBase.MQTT_MSG_UNSUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_UNSUBSCRIBE_TYPE) && (msgReceived.MessageId == msgInflight.MessageId))"  is complex.
Complex Conditional,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The conditional expression  "this.willFlag &&  ((this.willQosLevel >= 0x03) ||                                         (willTopicUtf8 == null) || (willMessageUtf8 == null) ||                                         ((willTopicUtf8 != null) && (willTopicUtf8.Length == 0)) ||                                          ((willMessageUtf8 != null) && (willMessageUtf8.Length == 0)))"  is complex.
Complex Conditional,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The conditional expression  "!this.willFlag && ((this.willRetain) ||                                              (willTopicUtf8 != null) || (willMessageUtf8 != null) ||                                              ((willTopicUtf8 != null) && (willTopicUtf8.Length != 0)) ||                                               ((willMessageUtf8 != null) && (willMessageUtf8.Length != 0)))"  is complex.
Empty Catch Block,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,MqttNetworkChannel,The method has an empty catch block.
Magic Number,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,Connect,The following statement contains a magic number: if (connack.ReturnCode == MqttMsgConnack.CONN_ACCEPTED)              {                  // set all client properties                  this.ClientId = clientId;                  this.CleanSession = cleanSession;                  this.WillFlag = willFlag;                  this.WillTopic = willTopic;                  this.WillMessage = willMessage;                  this.WillQosLevel = willQosLevel;                    this.keepAlivePeriod = keepAlivePeriod * 1000; // convert in ms                    // restore previous session                  this.RestoreSession();                    // keep alive period equals zero means turning off keep alive mechanism                  if (this.keepAlivePeriod != 0)                  {                      // start thread for sending keep alive message to the broker                      Fx.StartThread(this.KeepAliveThread);                  }                    // start thread for raising received message event from broker                  Fx.StartThread(this.DispatchEventThread);                                    // start thread for handling inflight messages queue to broker asynchronously (publish and acknowledge)                  Fx.StartThread(this.ProcessInflightThread);                    this.IsConnected = true;              }
Magic Number,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Net\MqttNetworkChannel.cs,Receive,The following statement contains a magic number: if (this.socket.Poll(timeout * 1000' SelectMode.SelectRead))              {                  return this.Receive(buffer);              }              else              {                  return 0;              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgBase.cs,encodeRemainingLength,The following statement contains a magic number: do              {                  digit = remainingLength % 128;                  remainingLength /= 128;                  if (remainingLength > 0)                      digit = digit | 0x80;                  buffer[index++] = (byte)digit;              } while (remainingLength > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgBase.cs,encodeRemainingLength,The following statement contains a magic number: do              {                  digit = remainingLength % 128;                  remainingLength /= 128;                  if (remainingLength > 0)                      digit = digit | 0x80;                  buffer[index++] = (byte)digit;              } while (remainingLength > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgBase.cs,decodeRemainingLength,The following statement contains a magic number: do              {                  // next digit from stream                  channel.Receive(nextByte);                  digit = nextByte[0];                  value += ((digit & 127) * multiplier);                  multiplier *= 128;              } while ((digit & 128) != 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgBase.cs,decodeRemainingLength,The following statement contains a magic number: do              {                  // next digit from stream                  channel.Receive(nextByte);                  digit = nextByte[0];                  value += ((digit & 127) * multiplier);                  multiplier *= 128;              } while ((digit & 128) != 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgBase.cs,decodeRemainingLength,The following statement contains a magic number: do              {                  // next digit from stream                  channel.Receive(nextByte);                  digit = nextByte[0];                  value += ((digit & 127) * multiplier);                  multiplier *= 128;              } while ((digit & 128) != 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnack,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnack.cs,GetBytes,The following statement contains a magic number: do              {                  fixedHeaderSize++;                  temp = temp / 128;              } while (temp > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: protNameUtf8Length = ((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: msg.keepAlivePeriod = (ushort)((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: clientIdUtf8Length = ((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: if (msg.willFlag)              {                  willTopicUtf8Length = ((buffer[index++] << 8) & 0xFF00);                  willTopicUtf8Length |= buffer[index++];                  willTopicUtf8 = new byte[willTopicUtf8Length];                  Array.Copy(buffer' index' willTopicUtf8' 0' willTopicUtf8Length);                  index += willTopicUtf8Length;                  msg.willTopic = new String(Encoding.UTF8.GetChars(willTopicUtf8));                    willMessageUtf8Length = ((buffer[index++] << 8) & 0xFF00);                  willMessageUtf8Length |= buffer[index++];                  willMessageUtf8 = new byte[willMessageUtf8Length];                  Array.Copy(buffer' index' willMessageUtf8' 0' willMessageUtf8Length);                  index += willMessageUtf8Length;                  msg.willMessage = new String(Encoding.UTF8.GetChars(willMessageUtf8));              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: if (msg.willFlag)              {                  willTopicUtf8Length = ((buffer[index++] << 8) & 0xFF00);                  willTopicUtf8Length |= buffer[index++];                  willTopicUtf8 = new byte[willTopicUtf8Length];                  Array.Copy(buffer' index' willTopicUtf8' 0' willTopicUtf8Length);                  index += willTopicUtf8Length;                  msg.willTopic = new String(Encoding.UTF8.GetChars(willTopicUtf8));                    willMessageUtf8Length = ((buffer[index++] << 8) & 0xFF00);                  willMessageUtf8Length |= buffer[index++];                  willMessageUtf8 = new byte[willMessageUtf8Length];                  Array.Copy(buffer' index' willMessageUtf8' 0' willMessageUtf8Length);                  index += willMessageUtf8Length;                  msg.willMessage = new String(Encoding.UTF8.GetChars(willMessageUtf8));              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: if (isUsernameFlag)              {                  usernameUtf8Length = ((buffer[index++] << 8) & 0xFF00);                  usernameUtf8Length |= buffer[index++];                  usernameUtf8 = new byte[usernameUtf8Length];                  Array.Copy(buffer' index' usernameUtf8' 0' usernameUtf8Length);                  index += usernameUtf8Length;                  msg.username = new String(Encoding.UTF8.GetChars(usernameUtf8));              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: if (isPasswordFlag)              {                  passwordUtf8Length = ((buffer[index++] << 8) & 0xFF00);                  passwordUtf8Length |= buffer[index++];                  passwordUtf8 = new byte[passwordUtf8Length];                  Array.Copy(buffer' index' passwordUtf8' 0' passwordUtf8Length);                  index += passwordUtf8Length;                  msg.password = new String(Encoding.UTF8.GetChars(passwordUtf8));              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: payloadSize += clientIdUtf8.Length + 2;
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: payloadSize += (willTopicUtf8 != null) ? (willTopicUtf8.Length + 2) : 0;
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: payloadSize += (willMessageUtf8 != null) ? (willMessageUtf8.Length + 2) : 0;
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: payloadSize += (usernameUtf8 != null) ? (usernameUtf8.Length + 2) : 0;
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: payloadSize += (passwordUtf8 != null) ? (passwordUtf8.Length + 2) : 0;
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: do              {                  fixedHeaderSize++;                  temp = temp / 128;              } while (temp > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: buffer[index++] = (byte)((this.keepAlivePeriod >> 8) & 0x00FF);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: buffer[index++] = (byte)((clientIdUtf8.Length >> 8) & 0x00FF);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: if (this.willFlag && (willTopicUtf8 != null))              {                  buffer[index++] = (byte)((willTopicUtf8.Length >> 8) & 0x00FF); // MSB                  buffer[index++] = (byte)(willTopicUtf8.Length & 0x00FF); // LSB                  Array.Copy(willTopicUtf8' 0' buffer' index' willTopicUtf8.Length);                  index += willTopicUtf8.Length;              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: if (this.willFlag && (willMessageUtf8 != null))              {                  buffer[index++] = (byte)((willMessageUtf8.Length >> 8) & 0x00FF); // MSB                  buffer[index++] = (byte)(willMessageUtf8.Length & 0x00FF); // LSB                  Array.Copy(willMessageUtf8' 0' buffer' index' willMessageUtf8.Length);                  index += willMessageUtf8.Length;              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: if (usernameUtf8 != null)              {                  buffer[index++] = (byte)((usernameUtf8.Length >> 8) & 0x00FF); // MSB                  buffer[index++] = (byte)(usernameUtf8.Length & 0x00FF); // LSB                  Array.Copy(usernameUtf8' 0' buffer' index' usernameUtf8.Length);                  index += usernameUtf8.Length;              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: if (passwordUtf8 != null)              {                  buffer[index++] = (byte)((passwordUtf8.Length >> 8) & 0x00FF); // MSB                  buffer[index++] = (byte)(passwordUtf8.Length & 0x00FF); // LSB                  Array.Copy(passwordUtf8' 0' buffer' index' passwordUtf8.Length);                  index += passwordUtf8.Length;              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgDisconnect,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgDisconnect.cs,GetBytes,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPingReq,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPingReq.cs,GetBytes,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPingResp,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPingResp.cs,GetBytes,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPuback,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPuback.cs,GetBytes,The following statement contains a magic number: do              {                  fixedHeaderSize++;                  temp = temp / 128;              } while (temp > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPuback,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPuback.cs,GetBytes,The following statement contains a magic number: buffer[index++] = (byte)((this.messageId >> 8) & 0x00FF);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPuback,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPuback.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubcomp,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPubcomp.cs,GetBytes,The following statement contains a magic number: do              {                  fixedHeaderSize++;                  temp = temp / 128;              } while (temp > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubcomp,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPubcomp.cs,GetBytes,The following statement contains a magic number: buffer[index++] = (byte)((this.messageId >> 8) & 0x00FF);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubcomp,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPubcomp.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,The following statement contains a magic number: varHeaderSize += topicUtf8.Length + 2;
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,The following statement contains a magic number: do              {                  fixedHeaderSize++;                  temp = temp / 128;              } while (temp > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,The following statement contains a magic number: buffer[index++] = (byte)((topicUtf8.Length >> 8) & 0x00FF);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,The following statement contains a magic number: if ((this.qosLevel == QOS_LEVEL_AT_LEAST_ONCE) ||                  (this.qosLevel == QOS_LEVEL_EXACTLY_ONCE))              {                  // check message identifier assigned                  if (this.messageId == 0)                      throw new MqttClientException(MqttClientErrorCode.WrongMessageId);                  buffer[index++] = (byte)((this.messageId >> 8) & 0x00FF); // MSB                  buffer[index++] = (byte)(this.messageId & 0x00FF); // LSB              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPublish.cs,Parse,The following statement contains a magic number: topicUtf8Length = ((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPublish.cs,Parse,The following statement contains a magic number: if ((msg.qosLevel == QOS_LEVEL_AT_LEAST_ONCE) ||                  (msg.qosLevel == QOS_LEVEL_EXACTLY_ONCE))              {                  // message id                  msg.messageId = (ushort)((buffer[index++] << 8) & 0xFF00);                  msg.messageId |= (buffer[index++]);              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrec,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPubrec.cs,GetBytes,The following statement contains a magic number: do              {                  fixedHeaderSize++;                  temp = temp / 128;              } while (temp > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrec,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPubrec.cs,GetBytes,The following statement contains a magic number: buffer[index++] = (byte)((this.messageId >> 8) & 0x00FF);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrec,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPubrec.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPubrel.cs,GetBytes,The following statement contains a magic number: do              {                  fixedHeaderSize++;                  temp = temp / 128;              } while (temp > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPubrel.cs,GetBytes,The following statement contains a magic number: buffer[index++] = (byte)((this.messageId >> 8) & 0x00FF);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrel,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgPubrel.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSuback,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgSuback.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSuback,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgSuback.cs,GetBytes,The following statement contains a magic number: do              {                  fixedHeaderSize++;                  temp = temp / 128;              } while (temp > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSuback,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgSuback.cs,GetBytes,The following statement contains a magic number: buffer[index++] = (byte)((this.messageId >> 8) & 0x00FF);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgSubscribe.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgSubscribe.cs,Parse,The following statement contains a magic number: do              {                  // topic name                  topicUtf8Length = ((buffer[index++] << 8) & 0xFF00);                  topicUtf8Length |= buffer[index++];                  topicUtf8 = new byte[topicUtf8Length];                  Array.Copy(buffer' index' topicUtf8' 0' topicUtf8Length);                  index += topicUtf8Length;                  tmpTopics.Add(new String(Encoding.UTF8.GetChars(topicUtf8)));                    // QoS level                  tmpQosLevels.Add(buffer[index++]);                } while (index < remainingLength);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,The following statement contains a magic number: for (topicIdx = 0; topicIdx < this.topics.Length; topicIdx++)              {                  // check topic length                  if ((this.topics[topicIdx].Length < MIN_TOPIC_LENGTH) || (this.topics[topicIdx].Length > MAX_TOPIC_LENGTH))                      throw new MqttClientException(MqttClientErrorCode.TopicLength);                    topicsUtf8[topicIdx] = Encoding.UTF8.GetBytes(this.topics[topicIdx]);                  payloadSize += 2; // topic size (MSB' LSB)                  payloadSize += topicsUtf8[topicIdx].Length;                  payloadSize++; // byte for QoS              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,The following statement contains a magic number: do              {                  fixedHeaderSize++;                  temp = temp / 128;              } while (temp > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,The following statement contains a magic number: buffer[index++] = (byte)((messageId >> 8) & 0x00FF);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,The following statement contains a magic number: for (topicIdx = 0; topicIdx < this.topics.Length; topicIdx++)              {                  // topic name                  buffer[index++] = (byte)((topicsUtf8[topicIdx].Length >> 8) & 0x00FF); // MSB                  buffer[index++] = (byte)(topicsUtf8[topicIdx].Length & 0x00FF); // LSB                  Array.Copy(topicsUtf8[topicIdx]' 0' buffer' index' topicsUtf8[topicIdx].Length);                  index += topicsUtf8[topicIdx].Length;                    // requested QoS                  buffer[index++] = this.qosLevels[topicIdx];              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsuback,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgUnsuback.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsuback,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgUnsuback.cs,GetBytes,The following statement contains a magic number: do              {                  fixedHeaderSize++;                  temp = temp / 128;              } while (temp > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsuback,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgUnsuback.cs,GetBytes,The following statement contains a magic number: buffer[index++] = (byte)((this.messageId >> 8) & 0x00FF);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer[index++] << 8) & 0xFF00);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,Parse,The following statement contains a magic number: do              {                  // topic name                  topicUtf8Length = ((buffer[index++] << 8) & 0xFF00);                  topicUtf8Length |= buffer[index++];                  topicUtf8 = new byte[topicUtf8Length];                  Array.Copy(buffer' index' topicUtf8' 0' topicUtf8Length);                  index += topicUtf8Length;                  tmpTopics.Add(new String(Encoding.UTF8.GetChars(topicUtf8)));              } while (index < remainingLength);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,GetBytes,The following statement contains a magic number: for (topicIdx = 0; topicIdx < this.topics.Length; topicIdx++)              {                  // check topic length                  if ((this.topics[topicIdx].Length < MIN_TOPIC_LENGTH) || (this.topics[topicIdx].Length > MAX_TOPIC_LENGTH))                      throw new MqttClientException(MqttClientErrorCode.TopicLength);                    topicsUtf8[topicIdx] = Encoding.UTF8.GetBytes(this.topics[topicIdx]);                  payloadSize += 2; // topic size (MSB' LSB)                  payloadSize += topicsUtf8[topicIdx].Length;              }
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,GetBytes,The following statement contains a magic number: do              {                  fixedHeaderSize++;                  temp = temp / 128;              } while (temp > 0);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,GetBytes,The following statement contains a magic number: buffer[index++] = (byte)((messageId >> 8) & 0x00FF);
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,GetBytes,The following statement contains a magic number: for (topicIdx = 0; topicIdx < this.topics.Length; topicIdx++)              {                  // topic name                  buffer[index++] = (byte)((topicsUtf8[topicIdx].Length >> 8) & 0x00FF); // MSB                  buffer[index++] = (byte)(topicsUtf8[topicIdx].Length & 0x00FF); // LSB                  Array.Copy(topicsUtf8[topicIdx]' 0' buffer' index' topicsUtf8[topicIdx].Length);                  index += topicsUtf8[topicIdx].Length;              }
Missing Default,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,EnqueueInflight,The following switch statement is missing a default case: switch (msg.QosLevel)                  {                      // QoS Level 0                      case MqttMsgBase.QOS_LEVEL_AT_MOST_ONCE:                            state = MqttMsgState.QueuedQos0;                          break;                        // QoS Level 1                      case MqttMsgBase.QOS_LEVEL_AT_LEAST_ONCE:                            state = MqttMsgState.QueuedQos1;                          break;                        // QoS Level 2                      case MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE:                            state = MqttMsgState.QueuedQos2;                          break;                  }
Missing Default,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\bietiekay_hacs\tools\MQTT-Test\m2mqtt-master\M2Mqtt\MqttClient.cs,DispatchEventThread,The following switch statement is missing a default case: switch (msg.Type)                              {                                  // CONNECT message received                                  case MqttMsgBase.MQTT_MSG_CONNECT_TYPE:    #if BROKER                                      // raise connected client event (CONNECT message received)                                      this.OnMqttMsgConnected((MqttMsgConnect)msg);                                      break;  #else                                      throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage);  #endif                                    // SUBSCRIBE message received                                  case MqttMsgBase.MQTT_MSG_SUBSCRIBE_TYPE:    #if BROKER                                      MqttMsgSubscribe subscribe = (MqttMsgSubscribe)msg;                                      // raise subscribe topic event (SUBSCRIBE message received)                                      this.OnMqttMsgSubscribeReceived(subscribe.MessageId' subscribe.Topics' subscribe.QoSLevels);                                      break;  #else                                      throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage);  #endif                                    // SUBACK message received                                  case MqttMsgBase.MQTT_MSG_SUBACK_TYPE:                                        // raise subscribed topic event (SUBACK message received)                                      this.OnMqttMsgSubscribed((MqttMsgSuback)msg);                                      break;                                    // PUBLISH message received                                  case MqttMsgBase.MQTT_MSG_PUBLISH_TYPE:                                        // PUBLISH message received in a published internal event' no publish succeeded                                      if (internalEvent.GetType() == typeof(MsgPublishedInternalEvent))                                          this.OnMqttMsgPublished(msg.MessageId' false);                                      else                                          // raise PUBLISH message received event                                           this.OnMqttMsgPublishReceived((MqttMsgPublish)msg);                                      break;                                    // PUBACK message received                                  case MqttMsgBase.MQTT_MSG_PUBACK_TYPE:                                        // raise published message event                                      // (PUBACK received for QoS Level 1)                                      this.OnMqttMsgPublished(msg.MessageId' true);                                      break;                                    // PUBREL message received                                  case MqttMsgBase.MQTT_MSG_PUBREL_TYPE:                                        // raise message received event                                       // (PUBREL received for QoS Level 2)                                      this.OnMqttMsgPublishReceived((MqttMsgPublish)msg);                                      break;                                    // PUBCOMP message received                                  case MqttMsgBase.MQTT_MSG_PUBCOMP_TYPE:                                        // raise published message event                                      // (PUBCOMP received for QoS Level 2)                                      this.OnMqttMsgPublished(msg.MessageId' true);                                      break;                                    // UNSUBSCRIBE message received from client                                  case MqttMsgBase.MQTT_MSG_UNSUBSCRIBE_TYPE:    #if BROKER                                      MqttMsgUnsubscribe unsubscribe = (MqttMsgUnsubscribe)msg;                                      // raise unsubscribe topic event (UNSUBSCRIBE message received)                                      this.OnMqttMsgUnsubscribeReceived(unsubscribe.MessageId' unsubscribe.Topics);                                      break;  #else                                      throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage);  #endif                                    // UNSUBACK message received                                  case MqttMsgBase.MQTT_MSG_UNSUBACK_TYPE:                                        // raise unsubscribed topic event                                      this.OnMqttMsgUnsubscribed(msg.MessageId);                                      break;                                    // DISCONNECT message received from client                                  case MqttMsgDisconnect.MQTT_MSG_DISCONNECT_TYPE:    #if BROKER                                      // raise disconnected client event (DISCONNECT message received)                                      this.OnMqttMsgDisconnected();                                      break;  #else                                      throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage);  #endif                              }
