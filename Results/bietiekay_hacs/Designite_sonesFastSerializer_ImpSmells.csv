Implementation smell,Namespace,Class,File,Method,Description
Long Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteObject,The method has 301 lines of code.
Long Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,writeTypedArray,The method has 120 lines of code.
Long Method,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,processObject,The method has 200 lines of code.
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteObject,Cyclomatic complexity of the method is 85
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,Cyclomatic complexity of the method is 18
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,Cyclomatic complexity of the method is 8
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,Cyclomatic complexity of the method is 14
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,Cyclomatic complexity of the method is 8
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,Cyclomatic complexity of the method is 8
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,Cyclomatic complexity of the method is 8
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,Cyclomatic complexity of the method is 8
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,Cyclomatic complexity of the method is 8
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,Cyclomatic complexity of the method is 8
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,Cyclomatic complexity of the method is 8
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,encodeTimeSpan,Cyclomatic complexity of the method is 9
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,writeObjectArray,Cyclomatic complexity of the method is 11
Complex Method,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,writeTypedArray,Cyclomatic complexity of the method is 40
Complex Method,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedDecimal,Cyclomatic complexity of the method is 8
Complex Method,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedObjectArray,Cyclomatic complexity of the method is 10
Complex Method,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedObjectArrayPair,Cyclomatic complexity of the method is 11
Complex Method,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,decodeTimeSpan,Cyclomatic complexity of the method is 8
Long Statement,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The length of the statement  "	checkOptimizable (value.Data < OptimizationFailure32BitValue && value.Data >= 0' "BitVector32 value is not optimizable"); " is 121.
Long Statement,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The length of the statement  "	checkOptimizable ((value.Ticks % TimeSpan.TicksPerMillisecond) == 0' "Cannot optimize a DateTime with sub-millisecond accuracy"); " is 129.
Long Statement,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The length of the statement  "		checkOptimizable ((value.Ticks % TimeSpan.TicksPerMillisecond) == 0' "Cannot optimize a DateTime with sub-millisecond accuracy"); " is 129.
Long Statement,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The length of the statement  "	checkOptimizable ((value.Ticks % TimeSpan.TicksPerMillisecond) == 0' "Cannot optimize a TimeSpan with sub-millisecond accuracy"); " is 129.
Long Statement,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The length of the statement  "	WriteOptimized (value.AssemblyQualifiedName.IndexOf ("' mscorlib'") == -1 ? value.AssemblyQualifiedName : value.FullName); " is 122.
Long Statement,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The length of the statement  "			for (; i < lastIndex && (values2 [i + 1] == null ? values1 [i + 1] == null : values2 [i + 1].Equals (values1 [i + 1])); i++) " is 124.
Long Statement,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,writeTypedArray,The length of the statement  "		writeTypeCode (elementType == typeof(object) ? SerializedType.EmptyObjectArrayType : SerializedType.EmptyTypedArrayType); " is 121.
Long Statement,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,isTypeRecreatable,The length of the statement  "		return typeof(IOwnedDataSerializableAndRecreatable).IsAssignableFrom (type) && type.GetConstructor (Type.EmptyTypes) != null; " is 125.
Long Statement,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedDateTime,The length of the statement  "	DateTime result = new DateTime (dateMask [SerializationWriter.DateYearMask]' dateMask [SerializationWriter.DateMonthMask]' dateMask [SerializationWriter.DateDayMask]); " is 167.
Long Statement,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,decodeTimeSpan,The length of the statement  "		ticks += packedData [(!hasTime && !hasMilliseconds) ? SerializationWriter.MinutesSection : SerializationWriter.SecondsSection] * TimeSpan.TicksPerSecond; " is 153.
Long Statement,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,processObject,The length of the statement  "		if (underlyingType == typeof(int) || underlyingType == typeof(uint) || underlyingType == typeof(long) || underlyingType == typeof(ulong)) " is 137.
Long Statement,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,processArrayTypes,The length of the statement  "	else if (typeCode == SerializedType.FullyOptimizedTypedArrayType || typeCode == SerializedType.PartiallyOptimizedTypedArrayType || typeCode == SerializedType.NonOptimizedTypedArrayType) { " is 187.
Complex Conditional,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,processObject,The conditional expression  "underlyingType == typeof(int) || underlyingType == typeof(uint) || underlyingType == typeof(long) || underlyingType == typeof(ulong)"  is complex.
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (value.Length > 0) {  	byte[] data = new byte[(value.Length + 7) / 8];  	value.CopyTo (data' 0);  	base.Write (data' 0' data.Length);  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (value.Length > 0) {  	byte[] data = new byte[(value.Length + 7) / 8];  	value.CopyTo (data' 0);  	base.Write (data' 0' data.Length);  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: Write ((byte)(dateMaskData >> 8));  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: Write ((byte)(dateMaskData >> 16));  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if ((data [3] & -2147483648) != 0)  	flags |= 0x01;  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if ((data [3] & -2147483648) != 0)  	flags |= 0x01;  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (data [2] == 0)  	flags |= 0x10;  else if (data [2] <= HighestOptimizable32BitValue && data [2] >= 0) {  	flags |= 0x80;  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (data [2] == 0)  	flags |= 0x10;  else if (data [2] <= HighestOptimizable32BitValue && data [2] >= 0) {  	flags |= 0x80;  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (data [2] == 0)  	flags |= 0x10;  else if (data [2] <= HighestOptimizable32BitValue && data [2] >= 0) {  	flags |= 0x80;  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (data [2] <= HighestOptimizable32BitValue && data [2] >= 0) {  	flags |= 0x80;  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (data [2] <= HighestOptimizable32BitValue && data [2] >= 0) {  	flags |= 0x80;  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if ((flags & 0x10) == 0)  	if ((flags & 0x80) != 0)  		write7bitEncodedSigned32BitValue (data [2]);  	else  		Write (data [2]);  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if ((flags & 0x10) == 0)  	if ((flags & 0x80) != 0)  		write7bitEncodedSigned32BitValue (data [2]);  	else  		Write (data [2]);  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if ((flags & 0x80) != 0)  	write7bitEncodedSigned32BitValue (data [2]);  else  	Write (data [2]);  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if ((flags & 0x80) != 0)  	write7bitEncodedSigned32BitValue (data [2]);  else  	Write (data [2]);  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: write7bitEncodedSigned32BitValue (data [2]);  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: Write (data [2]);  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (value == null)  	writeTypeCode (SerializedType.NullType);  else if (value.Length == 1) {  	char singleChar = value [0];  	if (singleChar == 'Y')  		writeTypeCode (SerializedType.YStringType);  	else if (singleChar == 'N')  		writeTypeCode (SerializedType.NStringType);  	else if (singleChar == ' ')  		writeTypeCode (SerializedType.SingleSpaceType);  	else {  		writeTypeCode (SerializedType.SingleCharStringType);  		Write (singleChar);  	}  } else if (value.Length == 0)  	writeTypeCode (SerializedType.EmptyStringType);  else {  	int stringIndex = stringLookup.Add (value);  	Write ((byte)(stringIndex % 128));  	write7bitEncodedSigned32BitValue (stringIndex >> 7);  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (value == null)  	writeTypeCode (SerializedType.NullType);  else if (value.Length == 1) {  	char singleChar = value [0];  	if (singleChar == 'Y')  		writeTypeCode (SerializedType.YStringType);  	else if (singleChar == 'N')  		writeTypeCode (SerializedType.NStringType);  	else if (singleChar == ' ')  		writeTypeCode (SerializedType.SingleSpaceType);  	else {  		writeTypeCode (SerializedType.SingleCharStringType);  		Write (singleChar);  	}  } else if (value.Length == 0)  	writeTypeCode (SerializedType.EmptyStringType);  else {  	int stringIndex = stringLookup.Add (value);  	Write ((byte)(stringIndex % 128));  	write7bitEncodedSigned32BitValue (stringIndex >> 7);  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (value.Length == 1) {  	char singleChar = value [0];  	if (singleChar == 'Y')  		writeTypeCode (SerializedType.YStringType);  	else if (singleChar == 'N')  		writeTypeCode (SerializedType.NStringType);  	else if (singleChar == ' ')  		writeTypeCode (SerializedType.SingleSpaceType);  	else {  		writeTypeCode (SerializedType.SingleCharStringType);  		Write (singleChar);  	}  } else if (value.Length == 0)  	writeTypeCode (SerializedType.EmptyStringType);  else {  	int stringIndex = stringLookup.Add (value);  	Write ((byte)(stringIndex % 128));  	write7bitEncodedSigned32BitValue (stringIndex >> 7);  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (value.Length == 1) {  	char singleChar = value [0];  	if (singleChar == 'Y')  		writeTypeCode (SerializedType.YStringType);  	else if (singleChar == 'N')  		writeTypeCode (SerializedType.NStringType);  	else if (singleChar == ' ')  		writeTypeCode (SerializedType.SingleSpaceType);  	else {  		writeTypeCode (SerializedType.SingleCharStringType);  		Write (singleChar);  	}  } else if (value.Length == 0)  	writeTypeCode (SerializedType.EmptyStringType);  else {  	int stringIndex = stringLookup.Add (value);  	Write ((byte)(stringIndex % 128));  	write7bitEncodedSigned32BitValue (stringIndex >> 7);  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (value.Length == 0)  	writeTypeCode (SerializedType.EmptyStringType);  else {  	int stringIndex = stringLookup.Add (value);  	Write ((byte)(stringIndex % 128));  	write7bitEncodedSigned32BitValue (stringIndex >> 7);  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: if (value.Length == 0)  	writeTypeCode (SerializedType.EmptyStringType);  else {  	int stringIndex = stringLookup.Add (value);  	Write ((byte)(stringIndex % 128));  	write7bitEncodedSigned32BitValue (stringIndex >> 7);  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: Write ((byte)(stringIndex % 128));  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,WriteOptimized,The following statement contains a magic number: write7bitEncodedSigned32BitValue (stringIndex >> 7);  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,encodeTimeSpan,The following statement contains a magic number: if (milliseconds != 0) {  	packedData [HasMillisecondsSection] = 1;  	packedData [MillisecondsSection] = milliseconds;  	optionalBytes = 2;  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,encodeTimeSpan,The following statement contains a magic number: optionalBytes = 2;  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,encodeTimeSpan,The following statement contains a magic number: Write ((byte)(data >> 8));  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,encodeTimeSpan,The following statement contains a magic number: if (optionalBytes > 0)  	Write ((byte)(data >> 16));  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,encodeTimeSpan,The following statement contains a magic number: Write ((byte)(data >> 16));  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,encodeTimeSpan,The following statement contains a magic number: if (optionalBytes > 1)  	Write ((byte)(data >> 24));  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,encodeTimeSpan,The following statement contains a magic number: Write ((byte)(data >> 24));  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,write7bitEncodedSigned32BitValue,The following statement contains a magic number: while (unsignedValue >= 0x80) {  	Write ((byte)(unsignedValue | 0x80));  	unsignedValue >>= 7;  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,write7bitEncodedSigned32BitValue,The following statement contains a magic number: unsignedValue >>= 7;  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,write7bitEncodedSigned64BitValue,The following statement contains a magic number: while (unsignedValue >= 0x80) {  	Write ((byte)(unsignedValue | 0x80));  	unsignedValue >>= 7;  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,write7bitEncodedSigned64BitValue,The following statement contains a magic number: unsignedValue >>= 7;  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,write7bitEncodedUnsigned32BitValue,The following statement contains a magic number: while (value >= 0x80) {  	Write ((byte)(value | 0x80));  	value >>= 7;  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,write7bitEncodedUnsigned32BitValue,The following statement contains a magic number: value >>= 7;  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,write7bitEncodedUnsigned64BitValue,The following statement contains a magic number: while (value >= 0x80) {  	Write ((byte)(value | 0x80));  	value >>= 7;  }  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,write7bitEncodedUnsigned64BitValue,The following statement contains a magic number: value >>= 7;  
Magic Number,sones.Storage.Serializer,SerializationWriter,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,DumpTypeUsage,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	#if DEBUG  	if (typeUsage [i] != 0)  		sb.AppendFormat ("{0' 8:n0}: {1}\r\n"' typeUsage [i]' (SerializedType)i);  	#endif  }  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,SerializationReader,The following statement contains a magic number: stream.Position = 4;  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadGuid,The following statement contains a magic number: return new Guid (ReadBytes (16));  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedBitArray,The following statement contains a magic number: if (length == 0)  	return FullyOptimizableTypedArray;  else {  	BitArray result = new BitArray (base.ReadBytes ((length + 7) / 8));  	result.Length = length;  	return result;  }  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedBitArray,The following statement contains a magic number: if (length == 0)  	return FullyOptimizableTypedArray;  else {  	BitArray result = new BitArray (base.ReadBytes ((length + 7) / 8));  	result.Length = length;  	return result;  }  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 4) == 0)  	if ((flags & 32) != 0)  		lo = ReadOptimizedInt32 ();  	else  		lo = ReadInt32 ();  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 4) == 0)  	if ((flags & 32) != 0)  		lo = ReadOptimizedInt32 ();  	else  		lo = ReadInt32 ();  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 32) != 0)  	lo = ReadOptimizedInt32 ();  else  	lo = ReadInt32 ();  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 8) == 0)  	if ((flags & 64) != 0)  		mid = ReadOptimizedInt32 ();  	else  		mid = ReadInt32 ();  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 8) == 0)  	if ((flags & 64) != 0)  		mid = ReadOptimizedInt32 ();  	else  		mid = ReadInt32 ();  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 64) != 0)  	mid = ReadOptimizedInt32 ();  else  	mid = ReadInt32 ();  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 16) == 0)  	if ((flags & 128) != 0)  		hi = ReadOptimizedInt32 ();  	else  		hi = ReadInt32 ();  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 16) == 0)  	if ((flags & 128) != 0)  		hi = ReadOptimizedInt32 ();  	else  		hi = ReadInt32 ();  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 128) != 0)  	hi = ReadOptimizedInt32 ();  else  	hi = ReadInt32 ();  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedInt32,The following statement contains a magic number: while (true) {  	byte nextByte = ReadByte ();  	result |= ((int)nextByte & 0x7f) << bitShift;  	bitShift += 7;  	if ((nextByte & 0x80) == 0)  		return result;  }  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedInt32,The following statement contains a magic number: bitShift += 7;  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedInt64,The following statement contains a magic number: while (true) {  	byte nextByte = ReadByte ();  	result |= ((long)nextByte & 0x7f) << bitShift;  	bitShift += 7;  	if ((nextByte & 0x80) == 0)  		return result;  }  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedInt64,The following statement contains a magic number: bitShift += 7;  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedUInt32,The following statement contains a magic number: while (true) {  	byte nextByte = ReadByte ();  	result |= ((uint)nextByte & 0x7f) << bitShift;  	bitShift += 7;  	if ((nextByte & 0x80) == 0)  		return result;  }  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedUInt32,The following statement contains a magic number: bitShift += 7;  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedUInt64,The following statement contains a magic number: while (true) {  	byte nextByte = ReadByte ();  	result |= ((ulong)nextByte & 0x7f) << bitShift;  	bitShift += 7;  	if ((nextByte & 0x80) == 0)  		return result;  }  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,ReadOptimizedUInt64,The following statement contains a magic number: bitShift += 7;  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,decodeTimeSpan,The following statement contains a magic number: if (hasMilliseconds)  	packedData = new BitVector32 (packedData.Data | (ReadByte () << 16) | (ReadByte () << 24));  else if (hasSeconds && hasTime) {  	packedData = new BitVector32 (packedData.Data | (ReadByte () << 16));  }  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,decodeTimeSpan,The following statement contains a magic number: if (hasMilliseconds)  	packedData = new BitVector32 (packedData.Data | (ReadByte () << 16) | (ReadByte () << 24));  else if (hasSeconds && hasTime) {  	packedData = new BitVector32 (packedData.Data | (ReadByte () << 16));  }  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,decodeTimeSpan,The following statement contains a magic number: if (hasMilliseconds)  	packedData = new BitVector32 (packedData.Data | (ReadByte () << 16) | (ReadByte () << 24));  else if (hasSeconds && hasTime) {  	packedData = new BitVector32 (packedData.Data | (ReadByte () << 16));  }  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,decodeTimeSpan,The following statement contains a magic number: packedData = new BitVector32 (packedData.Data | (ReadByte () << 16) | (ReadByte () << 24));  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,decodeTimeSpan,The following statement contains a magic number: packedData = new BitVector32 (packedData.Data | (ReadByte () << 16) | (ReadByte () << 24));  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,decodeTimeSpan,The following statement contains a magic number: if (hasSeconds && hasTime) {  	packedData = new BitVector32 (packedData.Data | (ReadByte () << 16));  }  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,decodeTimeSpan,The following statement contains a magic number: packedData = new BitVector32 (packedData.Data | (ReadByte () << 16));  
Magic Number,sones.Storage.Serializer,SerializationReader,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\sonesFastSerializer\FastSerializer.cs,readTokenizedString,The following statement contains a magic number: return stringTokenList [(ReadOptimizedInt32 () << 7) + bucket];  
