Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Telekom.Common.Model,TelekomRequest,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\Model\TelekomRequest.cs,BuildRequestParameters,Cyclomatic complexity of the method is 11
Complex Method,Telekom.Common.WebRequest,TelekomWebRequest,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\WebRequest\TelekomWebRequest.cs,WritePayload,Cyclomatic complexity of the method is 8
Complex Method,Telekom.SendSms,SendSmsClient,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\SendSms\SendSmsClient.cs,CreateAuthenticatedJsonRequest,Cyclomatic complexity of the method is 13
Long Parameter List,Telekom.Common.Auth,TelekomOAuth2Auth,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\Auth\TelekomOAuth2Auth.cs,TelekomOAuth2Auth,The method has 6 parameters.
Long Statement,Telekom.Common.Auth,TelekomOAuth2Auth,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\Auth\TelekomOAuth2Auth.cs,CreateRequestAccessTokenParams,The length of the statement  "	TelekomJsonWebRequest<AccessTokenResponse> request = new TelekomJsonWebRequest<AccessTokenResponse> (uri' HttpMethod.POST); " is 123.
Long Statement,Telekom.Common,UriHelper,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\UriHelper.cs,IsUnreservedChar,The length of the statement  "	return ((b >= 'a' && b <= 'z') || (b >= 'A' && b <= 'Z') || (b >= '0' && b <= '9') || (b == '-') || (b == '.') || (b == '_') || (b == '~')); " is 140.
Long Statement,Telekom.Common.Model,TelekomRequest,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\Model\TelekomRequest.cs,BuildRequestParameters,The length of the statement  "	PropertyInfo[] properties = this.GetType ().GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance); " is 129.
Long Statement,Telekom.Common.Model,TelekomRequest,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\Model\TelekomRequest.cs,BuildRequestParameters,The length of the statement  "		HttpParameterAttribute httpParamAttribute = property.GetCustomAttributes (typeof(HttpParameterAttribute)' false).SingleOrDefault () as HttpParameterAttribute; " is 158.
Long Statement,Telekom.Common.Model,TelekomRequest,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\Model\TelekomRequest.cs,BuildRequestParameters,The length of the statement  "		NoHttpParameterAttribute noHttpParamAttribute = property.GetCustomAttributes (typeof(NoHttpParameterAttribute)' false).SingleOrDefault () as NoHttpParameterAttribute; " is 166.
Long Statement,Telekom.Common.Model,TelekomRequest,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\Model\TelekomRequest.cs,BuildRequestParameters,The length of the statement  "					EnumMemberAttribute enumMemberAttrib = enumFieldInfo.GetCustomAttributes (typeof(EnumMemberAttribute)' false).SingleOrDefault () as EnumMemberAttribute; " is 152.
Long Statement,Telekom.Common.Model,TelekomRequest,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\Model\TelekomRequest.cs,EnforceRequiredFields,The length of the statement  "	PropertyInfo[] properties = this.GetType ().GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance); " is 129.
Magic Number,Telekom.Common.Auth,TelekomUPAuth,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\Auth\TelekomUPAuth.cs,ParseTokenResponse,The following statement contains a magic number: if (tokenStart >= 0) {  	string tokenData = responseData.Substring (tokenStart + 6);  	DateTime tokenExpires = DateTime.Parse (response.Headers ["Expires"]);  	AccessToken = tokenData;  	AccessTokenValidUntil = tokenExpires;  }  
Magic Number,Telekom.Common.WebRequest,TelekomWebRequest,F:\newReposMay17\bietiekay_hacs\hacs\Libraries\TelekomSendSMS\Telekom\Common\WebRequest\TelekomWebRequest.cs,WritePayload,The following statement contains a magic number: if (rawContent != null) {  	request.ContentType = rawContentType;  	//set stream position to 0 for reading from it.  	rawContent.Position = 0;  	// Copy stream  	byte[] buffer = new byte[32768];  	int read;  	while ((read = rawContent.Read (buffer' 0' buffer.Length)) > 0) {  		stream.Write (buffer' 0' read);  	}  	stream.Close ();  } else if (attachedFiles.Count > 0) {  	// If files have to be atteched' use Form Multipart format  	using (var paramWriter = new FormMultipartWriter (stream)) {  		WriteBodyParamter (paramWriter);  	}  } else {  	using (var paramWriter = new RequestStringWriter (stream)) {  		WriteBodyParamter (paramWriter);  	}  }  
