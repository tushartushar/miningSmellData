Implementation smell,Namespace,Class,File,Method,Description
Long Method,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The method has 173 lines of code.
Long Method,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The method has 118 lines of code.
Long Method,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The method has 105 lines of code.
Complex Method,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,ToString,Cyclomatic complexity of the method is 18
Complex Method,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,Cyclomatic complexity of the method is 44
Complex Method,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,Cyclomatic complexity of the method is 29
Complex Method,MAXDebug,DiffHouse,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\DiffSet\DiffHouse.cs,CalculateDifferences,Cyclomatic complexity of the method is 19
Complex Method,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,Cyclomatic complexity of the method is 17
Long Statement,MAXDebug,HeatingThermostatDiff,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\DiffSet\HeatingThermostatDiff.cs,ToString,The length of the statement  "	//return string.Format ("[HeatingThermostatDiff: DeviceType={0}' DeviceName={1}' RoomID={2}' RoomName={3}' Mode={4}' Temperature={5}' LowBattery={6}]"' DeviceType' DeviceName' RoomID' RoomName' Mode' Temperature' LowBattery); " is 225.
Magic Number,MAXDebug,MAXEncodeDecode,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\MAXEncodeDecode.cs,ProcessMessage,The following statement contains a magic number: if (Message.Length < 2)  	throw new MAXException ("Unable to process message: " + Message);  
Magic Number,MAXDebug,H_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\H_Message.cs,H_Message,The following statement contains a magic number: if (RAW_Message.Length < 2)  	throw new MAXException ("Unable to process the RAW Message.");  
Magic Number,MAXDebug,H_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\H_Message.cs,H_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	MAXserialNumber = SplittedRAWMessage [0];  	RFAddress = SplittedRAWMessage [1];  	//Int32.Parse(SplittedRAWMessage[1]'System.Globalization.NumberStyles.HexNumber);  	FirmwareVersion = Int32.Parse (SplittedRAWMessage [2]' System.Globalization.NumberStyles.HexNumber);  	HTTPConnId = SplittedRAWMessage [4];  	CubeDateTime = DecodeDateTime (SplittedRAWMessage [7]' SplittedRAWMessage [8]);  	_House.CubeInformation = this;  } else  	throw new MAXException ("Unable to process H Message. Not enough content.");  
Magic Number,MAXDebug,H_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\H_Message.cs,H_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	MAXserialNumber = SplittedRAWMessage [0];  	RFAddress = SplittedRAWMessage [1];  	//Int32.Parse(SplittedRAWMessage[1]'System.Globalization.NumberStyles.HexNumber);  	FirmwareVersion = Int32.Parse (SplittedRAWMessage [2]' System.Globalization.NumberStyles.HexNumber);  	HTTPConnId = SplittedRAWMessage [4];  	CubeDateTime = DecodeDateTime (SplittedRAWMessage [7]' SplittedRAWMessage [8]);  	_House.CubeInformation = this;  } else  	throw new MAXException ("Unable to process H Message. Not enough content.");  
Magic Number,MAXDebug,H_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\H_Message.cs,H_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	MAXserialNumber = SplittedRAWMessage [0];  	RFAddress = SplittedRAWMessage [1];  	//Int32.Parse(SplittedRAWMessage[1]'System.Globalization.NumberStyles.HexNumber);  	FirmwareVersion = Int32.Parse (SplittedRAWMessage [2]' System.Globalization.NumberStyles.HexNumber);  	HTTPConnId = SplittedRAWMessage [4];  	CubeDateTime = DecodeDateTime (SplittedRAWMessage [7]' SplittedRAWMessage [8]);  	_House.CubeInformation = this;  } else  	throw new MAXException ("Unable to process H Message. Not enough content.");  
Magic Number,MAXDebug,H_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\H_Message.cs,H_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	MAXserialNumber = SplittedRAWMessage [0];  	RFAddress = SplittedRAWMessage [1];  	//Int32.Parse(SplittedRAWMessage[1]'System.Globalization.NumberStyles.HexNumber);  	FirmwareVersion = Int32.Parse (SplittedRAWMessage [2]' System.Globalization.NumberStyles.HexNumber);  	HTTPConnId = SplittedRAWMessage [4];  	CubeDateTime = DecodeDateTime (SplittedRAWMessage [7]' SplittedRAWMessage [8]);  	_House.CubeInformation = this;  } else  	throw new MAXException ("Unable to process H Message. Not enough content.");  
Magic Number,MAXDebug,H_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\H_Message.cs,H_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	MAXserialNumber = SplittedRAWMessage [0];  	RFAddress = SplittedRAWMessage [1];  	//Int32.Parse(SplittedRAWMessage[1]'System.Globalization.NumberStyles.HexNumber);  	FirmwareVersion = Int32.Parse (SplittedRAWMessage [2]' System.Globalization.NumberStyles.HexNumber);  	HTTPConnId = SplittedRAWMessage [4];  	CubeDateTime = DecodeDateTime (SplittedRAWMessage [7]' SplittedRAWMessage [8]);  	_House.CubeInformation = this;  } else  	throw new MAXException ("Unable to process H Message. Not enough content.");  
Magic Number,MAXDebug,H_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\H_Message.cs,H_Message,The following statement contains a magic number: FirmwareVersion = Int32.Parse (SplittedRAWMessage [2]' System.Globalization.NumberStyles.HexNumber);  
Magic Number,MAXDebug,H_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\H_Message.cs,H_Message,The following statement contains a magic number: HTTPConnId = SplittedRAWMessage [4];  
Magic Number,MAXDebug,H_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\H_Message.cs,H_Message,The following statement contains a magic number: CubeDateTime = DecodeDateTime (SplittedRAWMessage [7]' SplittedRAWMessage [8]);  
Magic Number,MAXDebug,H_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\H_Message.cs,H_Message,The following statement contains a magic number: CubeDateTime = DecodeDateTime (SplittedRAWMessage [7]' SplittedRAWMessage [8]);  
Magic Number,MAXDebug,C_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\C_Message.cs,C_Message,The following statement contains a magic number: if (RAW_Message.Length < 2)  	throw new MAXException ("Unable to process the RAW Message.");  
Magic Number,MAXDebug,C_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\C_Message.cs,C_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 2) {  	RFAdress = SplittedRAWMessage [0];  	//Int32.Parse(SplittedRAWMessage[0]'System.Globalization.NumberStyles.HexNumber);  	RawMessageDecoded = Base64.Decode (SplittedRAWMessage [1]);  } else  	throw new MAXException ("Unable to process C Message. Not enough content.");  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (RAW_Message.Length < 2)  	throw new MAXException ("Unable to process the RAW Message.");  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: RawMessageDecoded = Base64.Decode (RAW_Message.Remove (0' 2));  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: foreach (byte[] array in Tokenized) {  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i <= 2; i++) {  		sb.Append (array [i]);  	}  	// get data 1 and data 2 out  	// on position 5'6  	byte Data1 = array [4];  	byte Data2 = array [5];  	String binValueData1 = Convert.ToString (Data1' 2);  	binValueData1 = binValueData1.PadLeft (8' '0');  	String binValueData2 = Convert.ToString (Data2' 2);  	binValueData2 = binValueData2.PadLeft (8' '0');  	Int32 Cursor = 7;  	// the current position' skipping ?1'  	String RFAddress = sb.ToString ();  	#region look for this RF Adress in the House's device list  	List<IMAXDevice> AllDevices = _House.GetAllDevices ();  	IMAXDevice foundDevice = null;  	foreach (IMAXDevice _device in AllDevices) {  		if (_device.RFAddress == RFAddress) {  			foundDevice = _device;  			break;  		}  	}  	#endregion  	if (foundDevice != null) {  		DevicesInThisMessage.Add (foundDevice);  		#region HeatingThermostat  		if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  			HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.Mode = ThermostatModes.automatic;  				break;  			case "01":  				KnownDevice.Mode = ThermostatModes.manual;  				break;  			case "10":  				KnownDevice.Mode = ThermostatModes.vacation;  				break;  			case "11":  				KnownDevice.Mode = ThermostatModes.boost;  				break;  			default:  				break;  			}  			#endregion  			#endregion  			// hurray' we've got a device we know how to handle B-)  			((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  			Cursor++;  		}  		#endregion  		#region ShutterContact  		if (foundDevice.Type == DeviceTypes.ShutterContact) {  			ShutterContact KnownDevice = (ShutterContact)foundDevice;  			#region get all those flags out of Data1 and Data2  			#region Valid  			if (binValueData1 [3] == '1')  				KnownDevice.Valid = true;  			else  				KnownDevice.Valid = false;  			#endregion  			#region Error  			if (binValueData1 [4] == '1')  				KnownDevice.Error = true;  			else  				KnownDevice.Error = false;  			#endregion  			#region IsAnswer  			if (binValueData1 [5] == '1')  				KnownDevice.IsAnswer = true;  			else  				KnownDevice.IsAnswer = false;  			#endregion  			#region LowBattery  			if (binValueData2 [0] == '1')  				KnownDevice.LowBattery = true;  			else  				KnownDevice.LowBattery = false;  			#endregion  			#region LinkError  			if (binValueData2 [1] == '1')  				KnownDevice.LinkError = true;  			else  				KnownDevice.LinkError = false;  			#endregion  			#region PanelLock  			if (binValueData2 [2] == '1')  				KnownDevice.PanelLock = true;  			else  				KnownDevice.PanelLock = false;  			#endregion  			#region GatewayOK  			if (binValueData2 [3] == '1')  				KnownDevice.GatewayOK = true;  			else  				KnownDevice.GatewayOK = false;  			#endregion  			#region Mode  			String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  			switch (ModeValue) {  			case "00":  				KnownDevice.ShutterState = ShutterContactModes.closed;  				break;  			case "10":  				KnownDevice.ShutterState = ShutterContactModes.open;  				break;  			default:  				break;  			}  			#endregion  			#endregion  		}  		#endregion  	}  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: for (int i = 0; i <= 2; i++) {  	sb.Append (array [i]);  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: binValueData1 = binValueData1.PadLeft (8' '0');  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: binValueData2 = binValueData2.PadLeft (8' '0');  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice != null) {  	DevicesInThisMessage.Add (foundDevice);  	#region HeatingThermostat  	if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  		HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.Mode = ThermostatModes.automatic;  			break;  		case "01":  			KnownDevice.Mode = ThermostatModes.manual;  			break;  		case "10":  			KnownDevice.Mode = ThermostatModes.vacation;  			break;  		case "11":  			KnownDevice.Mode = ThermostatModes.boost;  			break;  		default:  			break;  		}  		#endregion  		#endregion  		// hurray' we've got a device we know how to handle B-)  		((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  		Cursor++;  	}  	#endregion  	#region ShutterContact  	if (foundDevice.Type == DeviceTypes.ShutterContact) {  		ShutterContact KnownDevice = (ShutterContact)foundDevice;  		#region get all those flags out of Data1 and Data2  		#region Valid  		if (binValueData1 [3] == '1')  			KnownDevice.Valid = true;  		else  			KnownDevice.Valid = false;  		#endregion  		#region Error  		if (binValueData1 [4] == '1')  			KnownDevice.Error = true;  		else  			KnownDevice.Error = false;  		#endregion  		#region IsAnswer  		if (binValueData1 [5] == '1')  			KnownDevice.IsAnswer = true;  		else  			KnownDevice.IsAnswer = false;  		#endregion  		#region LowBattery  		if (binValueData2 [0] == '1')  			KnownDevice.LowBattery = true;  		else  			KnownDevice.LowBattery = false;  		#endregion  		#region LinkError  		if (binValueData2 [1] == '1')  			KnownDevice.LinkError = true;  		else  			KnownDevice.LinkError = false;  		#endregion  		#region PanelLock  		if (binValueData2 [2] == '1')  			KnownDevice.PanelLock = true;  		else  			KnownDevice.PanelLock = false;  		#endregion  		#region GatewayOK  		if (binValueData2 [3] == '1')  			KnownDevice.GatewayOK = true;  		else  			KnownDevice.GatewayOK = false;  		#endregion  		#region Mode  		String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  		switch (ModeValue) {  		case "00":  			KnownDevice.ShutterState = ShutterContactModes.closed;  			break;  		case "10":  			KnownDevice.ShutterState = ShutterContactModes.open;  			break;  		default:  			break;  		}  		#endregion  		#endregion  	}  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  	HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.Mode = ThermostatModes.automatic;  		break;  	case "01":  		KnownDevice.Mode = ThermostatModes.manual;  		break;  	case "10":  		KnownDevice.Mode = ThermostatModes.vacation;  		break;  	case "11":  		KnownDevice.Mode = ThermostatModes.boost;  		break;  	default:  		break;  	}  	#endregion  	#endregion  	// hurray' we've got a device we know how to handle B-)  	((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  	Cursor++;  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  	HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.Mode = ThermostatModes.automatic;  		break;  	case "01":  		KnownDevice.Mode = ThermostatModes.manual;  		break;  	case "10":  		KnownDevice.Mode = ThermostatModes.vacation;  		break;  	case "11":  		KnownDevice.Mode = ThermostatModes.boost;  		break;  	default:  		break;  	}  	#endregion  	#endregion  	// hurray' we've got a device we know how to handle B-)  	((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  	Cursor++;  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  	HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.Mode = ThermostatModes.automatic;  		break;  	case "01":  		KnownDevice.Mode = ThermostatModes.manual;  		break;  	case "10":  		KnownDevice.Mode = ThermostatModes.vacation;  		break;  	case "11":  		KnownDevice.Mode = ThermostatModes.boost;  		break;  	default:  		break;  	}  	#endregion  	#endregion  	// hurray' we've got a device we know how to handle B-)  	((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  	Cursor++;  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  	HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.Mode = ThermostatModes.automatic;  		break;  	case "01":  		KnownDevice.Mode = ThermostatModes.manual;  		break;  	case "10":  		KnownDevice.Mode = ThermostatModes.vacation;  		break;  	case "11":  		KnownDevice.Mode = ThermostatModes.boost;  		break;  	default:  		break;  	}  	#endregion  	#endregion  	// hurray' we've got a device we know how to handle B-)  	((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  	Cursor++;  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  	HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.Mode = ThermostatModes.automatic;  		break;  	case "01":  		KnownDevice.Mode = ThermostatModes.manual;  		break;  	case "10":  		KnownDevice.Mode = ThermostatModes.vacation;  		break;  	case "11":  		KnownDevice.Mode = ThermostatModes.boost;  		break;  	default:  		break;  	}  	#endregion  	#endregion  	// hurray' we've got a device we know how to handle B-)  	((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  	Cursor++;  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  	HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.Mode = ThermostatModes.automatic;  		break;  	case "01":  		KnownDevice.Mode = ThermostatModes.manual;  		break;  	case "10":  		KnownDevice.Mode = ThermostatModes.vacation;  		break;  	case "11":  		KnownDevice.Mode = ThermostatModes.boost;  		break;  	default:  		break;  	}  	#endregion  	#endregion  	// hurray' we've got a device we know how to handle B-)  	((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  	Cursor++;  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  	HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.Mode = ThermostatModes.automatic;  		break;  	case "01":  		KnownDevice.Mode = ThermostatModes.manual;  		break;  	case "10":  		KnownDevice.Mode = ThermostatModes.vacation;  		break;  	case "11":  		KnownDevice.Mode = ThermostatModes.boost;  		break;  	default:  		break;  	}  	#endregion  	#endregion  	// hurray' we've got a device we know how to handle B-)  	((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  	Cursor++;  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.HeatingThermostat) {  	HeatingThermostat KnownDevice = (HeatingThermostat)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.Mode = ThermostatModes.automatic;  		break;  	case "01":  		KnownDevice.Mode = ThermostatModes.manual;  		break;  	case "10":  		KnownDevice.Mode = ThermostatModes.vacation;  		break;  	case "11":  		KnownDevice.Mode = ThermostatModes.boost;  		break;  	default:  		break;  	}  	#endregion  	#endregion  	// hurray' we've got a device we know how to handle B-)  	((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  	Cursor++;  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (binValueData1 [3] == '1')  	KnownDevice.Valid = true;  else  	KnownDevice.Valid = false;  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (binValueData1 [4] == '1')  	KnownDevice.Error = true;  else  	KnownDevice.Error = false;  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (binValueData1 [5] == '1')  	KnownDevice.IsAnswer = true;  else  	KnownDevice.IsAnswer = false;  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (binValueData2 [2] == '1')  	KnownDevice.PanelLock = true;  else  	KnownDevice.PanelLock = false;  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (binValueData2 [3] == '1')  	KnownDevice.GatewayOK = true;  else  	KnownDevice.GatewayOK = false;  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: ((HeatingThermostat)foundDevice).Temperature = array [Cursor] / 2;  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.ShutterContact) {  	ShutterContact KnownDevice = (ShutterContact)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.ShutterState = ShutterContactModes.closed;  		break;  	case "10":  		KnownDevice.ShutterState = ShutterContactModes.open;  		break;  	default:  		break;  	}  	#endregion  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.ShutterContact) {  	ShutterContact KnownDevice = (ShutterContact)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.ShutterState = ShutterContactModes.closed;  		break;  	case "10":  		KnownDevice.ShutterState = ShutterContactModes.open;  		break;  	default:  		break;  	}  	#endregion  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.ShutterContact) {  	ShutterContact KnownDevice = (ShutterContact)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.ShutterState = ShutterContactModes.closed;  		break;  	case "10":  		KnownDevice.ShutterState = ShutterContactModes.open;  		break;  	default:  		break;  	}  	#endregion  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.ShutterContact) {  	ShutterContact KnownDevice = (ShutterContact)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.ShutterState = ShutterContactModes.closed;  		break;  	case "10":  		KnownDevice.ShutterState = ShutterContactModes.open;  		break;  	default:  		break;  	}  	#endregion  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.ShutterContact) {  	ShutterContact KnownDevice = (ShutterContact)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.ShutterState = ShutterContactModes.closed;  		break;  	case "10":  		KnownDevice.ShutterState = ShutterContactModes.open;  		break;  	default:  		break;  	}  	#endregion  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.ShutterContact) {  	ShutterContact KnownDevice = (ShutterContact)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.ShutterState = ShutterContactModes.closed;  		break;  	case "10":  		KnownDevice.ShutterState = ShutterContactModes.open;  		break;  	default:  		break;  	}  	#endregion  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (foundDevice.Type == DeviceTypes.ShutterContact) {  	ShutterContact KnownDevice = (ShutterContact)foundDevice;  	#region get all those flags out of Data1 and Data2  	#region Valid  	if (binValueData1 [3] == '1')  		KnownDevice.Valid = true;  	else  		KnownDevice.Valid = false;  	#endregion  	#region Error  	if (binValueData1 [4] == '1')  		KnownDevice.Error = true;  	else  		KnownDevice.Error = false;  	#endregion  	#region IsAnswer  	if (binValueData1 [5] == '1')  		KnownDevice.IsAnswer = true;  	else  		KnownDevice.IsAnswer = false;  	#endregion  	#region LowBattery  	if (binValueData2 [0] == '1')  		KnownDevice.LowBattery = true;  	else  		KnownDevice.LowBattery = false;  	#endregion  	#region LinkError  	if (binValueData2 [1] == '1')  		KnownDevice.LinkError = true;  	else  		KnownDevice.LinkError = false;  	#endregion  	#region PanelLock  	if (binValueData2 [2] == '1')  		KnownDevice.PanelLock = true;  	else  		KnownDevice.PanelLock = false;  	#endregion  	#region GatewayOK  	if (binValueData2 [3] == '1')  		KnownDevice.GatewayOK = true;  	else  		KnownDevice.GatewayOK = false;  	#endregion  	#region Mode  	String ModeValue = binValueData2 [6] + "" + binValueData2 [7];  	switch (ModeValue) {  	case "00":  		KnownDevice.ShutterState = ShutterContactModes.closed;  		break;  	case "10":  		KnownDevice.ShutterState = ShutterContactModes.open;  		break;  	default:  		break;  	}  	#endregion  	#endregion  }  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (binValueData1 [3] == '1')  	KnownDevice.Valid = true;  else  	KnownDevice.Valid = false;  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (binValueData1 [4] == '1')  	KnownDevice.Error = true;  else  	KnownDevice.Error = false;  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (binValueData1 [5] == '1')  	KnownDevice.IsAnswer = true;  else  	KnownDevice.IsAnswer = false;  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (binValueData2 [2] == '1')  	KnownDevice.PanelLock = true;  else  	KnownDevice.PanelLock = false;  
Magic Number,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The following statement contains a magic number: if (binValueData2 [3] == '1')  	KnownDevice.GatewayOK = true;  else  	KnownDevice.GatewayOK = false;  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: if (RAW_Message.Length < 2)  	throw new MAXException ("Unable to process the RAW Message.");  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	Index = Int32.Parse (SplittedRAWMessage [0]' System.Globalization.NumberStyles.HexNumber);  	Count = Int32.Parse (SplittedRAWMessage [1]' System.Globalization.NumberStyles.HexNumber);  	RawMessageDecoded = Base64.Decode (SplittedRAWMessage [2]);  	//				System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();  	//				Console.WriteLine(enc.GetString (RawMessageDecoded));  	//				StringBuilder hexlist = new StringBuilder();  	//  	//				foreach(Byte _byte in RawMessageDecoded)  	//				{  	//					hexlist.Append(_byte.ToString()+" ");  	//				}  	Int32 Cursor = 2;  	// now go deeper  	Byte RoomCount = RawMessageDecoded [Cursor];  	Cursor++;  	#region Rooms  	// go through every room  	for (byte roomnumber = 1; roomnumber <= RoomCount; roomnumber++) {  		Room newRoom = new Room (thisHouse);  		newRoom.RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		Byte RoomNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] RoomName = new byte[RoomNameLength];  		for (Byte j = 0; j <= RoomNameLength - 1; j++) {  			//RoomName.Append((char)RawMessageDecoded[Cursor]);  			RoomName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newRoom.RoomName = System.Text.Encoding.UTF8.GetString (RoomName);  		StringBuilder RFAddress_Buffer = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newRoom.RFAddress = RFAddress_Buffer.ToString ();  		//Int32.Parse(RFAddress_Buffer.ToString()'System.Globalization.NumberStyles.HexNumber);  		_House.Rooms.Add (newRoom);  	}  	#region Devices  	//newRoom.RFAddress = Int32.Parse(RFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	Byte DeviceCount = RawMessageDecoded [Cursor];  	Cursor++;  	// go through all the devices in here  	for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  		// read in the device  		IMAXDevice newDevice = new UnknownDevice ();  		#region Determine DeviceType  		Byte DevType = RawMessageDecoded [Cursor];  		Cursor++;  		switch (DevType) {  		case 1:  			newDevice = new HeatingThermostat ();  			break;  		case 2:  			newDevice = new HeatingThermostatPlus ();  			break;  		case 3:  			newDevice = new WallMountedThermostat ();  			break;  		case 4:  			newDevice = new ShutterContact ();  			break;  		case 5:  			newDevice = new PushButton ();  			break;  		default:  			break;  		}  		#endregion  		StringBuilder DeviceRFAddress = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.RFAddress = DeviceRFAddress.ToString ();  		//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  		StringBuilder DeviceSerialNumber = new StringBuilder ();  		for (Byte j = 0; j <= 10 - 1; j++) {  			DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.SerialNumber = DeviceSerialNumber.ToString ();  		Byte DeviceNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] DeviceName = new byte[DeviceNameLength];  		for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  			DeviceName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  		Byte RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		// add the device to the room  		foreach (Room newRoom in _House.Rooms) {  			if (newRoom.RoomID == RoomID) {  				newDevice.AssociatedRoom = newRoom;  				newRoom.Devices.Add (newDevice);  				break;  			}  		}  	}  	#endregion  	// add this Room to the M_Message-Structure  	#endregion  } else  	throw new MAXException ("Unable to process M Message. Not enough content.");  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	Index = Int32.Parse (SplittedRAWMessage [0]' System.Globalization.NumberStyles.HexNumber);  	Count = Int32.Parse (SplittedRAWMessage [1]' System.Globalization.NumberStyles.HexNumber);  	RawMessageDecoded = Base64.Decode (SplittedRAWMessage [2]);  	//				System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();  	//				Console.WriteLine(enc.GetString (RawMessageDecoded));  	//				StringBuilder hexlist = new StringBuilder();  	//  	//				foreach(Byte _byte in RawMessageDecoded)  	//				{  	//					hexlist.Append(_byte.ToString()+" ");  	//				}  	Int32 Cursor = 2;  	// now go deeper  	Byte RoomCount = RawMessageDecoded [Cursor];  	Cursor++;  	#region Rooms  	// go through every room  	for (byte roomnumber = 1; roomnumber <= RoomCount; roomnumber++) {  		Room newRoom = new Room (thisHouse);  		newRoom.RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		Byte RoomNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] RoomName = new byte[RoomNameLength];  		for (Byte j = 0; j <= RoomNameLength - 1; j++) {  			//RoomName.Append((char)RawMessageDecoded[Cursor]);  			RoomName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newRoom.RoomName = System.Text.Encoding.UTF8.GetString (RoomName);  		StringBuilder RFAddress_Buffer = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newRoom.RFAddress = RFAddress_Buffer.ToString ();  		//Int32.Parse(RFAddress_Buffer.ToString()'System.Globalization.NumberStyles.HexNumber);  		_House.Rooms.Add (newRoom);  	}  	#region Devices  	//newRoom.RFAddress = Int32.Parse(RFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	Byte DeviceCount = RawMessageDecoded [Cursor];  	Cursor++;  	// go through all the devices in here  	for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  		// read in the device  		IMAXDevice newDevice = new UnknownDevice ();  		#region Determine DeviceType  		Byte DevType = RawMessageDecoded [Cursor];  		Cursor++;  		switch (DevType) {  		case 1:  			newDevice = new HeatingThermostat ();  			break;  		case 2:  			newDevice = new HeatingThermostatPlus ();  			break;  		case 3:  			newDevice = new WallMountedThermostat ();  			break;  		case 4:  			newDevice = new ShutterContact ();  			break;  		case 5:  			newDevice = new PushButton ();  			break;  		default:  			break;  		}  		#endregion  		StringBuilder DeviceRFAddress = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.RFAddress = DeviceRFAddress.ToString ();  		//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  		StringBuilder DeviceSerialNumber = new StringBuilder ();  		for (Byte j = 0; j <= 10 - 1; j++) {  			DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.SerialNumber = DeviceSerialNumber.ToString ();  		Byte DeviceNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] DeviceName = new byte[DeviceNameLength];  		for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  			DeviceName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  		Byte RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		// add the device to the room  		foreach (Room newRoom in _House.Rooms) {  			if (newRoom.RoomID == RoomID) {  				newDevice.AssociatedRoom = newRoom;  				newRoom.Devices.Add (newDevice);  				break;  			}  		}  	}  	#endregion  	// add this Room to the M_Message-Structure  	#endregion  } else  	throw new MAXException ("Unable to process M Message. Not enough content.");  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	Index = Int32.Parse (SplittedRAWMessage [0]' System.Globalization.NumberStyles.HexNumber);  	Count = Int32.Parse (SplittedRAWMessage [1]' System.Globalization.NumberStyles.HexNumber);  	RawMessageDecoded = Base64.Decode (SplittedRAWMessage [2]);  	//				System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();  	//				Console.WriteLine(enc.GetString (RawMessageDecoded));  	//				StringBuilder hexlist = new StringBuilder();  	//  	//				foreach(Byte _byte in RawMessageDecoded)  	//				{  	//					hexlist.Append(_byte.ToString()+" ");  	//				}  	Int32 Cursor = 2;  	// now go deeper  	Byte RoomCount = RawMessageDecoded [Cursor];  	Cursor++;  	#region Rooms  	// go through every room  	for (byte roomnumber = 1; roomnumber <= RoomCount; roomnumber++) {  		Room newRoom = new Room (thisHouse);  		newRoom.RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		Byte RoomNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] RoomName = new byte[RoomNameLength];  		for (Byte j = 0; j <= RoomNameLength - 1; j++) {  			//RoomName.Append((char)RawMessageDecoded[Cursor]);  			RoomName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newRoom.RoomName = System.Text.Encoding.UTF8.GetString (RoomName);  		StringBuilder RFAddress_Buffer = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newRoom.RFAddress = RFAddress_Buffer.ToString ();  		//Int32.Parse(RFAddress_Buffer.ToString()'System.Globalization.NumberStyles.HexNumber);  		_House.Rooms.Add (newRoom);  	}  	#region Devices  	//newRoom.RFAddress = Int32.Parse(RFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	Byte DeviceCount = RawMessageDecoded [Cursor];  	Cursor++;  	// go through all the devices in here  	for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  		// read in the device  		IMAXDevice newDevice = new UnknownDevice ();  		#region Determine DeviceType  		Byte DevType = RawMessageDecoded [Cursor];  		Cursor++;  		switch (DevType) {  		case 1:  			newDevice = new HeatingThermostat ();  			break;  		case 2:  			newDevice = new HeatingThermostatPlus ();  			break;  		case 3:  			newDevice = new WallMountedThermostat ();  			break;  		case 4:  			newDevice = new ShutterContact ();  			break;  		case 5:  			newDevice = new PushButton ();  			break;  		default:  			break;  		}  		#endregion  		StringBuilder DeviceRFAddress = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.RFAddress = DeviceRFAddress.ToString ();  		//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  		StringBuilder DeviceSerialNumber = new StringBuilder ();  		for (Byte j = 0; j <= 10 - 1; j++) {  			DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.SerialNumber = DeviceSerialNumber.ToString ();  		Byte DeviceNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] DeviceName = new byte[DeviceNameLength];  		for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  			DeviceName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  		Byte RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		// add the device to the room  		foreach (Room newRoom in _House.Rooms) {  			if (newRoom.RoomID == RoomID) {  				newDevice.AssociatedRoom = newRoom;  				newRoom.Devices.Add (newDevice);  				break;  			}  		}  	}  	#endregion  	// add this Room to the M_Message-Structure  	#endregion  } else  	throw new MAXException ("Unable to process M Message. Not enough content.");  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	Index = Int32.Parse (SplittedRAWMessage [0]' System.Globalization.NumberStyles.HexNumber);  	Count = Int32.Parse (SplittedRAWMessage [1]' System.Globalization.NumberStyles.HexNumber);  	RawMessageDecoded = Base64.Decode (SplittedRAWMessage [2]);  	//				System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();  	//				Console.WriteLine(enc.GetString (RawMessageDecoded));  	//				StringBuilder hexlist = new StringBuilder();  	//  	//				foreach(Byte _byte in RawMessageDecoded)  	//				{  	//					hexlist.Append(_byte.ToString()+" ");  	//				}  	Int32 Cursor = 2;  	// now go deeper  	Byte RoomCount = RawMessageDecoded [Cursor];  	Cursor++;  	#region Rooms  	// go through every room  	for (byte roomnumber = 1; roomnumber <= RoomCount; roomnumber++) {  		Room newRoom = new Room (thisHouse);  		newRoom.RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		Byte RoomNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] RoomName = new byte[RoomNameLength];  		for (Byte j = 0; j <= RoomNameLength - 1; j++) {  			//RoomName.Append((char)RawMessageDecoded[Cursor]);  			RoomName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newRoom.RoomName = System.Text.Encoding.UTF8.GetString (RoomName);  		StringBuilder RFAddress_Buffer = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newRoom.RFAddress = RFAddress_Buffer.ToString ();  		//Int32.Parse(RFAddress_Buffer.ToString()'System.Globalization.NumberStyles.HexNumber);  		_House.Rooms.Add (newRoom);  	}  	#region Devices  	//newRoom.RFAddress = Int32.Parse(RFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	Byte DeviceCount = RawMessageDecoded [Cursor];  	Cursor++;  	// go through all the devices in here  	for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  		// read in the device  		IMAXDevice newDevice = new UnknownDevice ();  		#region Determine DeviceType  		Byte DevType = RawMessageDecoded [Cursor];  		Cursor++;  		switch (DevType) {  		case 1:  			newDevice = new HeatingThermostat ();  			break;  		case 2:  			newDevice = new HeatingThermostatPlus ();  			break;  		case 3:  			newDevice = new WallMountedThermostat ();  			break;  		case 4:  			newDevice = new ShutterContact ();  			break;  		case 5:  			newDevice = new PushButton ();  			break;  		default:  			break;  		}  		#endregion  		StringBuilder DeviceRFAddress = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.RFAddress = DeviceRFAddress.ToString ();  		//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  		StringBuilder DeviceSerialNumber = new StringBuilder ();  		for (Byte j = 0; j <= 10 - 1; j++) {  			DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.SerialNumber = DeviceSerialNumber.ToString ();  		Byte DeviceNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] DeviceName = new byte[DeviceNameLength];  		for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  			DeviceName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  		Byte RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		// add the device to the room  		foreach (Room newRoom in _House.Rooms) {  			if (newRoom.RoomID == RoomID) {  				newDevice.AssociatedRoom = newRoom;  				newRoom.Devices.Add (newDevice);  				break;  			}  		}  	}  	#endregion  	// add this Room to the M_Message-Structure  	#endregion  } else  	throw new MAXException ("Unable to process M Message. Not enough content.");  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	Index = Int32.Parse (SplittedRAWMessage [0]' System.Globalization.NumberStyles.HexNumber);  	Count = Int32.Parse (SplittedRAWMessage [1]' System.Globalization.NumberStyles.HexNumber);  	RawMessageDecoded = Base64.Decode (SplittedRAWMessage [2]);  	//				System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();  	//				Console.WriteLine(enc.GetString (RawMessageDecoded));  	//				StringBuilder hexlist = new StringBuilder();  	//  	//				foreach(Byte _byte in RawMessageDecoded)  	//				{  	//					hexlist.Append(_byte.ToString()+" ");  	//				}  	Int32 Cursor = 2;  	// now go deeper  	Byte RoomCount = RawMessageDecoded [Cursor];  	Cursor++;  	#region Rooms  	// go through every room  	for (byte roomnumber = 1; roomnumber <= RoomCount; roomnumber++) {  		Room newRoom = new Room (thisHouse);  		newRoom.RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		Byte RoomNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] RoomName = new byte[RoomNameLength];  		for (Byte j = 0; j <= RoomNameLength - 1; j++) {  			//RoomName.Append((char)RawMessageDecoded[Cursor]);  			RoomName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newRoom.RoomName = System.Text.Encoding.UTF8.GetString (RoomName);  		StringBuilder RFAddress_Buffer = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newRoom.RFAddress = RFAddress_Buffer.ToString ();  		//Int32.Parse(RFAddress_Buffer.ToString()'System.Globalization.NumberStyles.HexNumber);  		_House.Rooms.Add (newRoom);  	}  	#region Devices  	//newRoom.RFAddress = Int32.Parse(RFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	Byte DeviceCount = RawMessageDecoded [Cursor];  	Cursor++;  	// go through all the devices in here  	for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  		// read in the device  		IMAXDevice newDevice = new UnknownDevice ();  		#region Determine DeviceType  		Byte DevType = RawMessageDecoded [Cursor];  		Cursor++;  		switch (DevType) {  		case 1:  			newDevice = new HeatingThermostat ();  			break;  		case 2:  			newDevice = new HeatingThermostatPlus ();  			break;  		case 3:  			newDevice = new WallMountedThermostat ();  			break;  		case 4:  			newDevice = new ShutterContact ();  			break;  		case 5:  			newDevice = new PushButton ();  			break;  		default:  			break;  		}  		#endregion  		StringBuilder DeviceRFAddress = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.RFAddress = DeviceRFAddress.ToString ();  		//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  		StringBuilder DeviceSerialNumber = new StringBuilder ();  		for (Byte j = 0; j <= 10 - 1; j++) {  			DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.SerialNumber = DeviceSerialNumber.ToString ();  		Byte DeviceNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] DeviceName = new byte[DeviceNameLength];  		for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  			DeviceName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  		Byte RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		// add the device to the room  		foreach (Room newRoom in _House.Rooms) {  			if (newRoom.RoomID == RoomID) {  				newDevice.AssociatedRoom = newRoom;  				newRoom.Devices.Add (newDevice);  				break;  			}  		}  	}  	#endregion  	// add this Room to the M_Message-Structure  	#endregion  } else  	throw new MAXException ("Unable to process M Message. Not enough content.");  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	Index = Int32.Parse (SplittedRAWMessage [0]' System.Globalization.NumberStyles.HexNumber);  	Count = Int32.Parse (SplittedRAWMessage [1]' System.Globalization.NumberStyles.HexNumber);  	RawMessageDecoded = Base64.Decode (SplittedRAWMessage [2]);  	//				System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();  	//				Console.WriteLine(enc.GetString (RawMessageDecoded));  	//				StringBuilder hexlist = new StringBuilder();  	//  	//				foreach(Byte _byte in RawMessageDecoded)  	//				{  	//					hexlist.Append(_byte.ToString()+" ");  	//				}  	Int32 Cursor = 2;  	// now go deeper  	Byte RoomCount = RawMessageDecoded [Cursor];  	Cursor++;  	#region Rooms  	// go through every room  	for (byte roomnumber = 1; roomnumber <= RoomCount; roomnumber++) {  		Room newRoom = new Room (thisHouse);  		newRoom.RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		Byte RoomNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] RoomName = new byte[RoomNameLength];  		for (Byte j = 0; j <= RoomNameLength - 1; j++) {  			//RoomName.Append((char)RawMessageDecoded[Cursor]);  			RoomName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newRoom.RoomName = System.Text.Encoding.UTF8.GetString (RoomName);  		StringBuilder RFAddress_Buffer = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newRoom.RFAddress = RFAddress_Buffer.ToString ();  		//Int32.Parse(RFAddress_Buffer.ToString()'System.Globalization.NumberStyles.HexNumber);  		_House.Rooms.Add (newRoom);  	}  	#region Devices  	//newRoom.RFAddress = Int32.Parse(RFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	Byte DeviceCount = RawMessageDecoded [Cursor];  	Cursor++;  	// go through all the devices in here  	for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  		// read in the device  		IMAXDevice newDevice = new UnknownDevice ();  		#region Determine DeviceType  		Byte DevType = RawMessageDecoded [Cursor];  		Cursor++;  		switch (DevType) {  		case 1:  			newDevice = new HeatingThermostat ();  			break;  		case 2:  			newDevice = new HeatingThermostatPlus ();  			break;  		case 3:  			newDevice = new WallMountedThermostat ();  			break;  		case 4:  			newDevice = new ShutterContact ();  			break;  		case 5:  			newDevice = new PushButton ();  			break;  		default:  			break;  		}  		#endregion  		StringBuilder DeviceRFAddress = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.RFAddress = DeviceRFAddress.ToString ();  		//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  		StringBuilder DeviceSerialNumber = new StringBuilder ();  		for (Byte j = 0; j <= 10 - 1; j++) {  			DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.SerialNumber = DeviceSerialNumber.ToString ();  		Byte DeviceNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] DeviceName = new byte[DeviceNameLength];  		for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  			DeviceName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  		Byte RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		// add the device to the room  		foreach (Room newRoom in _House.Rooms) {  			if (newRoom.RoomID == RoomID) {  				newDevice.AssociatedRoom = newRoom;  				newRoom.Devices.Add (newDevice);  				break;  			}  		}  	}  	#endregion  	// add this Room to the M_Message-Structure  	#endregion  } else  	throw new MAXException ("Unable to process M Message. Not enough content.");  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	Index = Int32.Parse (SplittedRAWMessage [0]' System.Globalization.NumberStyles.HexNumber);  	Count = Int32.Parse (SplittedRAWMessage [1]' System.Globalization.NumberStyles.HexNumber);  	RawMessageDecoded = Base64.Decode (SplittedRAWMessage [2]);  	//				System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();  	//				Console.WriteLine(enc.GetString (RawMessageDecoded));  	//				StringBuilder hexlist = new StringBuilder();  	//  	//				foreach(Byte _byte in RawMessageDecoded)  	//				{  	//					hexlist.Append(_byte.ToString()+" ");  	//				}  	Int32 Cursor = 2;  	// now go deeper  	Byte RoomCount = RawMessageDecoded [Cursor];  	Cursor++;  	#region Rooms  	// go through every room  	for (byte roomnumber = 1; roomnumber <= RoomCount; roomnumber++) {  		Room newRoom = new Room (thisHouse);  		newRoom.RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		Byte RoomNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] RoomName = new byte[RoomNameLength];  		for (Byte j = 0; j <= RoomNameLength - 1; j++) {  			//RoomName.Append((char)RawMessageDecoded[Cursor]);  			RoomName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newRoom.RoomName = System.Text.Encoding.UTF8.GetString (RoomName);  		StringBuilder RFAddress_Buffer = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newRoom.RFAddress = RFAddress_Buffer.ToString ();  		//Int32.Parse(RFAddress_Buffer.ToString()'System.Globalization.NumberStyles.HexNumber);  		_House.Rooms.Add (newRoom);  	}  	#region Devices  	//newRoom.RFAddress = Int32.Parse(RFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	Byte DeviceCount = RawMessageDecoded [Cursor];  	Cursor++;  	// go through all the devices in here  	for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  		// read in the device  		IMAXDevice newDevice = new UnknownDevice ();  		#region Determine DeviceType  		Byte DevType = RawMessageDecoded [Cursor];  		Cursor++;  		switch (DevType) {  		case 1:  			newDevice = new HeatingThermostat ();  			break;  		case 2:  			newDevice = new HeatingThermostatPlus ();  			break;  		case 3:  			newDevice = new WallMountedThermostat ();  			break;  		case 4:  			newDevice = new ShutterContact ();  			break;  		case 5:  			newDevice = new PushButton ();  			break;  		default:  			break;  		}  		#endregion  		StringBuilder DeviceRFAddress = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.RFAddress = DeviceRFAddress.ToString ();  		//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  		StringBuilder DeviceSerialNumber = new StringBuilder ();  		for (Byte j = 0; j <= 10 - 1; j++) {  			DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.SerialNumber = DeviceSerialNumber.ToString ();  		Byte DeviceNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] DeviceName = new byte[DeviceNameLength];  		for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  			DeviceName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  		Byte RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		// add the device to the room  		foreach (Room newRoom in _House.Rooms) {  			if (newRoom.RoomID == RoomID) {  				newDevice.AssociatedRoom = newRoom;  				newRoom.Devices.Add (newDevice);  				break;  			}  		}  	}  	#endregion  	// add this Room to the M_Message-Structure  	#endregion  } else  	throw new MAXException ("Unable to process M Message. Not enough content.");  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	Index = Int32.Parse (SplittedRAWMessage [0]' System.Globalization.NumberStyles.HexNumber);  	Count = Int32.Parse (SplittedRAWMessage [1]' System.Globalization.NumberStyles.HexNumber);  	RawMessageDecoded = Base64.Decode (SplittedRAWMessage [2]);  	//				System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();  	//				Console.WriteLine(enc.GetString (RawMessageDecoded));  	//				StringBuilder hexlist = new StringBuilder();  	//  	//				foreach(Byte _byte in RawMessageDecoded)  	//				{  	//					hexlist.Append(_byte.ToString()+" ");  	//				}  	Int32 Cursor = 2;  	// now go deeper  	Byte RoomCount = RawMessageDecoded [Cursor];  	Cursor++;  	#region Rooms  	// go through every room  	for (byte roomnumber = 1; roomnumber <= RoomCount; roomnumber++) {  		Room newRoom = new Room (thisHouse);  		newRoom.RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		Byte RoomNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] RoomName = new byte[RoomNameLength];  		for (Byte j = 0; j <= RoomNameLength - 1; j++) {  			//RoomName.Append((char)RawMessageDecoded[Cursor]);  			RoomName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newRoom.RoomName = System.Text.Encoding.UTF8.GetString (RoomName);  		StringBuilder RFAddress_Buffer = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newRoom.RFAddress = RFAddress_Buffer.ToString ();  		//Int32.Parse(RFAddress_Buffer.ToString()'System.Globalization.NumberStyles.HexNumber);  		_House.Rooms.Add (newRoom);  	}  	#region Devices  	//newRoom.RFAddress = Int32.Parse(RFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	Byte DeviceCount = RawMessageDecoded [Cursor];  	Cursor++;  	// go through all the devices in here  	for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  		// read in the device  		IMAXDevice newDevice = new UnknownDevice ();  		#region Determine DeviceType  		Byte DevType = RawMessageDecoded [Cursor];  		Cursor++;  		switch (DevType) {  		case 1:  			newDevice = new HeatingThermostat ();  			break;  		case 2:  			newDevice = new HeatingThermostatPlus ();  			break;  		case 3:  			newDevice = new WallMountedThermostat ();  			break;  		case 4:  			newDevice = new ShutterContact ();  			break;  		case 5:  			newDevice = new PushButton ();  			break;  		default:  			break;  		}  		#endregion  		StringBuilder DeviceRFAddress = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.RFAddress = DeviceRFAddress.ToString ();  		//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  		StringBuilder DeviceSerialNumber = new StringBuilder ();  		for (Byte j = 0; j <= 10 - 1; j++) {  			DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.SerialNumber = DeviceSerialNumber.ToString ();  		Byte DeviceNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] DeviceName = new byte[DeviceNameLength];  		for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  			DeviceName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  		Byte RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		// add the device to the room  		foreach (Room newRoom in _House.Rooms) {  			if (newRoom.RoomID == RoomID) {  				newDevice.AssociatedRoom = newRoom;  				newRoom.Devices.Add (newDevice);  				break;  			}  		}  	}  	#endregion  	// add this Room to the M_Message-Structure  	#endregion  } else  	throw new MAXException ("Unable to process M Message. Not enough content.");  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	Index = Int32.Parse (SplittedRAWMessage [0]' System.Globalization.NumberStyles.HexNumber);  	Count = Int32.Parse (SplittedRAWMessage [1]' System.Globalization.NumberStyles.HexNumber);  	RawMessageDecoded = Base64.Decode (SplittedRAWMessage [2]);  	//				System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();  	//				Console.WriteLine(enc.GetString (RawMessageDecoded));  	//				StringBuilder hexlist = new StringBuilder();  	//  	//				foreach(Byte _byte in RawMessageDecoded)  	//				{  	//					hexlist.Append(_byte.ToString()+" ");  	//				}  	Int32 Cursor = 2;  	// now go deeper  	Byte RoomCount = RawMessageDecoded [Cursor];  	Cursor++;  	#region Rooms  	// go through every room  	for (byte roomnumber = 1; roomnumber <= RoomCount; roomnumber++) {  		Room newRoom = new Room (thisHouse);  		newRoom.RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		Byte RoomNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] RoomName = new byte[RoomNameLength];  		for (Byte j = 0; j <= RoomNameLength - 1; j++) {  			//RoomName.Append((char)RawMessageDecoded[Cursor]);  			RoomName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newRoom.RoomName = System.Text.Encoding.UTF8.GetString (RoomName);  		StringBuilder RFAddress_Buffer = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newRoom.RFAddress = RFAddress_Buffer.ToString ();  		//Int32.Parse(RFAddress_Buffer.ToString()'System.Globalization.NumberStyles.HexNumber);  		_House.Rooms.Add (newRoom);  	}  	#region Devices  	//newRoom.RFAddress = Int32.Parse(RFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	Byte DeviceCount = RawMessageDecoded [Cursor];  	Cursor++;  	// go through all the devices in here  	for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  		// read in the device  		IMAXDevice newDevice = new UnknownDevice ();  		#region Determine DeviceType  		Byte DevType = RawMessageDecoded [Cursor];  		Cursor++;  		switch (DevType) {  		case 1:  			newDevice = new HeatingThermostat ();  			break;  		case 2:  			newDevice = new HeatingThermostatPlus ();  			break;  		case 3:  			newDevice = new WallMountedThermostat ();  			break;  		case 4:  			newDevice = new ShutterContact ();  			break;  		case 5:  			newDevice = new PushButton ();  			break;  		default:  			break;  		}  		#endregion  		StringBuilder DeviceRFAddress = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.RFAddress = DeviceRFAddress.ToString ();  		//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  		StringBuilder DeviceSerialNumber = new StringBuilder ();  		for (Byte j = 0; j <= 10 - 1; j++) {  			DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.SerialNumber = DeviceSerialNumber.ToString ();  		Byte DeviceNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] DeviceName = new byte[DeviceNameLength];  		for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  			DeviceName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  		Byte RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		// add the device to the room  		foreach (Room newRoom in _House.Rooms) {  			if (newRoom.RoomID == RoomID) {  				newDevice.AssociatedRoom = newRoom;  				newRoom.Devices.Add (newDevice);  				break;  			}  		}  	}  	#endregion  	// add this Room to the M_Message-Structure  	#endregion  } else  	throw new MAXException ("Unable to process M Message. Not enough content.");  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: if (SplittedRAWMessage.Length >= 3) {  	Index = Int32.Parse (SplittedRAWMessage [0]' System.Globalization.NumberStyles.HexNumber);  	Count = Int32.Parse (SplittedRAWMessage [1]' System.Globalization.NumberStyles.HexNumber);  	RawMessageDecoded = Base64.Decode (SplittedRAWMessage [2]);  	//				System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();  	//				Console.WriteLine(enc.GetString (RawMessageDecoded));  	//				StringBuilder hexlist = new StringBuilder();  	//  	//				foreach(Byte _byte in RawMessageDecoded)  	//				{  	//					hexlist.Append(_byte.ToString()+" ");  	//				}  	Int32 Cursor = 2;  	// now go deeper  	Byte RoomCount = RawMessageDecoded [Cursor];  	Cursor++;  	#region Rooms  	// go through every room  	for (byte roomnumber = 1; roomnumber <= RoomCount; roomnumber++) {  		Room newRoom = new Room (thisHouse);  		newRoom.RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		Byte RoomNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] RoomName = new byte[RoomNameLength];  		for (Byte j = 0; j <= RoomNameLength - 1; j++) {  			//RoomName.Append((char)RawMessageDecoded[Cursor]);  			RoomName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newRoom.RoomName = System.Text.Encoding.UTF8.GetString (RoomName);  		StringBuilder RFAddress_Buffer = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newRoom.RFAddress = RFAddress_Buffer.ToString ();  		//Int32.Parse(RFAddress_Buffer.ToString()'System.Globalization.NumberStyles.HexNumber);  		_House.Rooms.Add (newRoom);  	}  	#region Devices  	//newRoom.RFAddress = Int32.Parse(RFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	Byte DeviceCount = RawMessageDecoded [Cursor];  	Cursor++;  	// go through all the devices in here  	for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  		// read in the device  		IMAXDevice newDevice = new UnknownDevice ();  		#region Determine DeviceType  		Byte DevType = RawMessageDecoded [Cursor];  		Cursor++;  		switch (DevType) {  		case 1:  			newDevice = new HeatingThermostat ();  			break;  		case 2:  			newDevice = new HeatingThermostatPlus ();  			break;  		case 3:  			newDevice = new WallMountedThermostat ();  			break;  		case 4:  			newDevice = new ShutterContact ();  			break;  		case 5:  			newDevice = new PushButton ();  			break;  		default:  			break;  		}  		#endregion  		StringBuilder DeviceRFAddress = new StringBuilder ();  		for (Byte j = 0; j <= 3 - 1; j++) {  			DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.RFAddress = DeviceRFAddress.ToString ();  		//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  		StringBuilder DeviceSerialNumber = new StringBuilder ();  		for (Byte j = 0; j <= 10 - 1; j++) {  			DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  			Cursor++;  		}  		newDevice.SerialNumber = DeviceSerialNumber.ToString ();  		Byte DeviceNameLength = RawMessageDecoded [Cursor];  		Cursor++;  		byte[] DeviceName = new byte[DeviceNameLength];  		for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  			DeviceName [j] = RawMessageDecoded [Cursor];  			Cursor++;  		}  		newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  		Byte RoomID = RawMessageDecoded [Cursor];  		Cursor++;  		// add the device to the room  		foreach (Room newRoom in _House.Rooms) {  			if (newRoom.RoomID == RoomID) {  				newDevice.AssociatedRoom = newRoom;  				newRoom.Devices.Add (newDevice);  				break;  			}  		}  	}  	#endregion  	// add this Room to the M_Message-Structure  	#endregion  } else  	throw new MAXException ("Unable to process M Message. Not enough content.");  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: RawMessageDecoded = Base64.Decode (SplittedRAWMessage [2]);  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: for (byte roomnumber = 1; roomnumber <= RoomCount; roomnumber++) {  	Room newRoom = new Room (thisHouse);  	newRoom.RoomID = RawMessageDecoded [Cursor];  	Cursor++;  	Byte RoomNameLength = RawMessageDecoded [Cursor];  	Cursor++;  	byte[] RoomName = new byte[RoomNameLength];  	for (Byte j = 0; j <= RoomNameLength - 1; j++) {  		//RoomName.Append((char)RawMessageDecoded[Cursor]);  		RoomName [j] = RawMessageDecoded [Cursor];  		Cursor++;  	}  	newRoom.RoomName = System.Text.Encoding.UTF8.GetString (RoomName);  	StringBuilder RFAddress_Buffer = new StringBuilder ();  	for (Byte j = 0; j <= 3 - 1; j++) {  		RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newRoom.RFAddress = RFAddress_Buffer.ToString ();  	//Int32.Parse(RFAddress_Buffer.ToString()'System.Globalization.NumberStyles.HexNumber);  	_House.Rooms.Add (newRoom);  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: for (Byte j = 0; j <= 3 - 1; j++) {  	RFAddress_Buffer.Append (RawMessageDecoded [Cursor]);  	Cursor++;  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  	// read in the device  	IMAXDevice newDevice = new UnknownDevice ();  	#region Determine DeviceType  	Byte DevType = RawMessageDecoded [Cursor];  	Cursor++;  	switch (DevType) {  	case 1:  		newDevice = new HeatingThermostat ();  		break;  	case 2:  		newDevice = new HeatingThermostatPlus ();  		break;  	case 3:  		newDevice = new WallMountedThermostat ();  		break;  	case 4:  		newDevice = new ShutterContact ();  		break;  	case 5:  		newDevice = new PushButton ();  		break;  	default:  		break;  	}  	#endregion  	StringBuilder DeviceRFAddress = new StringBuilder ();  	for (Byte j = 0; j <= 3 - 1; j++) {  		DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.RFAddress = DeviceRFAddress.ToString ();  	//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	StringBuilder DeviceSerialNumber = new StringBuilder ();  	for (Byte j = 0; j <= 10 - 1; j++) {  		DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.SerialNumber = DeviceSerialNumber.ToString ();  	Byte DeviceNameLength = RawMessageDecoded [Cursor];  	Cursor++;  	byte[] DeviceName = new byte[DeviceNameLength];  	for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  		DeviceName [j] = RawMessageDecoded [Cursor];  		Cursor++;  	}  	newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  	Byte RoomID = RawMessageDecoded [Cursor];  	Cursor++;  	// add the device to the room  	foreach (Room newRoom in _House.Rooms) {  		if (newRoom.RoomID == RoomID) {  			newDevice.AssociatedRoom = newRoom;  			newRoom.Devices.Add (newDevice);  			break;  		}  	}  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  	// read in the device  	IMAXDevice newDevice = new UnknownDevice ();  	#region Determine DeviceType  	Byte DevType = RawMessageDecoded [Cursor];  	Cursor++;  	switch (DevType) {  	case 1:  		newDevice = new HeatingThermostat ();  		break;  	case 2:  		newDevice = new HeatingThermostatPlus ();  		break;  	case 3:  		newDevice = new WallMountedThermostat ();  		break;  	case 4:  		newDevice = new ShutterContact ();  		break;  	case 5:  		newDevice = new PushButton ();  		break;  	default:  		break;  	}  	#endregion  	StringBuilder DeviceRFAddress = new StringBuilder ();  	for (Byte j = 0; j <= 3 - 1; j++) {  		DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.RFAddress = DeviceRFAddress.ToString ();  	//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	StringBuilder DeviceSerialNumber = new StringBuilder ();  	for (Byte j = 0; j <= 10 - 1; j++) {  		DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.SerialNumber = DeviceSerialNumber.ToString ();  	Byte DeviceNameLength = RawMessageDecoded [Cursor];  	Cursor++;  	byte[] DeviceName = new byte[DeviceNameLength];  	for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  		DeviceName [j] = RawMessageDecoded [Cursor];  		Cursor++;  	}  	newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  	Byte RoomID = RawMessageDecoded [Cursor];  	Cursor++;  	// add the device to the room  	foreach (Room newRoom in _House.Rooms) {  		if (newRoom.RoomID == RoomID) {  			newDevice.AssociatedRoom = newRoom;  			newRoom.Devices.Add (newDevice);  			break;  		}  	}  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  	// read in the device  	IMAXDevice newDevice = new UnknownDevice ();  	#region Determine DeviceType  	Byte DevType = RawMessageDecoded [Cursor];  	Cursor++;  	switch (DevType) {  	case 1:  		newDevice = new HeatingThermostat ();  		break;  	case 2:  		newDevice = new HeatingThermostatPlus ();  		break;  	case 3:  		newDevice = new WallMountedThermostat ();  		break;  	case 4:  		newDevice = new ShutterContact ();  		break;  	case 5:  		newDevice = new PushButton ();  		break;  	default:  		break;  	}  	#endregion  	StringBuilder DeviceRFAddress = new StringBuilder ();  	for (Byte j = 0; j <= 3 - 1; j++) {  		DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.RFAddress = DeviceRFAddress.ToString ();  	//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	StringBuilder DeviceSerialNumber = new StringBuilder ();  	for (Byte j = 0; j <= 10 - 1; j++) {  		DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.SerialNumber = DeviceSerialNumber.ToString ();  	Byte DeviceNameLength = RawMessageDecoded [Cursor];  	Cursor++;  	byte[] DeviceName = new byte[DeviceNameLength];  	for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  		DeviceName [j] = RawMessageDecoded [Cursor];  		Cursor++;  	}  	newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  	Byte RoomID = RawMessageDecoded [Cursor];  	Cursor++;  	// add the device to the room  	foreach (Room newRoom in _House.Rooms) {  		if (newRoom.RoomID == RoomID) {  			newDevice.AssociatedRoom = newRoom;  			newRoom.Devices.Add (newDevice);  			break;  		}  	}  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  	// read in the device  	IMAXDevice newDevice = new UnknownDevice ();  	#region Determine DeviceType  	Byte DevType = RawMessageDecoded [Cursor];  	Cursor++;  	switch (DevType) {  	case 1:  		newDevice = new HeatingThermostat ();  		break;  	case 2:  		newDevice = new HeatingThermostatPlus ();  		break;  	case 3:  		newDevice = new WallMountedThermostat ();  		break;  	case 4:  		newDevice = new ShutterContact ();  		break;  	case 5:  		newDevice = new PushButton ();  		break;  	default:  		break;  	}  	#endregion  	StringBuilder DeviceRFAddress = new StringBuilder ();  	for (Byte j = 0; j <= 3 - 1; j++) {  		DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.RFAddress = DeviceRFAddress.ToString ();  	//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	StringBuilder DeviceSerialNumber = new StringBuilder ();  	for (Byte j = 0; j <= 10 - 1; j++) {  		DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.SerialNumber = DeviceSerialNumber.ToString ();  	Byte DeviceNameLength = RawMessageDecoded [Cursor];  	Cursor++;  	byte[] DeviceName = new byte[DeviceNameLength];  	for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  		DeviceName [j] = RawMessageDecoded [Cursor];  		Cursor++;  	}  	newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  	Byte RoomID = RawMessageDecoded [Cursor];  	Cursor++;  	// add the device to the room  	foreach (Room newRoom in _House.Rooms) {  		if (newRoom.RoomID == RoomID) {  			newDevice.AssociatedRoom = newRoom;  			newRoom.Devices.Add (newDevice);  			break;  		}  	}  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  	// read in the device  	IMAXDevice newDevice = new UnknownDevice ();  	#region Determine DeviceType  	Byte DevType = RawMessageDecoded [Cursor];  	Cursor++;  	switch (DevType) {  	case 1:  		newDevice = new HeatingThermostat ();  		break;  	case 2:  		newDevice = new HeatingThermostatPlus ();  		break;  	case 3:  		newDevice = new WallMountedThermostat ();  		break;  	case 4:  		newDevice = new ShutterContact ();  		break;  	case 5:  		newDevice = new PushButton ();  		break;  	default:  		break;  	}  	#endregion  	StringBuilder DeviceRFAddress = new StringBuilder ();  	for (Byte j = 0; j <= 3 - 1; j++) {  		DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.RFAddress = DeviceRFAddress.ToString ();  	//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	StringBuilder DeviceSerialNumber = new StringBuilder ();  	for (Byte j = 0; j <= 10 - 1; j++) {  		DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.SerialNumber = DeviceSerialNumber.ToString ();  	Byte DeviceNameLength = RawMessageDecoded [Cursor];  	Cursor++;  	byte[] DeviceName = new byte[DeviceNameLength];  	for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  		DeviceName [j] = RawMessageDecoded [Cursor];  		Cursor++;  	}  	newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  	Byte RoomID = RawMessageDecoded [Cursor];  	Cursor++;  	// add the device to the room  	foreach (Room newRoom in _House.Rooms) {  		if (newRoom.RoomID == RoomID) {  			newDevice.AssociatedRoom = newRoom;  			newRoom.Devices.Add (newDevice);  			break;  		}  	}  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: for (byte devicenumber = 1; devicenumber <= DeviceCount; devicenumber++) {  	// read in the device  	IMAXDevice newDevice = new UnknownDevice ();  	#region Determine DeviceType  	Byte DevType = RawMessageDecoded [Cursor];  	Cursor++;  	switch (DevType) {  	case 1:  		newDevice = new HeatingThermostat ();  		break;  	case 2:  		newDevice = new HeatingThermostatPlus ();  		break;  	case 3:  		newDevice = new WallMountedThermostat ();  		break;  	case 4:  		newDevice = new ShutterContact ();  		break;  	case 5:  		newDevice = new PushButton ();  		break;  	default:  		break;  	}  	#endregion  	StringBuilder DeviceRFAddress = new StringBuilder ();  	for (Byte j = 0; j <= 3 - 1; j++) {  		DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.RFAddress = DeviceRFAddress.ToString ();  	//Int32.Parse(DeviceRFAddress.ToString()'System.Globalization.NumberStyles.HexNumber);  	StringBuilder DeviceSerialNumber = new StringBuilder ();  	for (Byte j = 0; j <= 10 - 1; j++) {  		DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  		Cursor++;  	}  	newDevice.SerialNumber = DeviceSerialNumber.ToString ();  	Byte DeviceNameLength = RawMessageDecoded [Cursor];  	Cursor++;  	byte[] DeviceName = new byte[DeviceNameLength];  	for (Byte j = 0; j <= DeviceNameLength - 1; j++) {  		DeviceName [j] = RawMessageDecoded [Cursor];  		Cursor++;  	}  	newDevice.Name = System.Text.Encoding.UTF8.GetString (DeviceName);  	Byte RoomID = RawMessageDecoded [Cursor];  	Cursor++;  	// add the device to the room  	foreach (Room newRoom in _House.Rooms) {  		if (newRoom.RoomID == RoomID) {  			newDevice.AssociatedRoom = newRoom;  			newRoom.Devices.Add (newDevice);  			break;  		}  	}  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: switch (DevType) {  case 1:  	newDevice = new HeatingThermostat ();  	break;  case 2:  	newDevice = new HeatingThermostatPlus ();  	break;  case 3:  	newDevice = new WallMountedThermostat ();  	break;  case 4:  	newDevice = new ShutterContact ();  	break;  case 5:  	newDevice = new PushButton ();  	break;  default:  	break;  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: switch (DevType) {  case 1:  	newDevice = new HeatingThermostat ();  	break;  case 2:  	newDevice = new HeatingThermostatPlus ();  	break;  case 3:  	newDevice = new WallMountedThermostat ();  	break;  case 4:  	newDevice = new ShutterContact ();  	break;  case 5:  	newDevice = new PushButton ();  	break;  default:  	break;  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: switch (DevType) {  case 1:  	newDevice = new HeatingThermostat ();  	break;  case 2:  	newDevice = new HeatingThermostatPlus ();  	break;  case 3:  	newDevice = new WallMountedThermostat ();  	break;  case 4:  	newDevice = new ShutterContact ();  	break;  case 5:  	newDevice = new PushButton ();  	break;  default:  	break;  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: switch (DevType) {  case 1:  	newDevice = new HeatingThermostat ();  	break;  case 2:  	newDevice = new HeatingThermostatPlus ();  	break;  case 3:  	newDevice = new WallMountedThermostat ();  	break;  case 4:  	newDevice = new ShutterContact ();  	break;  case 5:  	newDevice = new PushButton ();  	break;  default:  	break;  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: for (Byte j = 0; j <= 3 - 1; j++) {  	DeviceRFAddress.Append (RawMessageDecoded [Cursor]);  	Cursor++;  }  
Magic Number,MAXDebug,M_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\M_Message.cs,M_Message,The following statement contains a magic number: for (Byte j = 0; j <= 10 - 1; j++) {  	DeviceSerialNumber.Append ((char)RawMessageDecoded [Cursor]);  	Cursor++;  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: if (args.Length < 2) {  	Console.WriteLine ("Syntax:");  	Console.WriteLine ();  	Console.WriteLine ("\tmaxdebug <hostname/ip> <port (e.g. 62910)> [commands]");  	Console.WriteLine ();  	return;  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: do {  	myCompleteMessage = new StringBuilder ();  	stream.ReadTimeout = 1000;  	try {  		numberOfBytesRead = stream.Read (myReadBuffer' 0' myReadBuffer.Length);  		myCompleteMessage.AppendFormat ("{0}"' Encoding.ASCII.GetString (myReadBuffer' 0' numberOfBytesRead));  		Messages.Add (myCompleteMessage.ToString ());  	} catch (Exception) {  		//Console.WriteLine("Exception: "+e.Message);  		keepRunning = false;  	}  } while (keepRunning);  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: stream.ReadTimeout = 1000;  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: foreach (String _Message in Messages) {  	if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  		String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (String pmessage in PMessages) {  			PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  		}  	} else  		PreProcessedMessages.Add (_Message);  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: foreach (String _Message in Messages) {  	if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  		String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (String pmessage in PMessages) {  			PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  		}  	} else  		PreProcessedMessages.Add (_Message);  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  	String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (String pmessage in PMessages) {  		PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  	}  } else  	PreProcessedMessages.Add (_Message);  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  	String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (String pmessage in PMessages) {  		PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  	}  } else  	PreProcessedMessages.Add (_Message);  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: if (args.Length > 2) {  	System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding ();  	byte[] args_data_buffer = enc.GetBytes (args [2] + "\r\n");  	ConsoleOutputLogger.WriteLine ("Sending Command: " + args [2]);  	stream.Write (args_data_buffer' 0' args_data_buffer.Length);  	keepRunning = true;  	Messages = new List<string> ();  	do {  		myCompleteMessage = new StringBuilder ();  		stream.ReadTimeout = 1000;  		try {  			numberOfBytesRead = stream.Read (myReadBuffer' 0' myReadBuffer.Length);  			myCompleteMessage.AppendFormat ("{0}"' Encoding.ASCII.GetString (myReadBuffer' 0' numberOfBytesRead));  			Messages.Add (myCompleteMessage.ToString ());  		} catch (Exception) {  			//jConsole.WriteLine("Exception: "+e.Message);  			keepRunning = false;  		}  	} while (keepRunning);  	PreProcessedMessages = new List<string> ();  	// preprocess  	foreach (String _Message in Messages) {  		if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  			String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (String pmessage in PMessages) {  				PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  			}  		} else  			PreProcessedMessages.Add (_Message);  	}  	foreach (String _Message in PreProcessedMessages) {  		IMAXMessage Message = DecoderEncoder.ProcessMessage (_Message' thisHouse);  		if (Message != null) {  			ConsoleOutputLogger.WriteLine (Message.ToString ());  			ConsoleOutputLogger.LogToFile ("");  		}  	}  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: if (args.Length > 2) {  	System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding ();  	byte[] args_data_buffer = enc.GetBytes (args [2] + "\r\n");  	ConsoleOutputLogger.WriteLine ("Sending Command: " + args [2]);  	stream.Write (args_data_buffer' 0' args_data_buffer.Length);  	keepRunning = true;  	Messages = new List<string> ();  	do {  		myCompleteMessage = new StringBuilder ();  		stream.ReadTimeout = 1000;  		try {  			numberOfBytesRead = stream.Read (myReadBuffer' 0' myReadBuffer.Length);  			myCompleteMessage.AppendFormat ("{0}"' Encoding.ASCII.GetString (myReadBuffer' 0' numberOfBytesRead));  			Messages.Add (myCompleteMessage.ToString ());  		} catch (Exception) {  			//jConsole.WriteLine("Exception: "+e.Message);  			keepRunning = false;  		}  	} while (keepRunning);  	PreProcessedMessages = new List<string> ();  	// preprocess  	foreach (String _Message in Messages) {  		if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  			String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (String pmessage in PMessages) {  				PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  			}  		} else  			PreProcessedMessages.Add (_Message);  	}  	foreach (String _Message in PreProcessedMessages) {  		IMAXMessage Message = DecoderEncoder.ProcessMessage (_Message' thisHouse);  		if (Message != null) {  			ConsoleOutputLogger.WriteLine (Message.ToString ());  			ConsoleOutputLogger.LogToFile ("");  		}  	}  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: if (args.Length > 2) {  	System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding ();  	byte[] args_data_buffer = enc.GetBytes (args [2] + "\r\n");  	ConsoleOutputLogger.WriteLine ("Sending Command: " + args [2]);  	stream.Write (args_data_buffer' 0' args_data_buffer.Length);  	keepRunning = true;  	Messages = new List<string> ();  	do {  		myCompleteMessage = new StringBuilder ();  		stream.ReadTimeout = 1000;  		try {  			numberOfBytesRead = stream.Read (myReadBuffer' 0' myReadBuffer.Length);  			myCompleteMessage.AppendFormat ("{0}"' Encoding.ASCII.GetString (myReadBuffer' 0' numberOfBytesRead));  			Messages.Add (myCompleteMessage.ToString ());  		} catch (Exception) {  			//jConsole.WriteLine("Exception: "+e.Message);  			keepRunning = false;  		}  	} while (keepRunning);  	PreProcessedMessages = new List<string> ();  	// preprocess  	foreach (String _Message in Messages) {  		if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  			String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (String pmessage in PMessages) {  				PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  			}  		} else  			PreProcessedMessages.Add (_Message);  	}  	foreach (String _Message in PreProcessedMessages) {  		IMAXMessage Message = DecoderEncoder.ProcessMessage (_Message' thisHouse);  		if (Message != null) {  			ConsoleOutputLogger.WriteLine (Message.ToString ());  			ConsoleOutputLogger.LogToFile ("");  		}  	}  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: if (args.Length > 2) {  	System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding ();  	byte[] args_data_buffer = enc.GetBytes (args [2] + "\r\n");  	ConsoleOutputLogger.WriteLine ("Sending Command: " + args [2]);  	stream.Write (args_data_buffer' 0' args_data_buffer.Length);  	keepRunning = true;  	Messages = new List<string> ();  	do {  		myCompleteMessage = new StringBuilder ();  		stream.ReadTimeout = 1000;  		try {  			numberOfBytesRead = stream.Read (myReadBuffer' 0' myReadBuffer.Length);  			myCompleteMessage.AppendFormat ("{0}"' Encoding.ASCII.GetString (myReadBuffer' 0' numberOfBytesRead));  			Messages.Add (myCompleteMessage.ToString ());  		} catch (Exception) {  			//jConsole.WriteLine("Exception: "+e.Message);  			keepRunning = false;  		}  	} while (keepRunning);  	PreProcessedMessages = new List<string> ();  	// preprocess  	foreach (String _Message in Messages) {  		if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  			String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (String pmessage in PMessages) {  				PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  			}  		} else  			PreProcessedMessages.Add (_Message);  	}  	foreach (String _Message in PreProcessedMessages) {  		IMAXMessage Message = DecoderEncoder.ProcessMessage (_Message' thisHouse);  		if (Message != null) {  			ConsoleOutputLogger.WriteLine (Message.ToString ());  			ConsoleOutputLogger.LogToFile ("");  		}  	}  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: if (args.Length > 2) {  	System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding ();  	byte[] args_data_buffer = enc.GetBytes (args [2] + "\r\n");  	ConsoleOutputLogger.WriteLine ("Sending Command: " + args [2]);  	stream.Write (args_data_buffer' 0' args_data_buffer.Length);  	keepRunning = true;  	Messages = new List<string> ();  	do {  		myCompleteMessage = new StringBuilder ();  		stream.ReadTimeout = 1000;  		try {  			numberOfBytesRead = stream.Read (myReadBuffer' 0' myReadBuffer.Length);  			myCompleteMessage.AppendFormat ("{0}"' Encoding.ASCII.GetString (myReadBuffer' 0' numberOfBytesRead));  			Messages.Add (myCompleteMessage.ToString ());  		} catch (Exception) {  			//jConsole.WriteLine("Exception: "+e.Message);  			keepRunning = false;  		}  	} while (keepRunning);  	PreProcessedMessages = new List<string> ();  	// preprocess  	foreach (String _Message in Messages) {  		if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  			String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (String pmessage in PMessages) {  				PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  			}  		} else  			PreProcessedMessages.Add (_Message);  	}  	foreach (String _Message in PreProcessedMessages) {  		IMAXMessage Message = DecoderEncoder.ProcessMessage (_Message' thisHouse);  		if (Message != null) {  			ConsoleOutputLogger.WriteLine (Message.ToString ());  			ConsoleOutputLogger.LogToFile ("");  		}  	}  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: if (args.Length > 2) {  	System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding ();  	byte[] args_data_buffer = enc.GetBytes (args [2] + "\r\n");  	ConsoleOutputLogger.WriteLine ("Sending Command: " + args [2]);  	stream.Write (args_data_buffer' 0' args_data_buffer.Length);  	keepRunning = true;  	Messages = new List<string> ();  	do {  		myCompleteMessage = new StringBuilder ();  		stream.ReadTimeout = 1000;  		try {  			numberOfBytesRead = stream.Read (myReadBuffer' 0' myReadBuffer.Length);  			myCompleteMessage.AppendFormat ("{0}"' Encoding.ASCII.GetString (myReadBuffer' 0' numberOfBytesRead));  			Messages.Add (myCompleteMessage.ToString ());  		} catch (Exception) {  			//jConsole.WriteLine("Exception: "+e.Message);  			keepRunning = false;  		}  	} while (keepRunning);  	PreProcessedMessages = new List<string> ();  	// preprocess  	foreach (String _Message in Messages) {  		if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  			String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  				'\n'  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (String pmessage in PMessages) {  				PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  			}  		} else  			PreProcessedMessages.Add (_Message);  	}  	foreach (String _Message in PreProcessedMessages) {  		IMAXMessage Message = DecoderEncoder.ProcessMessage (_Message' thisHouse);  		if (Message != null) {  			ConsoleOutputLogger.WriteLine (Message.ToString ());  			ConsoleOutputLogger.LogToFile ("");  		}  	}  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: ConsoleOutputLogger.WriteLine ("Sending Command: " + args [2]);  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: do {  	myCompleteMessage = new StringBuilder ();  	stream.ReadTimeout = 1000;  	try {  		numberOfBytesRead = stream.Read (myReadBuffer' 0' myReadBuffer.Length);  		myCompleteMessage.AppendFormat ("{0}"' Encoding.ASCII.GetString (myReadBuffer' 0' numberOfBytesRead));  		Messages.Add (myCompleteMessage.ToString ());  	} catch (Exception) {  		//jConsole.WriteLine("Exception: "+e.Message);  		keepRunning = false;  	}  } while (keepRunning);  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: stream.ReadTimeout = 1000;  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: foreach (String _Message in Messages) {  	if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  		String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (String pmessage in PMessages) {  			PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  		}  	} else  		PreProcessedMessages.Add (_Message);  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: foreach (String _Message in Messages) {  	if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  		String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (String pmessage in PMessages) {  			PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  		}  	} else  		PreProcessedMessages.Add (_Message);  }  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  	String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (String pmessage in PMessages) {  		PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  	}  } else  	PreProcessedMessages.Add (_Message);  
Magic Number,MAXDebug,MainClass,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\Main.cs,Main,The following statement contains a magic number: if (_Message.Remove (_Message.Length - 2).Contains ("\r\n")) {  	String[] PMessages = _Message.Remove (_Message.Length - 2).Split (new char[1] {  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	foreach (String pmessage in PMessages) {  		PreProcessedMessages.Add (pmessage.Replace ("\r"' "") + "\r\n");  	}  } else  	PreProcessedMessages.Add (_Message);  
Duplicate Code,MAXDebug,L_Message,F:\newReposMay17\bietiekay_hacs\tools\MAXDebug\MAXDebug\ELVMAX_Data\Messages\L_Message.cs,L_Message,The method contains a code clone-set at the following line numbers (starting from the method definition): ((41' 87)' (112' 158))
