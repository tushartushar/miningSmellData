Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ParticleFilterModelFitting,OpenHandTemplate,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\Model\OpenHandTemplate.cs,createRange,The method has 6 parameters. Parameters: dict' templateImg' templateIdx' scaleRange' rotationRange' label
Long Statement,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The length of the statement  "            var path = Path.Combine(Directory.GetParent(Environment.CurrentDirectory).FullName' "Resources"' "PrototypeTemplatesBW"); " is 121.
Long Statement,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The length of the statement  "            var generatedOrientations = EnumerableExtensions.GetRange(-90' +90' (int)((180f / GlobalParameters.NUM_OF_QUNATIZED_ORIENTATIONS) / 2 / 2 /*user factor - last "2"*/)); " is 167.
Long Statement,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,update,The length of the statement  "            var uniqueParticles = particleFilter.GroupBy(x => x.ModelParameters).Select(x => x.First()); //get distinct particles (there is no need to match the same templates) " is 164.
Long Statement,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,update,The length of the statement  "                var score = (m.Score / 100) * (particle.Size.Width * particle.Size.Height * scaleFactor); //actual score multiplied with size factor (the bigger the better) " is 156.
Long Statement,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,update,The length of the statement  "                    particle.MetaDataRef = new WeakReference<Match>(m); //avoid circular reference (template inside match is particle again) " is 120.
Long Statement,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,drawTemplatesToFiles,The length of the statement  "                var fileName = String.Format("template_{0}_scale{1}_angle_{2}.bmp"' mParams.ModelTypeIndex' mParams.Scale' mParams.Angle); " is 122.
Long Statement,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,drawTemplatesToFiles,The length of the statement  "                img.Draw(template.Features.Select(x => new Point(x.X + BORDER_OFFSET' x.Y + BORDER_OFFSET)).ToArray()' Bgr<byte>.Red' 3); " is 121.
Magic Number,ParticleFilterModelFitting,ModelParams,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\Model\ModelParams.cs,GetHashCode,The following statement contains a magic number: return (this.Angle << (sizeof(int) / 2)) | (ushort)this.Scale | this.ModelTypeIndex;
Magic Number,ParticleFilterModelFitting,ModelParticle,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\Particle\ModelParticle.cs,Diffuse,The following statement contains a magic number: var angle = ModelParameters.Angle + rand.Next(-15' +15 + 1);
Magic Number,ParticleFilterModelFitting,ModelParticle,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\Particle\ModelParticle.cs,Diffuse,The following statement contains a magic number: var angle = ModelParameters.Angle + rand.Next(-15' +15 + 1);
Magic Number,ParticleFilterModelFitting,ModelParticle,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\Particle\ModelParticle.cs,Diffuse,The following statement contains a magic number: var scale = ModelParameters.Scale + rand.Next(-15' +15 + 1);
Magic Number,ParticleFilterModelFitting,ModelParticle,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\Particle\ModelParticle.cs,Diffuse,The following statement contains a magic number: var scale = ModelParameters.Scale + rand.Next(-15' +15 + 1);
Magic Number,ParticleFilterModelFitting,ModelParticle,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\Particle\ModelParticle.cs,FromParameters,The following statement contains a magic number: var mParams = new ModelParams(modelTypeIndex: (int)arr[0]'                                            scale:         (short)arr[1]'                                            angle:         (short)arr[2]);
Magic Number,ParticleFilterModelFitting,OpenHandTemplate,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\Model\OpenHandTemplate.cs,findContour,The following statement contains a magic number: var contour = templateImg.FindContour(minGradientStrength: 150).Select(x => (PointF)x).ToList();
Magic Number,ParticleFilterModelFitting,OpenHandTemplate,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\Model\OpenHandTemplate.cs,create,The following statement contains a magic number: for (int i = CardinalSpline.MIN_INDEX; i < (transformedPts.Count - 1 - CardinalSpline.MAX_INDEX_OFFSET); i++)              {                  var intPt = transformedPts[i].Round();                    var direction = CardinalSpline.NormalAt(transformedPts' CONTOUR_TENSION' i);                  var orientDeg = (int)Angle.ToDegrees(Math.Atan2(direction.Y' direction.X));                  orientDeg = (int)Angle.NormalizeDegrees(orientDeg + 180);                    var feature = createFeature(intPt.X' intPt.Y' orientDeg);                  features.Add(feature);              }
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The following statement contains a magic number: var generatedScales = EnumerableExtensions.GetRange(60' 170' 3);
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The following statement contains a magic number: var generatedScales = EnumerableExtensions.GetRange(60' 170' 3);
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The following statement contains a magic number: var generatedScales = EnumerableExtensions.GetRange(60' 170' 3);
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The following statement contains a magic number: var generatedOrientations = EnumerableExtensions.GetRange(-90' +90' (int)((180f / GlobalParameters.NUM_OF_QUNATIZED_ORIENTATIONS) / 2 / 2 /*user factor - last "2"*/));
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The following statement contains a magic number: var generatedOrientations = EnumerableExtensions.GetRange(-90' +90' (int)((180f / GlobalParameters.NUM_OF_QUNATIZED_ORIENTATIONS) / 2 / 2 /*user factor - last "2"*/));
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The following statement contains a magic number: var generatedOrientations = EnumerableExtensions.GetRange(-90' +90' (int)((180f / GlobalParameters.NUM_OF_QUNATIZED_ORIENTATIONS) / 2 / 2 /*user factor - last "2"*/));
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The following statement contains a magic number: var generatedOrientations = EnumerableExtensions.GetRange(-90' +90' (int)((180f / GlobalParameters.NUM_OF_QUNATIZED_ORIENTATIONS) / 2 / 2 /*user factor - last "2"*/));
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The following statement contains a magic number: particleFilter.CreateParticles(NUMBER_OF_PARTICLES'  //particle count                                            ModelParticle.FromParameters' //convert arr => position (create from array)                                            new ISampleableDistribution<double>[]  //position range                                             {                                                  //template type                                                 new UniformContinuousDistribution(0' ModelRepository.PrototypeCount - 1)'                                                 //scale                                                 new UniformContinuousDistribution(70' 150)'                                                 //rotation                                                 new UniformContinuousDistribution(-15' 15)                                             });
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The following statement contains a magic number: particleFilter.CreateParticles(NUMBER_OF_PARTICLES'  //particle count                                            ModelParticle.FromParameters' //convert arr => position (create from array)                                            new ISampleableDistribution<double>[]  //position range                                             {                                                  //template type                                                 new UniformContinuousDistribution(0' ModelRepository.PrototypeCount - 1)'                                                 //scale                                                 new UniformContinuousDistribution(70' 150)'                                                 //rotation                                                 new UniformContinuousDistribution(-15' 15)                                             });
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The following statement contains a magic number: particleFilter.CreateParticles(NUMBER_OF_PARTICLES'  //particle count                                            ModelParticle.FromParameters' //convert arr => position (create from array)                                            new ISampleableDistribution<double>[]  //position range                                             {                                                  //template type                                                 new UniformContinuousDistribution(0' ModelRepository.PrototypeCount - 1)'                                                 //scale                                                 new UniformContinuousDistribution(70' 150)'                                                 //rotation                                                 new UniformContinuousDistribution(-15' 15)                                             });
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,init,The following statement contains a magic number: particleFilter.CreateParticles(NUMBER_OF_PARTICLES'  //particle count                                            ModelParticle.FromParameters' //convert arr => position (create from array)                                            new ISampleableDistribution<double>[]  //position range                                             {                                                  //template type                                                 new UniformContinuousDistribution(0' ModelRepository.PrototypeCount - 1)'                                                 //scale                                                 new UniformContinuousDistribution(70' 150)'                                                 //rotation                                                 new UniformContinuousDistribution(-15' 15)                                             });
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,update,The following statement contains a magic number: foreach (var m in bestGroup.Detections)               {                  var particle = (ModelParticle)m.Template;                  var score = (m.Score / 100) * (particle.Size.Width * particle.Size.Height * scaleFactor); //actual score multiplied with size factor (the bigger the better)                  m.Score = score;                  if (particle.Weight < score) //1 particle may correspond to several matches                  {                      particle.Weight = score;                       particle.MetaDataRef = new WeakReference<Match>(m); //avoid circular reference (template inside match is particle again)                  }              }
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,processFrame,The following statement contains a magic number: if (metaData != null)              {                   //img.Draw(p.MetaData' new Bgr(Color.Blue)' 1);                  img.Draw(metaData.Points.ToArray()' Bgr<byte>.Blue' 3);                  img.DrawAnnotation(metaData.BoundingRect' text' DotImaging.Font.Small);              }
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,videoCapture_ProcessFrame,The following statement contains a magic number: frame.Draw("Processed: " + /*matchTimeMs*/ elapsedMs + " ms"' DotImaging.Font.Small' new Point(25' 20)' Bgr<byte>.Red);
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,videoCapture_ProcessFrame,The following statement contains a magic number: frame.Draw("Processed: " + /*matchTimeMs*/ elapsedMs + " ms"' DotImaging.Font.Small' new Point(25' 20)' Bgr<byte>.Red);
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,drawTemplatesToFiles,The following statement contains a magic number: const int BORDER_OFFSET = 10;
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,drawTemplatesToFiles,The following statement contains a magic number: foreach (var pair in dict)              {                  var mParams = pair.Key;                  var fileName = String.Format("template_{0}_scale{1}_angle_{2}.bmp"' mParams.ModelTypeIndex' mParams.Scale' mParams.Angle);                  fileName = Path.Combine(path' fileName);                    var template = pair.Value;                  var img = new Bgr<byte>[template.Size.Height + 2 * BORDER_OFFSET' template.Size.Width + 2 * BORDER_OFFSET];                  img.Draw(template.Features.Select(x => new Point(x.X + BORDER_OFFSET' x.Y + BORDER_OFFSET)).ToArray()' Bgr<byte>.Red' 3);                  img.Save(fileName);              }
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,drawTemplatesToFiles,The following statement contains a magic number: foreach (var pair in dict)              {                  var mParams = pair.Key;                  var fileName = String.Format("template_{0}_scale{1}_angle_{2}.bmp"' mParams.ModelTypeIndex' mParams.Scale' mParams.Angle);                  fileName = Path.Combine(path' fileName);                    var template = pair.Value;                  var img = new Bgr<byte>[template.Size.Height + 2 * BORDER_OFFSET' template.Size.Width + 2 * BORDER_OFFSET];                  img.Draw(template.Features.Select(x => new Point(x.X + BORDER_OFFSET' x.Y + BORDER_OFFSET)).ToArray()' Bgr<byte>.Red' 3);                  img.Save(fileName);              }
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,drawTemplatesToFiles,The following statement contains a magic number: foreach (var pair in dict)              {                  var mParams = pair.Key;                  var fileName = String.Format("template_{0}_scale{1}_angle_{2}.bmp"' mParams.ModelTypeIndex' mParams.Scale' mParams.Angle);                  fileName = Path.Combine(path' fileName);                    var template = pair.Value;                  var img = new Bgr<byte>[template.Size.Height + 2 * BORDER_OFFSET' template.Size.Width + 2 * BORDER_OFFSET];                  img.Draw(template.Features.Select(x => new Point(x.X + BORDER_OFFSET' x.Y + BORDER_OFFSET)).ToArray()' Bgr<byte>.Red' 3);                  img.Save(fileName);              }
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox.Margin = new System.Windows.Forms.Padding(2);
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox.Size = new System.Drawing.Size(410' 298);
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox.Size = new System.Drawing.Size(410' 298);
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox.TabIndex = 2;
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(410' 298);
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(410' 298);
Magic Number,ParticleFilterModelFitting,ParticleFilterModelFittingDemo,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\ParticleFilterModelFittingDemo.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(2);
Magic Number,MoreCollections,CircularList<T>,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\MoreCollections\CiruclarList.cs,translateRange,The following statement contains a magic number: if (realIdxB < this.Count && realIdxA <= realIdxB)              {                  segmentIndeces = new int[1]; segmentIndeces[0] = realIdxA;                  segmentLengths = new int[1]; segmentLengths[0] = realIdxB - realIdxA + 1;              }              else              {                  segmentIndeces = new int[2];                  segmentIndeces[0] = realIdxA;                  segmentIndeces[1] = 0;                    segmentLengths = new int[2];                  segmentLengths[0] = this.Count - realIdxA;                  segmentLengths[1] = realIdxB;              }
Magic Number,MoreCollections,CircularList<T>,C:\repos\dajuric_accord-net-extensions\Samples\Math\ParticleFilterSamples\ParticleFilterModelFittingDemo\MoreCollections\CiruclarList.cs,translateRange,The following statement contains a magic number: if (realIdxB < this.Count && realIdxA <= realIdxB)              {                  segmentIndeces = new int[1]; segmentIndeces[0] = realIdxA;                  segmentLengths = new int[1]; segmentLengths[0] = realIdxB - realIdxA + 1;              }              else              {                  segmentIndeces = new int[2];                  segmentIndeces[0] = realIdxA;                  segmentIndeces[1] = 0;                    segmentLengths = new int[2];                  segmentLengths[0] = this.Count - realIdxA;                  segmentLengths[1] = realIdxB;              }
