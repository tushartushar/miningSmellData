Implementation smell,Namespace,Class,File,Method,Description
Long Method,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,StepTemporalPooling,The method has 107 lines of code.
Complex Method,Doo.Machine,ImagePreprocessor,C:\repos\avogab_dooHTM\machine\ImagePreprocessor.cs,Step,Cyclomatic complexity of the method is 11
Complex Method,Doo.Machine.HTM,HTMCell,C:\repos\avogab_dooHTM\machine\HTM\HTMCell.cs,GetActiveSegment,Cyclomatic complexity of the method is 10
Complex Method,Doo.Machine.HTM,HTMCell,C:\repos\avogab_dooHTM\machine\HTM\HTMCell.cs,AdaptSegments,Cyclomatic complexity of the method is 21
Complex Method,Doo.Machine.HTM,HTMCellViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellViewer.cs,UpdateView,Cyclomatic complexity of the method is 10
Complex Method,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,Step,Cyclomatic complexity of the method is 9
Complex Method,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,StepSpatialPooling,Cyclomatic complexity of the method is 11
Complex Method,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,StepTemporalPooling,Cyclomatic complexity of the method is 24
Complex Method,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,GetStatInfo,Cyclomatic complexity of the method is 31
Complex Method,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,UpdateView,Cyclomatic complexity of the method is 8
Complex Method,Doo.Machine.HTM,HTMColumnsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMColumnsViewer.cs,OnPaint,Cyclomatic complexity of the method is 29
Long Parameter List,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,HTMColumn,The method has 5 parameters.
Long Parameter List,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,HTMRegionAgent,The method has 9 parameters.
Long Statement,Doo.Machine.HTM,HTMBuilder,C:\repos\avogab_dooHTM\machine\HTM\HTMBuilder.cs,Initialize,The length of the statement  "	_regionAgent = new HTMRegionAgent (_director' _regionWidth' _regionHeight' cellsPerColumn' minimumOverlap' desiredLocalActiviy' segmentActivationThreshold' minSegmentActivityForLearning' proximalSegmentCoverage); " is 212.
Long Statement,Doo.Machine.HTM,HTMCell,C:\repos\avogab_dooHTM\machine\HTM\HTMCell.cs,AdaptSegments,The length of the statement  "				_column.Region.Director.Log ("Created new distal segment on a cell on column " + segment.Cell.Column.PosX.ToString () + "'" + segment.Cell.Column.PosY.ToString ()); " is 164.
Long Statement,Doo.Machine.HTM,HTMCellViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellViewer.cs,UpdateView,The length of the statement  "            */str += "Proximal segment (from a matrix with size " + _cell.Column.Region.Width.ToString () + "x" + _cell.Column.Region.Height.ToString () + ")" + Environment.NewLine; " is 169.
Long Statement,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,PerformBoosting,The length of the statement  "	// minimum desired firing rate for a cell. If a cell's firing rate falls below this value' it will be boosted. This value is calculated as 1% of the maximum firing rate of its neighbors. " is 186.
Long Statement,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,StepTemporalPooling,The length of the statement  "		// If the bottom-up input was not predicted' the best matching cell is chosen as the learning cell and a new segment is added to that cell. " is 139.
Long Statement,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,StepTemporalPooling,The length of the statement  "				SegmentUpdate segmentToUpdate = bestCellSegmentInfo.Cell.GetSegmentActiveSynapses (-1' bestCellSegmentInfo.Segment' true); " is 122.
Long Statement,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,StepTemporalPooling,The length of the statement  "				if (segmentToUpdate.Segment != null || (segmentToUpdate.AddNewSynapses && segmentToUpdate.NewSynapses.Count > 0))// queue the update only if necessary " is 150.
Long Statement,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,StepTemporalPooling,The length of the statement  "			//if (cell.GetActive(0))  // Cells with active dendrite segments are put in the predictive state UNLESS they are already active due to feed-forward input. " is 154.
Long Statement,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,Initialize,The length of the statement  "		List<HTMCell> cells = _inputCells.GetRectangle (col.X' col.Y' (int)(_inputCells.Width * _proximalSegmentCoverage)' (int)(_inputCells.Height * _proximalSegmentCoverage)); " is 169.
Magic Number,Doo.Machine,Cellls2dViewer,C:\repos\avogab_dooHTM\machine\Cellls2dViewer.cs,UpdateImage,The following statement contains a magic number: for (int ix = 0; ix < _inputs.Width; ix++) {  	for (int iy = 0; iy < _inputs.Height; iy++) {  		x = (int)(ix * 5);  		y = (int)(iy * 5);  		if (_inputs [ix' iy].GetActive (0))  			g.FillRectangle (activeColumnBrush' x' y' cellWidth' cellHeight);  		else  			g.FillRectangle (inactiveColumnBrush' x' y' cellWidth' cellHeight);  	}  }  
Magic Number,Doo.Machine,Cellls2dViewer,C:\repos\avogab_dooHTM\machine\Cellls2dViewer.cs,UpdateImage,The following statement contains a magic number: for (int ix = 0; ix < _inputs.Width; ix++) {  	for (int iy = 0; iy < _inputs.Height; iy++) {  		x = (int)(ix * 5);  		y = (int)(iy * 5);  		if (_inputs [ix' iy].GetActive (0))  			g.FillRectangle (activeColumnBrush' x' y' cellWidth' cellHeight);  		else  			g.FillRectangle (inactiveColumnBrush' x' y' cellWidth' cellHeight);  	}  }  
Magic Number,Doo.Machine,Cellls2dViewer,C:\repos\avogab_dooHTM\machine\Cellls2dViewer.cs,UpdateImage,The following statement contains a magic number: for (int iy = 0; iy < _inputs.Height; iy++) {  	x = (int)(ix * 5);  	y = (int)(iy * 5);  	if (_inputs [ix' iy].GetActive (0))  		g.FillRectangle (activeColumnBrush' x' y' cellWidth' cellHeight);  	else  		g.FillRectangle (inactiveColumnBrush' x' y' cellWidth' cellHeight);  }  
Magic Number,Doo.Machine,Cellls2dViewer,C:\repos\avogab_dooHTM\machine\Cellls2dViewer.cs,UpdateImage,The following statement contains a magic number: for (int iy = 0; iy < _inputs.Height; iy++) {  	x = (int)(ix * 5);  	y = (int)(iy * 5);  	if (_inputs [ix' iy].GetActive (0))  		g.FillRectangle (activeColumnBrush' x' y' cellWidth' cellHeight);  	else  		g.FillRectangle (inactiveColumnBrush' x' y' cellWidth' cellHeight);  }  
Magic Number,Doo.Machine,Cellls2dViewer,C:\repos\avogab_dooHTM\machine\Cellls2dViewer.cs,UpdateImage,The following statement contains a magic number: x = (int)(ix * 5);  
Magic Number,Doo.Machine,Cellls2dViewer,C:\repos\avogab_dooHTM\machine\Cellls2dViewer.cs,UpdateImage,The following statement contains a magic number: y = (int)(iy * 5);  
Magic Number,Doo.Machine,Cells2D,C:\repos\avogab_dooHTM\machine\Cells2D.cs,Cells2D,The following statement contains a magic number: for (int ix = 0; ix < width; ix++)  	for (int iy = 0; iy < height; iy++) {  		_cells [ix' iy] = new T ();  		_cells [ix' iy].PosX = ix;  		_cells [ix' iy].PosY = iy;  		if (width > 1)  			_cells [ix' iy].X = (double)ix / (double)(width - 1);  		else  			_cells [ix' iy].X = 0.5;  		if (height > 1)  			_cells [ix' iy].Y = (double)iy / (double)(height - 1);  		else  			_cells [ix' iy].Y = 0.5;  	}  
Magic Number,Doo.Machine,Cells2D,C:\repos\avogab_dooHTM\machine\Cells2D.cs,Cells2D,The following statement contains a magic number: for (int ix = 0; ix < width; ix++)  	for (int iy = 0; iy < height; iy++) {  		_cells [ix' iy] = new T ();  		_cells [ix' iy].PosX = ix;  		_cells [ix' iy].PosY = iy;  		if (width > 1)  			_cells [ix' iy].X = (double)ix / (double)(width - 1);  		else  			_cells [ix' iy].X = 0.5;  		if (height > 1)  			_cells [ix' iy].Y = (double)iy / (double)(height - 1);  		else  			_cells [ix' iy].Y = 0.5;  	}  
Magic Number,Doo.Machine,Cells2D,C:\repos\avogab_dooHTM\machine\Cells2D.cs,Cells2D,The following statement contains a magic number: for (int iy = 0; iy < height; iy++) {  	_cells [ix' iy] = new T ();  	_cells [ix' iy].PosX = ix;  	_cells [ix' iy].PosY = iy;  	if (width > 1)  		_cells [ix' iy].X = (double)ix / (double)(width - 1);  	else  		_cells [ix' iy].X = 0.5;  	if (height > 1)  		_cells [ix' iy].Y = (double)iy / (double)(height - 1);  	else  		_cells [ix' iy].Y = 0.5;  }  
Magic Number,Doo.Machine,Cells2D,C:\repos\avogab_dooHTM\machine\Cells2D.cs,Cells2D,The following statement contains a magic number: for (int iy = 0; iy < height; iy++) {  	_cells [ix' iy] = new T ();  	_cells [ix' iy].PosX = ix;  	_cells [ix' iy].PosY = iy;  	if (width > 1)  		_cells [ix' iy].X = (double)ix / (double)(width - 1);  	else  		_cells [ix' iy].X = 0.5;  	if (height > 1)  		_cells [ix' iy].Y = (double)iy / (double)(height - 1);  	else  		_cells [ix' iy].Y = 0.5;  }  
Magic Number,Doo.Machine,Cells2D,C:\repos\avogab_dooHTM\machine\Cells2D.cs,Cells2D,The following statement contains a magic number: if (width > 1)  	_cells [ix' iy].X = (double)ix / (double)(width - 1);  else  	_cells [ix' iy].X = 0.5;  
Magic Number,Doo.Machine,Cells2D,C:\repos\avogab_dooHTM\machine\Cells2D.cs,Cells2D,The following statement contains a magic number: _cells [ix' iy].X = 0.5;  
Magic Number,Doo.Machine,Cells2D,C:\repos\avogab_dooHTM\machine\Cells2D.cs,Cells2D,The following statement contains a magic number: if (height > 1)  	_cells [ix' iy].Y = (double)iy / (double)(height - 1);  else  	_cells [ix' iy].Y = 0.5;  
Magic Number,Doo.Machine,Cells2D,C:\repos\avogab_dooHTM\machine\Cells2D.cs,Cells2D,The following statement contains a magic number: _cells [ix' iy].Y = 0.5;  
Magic Number,Doo.Machine,ImagePreprocessor,C:\repos\avogab_dooHTM\machine\ImagePreprocessor.cs,Initialize,The following statement contains a magic number: _outputWidth = int.Parse (outputSizeComboBox.Text.Substring (0' 3));  
Magic Number,Doo.Machine,ImagePreprocessor,C:\repos\avogab_dooHTM\machine\ImagePreprocessor.cs,Initialize,The following statement contains a magic number: _outputHeight = int.Parse (outputSizeComboBox.Text.Substring (6' 3));  
Magic Number,Doo.Machine,ImagePreprocessor,C:\repos\avogab_dooHTM\machine\ImagePreprocessor.cs,Initialize,The following statement contains a magic number: _outputHeight = int.Parse (outputSizeComboBox.Text.Substring (6' 3));  
Magic Number,Doo.Machine,ImagePreprocessor,C:\repos\avogab_dooHTM\machine\ImagePreprocessor.cs,Step,The following statement contains a magic number: _currentImage = _currentImage.ThresholdBinary (new Gray (128)' new Gray (255));  
Magic Number,Doo.Machine,ImagePreprocessor,C:\repos\avogab_dooHTM\machine\ImagePreprocessor.cs,Step,The following statement contains a magic number: _currentImage = _currentImage.ThresholdBinary (new Gray (128)' new Gray (255));  
Magic Number,Doo.Machine,ImagePreprocessor,C:\repos\avogab_dooHTM\machine\ImagePreprocessor.cs,Step,The following statement contains a magic number: for (int x = 0; x < _outputWidth; x++)  	for (int y = 0; y < _outputHeight; y++)  		_outputCells [x' y].SetActive ((underneathArray [y' x' 0] == 255));  
Magic Number,Doo.Machine,ImagePreprocessor,C:\repos\avogab_dooHTM\machine\ImagePreprocessor.cs,Step,The following statement contains a magic number: for (int y = 0; y < _outputHeight; y++)  	_outputCells [x' y].SetActive ((underneathArray [y' x' 0] == 255));  
Magic Number,Doo.Machine,ImagePreprocessor,C:\repos\avogab_dooHTM\machine\ImagePreprocessor.cs,Step,The following statement contains a magic number: _outputCells [x' y].SetActive ((underneathArray [y' x' 0] == 255));  
Magic Number,Doo.Machine,ImagePreprocessor,C:\repos\avogab_dooHTM\machine\ImagePreprocessor.cs,Motion,The following statement contains a magic number: return motionImage.ThresholdBinary (new Gray (20)' new Gray (255));  
Magic Number,Doo.Machine,ImagePreprocessor,C:\repos\avogab_dooHTM\machine\ImagePreprocessor.cs,Motion,The following statement contains a magic number: return motionImage.ThresholdBinary (new Gray (20)' new Gray (255));  
Magic Number,Doo.Machine.HTM,HTMBuilder,C:\repos\avogab_dooHTM\machine\HTM\HTMBuilder.cs,Initialize,The following statement contains a magic number: try {  	_regionWidth = int.Parse (regionWidthTextBox.Text);  	_regionHeight = int.Parse (regionHeightTextBox.Text);  	cellsPerColumn = int.Parse (networkSizeComboBox.Text.Substring (networkSizeComboBox.Text.Length - 1' 1));  	minimumOverlap = int.Parse (minimumOverlapTextBox.Text);  	desiredLocalActiviy = int.Parse (desiredLocalActivityTextBox.Text);  	segmentActivationThreshold = int.Parse (segmentActivationThresholdTextBox.Text);  	minSegmentActivityForLearning = int.Parse (segmentActivationThresholdTextBox.Text);  	proximalSegmentCoverage = double.Parse (proximalSegmentCoverageTextBox.Text) / 100;  }  catch (Exception exch) {  	_director.Log (exch.ToString ());  	return false;  }  
Magic Number,Doo.Machine.HTM,HTMBuilder,C:\repos\avogab_dooHTM\machine\HTM\HTMBuilder.cs,Initialize,The following statement contains a magic number: proximalSegmentCoverage = double.Parse (proximalSegmentCoverageTextBox.Text) / 100;  
Magic Number,Doo.Machine.HTM,HTMBuilder,C:\repos\avogab_dooHTM\machine\HTM\HTMBuilder.cs,Initialize,The following statement contains a magic number: _regionViewer.Location = new Point (this.Left + this.Width' 20);  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: _colSize = Math.Max (Math.Min (width / _region.Width' height / _region.Height) - 2' 2);  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: _colSize = Math.Max (Math.Min (width / _region.Width' height / _region.Height) - 2' 2);  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: foreach (HTMColumn col in _region.Columns) {  	x1 = (int)(col.X * (width - _colSize - 1));  	x2 = (int)(col.X * (width - _colSize - 1)) + _colSize;  	y1 = (int)(col.Y * (height - _colSize - 1));  	y2 = (int)(col.Y * (height - _colSize - 1)) + _colSize;  	HTMCell cell = col.Cells [_indexInColumn];  	if (cell.GetPredicting (0)) {  		//_g.FillEllipse(_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  		//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  		_g.FillRectangle (_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	}  	else if (cell.GetLearning (0)) {  		//_g.FillEllipse(_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  		//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  		_g.FillRectangle (_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	}  	else if (cell.GetActive (0)) {  		//    _g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	}  	else {  		//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black))' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black))' x1' y1' x2 - x1' y2 - y1);  	}  }  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: foreach (HTMColumn col in _region.Columns) {  	x1 = (int)(col.X * (width - _colSize - 1));  	x2 = (int)(col.X * (width - _colSize - 1)) + _colSize;  	y1 = (int)(col.Y * (height - _colSize - 1));  	y2 = (int)(col.Y * (height - _colSize - 1)) + _colSize;  	HTMCell cell = col.Cells [_indexInColumn];  	if (cell.GetPredicting (0)) {  		//_g.FillEllipse(_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  		//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  		_g.FillRectangle (_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	}  	else if (cell.GetLearning (0)) {  		//_g.FillEllipse(_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  		//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  		_g.FillRectangle (_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	}  	else if (cell.GetActive (0)) {  		//    _g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	}  	else {  		//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black))' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black))' x1' y1' x2 - x1' y2 - y1);  	}  }  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: foreach (HTMColumn col in _region.Columns) {  	x1 = (int)(col.X * (width - _colSize - 1));  	x2 = (int)(col.X * (width - _colSize - 1)) + _colSize;  	y1 = (int)(col.Y * (height - _colSize - 1));  	y2 = (int)(col.Y * (height - _colSize - 1)) + _colSize;  	HTMCell cell = col.Cells [_indexInColumn];  	if (cell.GetPredicting (0)) {  		//_g.FillEllipse(_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  		//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  		_g.FillRectangle (_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	}  	else if (cell.GetLearning (0)) {  		//_g.FillEllipse(_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  		//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  		_g.FillRectangle (_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	}  	else if (cell.GetActive (0)) {  		//    _g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	}  	else {  		//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black))' x1' y1' x2 - x1' y2 - y1);  		_g.DrawRectangle (new Pen (new SolidBrush (Color.Black))' x1' y1' x2 - x1' y2 - y1);  	}  }  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: if (cell.GetPredicting (0)) {  	//_g.FillEllipse(_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.FillRectangle (_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else if (cell.GetLearning (0)) {  	//_g.FillEllipse(_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.FillRectangle (_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else if (cell.GetActive (0)) {  	//    _g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else {  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black))' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black))' x1' y1' x2 - x1' y2 - y1);  }  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: if (cell.GetPredicting (0)) {  	//_g.FillEllipse(_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.FillRectangle (_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else if (cell.GetLearning (0)) {  	//_g.FillEllipse(_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.FillRectangle (_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else if (cell.GetActive (0)) {  	//    _g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else {  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black))' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black))' x1' y1' x2 - x1' y2 - y1);  }  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: if (cell.GetPredicting (0)) {  	//_g.FillEllipse(_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.FillRectangle (_predictiveCellBrush' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else if (cell.GetLearning (0)) {  	//_g.FillEllipse(_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.FillRectangle (_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else if (cell.GetActive (0)) {  	//    _g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else {  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black))' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black))' x1' y1' x2 - x1' y2 - y1);  }  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: _g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: if (cell.GetLearning (0)) {  	//_g.FillEllipse(_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.FillRectangle (_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else if (cell.GetActive (0)) {  	//    _g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else {  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black))' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black))' x1' y1' x2 - x1' y2 - y1);  }  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: if (cell.GetLearning (0)) {  	//_g.FillEllipse(_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.FillRectangle (_learningCellBrush' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else if (cell.GetActive (0)) {  	//    _g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else {  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black))' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black))' x1' y1' x2 - x1' y2 - y1);  }  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: _g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: if (cell.GetActive (0)) {  	//    _g.DrawEllipse(new Pen(new SolidBrush(Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  }  else {  	//_g.DrawEllipse(new Pen(new SolidBrush(Color.Black))' x1' y1' x2 - x1' y2 - y1);  	_g.DrawRectangle (new Pen (new SolidBrush (Color.Black))' x1' y1' x2 - x1' y2 - y1);  }  
Magic Number,Doo.Machine.HTM,HTMCellsViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMCellsViewer.cs,OnPaint,The following statement contains a magic number: _g.DrawRectangle (new Pen (new SolidBrush (Color.Black)' 2)' x1' y1' x2 - x1' y2 - y1);  
Magic Number,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,PerformBoosting,The following statement contains a magic number: _activeDutyCycle = _activeDutyCycle * 499;  
Magic Number,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,PerformBoosting,The following statement contains a magic number: _activeDutyCycle = _activeDutyCycle / 500;  
Magic Number,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,PerformBoosting,The following statement contains a magic number: if (_activeDutyCycle < minDutyCycle) {  	_boost *= 1.10;  	// increment by 10% the overlap boosting if the colomn not win often enough.  	_boost = Math.Min (2' _boost);  	// set a limit to the boost.  }  
Magic Number,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,PerformBoosting,The following statement contains a magic number: if (_activeDutyCycle < minDutyCycle) {  	_boost *= 1.10;  	// increment by 10% the overlap boosting if the colomn not win often enough.  	_boost = Math.Min (2' _boost);  	// set a limit to the boost.  }  
Magic Number,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,PerformBoosting,The following statement contains a magic number: _boost *= 1.10;  
Magic Number,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,PerformBoosting,The following statement contains a magic number: _boost = Math.Min (2' _boost);  
Magic Number,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,PerformBoosting,The following statement contains a magic number: _overlapDutyCycle = _overlapDutyCycle * 499;  
Magic Number,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,PerformBoosting,The following statement contains a magic number: _overlapDutyCycle = _overlapDutyCycle / 500;  
Magic Number,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,PerformBoosting,The following statement contains a magic number: if (_overlapDutyCycle < minDutyCycle)  	IncreasePermanences (0.1 * HTMSynapse._connectedPermanence);  
Magic Number,Doo.Machine.HTM,HTMColumn,C:\repos\avogab_dooHTM\machine\HTM\HTMColumn.cs,PerformBoosting,The following statement contains a magic number: IncreasePermanences (0.1 * HTMSynapse._connectedPermanence);  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,HTMRegionAgent,The following statement contains a magic number: for (int cx = 0; cx < _width; cx++) {  	for (int cy = 0; cy < _height; cy++) {  		if (_width > 1)  			x = (double)cx / (_width - 1);  		else  			x = 0.5;  		if (_height > 1)  			y = (double)cy / (_height - 1);  		else  			y = 0.5;  		_columns [cx' cy] = new HTMColumn (this' cx' cy' x' y);  	}  }  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,HTMRegionAgent,The following statement contains a magic number: for (int cx = 0; cx < _width; cx++) {  	for (int cy = 0; cy < _height; cy++) {  		if (_width > 1)  			x = (double)cx / (_width - 1);  		else  			x = 0.5;  		if (_height > 1)  			y = (double)cy / (_height - 1);  		else  			y = 0.5;  		_columns [cx' cy] = new HTMColumn (this' cx' cy' x' y);  	}  }  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,HTMRegionAgent,The following statement contains a magic number: for (int cy = 0; cy < _height; cy++) {  	if (_width > 1)  		x = (double)cx / (_width - 1);  	else  		x = 0.5;  	if (_height > 1)  		y = (double)cy / (_height - 1);  	else  		y = 0.5;  	_columns [cx' cy] = new HTMColumn (this' cx' cy' x' y);  }  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,HTMRegionAgent,The following statement contains a magic number: for (int cy = 0; cy < _height; cy++) {  	if (_width > 1)  		x = (double)cx / (_width - 1);  	else  		x = 0.5;  	if (_height > 1)  		y = (double)cy / (_height - 1);  	else  		y = 0.5;  	_columns [cx' cy] = new HTMColumn (this' cx' cy' x' y);  }  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,HTMRegionAgent,The following statement contains a magic number: if (_width > 1)  	x = (double)cx / (_width - 1);  else  	x = 0.5;  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,HTMRegionAgent,The following statement contains a magic number: x = 0.5;  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,HTMRegionAgent,The following statement contains a magic number: if (_height > 1)  	y = (double)cy / (_height - 1);  else  	y = 0.5;  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,HTMRegionAgent,The following statement contains a magic number: y = 0.5;  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,AverageReceptiveFieldSize,The following statement contains a magic number: foreach (HTMColumn col in _columns) {  	max = 0;  	foreach (HTMSynapse syn in col.ProximalSegment.GetConnectedSynapses ()) {  		d = Math.Sqrt (Math.Pow (col.X - syn.InputCell.X' 2) + Math.Pow (col.Y - syn.InputCell.Y' 2));  		if (d > max)  			max = d;  	}  	average += max;  	count++;  }  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,AverageReceptiveFieldSize,The following statement contains a magic number: foreach (HTMColumn col in _columns) {  	max = 0;  	foreach (HTMSynapse syn in col.ProximalSegment.GetConnectedSynapses ()) {  		d = Math.Sqrt (Math.Pow (col.X - syn.InputCell.X' 2) + Math.Pow (col.Y - syn.InputCell.Y' 2));  		if (d > max)  			max = d;  	}  	average += max;  	count++;  }  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,AverageReceptiveFieldSize,The following statement contains a magic number: foreach (HTMSynapse syn in col.ProximalSegment.GetConnectedSynapses ()) {  	d = Math.Sqrt (Math.Pow (col.X - syn.InputCell.X' 2) + Math.Pow (col.Y - syn.InputCell.Y' 2));  	if (d > max)  		max = d;  }  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,AverageReceptiveFieldSize,The following statement contains a magic number: foreach (HTMSynapse syn in col.ProximalSegment.GetConnectedSynapses ()) {  	d = Math.Sqrt (Math.Pow (col.X - syn.InputCell.X' 2) + Math.Pow (col.Y - syn.InputCell.Y' 2));  	if (d > max)  		max = d;  }  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,AverageReceptiveFieldSize,The following statement contains a magic number: d = Math.Sqrt (Math.Pow (col.X - syn.InputCell.X' 2) + Math.Pow (col.Y - syn.InputCell.Y' 2));  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,AverageReceptiveFieldSize,The following statement contains a magic number: d = Math.Sqrt (Math.Pow (col.X - syn.InputCell.X' 2) + Math.Pow (col.Y - syn.InputCell.Y' 2));  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,Initialize,The following statement contains a magic number: foreach (HTMColumn col in _columns) {  	// TO DO : get a random sample from the input matrix  	List<HTMCell> cells = _inputCells.GetRectangle (col.X' col.Y' (int)(_inputCells.Width * _proximalSegmentCoverage)' (int)(_inputCells.Height * _proximalSegmentCoverage));  	foreach (HTMCell c in cells) {  		permanence = _random.NextGauss (HTMSynapse._connectedPermanence' HTMSynapse._permanenceIncrement * 2.0' true);  		synapse = new HTMSynapse (c' permanence);  		col.ProximalSegment.Synapses.Add (synapse);  	}  }  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,Initialize,The following statement contains a magic number: foreach (HTMCell c in cells) {  	permanence = _random.NextGauss (HTMSynapse._connectedPermanence' HTMSynapse._permanenceIncrement * 2.0' true);  	synapse = new HTMSynapse (c' permanence);  	col.ProximalSegment.Synapses.Add (synapse);  }  
Magic Number,Doo.Machine.HTM,HTMRegionAgent,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionAgent.cs,Initialize,The following statement contains a magic number: permanence = _random.NextGauss (HTMSynapse._connectedPermanence' HTMSynapse._permanenceIncrement * 2.0' true);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers = new HTMColumnsViewer[4];  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [0].Location = new Point (10' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [0].Location = new Point (10' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [1].Location = new Point (10 + (columnViewersWidth + 10)' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [1].Location = new Point (10 + (columnViewersWidth + 10)' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [1].Location = new Point (10 + (columnViewersWidth + 10)' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [2] = new HTMColumnsViewer (_region' HTMRegionViewerPropertyShowed.ColumnOverlap' columnViewersWidth' columnViewersWidth);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [2].Location = new Point (10 + (columnViewersWidth + 10) * 2' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [2].Location = new Point (10 + (columnViewersWidth + 10) * 2' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [2].Location = new Point (10 + (columnViewersWidth + 10) * 2' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [2].Location = new Point (10 + (columnViewersWidth + 10) * 2' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [2].Location = new Point (10 + (columnViewersWidth + 10) * 2' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: this.Controls.Add (_columnsViewers [2]);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [3] = new HTMColumnsViewer (_region' HTMRegionViewerPropertyShowed.ColumnPermanence' columnViewersWidth' columnViewersWidth);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [3].Location = new Point (10 + (columnViewersWidth + 10) * 3' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [3].Location = new Point (10 + (columnViewersWidth + 10) * 3' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [3].Location = new Point (10 + (columnViewersWidth + 10) * 3' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [3].Location = new Point (10 + (columnViewersWidth + 10) * 3' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _columnsViewers [3].Location = new Point (10 + (columnViewersWidth + 10) * 3' 80);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: this.Controls.Add (_columnsViewers [3]);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: for (int i = 0; i < _region.CellsPerColumn; i++) {  	_cellsViewers [i] = new HTMCellsViewer (_region' i' cellsViewersWidth' cellsViewersHeight);  	_cellsViewers [i].Location = new Point (10 + (cellsViewersWidth + 10) * i' 270);  	_cellsViewers [i].Visible = true;  	this.Controls.Add (_cellsViewers [i]);  }  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: for (int i = 0; i < _region.CellsPerColumn; i++) {  	_cellsViewers [i] = new HTMCellsViewer (_region' i' cellsViewersWidth' cellsViewersHeight);  	_cellsViewers [i].Location = new Point (10 + (cellsViewersWidth + 10) * i' 270);  	_cellsViewers [i].Visible = true;  	this.Controls.Add (_cellsViewers [i]);  }  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: for (int i = 0; i < _region.CellsPerColumn; i++) {  	_cellsViewers [i] = new HTMCellsViewer (_region' i' cellsViewersWidth' cellsViewersHeight);  	_cellsViewers [i].Location = new Point (10 + (cellsViewersWidth + 10) * i' 270);  	_cellsViewers [i].Visible = true;  	this.Controls.Add (_cellsViewers [i]);  }  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _cellsViewers [i].Location = new Point (10 + (cellsViewersWidth + 10) * i' 270);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _cellsViewers [i].Location = new Point (10 + (cellsViewersWidth + 10) * i' 270);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: _cellsViewers [i].Location = new Point (10 + (cellsViewersWidth + 10) * i' 270);  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: this.Width = 10 + (Math.Max (_region.CellsPerColumn' 4) + 1) * columnViewersWidth;  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: this.Width = 10 + (Math.Max (_region.CellsPerColumn' 4) + 1) * columnViewersWidth;  
Magic Number,Doo.Machine.HTM,HTMRegionViewer,C:\repos\avogab_dooHTM\machine\HTM\HTMRegionViewer.cs,HTMRegionViewer,The following statement contains a magic number: this.Height = 560;  
