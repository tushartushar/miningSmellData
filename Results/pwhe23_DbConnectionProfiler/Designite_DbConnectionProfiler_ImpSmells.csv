Implementation smell,Namespace,Class,File,Method,Description
Long Method,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Insert,The method has 118 lines of code.
Complex Method,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,CommonConstruct,Cyclomatic complexity of the method is 15
Complex Method,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,Cyclomatic complexity of the method is 12
Complex Method,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Query,Cyclomatic complexity of the method is 10
Complex Method,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Query,Cyclomatic complexity of the method is 13
Complex Method,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Insert,Cyclomatic complexity of the method is 43
Complex Method,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Update,Cyclomatic complexity of the method is 13
Long Parameter List,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,BuildPageQueries,The method has 6 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,FindSplitPoint,The method has 5 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Update,The method has 5 parameters.
Long Parameter List,DbConnectionProfiler,ProfiledDbDataReader,C:\repos\pwhe23_DbConnectionProfiler\DbConnectionProfiler.cs,GetBytes,The method has 5 parameters.
Long Parameter List,DbConnectionProfiler,ProfiledDbDataReader,C:\repos\pwhe23_DbConnectionProfiler\DbConnectionProfiler.cs,GetChars,The method has 5 parameters.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,CommonConstruct,The length of the statement  "	if (_dbType == DBType.MySql && _connectionString != null && _connectionString.IndexOf ("Allow User Variables=true") >= 0) " is 121.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentOutOfRangeException (string.Format ("Parameter '@{0}' specified but only {1} parameters supplied (in `{2}`)"' paramIndex' args_src.Length' _sql)); " is 164.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentException (string.Format ("Parameter '@{0}' specified but none of the passed arguments have a property with this name (in '{1}')"' param' _sql)); " is 163.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,ProcessParams,The length of the statement  "		if ((arg_val as System.Collections.IEnumerable) != null && (arg_val as string) == null && (arg_val as byte[]) == null) { " is 120.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,SplitSqlForPaging,The length of the statement  "		sqlCount = sql.Substring (0' g.Index) + "COUNT(" + m.Groups [1].ToString ().Trim () + ") " + sql.Substring (g.Index + g.Length); " is 128.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,BuildPageQueries,The length of the statement  "		sqlPage = string.Format ("SELECT * FROM (SELECT ROW_NUMBER() OVER ({0}) peta_rn' {1}) peta_paged WHERE peta_rn>@{2} AND peta_rn<=@{3}"' sqlOrderBy == null ? "ORDER BY (SELECT NULL)" : sqlOrderBy' sqlSelectRemoved' args.Length' args.Length + 1); " is 244.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Query,The length of the statement  "			var factory = pd.GetFactory (cmd.CommandText' _sharedConnection.ConnectionString' ForceDateTimesToUtc' 0' r.FieldCount' r) as Func<IDataReader' T>; " is 147.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,GetAutoMapper,The length of the statement  "					throw new InvalidOperationException (string.Format ("Can't auto join {0} as {1} has more than one property of type {0}"' types [i]' types [j])); " is 144.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,FindSplitPoint,The length of the statement  "		return PocoData.ForType (typeThis).GetFactory (sql' _sharedConnection.ConnectionString' ForceDateTimesToUtc' pos' r.FieldCount - pos' r); " is 137.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,FindSplitPoint,The length of the statement  "		if (usedColumns.ContainsKey (fieldName) || (!pdThis.Columns.ContainsKey (fieldName) && pdNext.Columns.ContainsKey (fieldName))) { " is 129.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,FindSplitPoint,The length of the statement  "			return pdThis.GetFactory (sql' _sharedConnection.ConnectionString' ForceDateTimesToUtc' firstColumn' pos - firstColumn' r); " is 123.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,FindSplitPoint,The length of the statement  "	throw new InvalidOperationException (string.Format ("Couldn't find split point between {0} and {1}"' typeThis' typeNext)); " is 122.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,CreateMultiPocoFactory,The length of the statement  "	return (Func<IDataReader' object' TRet>)m.CreateDelegate (typeof(Func<IDataReader' object' TRet>)' new MultiPocoFactory () { " is 124.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Exists,The length of the statement  "	return FirstOrDefault<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey) != null; " is 151.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Single,The length of the statement  "	return Single<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 135.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,SingleOrDefault,The length of the statement  "	return SingleOrDefault<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 144.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Insert,The length of the statement  "				cmd.CommandText = string.Format ("INSERT INTO {0} ({1}) VALUES ({2})"' EscapeTableName (tableName)' string.Join ("'"' names.ToArray ())' string.Join ("'"' values.ToArray ())); " is 175.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Update,The length of the statement  "				cmd.CommandText = string.Format ("UPDATE {0} SET {1} WHERE {2} = {3}{4}"' EscapeTableName (tableName)' sb.ToString ()' EscapeSqlIdentifier (primaryKeyName)' _paramPrefix' index++); " is 180.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Delete,The length of the statement  "	var sql = string.Format ("DELETE FROM {0} WHERE {1}=@0"' EscapeTableName (tableName)' EscapeSqlIdentifier (primaryKeyName)); " is 124.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,IsNew,The length of the statement  "			throw new ArgumentException (string.Format ("The object doesn't have a property matching the primary key column name '{0}'"' primaryKeyName)); " is 142.
Long Statement,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,IsNew,The length of the statement  "		throw new InvalidOperationException ("IsNew() and Save() are only supported on tables with auto-increment/identity primary key columns"); " is 137.
Long Statement,DbConnectionProfiler,ProfiledDbCommand,C:\repos\pwhe23_DbConnectionProfiler\DbConnectionProfiler.cs,GetBindByName,The length of the statement  "	if (prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null) { " is 193.
Complex Conditional,DbConnectionProfiler,ProfiledDbCommand,C:\repos\pwhe23_DbConnectionProfiler\DbConnectionProfiler.cs,GetBindByName,The conditional expression  "prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null"  is complex.
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Database,The following statement contains a magic number: _sharedConnectionDepth = 2;  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = 40;  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((item as string).Length + 1' 4000);  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  
Magic Number,PetaPoco,Sql,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	var sql = Database.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	var sql = Database.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  	sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Build,The following statement contains a magic number: sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  	sql = "' " + sql.Substring (9);  
Magic Number,PetaPoco,Sql,C:\repos\pwhe23_DbConnectionProfiler\PetaPoco.cs,Build,The following statement contains a magic number: sql = "' " + sql.Substring (9);  
