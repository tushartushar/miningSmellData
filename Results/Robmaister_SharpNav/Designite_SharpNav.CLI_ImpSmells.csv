Implementation smell,Namespace,Class,File,Method,Description
Long Method,SharpNav.CLI,Program,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The method has 109 lines of code.
Complex Method,SharpNav.CLI,Program,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,Cyclomatic complexity of the method is 8
Long Parameter List,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,TryParseVec,The method has 5 parameters. Parameters: values' x' y' z' v
Long Statement,SharpNav.CLI,Program,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The length of the statement  "				.Add("verbosity=|v="' "Changes verbosity level. Valid options:\ns[ilent]\nm[inimal]\nn[ormal]\nv[erbose]\nd[ebug]"' opt => { Log.Verbosity = Verbosity.Parse(opt); }) " is 165.
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.CLI,Program,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The following statement contains a magic number: foreach (var f in files)  			{  				StreamReader input = null;  				Log.Info("Parsing file \"" + f + "\"");      				try  				{  					input = new StreamReader(f);  				}  				catch (Exception e)  				{  					Log.Error("Error opening file \"" + f + "\".");  					Log.Debug(e.GetType().ToString() + " thrown:");  					Log.Debug(e.StackTrace' 1);  					return 1;  				}    				NavMeshConfigurationFile file = new NavMeshConfigurationFile(input);    				Log.Debug("Parsed configuration:");  				Log.Debug("Cell Size:          " + file.GenerationSettings.CellSize' 1);  				Log.Debug("Cell Height:        " + file.GenerationSettings.CellHeight' 1);  				Log.Debug("Max Climb:          " + file.GenerationSettings.MaxClimb' 1);  				Log.Debug("Agent Height:       " + file.GenerationSettings.AgentHeight' 1);  				Log.Debug("Agent Radius:       " + file.GenerationSettings.AgentRadius' 1);  				Log.Debug("Min Region Size:    " + file.GenerationSettings.MinRegionSize' 1);  				Log.Debug("Merged Region Size: " + file.GenerationSettings.MergedRegionSize' 1);  				Log.Debug("Max Edge Length:    " + file.GenerationSettings.MaxEdgeLength' 1);  				Log.Debug("Max Edge Error:     " + file.GenerationSettings.MaxEdgeError' 1);  				Log.Debug("Verts Per Poly:     " + file.GenerationSettings.VertsPerPoly' 1);  				Log.Debug("Sample Distance:    " + file.GenerationSettings.SampleDistance' 1);  				Log.Debug("Max Sample Error:   " + file.GenerationSettings.MaxSampleError' 1);  				Log.Debug("");  				Log.Debug("Output File: " + file.ExportPath' 1);  				Log.Debug("");  				Log.Debug("Meshes");    				List<string> meshes = new List<string>();  				List<ObjModel> models = new List<ObjModel>();    				foreach (var mesh in file.InputMeshes)  				{  					Log.Debug("Path:  " + mesh.Path' 2);  					Log.Debug("Scale: " + mesh.Scale' 2);  					Log.Debug("Position: " + mesh.Position.ToString()' 2);  					meshes.Add(mesh.Path);  					  					Vector3 position = new Vector3(mesh.Position[0]' mesh.Position[1]' mesh.Position[2]);    					if (File.Exists(mesh.Path))  					{  						ObjModel obj = new ObjModel(mesh.Path);  						float scale = mesh.Scale;  						//TODO SCALE THE OBJ FILE  						models.Add(obj);  					}  					else  					{  						Log.Error("Mesh file does not exist.");  						return 1;  					}  					  				}    				var tris = Enumerable.Empty<Triangle3>();  				foreach (var model in models)  					tris = tris.Concat(model.GetTriangles());    				TiledNavMesh navmesh = NavMesh.Generate(tris' file.GenerationSettings);  				new NavMeshJsonSerializer().Serialize(file.ExportPath' navmesh);  			}
Magic Number,SharpNav.CLI,Program,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The following statement contains a magic number: foreach (var f in files)  			{  				StreamReader input = null;  				Log.Info("Parsing file \"" + f + "\"");      				try  				{  					input = new StreamReader(f);  				}  				catch (Exception e)  				{  					Log.Error("Error opening file \"" + f + "\".");  					Log.Debug(e.GetType().ToString() + " thrown:");  					Log.Debug(e.StackTrace' 1);  					return 1;  				}    				NavMeshConfigurationFile file = new NavMeshConfigurationFile(input);    				Log.Debug("Parsed configuration:");  				Log.Debug("Cell Size:          " + file.GenerationSettings.CellSize' 1);  				Log.Debug("Cell Height:        " + file.GenerationSettings.CellHeight' 1);  				Log.Debug("Max Climb:          " + file.GenerationSettings.MaxClimb' 1);  				Log.Debug("Agent Height:       " + file.GenerationSettings.AgentHeight' 1);  				Log.Debug("Agent Radius:       " + file.GenerationSettings.AgentRadius' 1);  				Log.Debug("Min Region Size:    " + file.GenerationSettings.MinRegionSize' 1);  				Log.Debug("Merged Region Size: " + file.GenerationSettings.MergedRegionSize' 1);  				Log.Debug("Max Edge Length:    " + file.GenerationSettings.MaxEdgeLength' 1);  				Log.Debug("Max Edge Error:     " + file.GenerationSettings.MaxEdgeError' 1);  				Log.Debug("Verts Per Poly:     " + file.GenerationSettings.VertsPerPoly' 1);  				Log.Debug("Sample Distance:    " + file.GenerationSettings.SampleDistance' 1);  				Log.Debug("Max Sample Error:   " + file.GenerationSettings.MaxSampleError' 1);  				Log.Debug("");  				Log.Debug("Output File: " + file.ExportPath' 1);  				Log.Debug("");  				Log.Debug("Meshes");    				List<string> meshes = new List<string>();  				List<ObjModel> models = new List<ObjModel>();    				foreach (var mesh in file.InputMeshes)  				{  					Log.Debug("Path:  " + mesh.Path' 2);  					Log.Debug("Scale: " + mesh.Scale' 2);  					Log.Debug("Position: " + mesh.Position.ToString()' 2);  					meshes.Add(mesh.Path);  					  					Vector3 position = new Vector3(mesh.Position[0]' mesh.Position[1]' mesh.Position[2]);    					if (File.Exists(mesh.Path))  					{  						ObjModel obj = new ObjModel(mesh.Path);  						float scale = mesh.Scale;  						//TODO SCALE THE OBJ FILE  						models.Add(obj);  					}  					else  					{  						Log.Error("Mesh file does not exist.");  						return 1;  					}  					  				}    				var tris = Enumerable.Empty<Triangle3>();  				foreach (var model in models)  					tris = tris.Concat(model.GetTriangles());    				TiledNavMesh navmesh = NavMesh.Generate(tris' file.GenerationSettings);  				new NavMeshJsonSerializer().Serialize(file.ExportPath' navmesh);  			}
Magic Number,SharpNav.CLI,Program,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The following statement contains a magic number: foreach (var f in files)  			{  				StreamReader input = null;  				Log.Info("Parsing file \"" + f + "\"");      				try  				{  					input = new StreamReader(f);  				}  				catch (Exception e)  				{  					Log.Error("Error opening file \"" + f + "\".");  					Log.Debug(e.GetType().ToString() + " thrown:");  					Log.Debug(e.StackTrace' 1);  					return 1;  				}    				NavMeshConfigurationFile file = new NavMeshConfigurationFile(input);    				Log.Debug("Parsed configuration:");  				Log.Debug("Cell Size:          " + file.GenerationSettings.CellSize' 1);  				Log.Debug("Cell Height:        " + file.GenerationSettings.CellHeight' 1);  				Log.Debug("Max Climb:          " + file.GenerationSettings.MaxClimb' 1);  				Log.Debug("Agent Height:       " + file.GenerationSettings.AgentHeight' 1);  				Log.Debug("Agent Radius:       " + file.GenerationSettings.AgentRadius' 1);  				Log.Debug("Min Region Size:    " + file.GenerationSettings.MinRegionSize' 1);  				Log.Debug("Merged Region Size: " + file.GenerationSettings.MergedRegionSize' 1);  				Log.Debug("Max Edge Length:    " + file.GenerationSettings.MaxEdgeLength' 1);  				Log.Debug("Max Edge Error:     " + file.GenerationSettings.MaxEdgeError' 1);  				Log.Debug("Verts Per Poly:     " + file.GenerationSettings.VertsPerPoly' 1);  				Log.Debug("Sample Distance:    " + file.GenerationSettings.SampleDistance' 1);  				Log.Debug("Max Sample Error:   " + file.GenerationSettings.MaxSampleError' 1);  				Log.Debug("");  				Log.Debug("Output File: " + file.ExportPath' 1);  				Log.Debug("");  				Log.Debug("Meshes");    				List<string> meshes = new List<string>();  				List<ObjModel> models = new List<ObjModel>();    				foreach (var mesh in file.InputMeshes)  				{  					Log.Debug("Path:  " + mesh.Path' 2);  					Log.Debug("Scale: " + mesh.Scale' 2);  					Log.Debug("Position: " + mesh.Position.ToString()' 2);  					meshes.Add(mesh.Path);  					  					Vector3 position = new Vector3(mesh.Position[0]' mesh.Position[1]' mesh.Position[2]);    					if (File.Exists(mesh.Path))  					{  						ObjModel obj = new ObjModel(mesh.Path);  						float scale = mesh.Scale;  						//TODO SCALE THE OBJ FILE  						models.Add(obj);  					}  					else  					{  						Log.Error("Mesh file does not exist.");  						return 1;  					}  					  				}    				var tris = Enumerable.Empty<Triangle3>();  				foreach (var model in models)  					tris = tris.Concat(model.GetTriangles());    				TiledNavMesh navmesh = NavMesh.Generate(tris' file.GenerationSettings);  				new NavMeshJsonSerializer().Serialize(file.ExportPath' navmesh);  			}
Magic Number,SharpNav.CLI,Program,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The following statement contains a magic number: foreach (var f in files)  			{  				StreamReader input = null;  				Log.Info("Parsing file \"" + f + "\"");      				try  				{  					input = new StreamReader(f);  				}  				catch (Exception e)  				{  					Log.Error("Error opening file \"" + f + "\".");  					Log.Debug(e.GetType().ToString() + " thrown:");  					Log.Debug(e.StackTrace' 1);  					return 1;  				}    				NavMeshConfigurationFile file = new NavMeshConfigurationFile(input);    				Log.Debug("Parsed configuration:");  				Log.Debug("Cell Size:          " + file.GenerationSettings.CellSize' 1);  				Log.Debug("Cell Height:        " + file.GenerationSettings.CellHeight' 1);  				Log.Debug("Max Climb:          " + file.GenerationSettings.MaxClimb' 1);  				Log.Debug("Agent Height:       " + file.GenerationSettings.AgentHeight' 1);  				Log.Debug("Agent Radius:       " + file.GenerationSettings.AgentRadius' 1);  				Log.Debug("Min Region Size:    " + file.GenerationSettings.MinRegionSize' 1);  				Log.Debug("Merged Region Size: " + file.GenerationSettings.MergedRegionSize' 1);  				Log.Debug("Max Edge Length:    " + file.GenerationSettings.MaxEdgeLength' 1);  				Log.Debug("Max Edge Error:     " + file.GenerationSettings.MaxEdgeError' 1);  				Log.Debug("Verts Per Poly:     " + file.GenerationSettings.VertsPerPoly' 1);  				Log.Debug("Sample Distance:    " + file.GenerationSettings.SampleDistance' 1);  				Log.Debug("Max Sample Error:   " + file.GenerationSettings.MaxSampleError' 1);  				Log.Debug("");  				Log.Debug("Output File: " + file.ExportPath' 1);  				Log.Debug("");  				Log.Debug("Meshes");    				List<string> meshes = new List<string>();  				List<ObjModel> models = new List<ObjModel>();    				foreach (var mesh in file.InputMeshes)  				{  					Log.Debug("Path:  " + mesh.Path' 2);  					Log.Debug("Scale: " + mesh.Scale' 2);  					Log.Debug("Position: " + mesh.Position.ToString()' 2);  					meshes.Add(mesh.Path);  					  					Vector3 position = new Vector3(mesh.Position[0]' mesh.Position[1]' mesh.Position[2]);    					if (File.Exists(mesh.Path))  					{  						ObjModel obj = new ObjModel(mesh.Path);  						float scale = mesh.Scale;  						//TODO SCALE THE OBJ FILE  						models.Add(obj);  					}  					else  					{  						Log.Error("Mesh file does not exist.");  						return 1;  					}  					  				}    				var tris = Enumerable.Empty<Triangle3>();  				foreach (var model in models)  					tris = tris.Concat(model.GetTriangles());    				TiledNavMesh navmesh = NavMesh.Generate(tris' file.GenerationSettings);  				new NavMeshJsonSerializer().Serialize(file.ExportPath' navmesh);  			}
Missing Default,SharpNav.CLI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following switch statement is missing a default case: switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}
