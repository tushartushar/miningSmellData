Implementation smell,Namespace,Class,File,Method,Description
Long Method,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The method has 100 lines of code.
Long Method,SharpNav.CLI,Program,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The method has 127 lines of code.
Complex Method,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,Cyclomatic complexity of the method is 25
Complex Method,SharpNav.CLI,Program,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,Cyclomatic complexity of the method is 8
Long Parameter List,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,TryParseVec,The method has 5 parameters. Parameters: values' x' y' z' v
Long Statement,SharpNav.CLI,Program,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The length of the statement  "				.Add("verbosity=|v="' "Changes verbosity level. Valid options:\ns[ilent]\nm[inimal]\nn[ormal]\nv[erbose]\nd[ebug]"' opt => { Log.Verbosity = Verbosity.Parse(opt); })" is 165.
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.CLI,Program,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The following statement contains a magic number: Log.Debug("Path:  " + mesh.Path' 2);
Magic Number,SharpNav.CLI,Program,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The following statement contains a magic number: Log.Debug("Scale: " + mesh.Scale' 2);
Magic Number,SharpNav.CLI,Program,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The following statement contains a magic number: Log.Debug("Position: " + mesh.Position.ToString()' 2);
Magic Number,SharpNav.CLI,Program,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\Program.cs,Main,The following statement contains a magic number: Vector3 position = new Vector3(mesh.Position[0]' mesh.Position[1]' mesh.Position[2]);
Missing Default,SharpNav.CLI,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.CLI\ObjModel.cs,ObjModel,The following switch statement is missing a default case: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
