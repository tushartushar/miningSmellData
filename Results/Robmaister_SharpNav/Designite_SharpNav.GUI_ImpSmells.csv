Implementation smell,Namespace,Class,File,Method,Description
Long Method,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The method has 186 lines of code.
Long Parameter List,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,TryParseVec,The method has 5 parameters. Parameters: values' x' y' z' v
Long Statement,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,aboutToolStripMenuItem_Click,The length of the statement  "			if (MessageBox.Show("This is the GUI version of the SharpNav Configuration Tool. Visit the GitHub page?"' "About"' MessageBoxButtons.YesNo' MessageBoxIcon.Asterisk) == DialogResult.Yes) " is 185.
Long Statement,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConfigurationForm)); " is 137.
Long Statement,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The length of the statement  "			this.propertyGrid1.PropertyValueChanged += new System.Windows.Forms.PropertyValueChangedEventHandler(this.propertyGrid1_PropertyValueChanged); " is 142.
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.Location = new System.Drawing.Point(0' 24);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.Size = new System.Drawing.Size(368' 450);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.Size = new System.Drawing.Size(368' 450);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(368' 24);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(368' 24);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.newToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.newToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(120' 6);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(120' 6);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.openToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.openToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.openRecentToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.openRecentToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator3.Size = new System.Drawing.Size(120' 6);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator3.Size = new System.Drawing.Size(120' 6);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.saveToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.saveToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.saveAsToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.saveAsToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(120' 6);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(120' 6);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size(123' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.editToolStripMenuItem.Size = new System.Drawing.Size(39' 20);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.editToolStripMenuItem.Size = new System.Drawing.Size(39' 20);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.resetAllToolStripMenuItem.Size = new System.Drawing.Size(119' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.resetAllToolStripMenuItem.Size = new System.Drawing.Size(119' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutToolStripMenuItem.Size = new System.Drawing.Size(116' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutToolStripMenuItem.Size = new System.Drawing.Size(116' 22);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.generateButton.Location = new System.Drawing.Point(0' 424);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.generateButton.Size = new System.Drawing.Size(368' 50);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.generateButton.Size = new System.Drawing.Size(368' 50);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.generateButton.TabIndex = 2;
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(368' 474);
Magic Number,SharpNav.GUI,ConfigurationForm,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(368' 474);
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Magic Number,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))  			{  				string file = reader.ReadToEnd();  				foreach (string l in file.Split('\n'))  				{  					//trim any extras  					string tl = l;  					int commentStart = l.IndexOf("#");  					if (commentStart != -1)  						tl = tl.Substring(0' commentStart);  					tl = tl.Trim();    					string[] line = tl.Split(lineSplitChars' StringSplitOptions.RemoveEmptyEntries);  					if (line == null || line.Length == 0)  						continue;    					switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}  				}  			}
Missing Default,SharpNav.GUI,ObjModel,C:\repos\Robmaister_SharpNav\Source\SharpNav.GUI\ObjModel.cs,ObjModel,The following switch statement is missing a default case: switch (line[0])  					{  						case "v":  							if (line.Length < 4)  								continue;    							Vector3 v;  							if (!TryParseVec(line' 1' 2' 3' out v)) continue;  							tempVerts.Add(v);  							break;  						case "vn":  							if (line.Length < 4)  								continue;    							Vector3 n;  							if (!TryParseVec(line' 1' 2' 3' out n)) continue;  							tempNorms.Add(n);  							break;  						case "f":  							if (line.Length < 4)  								continue;  							else if (line.Length == 4)  							{  								int v0' v1' v2;  								int n0' n1' n2;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue;  								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue;  								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;    								v0 -= 1;  								v1 -= 1;  								v2 -= 1;  								n0 -= 1;  								n1 -= 1;  								n2 -= 1;    								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2]));  								norms.Add(tempNorms[n0]);  								norms.Add(tempNorms[n1]);  								norms.Add(tempNorms[n2]);  							}  							else  							{  								int v0' n0;  								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue;  								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;    								v0 -= 1;  								n0 -= 1;    								for (int i = 2; i < line.Length - 1; i++)  								{  									int vi' vii;  									int ni' nii;  									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue;  									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue;  									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;    									vi -= 1;  									vii -= 1;  									ni -= 1;  									nii -= 1;    									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii]));  									norms.Add(tempNorms[n0]);  									norms.Add(tempNorms[ni]);  									norms.Add(tempNorms[nii]);  								}  							}  							break;  					}
