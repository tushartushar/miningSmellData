Implementation smell,Namespace,Class,File,Method,Description
Long Method,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The method has 100 lines of code.
Complex Method,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,Cyclomatic complexity of the method is 25
Long Parameter List,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,TryParseVec,The method has 5 parameters. Parameters: values' x' y' z' v
Magic Number,SharpNav.Tests.Collections.Generic,BufferedQueueTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedQueueTests.cs,Empty_Queue_Count,The following statement contains a magic number: var empty = new BufferedQueue<int>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedQueueTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedQueueTests.cs,Enqueue_Test,The following statement contains a magic number: var queue = new BufferedQueue<int>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedQueueTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedQueueTests.cs,Enqueue_Test,The following statement contains a magic number: c < 100
Magic Number,SharpNav.Tests.Collections.Generic,BufferedQueueTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedQueueTests.cs,Dequeue_Test,The following statement contains a magic number: var queue = new BufferedQueue<int>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedQueueTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedQueueTests.cs,Dequeue_Test,The following statement contains a magic number: c < 100
Magic Number,SharpNav.Tests.Collections.Generic,BufferedQueueTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedQueueTests.cs,Dequeue_Test,The following statement contains a magic number: c < 100
Magic Number,SharpNav.Tests.Collections.Generic,BufferedQueueTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedQueueTests.cs,Empty_Test,The following statement contains a magic number: var queue = new BufferedQueue<int>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedQueueTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedQueueTests.cs,Empty_Test,The following statement contains a magic number: c < 100
Magic Number,SharpNav.Tests.Collections.Generic,BufferedQueueTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedQueueTests.cs,ReadOnly_Test,The following statement contains a magic number: var queue = new BufferedQueue<char>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedQueueTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedQueueTests.cs,Peek_Test,The following statement contains a magic number: var queue = new BufferedQueue<int>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedQueueTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedQueueTests.cs,Peek_Test,The following statement contains a magic number: c < 100
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Empty_Stack_Count,The following statement contains a magic number: var empty = new BufferedStack<int>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Push_Test,The following statement contains a magic number: var stack = new BufferedStack<int>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Push_Test,The following statement contains a magic number: c < 100
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Pop_Test,The following statement contains a magic number: var stack = new BufferedStack<int>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Pop_Test,The following statement contains a magic number: c < 100
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Empty_Test,The following statement contains a magic number: var stack = new BufferedStack<int>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Empty_Test,The following statement contains a magic number: c < 100
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Empty_Test,The following statement contains a magic number: Assert.AreEqual(stack.Count' 100);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,ReadOnly_Test,The following statement contains a magic number: var stack = new BufferedStack<char>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Index_Operator_Test,The following statement contains a magic number: var stack = new BufferedStack<int>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Index_Operator_Test,The following statement contains a magic number: c < 100
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Peek_Test,The following statement contains a magic number: var stack = new BufferedStack<int>(1000);
Magic Number,SharpNav.Tests.Collections.Generic,BufferedStackTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Collections\Generic\BufferedStackTests.cs,Peek_Test,The following statement contains a magic number: c < 100
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_OneCell,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_OneCell,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_OneCell,The following statement contains a magic number: hf[0].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_OneCell,The following statement contains a magic number: hf[0].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_OneCell,The following statement contains a magic number: hf[0].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_OneCell,The following statement contains a magic number: hf[0].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_OneCell,The following statement contains a magic number: CompactHeightfield chf = new CompactHeightfield(hf' 2' 1);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_OneCell,The following statement contains a magic number: Assert.AreEqual(chf.Spans.Length' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_OneCell,The following statement contains a magic number: Assert.AreEqual(chf.Spans[0].Minimum' 20);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_OneCell,The following statement contains a magic number: Assert.AreEqual(chf.Spans[0].Height' 5);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_OneCell,The following statement contains a magic number: Assert.AreEqual(chf.Spans[1].Minimum' 30);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' new Vector3(1' 1' 1))' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' new Vector3(1' 1' 1))' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: hf[0].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: hf[0].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: hf[0].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: hf[0].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: hf[1].AddSpan(new Span(5' 15' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: hf[1].AddSpan(new Span(5' 15' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: hf[1].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: hf[1].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: hf[1].AddSpan(new Span(40' 55' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: hf[1].AddSpan(new Span(40' 55' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: CompactHeightfield chf = new CompactHeightfield(hf' 2' 1);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: Assert.AreEqual(chf.Cells.Length' 4);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: Assert.AreEqual(chf.Cells[0].Count' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: Assert.AreEqual(chf.Cells[1].StartIndex' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,ConvertSpans_TwoCells,The following statement contains a magic number: Assert.AreEqual(chf.Cells[1].Count' 3);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: hf[0].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: hf[0].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: hf[0].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: hf[0].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: hf[1].AddSpan(new Span(10' 21' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: hf[1].AddSpan(new Span(10' 21' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: hf[1].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: hf[1].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: CompactHeightfield chf = new CompactHeightfield(hf' 2' 1);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: Assert.IsTrue(chf.Spans[2].IsConnected(Direction.West));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: Assert.IsTrue(chf.Spans[3].IsConnected(Direction.West));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: Assert.AreEqual(chf.Spans[2].ConnectionWest' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,SetConnection_TwoCells,The following statement contains a magic number: Assert.AreEqual(chf.Spans[3].ConnectionWest' 1);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' (float)(1.0f/3.0f)' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' (float)(1.0f/3.0f)' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: i < 9
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: CompactHeightfield chf = new CompactHeightfield(hf' 2' 1);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[0 * 2].ConnectionCount' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[0 * 2].ConnectionCount' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[1 * 2].ConnectionCount' 3);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[1 * 2].ConnectionCount' 3);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[2 * 2].ConnectionCount' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[2 * 2].ConnectionCount' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[2 * 2].ConnectionCount' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[3 * 2].ConnectionCount' 3);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[3 * 2].ConnectionCount' 3);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[3 * 2].ConnectionCount' 3);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[4 * 2].ConnectionCount' 4);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[4 * 2].ConnectionCount' 4);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Spans[4 * 2].ConnectionCount' 4);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.MaxDistance' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[0 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[1 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[2 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[2 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[3 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[3 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[4 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[4 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[4 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[5 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Simple_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[5 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.2f' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.2f' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: i < 25
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: CompactHeightfield chf = new CompactHeightfield(hf' 2' 1);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.MaxDistance' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[0 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[4 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[4 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[5 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[5 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[6 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[6 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[6 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[7 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[7 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[7 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[8 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[8 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[8 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[9 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[9 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[10 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[10 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[11 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[11 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[11 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[12 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[12 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[12 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[13 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[13 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[13 * 2]' 2);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[14 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,DistanceField_Medium_Success,The following statement contains a magic number: Assert.AreEqual(chf.Distances[14 * 2]' 0);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' (float)(1.0f / 3.0f)' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' (float)(1.0f / 3.0f)' 0.02f);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: hf[i].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: i < 9
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: CompactHeightfield chf = new CompactHeightfield(hf' 2' 1);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: chf.BuildRegions(1' 2' 3);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: chf.BuildRegions(1' 2' 3);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: Assert.AreEqual(chf.MaxRegions' 7);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: Assert.AreEqual((int)chf.Spans[4 * 2 + 0].Region' 5);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: Assert.AreEqual((int)chf.Spans[4 * 2 + 0].Region' 5);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: Assert.AreEqual((int)chf.Spans[4 * 2 + 0].Region' 5);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: Assert.AreEqual((int)chf.Spans[4 * 2 + 1].Region' 6);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: Assert.AreEqual((int)chf.Spans[4 * 2 + 1].Region' 6);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: Assert.AreEqual((int)chf.Spans[4 * 2 + 1].Region' 6);
Magic Number,SharpNav.Tests,CompactHeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactHeightfieldTests.cs,BuildRegions_Success,The following statement contains a magic number: j <= 4
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,AddCompactSpan_NoUpperLimit_Success,The following statement contains a magic number: CompactSpan cs = new CompactSpan(10' int.MaxValue);
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,AddCompactSpan_SetConnection_Success,The following statement contains a magic number: CompactSpan cs = new CompactSpan(10' int.MaxValue);
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,AddCompactSpan_GetConnection_Success,The following statement contains a magic number: CompactSpan cs = new CompactSpan(10' int.MaxValue);
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,AddCompactSpan_GetConnection_Success,The following statement contains a magic number: CompactSpan.SetConnection((Direction)1' 50' ref cs);
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,AddCompactSpan_GetConnection_Success,The following statement contains a magic number: Assert.AreEqual(CompactSpan.GetConnection(ref cs' (Direction)1)' 50);
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,AddCompactSpan_GetConnection_Success,The following statement contains a magic number: Assert.AreEqual(cs.GetConnection((Direction)1)' 50);
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,AddCompactSpan_UnsetConnection_Success,The following statement contains a magic number: CompactSpan cs = new CompactSpan(10' int.MaxValue);
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,AddCompactSpan_IsConnected_Success,The following statement contains a magic number: CompactSpan cs = new CompactSpan(10' int.MaxValue);
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,SetConnection_TooHigh_Success,The following statement contains a magic number: CompactSpan cs = new CompactSpan(10' int.MaxValue);
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,SetConnection_TooHigh_Success,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => CompactSpan.SetConnection((Direction)2' 300' ref cs));
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,SetConnection_TooHigh_Success,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => CompactSpan.SetConnection((Direction)2' 300' ref cs));
Magic Number,SharpNav.Tests,CompactSpanTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CompactSpanTests.cs,SetConnection_InvalidDirection_Success,The following statement contains a magic number: CompactSpan cs = new CompactSpan(10' int.MaxValue);
Magic Number,SharpNav.Tests,ContourTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ContourTests.cs,ContourConstructor,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' (float)(1.0f / 5.0f)' 0.02f);
Magic Number,SharpNav.Tests,ContourTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ContourTests.cs,ContourConstructor,The following statement contains a magic number: Heightfield hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' (float)(1.0f / 5.0f)' 0.02f);
Magic Number,SharpNav.Tests,ContourTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ContourTests.cs,ContourConstructor,The following statement contains a magic number: hf[i].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,ContourTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ContourTests.cs,ContourConstructor,The following statement contains a magic number: hf[i].AddSpan(new Span(10' 20' Area.Default));
Magic Number,SharpNav.Tests,ContourTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ContourTests.cs,ContourConstructor,The following statement contains a magic number: hf[i].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,ContourTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ContourTests.cs,ContourConstructor,The following statement contains a magic number: hf[i].AddSpan(new Span(25' 30' Area.Default));
Magic Number,SharpNav.Tests,ContourTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ContourTests.cs,ContourConstructor,The following statement contains a magic number: i < 5 * 5
Magic Number,SharpNav.Tests,ContourTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ContourTests.cs,ContourConstructor,The following statement contains a magic number: i < 5 * 5
Magic Number,SharpNav.Tests,ContourTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ContourTests.cs,ContourConstructor,The following statement contains a magic number: CompactHeightfield chf = new CompactHeightfield(hf' 2' 1);
Magic Number,SharpNav.Tests,ContourTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ContourTests.cs,ContourConstructor,The following statement contains a magic number: ContourSet contourSet = chf.BuildContourSet(1' 5' ContourBuildFlags.None);
Magic Number,SharpNav.Tests,ContourTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ContourTests.cs,ContourConstructor,The following statement contains a magic number: Assert.AreEqual(contourSet.Count' 2);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRange_Success,The following statement contains a magic number: int num = MathHelper.Clamp(3' 6' 10);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRange_Success,The following statement contains a magic number: int num = MathHelper.Clamp(3' 6' 10);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRange_Success,The following statement contains a magic number: int num = MathHelper.Clamp(3' 6' 10);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRange_Success,The following statement contains a magic number: Assert.AreEqual (num' 6);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRange_Success,The following statement contains a magic number: int num = MathHelper.Clamp(7' 4' 10);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRange_Success,The following statement contains a magic number: int num = MathHelper.Clamp(7' 4' 10);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRange_Success,The following statement contains a magic number: int num = MathHelper.Clamp(7' 4' 10);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRange_Success,The following statement contains a magic number: Assert.AreEqual(num' 7);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeRef_Success,The following statement contains a magic number: int num_r = 3;
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeRef_Success,The following statement contains a magic number: MathHelper.Clamp(ref num_r' 6' 10);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeRef_Success,The following statement contains a magic number: MathHelper.Clamp(ref num_r' 6' 10);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeRef_Success,The following statement contains a magic number: Assert.AreEqual(num_r' 6);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeRef_Success,The following statement contains a magic number: int num_r = 7;
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeRef_Success,The following statement contains a magic number: MathHelper.Clamp(ref num_r' 6' 10);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeRef_Success,The following statement contains a magic number: MathHelper.Clamp(ref num_r' 6' 10);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeRef_Success,The following statement contains a magic number: Assert.AreEqual(num_r' 7);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeFloat_Success,The following statement contains a magic number: float num = MathHelper.Clamp(7.56f' 6.75f' 10.89f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeFloat_Success,The following statement contains a magic number: float num = MathHelper.Clamp(7.56f' 6.75f' 10.89f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeFloat_Success,The following statement contains a magic number: float num = MathHelper.Clamp(7.56f' 6.75f' 10.89f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeFloat_Success,The following statement contains a magic number: Assert.AreEqual(num' 7.56f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeFloat_Success,The following statement contains a magic number: float num = MathHelper.Clamp(3.89f' 6.75f' 10.89f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeFloat_Success,The following statement contains a magic number: float num = MathHelper.Clamp(3.89f' 6.75f' 10.89f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeFloat_Success,The following statement contains a magic number: float num = MathHelper.Clamp(3.89f' 6.75f' 10.89f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeFloat_Success,The following statement contains a magic number: Assert.AreEqual(num' 6.75f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeFloatRef_Success,The following statement contains a magic number: float num_r = 7.56f;
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeFloatRef_Success,The following statement contains a magic number: MathHelper.Clamp(ref num_r' 6.75f' 10.89f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeFloatRef_Success,The following statement contains a magic number: MathHelper.Clamp(ref num_r' 6.75f' 10.89f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValInRangeFloatRef_Success,The following statement contains a magic number: Assert.AreEqual(num_r' 7.56f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeFloatRef_Success,The following statement contains a magic number: float num_r = 3.89f;
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeFloatRef_Success,The following statement contains a magic number: MathHelper.Clamp(ref num_r' 6.75f' 10.89f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeFloatRef_Success,The following statement contains a magic number: MathHelper.Clamp(ref num_r' 6.75f' 10.89f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,ClampTest_ValOutOfRangeFloatRef_Success,The following statement contains a magic number: Assert.AreEqual (num_r' 6.75f);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,NextPowerOfTwo_PositiveIntegerInt_Sucess,The following statement contains a magic number: int num = MathHelper.NextPowerOfTwo(5);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,NextPowerOfTwo_PositiveIntegerInt_Sucess,The following statement contains a magic number: Assert.AreEqual(num' 8);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,NextPowerOfTwo_PositiveIntegerUint_Sucess,The following statement contains a magic number: uint num = MathHelper.NextPowerOfTwo((uint)5);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,NextPowerOfTwo_PositiveIntegerUint_Sucess,The following statement contains a magic number: Assert.AreEqual(num' 8);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,Log2_PositiveIntegerInt_Success,The following statement contains a magic number: int num = MathHelper.Log2(65);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,Log2_PositiveIntegerInt_Success,The following statement contains a magic number: Assert.AreEqual(num' 6);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,Log2_PositiveIntegerUint_Success,The following statement contains a magic number: uint num = MathHelper.Log2((uint)65);
Magic Number,SharpNav.Tests,MathHelperTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\MathHelperTests.cs,Log2_PositiveIntegerUint_Success,The following statement contains a magic number: Assert.AreEqual(num' 6);
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following statement contains a magic number: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_AvoidDuplicateFloors_Success,The following statement contains a magic number: reg.AddUniqueFloorRegion(new RegionId(10));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_AvoidDuplicateFloors_Success,The following statement contains a magic number: reg.AddUniqueFloorRegion(new RegionId(10));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_AvoidDuplicateFloors_Success,The following statement contains a magic number: reg.AddUniqueFloorRegion(new RegionId(20));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_AvoidDuplicateFloors_Success,The following statement contains a magic number: Assert.AreEqual((int)reg.FloorRegions[0]' 10);
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_AvoidDuplicateFloors_Success,The following statement contains a magic number: Assert.AreEqual((int)reg.FloorRegions[1]' 20);
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_AvoidDuplicateFloors_Success,The following statement contains a magic number: Assert.AreEqual(reg.FloorRegions.Count' 2);
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_RemoveAdjacentConnections_Success,The following statement contains a magic number: reg.Connections.Add(new RegionId(10));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_RemoveAdjacentConnections_Success,The following statement contains a magic number: reg.Connections.Add(new RegionId(20));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_RemoveAdjacentConnections_Success,The following statement contains a magic number: reg.Connections.Add(new RegionId(20));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_RemoveAdjacentConnections_Success,The following statement contains a magic number: Assert.AreEqual((int)reg.Connections[1]' 20);
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_ConnectedBorder_Success,The following statement contains a magic number: reg.Connections.Add(new RegionId(10));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_ConnectedBorder_Success,The following statement contains a magic number: reg.Connections.Add(new RegionId(20));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_ConnectedBorder_Success,The following statement contains a magic number: reg.Connections.Add(new RegionId(30));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_ReplaceNeighbor_Success,The following statement contains a magic number: reg.Connections.Add(new RegionId(10));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_ReplaceNeighbor_Success,The following statement contains a magic number: reg.Connections.Add(new RegionId(20));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_ReplaceNeighbor_Success,The following statement contains a magic number: reg.Connections.Add(new RegionId(30));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_ReplaceNeighbor_Success,The following statement contains a magic number: reg.AddUniqueFloorRegion(new RegionId(10));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_ReplaceNeighbor_Success,The following statement contains a magic number: reg.AddUniqueFloorRegion(new RegionId(20));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_ReplaceNeighbor_Success,The following statement contains a magic number: reg.AddUniqueFloorRegion(new RegionId(30));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_ReplaceNeighbor_Success,The following statement contains a magic number: reg.ReplaceNeighbor(new RegionId(10)' RegionId.Null);
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_MergeWithOther_Success,The following statement contains a magic number: var reg2 = new Region(2);
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_MergeWithOther_Success,The following statement contains a magic number: reg1.Connections.Add(new RegionId(2));
Magic Number,SharpNav.Tests,RegionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\RegionTests.cs,Region_MergeWithOther_Success,The following statement contains a magic number: reg1.AddUniqueFloorRegion(new RegionId(3));
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Flipped_Success,The following statement contains a magic number: var cell = new Cell(40);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Flipped_Success,The following statement contains a magic number: var span = new Span(20' 10);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Flipped_Success,The following statement contains a magic number: var span = new Span(20' 10);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_First_Success,The following statement contains a magic number: var cell = new Cell(40);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_First_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_First_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Below_Success,The following statement contains a magic number: var cell = new Cell(40);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Below_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Below_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Below_Success,The following statement contains a magic number: var span2 = new Span(5' 8);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Below_Success,The following statement contains a magic number: var span2 = new Span(5' 8);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Above_Success,The following statement contains a magic number: var cell = new Cell(40);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Above_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Above_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Above_Success,The following statement contains a magic number: var span2 = new Span(21' 25);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_Above_Success,The following statement contains a magic number: var span2 = new Span(21' 25);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_ContainedMerge_Success,The following statement contains a magic number: var cell = new Cell(40);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_ContainedMerge_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_ContainedMerge_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_ContainedMerge_Success,The following statement contains a magic number: var span2 = new Span(5' 25);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_ContainedMerge_Success,The following statement contains a magic number: var span2 = new Span(5' 25);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_BelowMerge_Success,The following statement contains a magic number: var cell = new Cell(40);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_BelowMerge_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_BelowMerge_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_BelowMerge_Success,The following statement contains a magic number: var span2 = new Span(5' 15);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_BelowMerge_Success,The following statement contains a magic number: var span2 = new Span(5' 15);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_AboveMerge_Success,The following statement contains a magic number: var cell = new Cell(40);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_AboveMerge_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_AboveMerge_Success,The following statement contains a magic number: var span = new Span(10' 20);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_AboveMerge_Success,The following statement contains a magic number: var span2 = new Span(15' 25);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,AddSpan_AboveMerge_Success,The following statement contains a magic number: var span2 = new Span(15' 25);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_NoSpans_ReturnsNull,The following statement contains a magic number: var cell = new Cell(10);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_NoSpans_ReturnsNull,The following statement contains a magic number: Assert.IsNull(cell[5]);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_BelowZero_Throws,The following statement contains a magic number: var cell = new Cell(10);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_AboveMax_Throws,The following statement contains a magic number: var cell = new Cell(10);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_AboveMax_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => { var s = cell[10]; });
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_InSpan_Success,The following statement contains a magic number: var cell = new Cell(10);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_InSpan_Success,The following statement contains a magic number: cell.AddSpan(new Span(2' 6));
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_InSpan_Success,The following statement contains a magic number: cell.AddSpan(new Span(2' 6));
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_InSpan_Success,The following statement contains a magic number: var span = cell[4];
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_InSpan_Success,The following statement contains a magic number: Assert.AreEqual(2' span.Value.Minimum);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_InSpan_Success,The following statement contains a magic number: Assert.AreEqual(6' span.Value.Maximum);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_OutOfSpan_ReturnsNull,The following statement contains a magic number: var cell = new Cell(10);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_OutOfSpan_ReturnsNull,The following statement contains a magic number: cell.AddSpan(new Span(2' 6));
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_OutOfSpan_ReturnsNull,The following statement contains a magic number: cell.AddSpan(new Span(2' 6));
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_FindSpan_Success,The following statement contains a magic number: var cell = new Cell(10);
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_FindSpan_Success,The following statement contains a magic number: cell.AddSpan(new Span(2' 5));
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_FindSpan_Success,The following statement contains a magic number: cell.AddSpan(new Span(2' 5));
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_FindSpan_Success,The following statement contains a magic number: cell.AddSpan(new Span(7' 9));
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_FindSpan_Success,The following statement contains a magic number: cell.AddSpan(new Span(7' 9));
Magic Number,SharpNav.Tests,CellTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\CellTests.cs,Indexer_FindSpan_Success,The following statement contains a magic number: var span = cell[6];
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_Valid_ReturnsCell,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_Valid_ReturnsCell,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_NegativeX_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_NegativeX_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_NegativeY_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_NegativeY_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_NegativeBoth_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_NegativeBoth_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_TooLargeX_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_TooLargeX_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_TooLargeX_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => { var c = hf[2' 0]; });
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_TooLargeY_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_TooLargeY_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_TooLargeY_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => { var c = hf[0' 2]; });
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_TooLargeBoth_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_TooLargeBoth_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_TooLargeBoth_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => { var c = hf[3' 3]; });
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_TooLargeBoth_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => { var c = hf[3' 3]; });
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_CellOutOfRange_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_CellOutOfRange_Throws,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.5f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Indexer_CellOutOfRange_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => { var c = hf[5]; });
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Success,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Success,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Success,The following statement contains a magic number: var span = new Span(10' 15' Area.Default);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Success,The following statement contains a magic number: var span = new Span(10' 15' Area.Default);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Success,The following statement contains a magic number: var span2 = new Span(16' 20' Area.Null);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Success,The following statement contains a magic number: var span2 = new Span(16' 20' Area.Null);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Success,The following statement contains a magic number: hf.FilterLowHangingWalkableObstacles(20);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Fail,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Fail,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Fail,The following statement contains a magic number: var span = new Span(1' 2' Area.Default);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Fail,The following statement contains a magic number: var span2 = new Span(10' 20' Area.Null);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Fail,The following statement contains a magic number: var span2 = new Span(10' 20' Area.Null);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Fail,The following statement contains a magic number: hf[2].AddSpan(span);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Fail,The following statement contains a magic number: hf[2].AddSpan(span2);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_LowHangingWalkable_Fail,The following statement contains a magic number: hf.FilterLowHangingWalkableObstacles(10);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_WalkableLowHeight_Success,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_WalkableLowHeight_Success,The following statement contains a magic number: var hf = new Heightfield(new BBox3(Vector3.Zero' Vector3.One)' 0.5f' 0.02f);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_WalkableLowHeight_Success,The following statement contains a magic number: var span = new Span(10' 20' Area.Default);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_WalkableLowHeight_Success,The following statement contains a magic number: var span = new Span(10' 20' Area.Default);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_WalkableLowHeight_Success,The following statement contains a magic number: var span2 = new Span(25' 30' Area.Default);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_WalkableLowHeight_Success,The following statement contains a magic number: var span2 = new Span(25' 30' Area.Default);
Magic Number,SharpNav.Tests,HeightfieldTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\HeightfieldTests.cs,Filter_WalkableLowHeight_Success,The following statement contains a magic number: hf.FilterWalkableLowHeightSpans(15);
Magic Number,SharpNav.Tests.Geometry,ContainmentTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\ContainmentTests.cs,PointInPoly_InternalPoint_Success,The following statement contains a magic number: Vector3 pt = new Vector3(0.0f' 0.0f' 0.5f);
Magic Number,SharpNav.Tests.Geometry,ContainmentTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\ContainmentTests.cs,PointInPoly_InternalPoint_Success,The following statement contains a magic number: Vector3[] poly = new Vector3[3];
Magic Number,SharpNav.Tests.Geometry,ContainmentTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\ContainmentTests.cs,PointInPoly_InternalPoint_Success,The following statement contains a magic number: poly[2] = new Vector3(1.0f' 0.0f' 0.0f);
Magic Number,SharpNav.Tests.Geometry,ContainmentTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\ContainmentTests.cs,PointInPoly_BoundaryPoint_Success,The following statement contains a magic number: Vector3[] poly = new Vector3[3];
Magic Number,SharpNav.Tests.Geometry,ContainmentTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\ContainmentTests.cs,PointInPoly_BoundaryPoint_Success,The following statement contains a magic number: poly[2] = new Vector3(1.0f' 0.0f' 0.0f);
Magic Number,SharpNav.Tests.Geometry,ContainmentTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\ContainmentTests.cs,PointInPoly_ExternalPoint_Success,The following statement contains a magic number: Vector3[] poly = new Vector3[3];
Magic Number,SharpNav.Tests.Geometry,ContainmentTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\ContainmentTests.cs,PointInPoly_ExternalPoint_Success,The following statement contains a magic number: poly[2] = new Vector3(1.0f' 0.0f' 0.0f);
Magic Number,SharpNav.Tests.Geometry,DistanceTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\DistanceTests.cs,PointToSegment2DSquared_NoVectors_Success,The following statement contains a magic number: Assert.AreEqual(dist + float.Epsilon' 0.5f);
Magic Number,SharpNav.Tests.Geometry,DistanceTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\DistanceTests.cs,PointToSegment2DSquared_Vectors_Success,The following statement contains a magic number: Assert.AreEqual(dist + float.Epsilon' 0.5f);
Magic Number,SharpNav.Tests.Geometry,DistanceTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\DistanceTests.cs,PointToSegment2DSquared_VectorsWithParameters_Success,The following statement contains a magic number: Assert.AreEqual(dist + float.Epsilon' 0.5f);
Magic Number,SharpNav.Tests.Geometry,DistanceTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\DistanceTests.cs,PointToSegment2DSquared_VectorsWithParameters_Success,The following statement contains a magic number: Assert.AreEqual(t + float.Epsilon' 0.5f);
Magic Number,SharpNav.Tests.Geometry,DistanceTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\DistanceTests.cs,PointToTriangle_CenterPointDist_Success,The following statement contains a magic number: Vector3 p = new Vector3(0.5f' 0.5f' 0.5f);
Magic Number,SharpNav.Tests.Geometry,DistanceTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\DistanceTests.cs,PointToTriangle_CenterPointDist_Success,The following statement contains a magic number: Vector3 p = new Vector3(0.5f' 0.5f' 0.5f);
Magic Number,SharpNav.Tests.Geometry,DistanceTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\DistanceTests.cs,PointToTriangle_CenterPointDist_Success,The following statement contains a magic number: Vector3 p = new Vector3(0.5f' 0.5f' 0.5f);
Magic Number,SharpNav.Tests.Geometry,DistanceTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\DistanceTests.cs,PointToTriangle_CenterPointDist_Success,The following statement contains a magic number: Assert.AreEqual(dist + float.Epsilon' 0.5f);
Magic Number,SharpNav.Tests.Geometry,DistanceTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\DistanceTests.cs,PointToTriangle_CenterPointBool_Success,The following statement contains a magic number: Vector3 p = new Vector3(0.5f' 0.5f' 0.5f);
Magic Number,SharpNav.Tests.Geometry,DistanceTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\DistanceTests.cs,PointToTriangle_CenterPointBool_Success,The following statement contains a magic number: Vector3 p = new Vector3(0.5f' 0.5f' 0.5f);
Magic Number,SharpNav.Tests.Geometry,DistanceTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\DistanceTests.cs,PointToTriangle_CenterPointBool_Success,The following statement contains a magic number: Vector3 p = new Vector3(0.5f' 0.5f' 0.5f);
Magic Number,SharpNav.Tests.Geometry,IntersectionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\IntersectionTests.cs,SegmentSegment2D_without_float_false,The following statement contains a magic number: Vector3 q = new Vector3(2' 0' 1);
Magic Number,SharpNav.Tests.Geometry,IntersectionTests,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\Geometry\IntersectionTests.cs,SegmentSegment2D_with_float_false,The following statement contains a magic number: Vector3 q = new Vector3(2' 0' 1);
Missing Default,SharpNav.Tests,ObjModel,C:\research\architectureSmells\repos\Robmaister_SharpNav\Source\SharpNav.Tests\ObjModel.cs,ObjModel,The following switch statement is missing a default case: switch (line[0]) 					{ 						case "v": 							if (line.Length < 4) 								continue;  							Vector3 v; 							if (!TryParseVec(line' 1' 2' 3' out v)) continue; 							tempVerts.Add(v); 							break; 						case "vn": 							if (line.Length < 4) 								continue;  							Vector3 n; 							if (!TryParseVec(line' 1' 2' 3' out n)) continue; 							tempNorms.Add(n); 							break; 						case "f": 							if (line.Length < 4) 								continue; 							else if (line.Length == 4) 							{ 								int v0' v1' v2; 								int n0' n1' n2; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[2].Split('/')[0]' out v1)) continue; 								if (!int.TryParse(line[3].Split('/')[0]' out v2)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue; 								if (!int.TryParse(line[2].Split('/')[2]' out n1)) continue; 								if (!int.TryParse(line[3].Split('/')[2]' out n2)) continue;  								v0 -= 1; 								v1 -= 1; 								v2 -= 1; 								n0 -= 1; 								n1 -= 1; 								n2 -= 1;  								tris.Add(new Triangle3(tempVerts[v0]' tempVerts[v1]' tempVerts[v2])); 								norms.Add(tempNorms[n0]); 								norms.Add(tempNorms[n1]); 								norms.Add(tempNorms[n2]); 							} 							else 							{ 								int v0' n0; 								if (!int.TryParse(line[1].Split('/')[0]' out v0)) continue; 								if (!int.TryParse(line[1].Split('/')[2]' out n0)) continue;  								v0 -= 1; 								n0 -= 1;  								for (int i = 2; i < line.Length - 1; i++) 								{ 									int vi' vii; 									int ni' nii; 									if (!int.TryParse(line[i].Split('/')[0]' out vi)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[0]' out vii)) continue; 									if (!int.TryParse(line[i].Split('/')[2]' out ni)) continue; 									if (!int.TryParse(line[i + 1].Split('/')[2]' out nii)) continue;  									vi -= 1; 									vii -= 1; 									ni -= 1; 									nii -= 1;  									tris.Add(new Triangle3(tempVerts[v0]' tempVerts[vi]' tempVerts[vii])); 									norms.Add(tempNorms[n0]); 									norms.Add(tempNorms[ni]); 									norms.Add(tempNorms[nii]); 								} 							} 							break; 					}
