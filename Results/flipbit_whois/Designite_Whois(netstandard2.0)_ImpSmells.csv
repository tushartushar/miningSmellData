Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Whois,WhoisLookup,D:\research\architectureSmells\repos\flipbit_whois\Whois\WhoisLookup.cs,LookupAsync,Cyclomatic complexity of the method is 8
Complex Method,Whois.Parsers,WhoisStatusParser,D:\research\architectureSmells\repos\flipbit_whois\Whois\Parsers\WhoisStatusParser.cs,Parse,Cyclomatic complexity of the method is 56
Complex Method,Whois.Parsers.Fixups,MultipleContactFixup,D:\research\architectureSmells\repos\flipbit_whois\Whois\Parsers\Fixups\MultipleContactFixup.cs,Fixup,Cyclomatic complexity of the method is 11
Complex Method,Whois.Parsers.Fixups,MultipleContactFixup,D:\research\architectureSmells\repos\flipbit_whois\Whois\Parsers\Fixups\MultipleContactFixup.cs,TryGetRegistrant,Cyclomatic complexity of the method is 11
Complex Method,Whois.Parsers.Fixups,MultipleContactFixup,D:\research\architectureSmells\repos\flipbit_whois\Whois\Parsers\Fixups\MultipleContactFixup.cs,TryGetContact,Cyclomatic complexity of the method is 12
Complex Method,Whois.Parsers.Fixups,WhoisIsocOrgIlFixup,D:\research\architectureSmells\repos\flipbit_whois\Whois\Parsers\Fixups\WhoisIsocOrgIlFixup.cs,TryGetRegistrant,Cyclomatic complexity of the method is 11
Complex Method,Whois.Parsers.Fixups,WhoisIsocOrgIlFixup,D:\research\architectureSmells\repos\flipbit_whois\Whois\Parsers\Fixups\WhoisIsocOrgIlFixup.cs,TryGetContact,Cyclomatic complexity of the method is 13
Long Parameter List,Whois.Net,ITcpReader,D:\research\architectureSmells\repos\flipbit_whois\Whois\Net\ITcpReader.cs,Read,The method has 5 parameters. Parameters: url' port' command' encoding' timeoutSeconds
Long Parameter List,Whois.Net,TcpReader,D:\research\architectureSmells\repos\flipbit_whois\Whois\Net\TcpReader.cs,Read,The method has 5 parameters. Parameters: url' port' command' encoding' timeoutSeconds
Magic Number,Whois,WhoisLookup,D:\research\architectureSmells\repos\flipbit_whois\Whois\WhoisLookup.cs,Download,The following statement contains a magic number: var content = await TcpReader.Read(url' 43' query' request.Encoding' request.TimeoutSeconds);
Magic Number,Whois,WhoisOptions,D:\research\architectureSmells\repos\flipbit_whois\Whois\WhoisOptions.cs,WhoisOptions,The following statement contains a magic number: Defaults = new WhoisOptions              {                  Encoding = Encoding.UTF8'                  FollowReferrer = true'                  TimeoutSeconds = 10              };
Magic Number,Whois,WhoisResponse,D:\research\architectureSmells\repos\flipbit_whois\Whois\WhoisResponse.cs,SeenServer,The following statement contains a magic number: depth > 255
Magic Number,Whois.Servers,IanaServerLookup,D:\research\architectureSmells\repos\flipbit_whois\Whois\Servers\IanaServerLookup.cs,Download,The following statement contains a magic number: var response = await TcpReader.Read(IanaUrl' 43' tld.ToUpper()' request.Encoding' request.TimeoutSeconds);
Missing Default,Whois.Parsers.Fixups,MultipleContactFixup,D:\research\architectureSmells\repos\flipbit_whois\Whois\Parsers\Fixups\MultipleContactFixup.cs,TryGetRegistrant,The following switch statement is missing a default case: switch (match.Token.Name)                  {                      case "Address":                          var matchValueString = match.Value.ToString();                          if (string.IsNullOrEmpty(contact.Name))                          {                              contact.Name = matchValueString;                          }                          else                          {                              contact.Address.Add(matchValueString);                          }                          count++;                          break;                        case "Phone":                          contact.TelephoneNumber = match.Value.ToString();                          break;                        case "Fax":                          contact.FaxNumber = match.Value.ToString();                          break;                                                case "Email":                          contact.Email = match.Value.ToString();                          break;                        case "Changed":                          var dateTime = (DateTime) match.Value;                          if (dateTime > response.Updated ||                               !response.Updated.HasValue) response.Updated = dateTime;                          break;                        case "Created":                          response.Registered = (DateTime) match.Value;                          break;                  }
Missing Default,Whois.Parsers.Fixups,MultipleContactFixup,D:\research\architectureSmells\repos\flipbit_whois\Whois\Parsers\Fixups\MultipleContactFixup.cs,TryGetContact,The following switch statement is missing a default case: switch (match.Token.Name)                  {                      case "Contact.Name":                          contact.Name = match.Value.ToString();                          break;                        case "Contact.Organization":                          contact.Organization = match.Value.ToString();                          break;                        case "Contact.Id":                          contact.RegistryId = match.Value.ToString();                          break;                        case "Address":                          contact.Address.Add(match.Value.ToString());                          break;                        case "Phone":                          contact.TelephoneNumber = match.Value.ToString();                          break;                        case "Fax":                          contact.FaxNumber = match.Value.ToString();                          break;                                                case "Email":                          contact.Email = match.Value.ToString();                          break;                                                case "Created":                          contact.Created = (DateTime) match.Value;                          break;                  }
Missing Default,Whois.Parsers.Fixups,WhoisIsocOrgIlFixup,D:\research\architectureSmells\repos\flipbit_whois\Whois\Parsers\Fixups\WhoisIsocOrgIlFixup.cs,TryGetRegistrant,The following switch statement is missing a default case: switch (match.Token.Name)                  {                      case "Address":                          var matchValueString = match.Value.ToString();                          if (string.IsNullOrEmpty(contact.Name))                          {                              contact.Name = matchValueString;                          }                          else                          {                              contact.Address.Add(matchValueString);                          }                          count++;                          break;                        case "Phone":                          contact.TelephoneNumber = match.Value.ToString();                          break;                        case "Fax":                          contact.FaxNumber = match.Value.ToString();                          break;                                                case "Email":                          contact.Email = match.Value.ToString();                          break;                        case "Changed":                          var dateTime = (DateTime) match.Value;                          if (dateTime > response.Updated || !response.Updated.HasValue) response.Updated = dateTime;                          if (dateTime < response.Registered || !response.Registered.HasValue) response.Registered = dateTime;                          break;                  }
Missing Default,Whois.Parsers.Fixups,WhoisIsocOrgIlFixup,D:\research\architectureSmells\repos\flipbit_whois\Whois\Parsers\Fixups\WhoisIsocOrgIlFixup.cs,TryGetContact,The following switch statement is missing a default case: switch (match.Token.Name)                  {                      case "Contact.Name":                          contact.Name = match.Value.ToString();                          break;                        case "Contact.Organization":                          contact.Organization = match.Value.ToString();                          break;                        case "Contact.Id":                          contact.RegistryId = match.Value.ToString();                          break;                        case "Address":                          contact.Address.Add(match.Value.ToString());                          break;                        case "Phone":                          contact.TelephoneNumber = match.Value.ToString();                          break;                        case "Fax":                          contact.FaxNumber = match.Value.ToString();                          break;                                                case "Email":                          contact.Email = match.Value.ToString();                          break;                                                case "Changed":                          var changedDateTime = (DateTime) match.Value;                          if (changedDateTime > contact.Created || !contact.Created.HasValue) match.Value = changedDateTime;                          break;                  }
