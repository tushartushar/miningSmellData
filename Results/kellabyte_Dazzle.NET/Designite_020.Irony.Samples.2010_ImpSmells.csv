Implementation smell,Namespace,Class,File,Method,Description
Long Method,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The method has 684 lines of code.
Long Method,Irony.Samples,GWBasicGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The method has 179 lines of code.
Long Method,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The method has 705 lines of code.
Long Method,Irony.Samples.Scheme,SchemeGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Scheme\SchemeGrammar.cs,SchemeGrammar,The method has 157 lines of code.
Long Method,Irony.Samples.SQL,SqlGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The method has 219 lines of code.
Long Identifier,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the parameter enableAutomaticConflictResolution is 33.
Long Identifier,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the parameter annotation_type_element_declaration is 35.
Long Identifier,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the parameter element_value_array_initializer is 31.
Long Identifier,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the parameter explicit_constructor_invocation is 31.
Long Identifier,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the parameter explicit_generic_invocation_suffix is 34.
Long Identifier,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the parameter package_declaration_w_modifiers is 31.
Long Identifier,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,,The length of the parameter _validIdentifierStartCharacters is 31.
Long Identifier,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,,The length of the parameter ValidIdentifierStartCharactersRanges is 36.
Long Identifier,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,,The length of the parameter ValidIdentifierCharactersRanges is 31.
Long Statement,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,ResolveLessThanConflict,The length of the statement  "        scanner.EndPreview(true); //keep previewed tokens; important to keep ">>" matched to two ">" symbols' not one combined symbol (see method below) " is 144.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      bool enableAutomaticConflictResolution = true; //Roman: moved it here and made var instead of const to get rid of compiler warnings " is 131.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      modifier.Rule = ABSTRACT | FINAL | NATIVE | PRIVATE | PROTECTED | PUBLIC | STATIC | STRICTFP | SYNCHRONIZED | TRANSIENT | VOLATILE | annotation; " is 144.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      //variable_initializers.Rule = MakeStarRule(variable_initializers' COMMA' variable_initializer' TermListOptions.AllowTrailingDelimiter); " is 136.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      variable_initializers.Rule = MakeListRule(variable_initializers' COMMA' variable_initializer' TermListOptions.StarList | TermListOptions.AllowTrailingDelimiter); " is 161.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      class_declaration.Rule = CLASS_TOKEN + identifier + type_parameters_opt + super_opt + interfaces_opt + L_BRC + class_body + R_BRC; " is 130.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      interface_declaration.Rule  = INTERFACE + identifier + type_parameters_opt + EXTENDS + interface_type_list + L_BRC + interface_body + R_BRC; " is 140.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      interface_declaration.Rule |= INTERFACE + identifier + type_parameters_opt +                                 L_BRC + interface_body + R_BRC; " is 140.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      abstract_method_declaration.Rule  = type_parameters_opt + primitive_type +           dims + method_declarator + throws_opt + SEMI; " is 130.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      abstract_method_declaration.Rule |= type_parameters_opt + templated_qualified_name + dims + method_declarator + throws_opt + SEMI; " is 130.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      abstract_method_declaration.Rule |= type_parameters_opt + VOID +                     dims + method_declarator + throws_opt + SEMI; " is 130.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      method_declaration.Rule  = type_parameters_opt + VOID +                            method_declarator + throws_opt + method_body; " is 128.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      method_declaration.Rule |= type_parameters_opt + primitive_type +           dims + method_declarator + throws_opt + method_body; " is 128.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      method_declaration.Rule |= type_parameters_opt + templated_qualified_name + dims + method_declarator + throws_opt + method_body; " is 128.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      constructor_declaration.Rule  = modifiers + type_parameters_opt + identifier + L_PAR + formal_parameter_list_opt + R_PAR + throws_opt + constructor_body; " is 153.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      constructor_declaration.Rule |=             type_parameters_opt + identifier + L_PAR + formal_parameter_list_opt + R_PAR + throws_opt + constructor_body; " is 153.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      //element_value_pairs.Rule = MakeStarRule(element_value_pairs' COMMA' element_value_pair' TermListOptions.AllowTrailingDelimiter); " is 130.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      element_value_pairs.Rule = MakeListRule(element_value_pairs' COMMA' element_value_pair' TermListOptions.StarList | TermListOptions.AllowTrailingDelimiter); " is 155.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      element_values.Rule = MakeListRule(element_values' COMMA' element_value' TermListOptions.StarList | TermListOptions.AllowTrailingDelimiter); " is 140.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      enum_constants.Rule = MakeListRule(enum_constants' COMMA' enum_constant' TermListOptions.StarList | TermListOptions.AllowTrailingDelimiter); " is 140.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      method_invocation.Rule  = expression +                                                                                  arguments; " is 130.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      method_invocation.Rule |= expression +                                          DOT + type_arguments_opt + identifier + arguments; " is 130.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      method_invocation.Rule |=                    type_arguments_opt + SUPER_TOKEN + DOT + type_arguments_opt + identifier + arguments; " is 130.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      method_invocation.Rule |= expression + DOT + type_arguments_opt + SUPER_TOKEN + DOT + type_arguments_opt + identifier + arguments; " is 130.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      method_invocation.Rule |=                    type_arguments_opt + THIS +        DOT + type_arguments_opt + identifier + arguments; " is 130.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      method_invocation.Rule |= expression + DOT + type_arguments_opt + THIS +        DOT + type_arguments_opt + identifier + arguments; " is 130.
Long Statement,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The length of the statement  "      RegisterOperators(1' Associativity.Right' ASSIGN' PLUS_ASSIGN' MINUS_ASSIGN' STAR_ASSIGN' SLASH_ASSIGN' AMP_ASSIGN' BAR_ASSIGN' CARET_ASSIGN' PERCENT_ASSIGN' SHL_ASSIGN' SHR_ASSIGN' USHR_ASSIGN); " is 195.
Magic Number,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators(2' "&&");
Magic Number,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators(3' "|");
Magic Number,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators(4' "^");
Magic Number,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators(5' "&");
Magic Number,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators(6' "=="' "!=");
Magic Number,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators(7' "<"' ">"' "<="' ">="' "is"' "as");
Magic Number,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators(8' "<<"' ">>");
Magic Number,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators(9' "+"' "-");
Magic Number,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators(10' "*"' "/"' "%");
Magic Number,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators(-3' "="' "+="' "-="' "*="' "/="' "%="' "&="' "|="' "^="' "<<="' ">>=");
Magic Number,Irony.Samples.CSharp,CSharpGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators(-2' "?");
Magic Number,Irony.Samples,GWBasicGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The following statement contains a magic number: RegisterOperators(60' "^");
Magic Number,Irony.Samples,GWBasicGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The following statement contains a magic number: RegisterOperators(50' "*"' "/");
Magic Number,Irony.Samples,GWBasicGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The following statement contains a magic number: RegisterOperators(40' "+"' "-");
Magic Number,Irony.Samples,GWBasicGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The following statement contains a magic number: RegisterOperators(30' "="' "<="' ">="' "<"' ">"' "<>");
Magic Number,Irony.Samples,GWBasicGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The following statement contains a magic number: RegisterOperators(20' "and"' "or");
Magic Number,Irony.Samples,GWBasicGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\GWBasic\GwBasicGrammar.cs,identifier_ValidateToken,The following statement contains a magic number: if (e.Context.CurrentToken.ValueString.Length > 4)              e.Context.CurrentToken = e.Context.CreateErrorToken("Identifier cannot be longer than 4 characters");
Magic Number,Irony.Samples,WikiHtmlConverter,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Wiki\WikiHtmlConverter.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++)          {              switch (text[i]) {                  case '<':   sb.Append("&lt;"); break;                  case '>':   sb.Append("&gt;"); break;                  case '"':   sb.Append("&quot;");    break;                  case '&':   sb.Append("&amp;");  break;                  default:                      if (text[i] > 159)    {                          // decimal numeric entity                          sb.Append("&#");                          sb.Append(((int)text[i]).ToString());                          sb.Append(";");                      } else                          sb.Append(text[i]);                      break;              }          }
Magic Number,Irony.Samples,WikiHtmlConverter,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Wiki\WikiHtmlConverter.cs,Convert,The following statement contains a magic number: _output = new StringBuilder(8192);
Magic Number,Irony.Samples,WikiHtmlConverter,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following statement contains a magic number: switch(term.BlockType) {          case WikiBlockType.EscapedText:          case WikiBlockType.CodeBlock:            _output.Append(term.OpenHtmlTag);            _output.Append(HtmlEncode(token.ValueString));            _output.AppendLine(term.CloseHtmlTag);            break;          case WikiBlockType.Anchor:            _output.Append("<a name=\"" + token.ValueString +"\"/>");            break;          case WikiBlockType.LinkToAnchor:            _output.Append("<a href=\"#" + token.ValueString +"\">" + HtmlEncode(token.ValueString) + "</a>");            break;           case WikiBlockType.Url:          case WikiBlockType.FileLink:            template = "<a href=\"{0}\">{1}</a>";            segments = token.ValueString.Split('|');            if(segments.Length > 1)              _output.Append(string.Format(template' segments[1]' segments[0]));            else              _output.Append(string.Format(template' segments[0]' segments[0]));            break;           case WikiBlockType.Image:            segments = token.ValueString.Split('|');            switch(segments.Length){              case 1:                template = "<img src=\"{0}\"/>";                _output.Append(string.Format(template' segments[0]));                break;               case 2:                template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";                _output.Append(string.Format(template' segments[0]' segments[1]));                break;               case 3:                template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";                _output.Append(string.Format(template' segments[0]' segments[1]' segments[2]));                break;            }//switch segments.Length            break;         }
Magic Number,Irony.Samples,WikiHtmlConverter,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following statement contains a magic number: switch(term.BlockType) {          case WikiBlockType.EscapedText:          case WikiBlockType.CodeBlock:            _output.Append(term.OpenHtmlTag);            _output.Append(HtmlEncode(token.ValueString));            _output.AppendLine(term.CloseHtmlTag);            break;          case WikiBlockType.Anchor:            _output.Append("<a name=\"" + token.ValueString +"\"/>");            break;          case WikiBlockType.LinkToAnchor:            _output.Append("<a href=\"#" + token.ValueString +"\">" + HtmlEncode(token.ValueString) + "</a>");            break;           case WikiBlockType.Url:          case WikiBlockType.FileLink:            template = "<a href=\"{0}\">{1}</a>";            segments = token.ValueString.Split('|');            if(segments.Length > 1)              _output.Append(string.Format(template' segments[1]' segments[0]));            else              _output.Append(string.Format(template' segments[0]' segments[0]));            break;           case WikiBlockType.Image:            segments = token.ValueString.Split('|');            switch(segments.Length){              case 1:                template = "<img src=\"{0}\"/>";                _output.Append(string.Format(template' segments[0]));                break;               case 2:                template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";                _output.Append(string.Format(template' segments[0]' segments[1]));                break;               case 3:                template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";                _output.Append(string.Format(template' segments[0]' segments[1]' segments[2]));                break;            }//switch segments.Length            break;         }
Magic Number,Irony.Samples,WikiHtmlConverter,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following statement contains a magic number: switch(term.BlockType) {          case WikiBlockType.EscapedText:          case WikiBlockType.CodeBlock:            _output.Append(term.OpenHtmlTag);            _output.Append(HtmlEncode(token.ValueString));            _output.AppendLine(term.CloseHtmlTag);            break;          case WikiBlockType.Anchor:            _output.Append("<a name=\"" + token.ValueString +"\"/>");            break;          case WikiBlockType.LinkToAnchor:            _output.Append("<a href=\"#" + token.ValueString +"\">" + HtmlEncode(token.ValueString) + "</a>");            break;           case WikiBlockType.Url:          case WikiBlockType.FileLink:            template = "<a href=\"{0}\">{1}</a>";            segments = token.ValueString.Split('|');            if(segments.Length > 1)              _output.Append(string.Format(template' segments[1]' segments[0]));            else              _output.Append(string.Format(template' segments[0]' segments[0]));            break;           case WikiBlockType.Image:            segments = token.ValueString.Split('|');            switch(segments.Length){              case 1:                template = "<img src=\"{0}\"/>";                _output.Append(string.Format(template' segments[0]));                break;               case 2:                template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";                _output.Append(string.Format(template' segments[0]' segments[1]));                break;               case 3:                template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";                _output.Append(string.Format(template' segments[0]' segments[1]' segments[2]));                break;            }//switch segments.Length            break;         }
Magic Number,Irony.Samples.FullTextSearch,SearchGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,SearchGrammar,The following statement contains a magic number: RegisterOperators(10' "or"' "|");
Magic Number,Irony.Samples.FullTextSearch,SearchGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,SearchGrammar,The following statement contains a magic number: RegisterOperators(20' "and"' "&"' "-");
Magic Number,Irony.Samples.FullTextSearch,SearchGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,SearchGrammar,The following statement contains a magic number: RegisterOperators(20' ImpliedAnd);
Magic Number,Irony.Samples.FullTextSearch,SearchGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,ConvertQuery,The following statement contains a magic number: switch (node.Term.Name) {              case "BinaryExpression":                string opSym = string.Empty;                string op = node.ChildNodes[1].FindTokenAndGetText().ToLower();                 string sqlOp = "";                switch(op) {                  case "":  case "&":  case "and":                    sqlOp = " AND ";                    type = TermType.Inflectional;                    break;                  case "-":                    sqlOp = " AND NOT ";                    break;                  case "|":   case "or":                    sqlOp = " OR ";                    break;                }//switch                  result = "(" + ConvertQuery(node.ChildNodes[0]' type) + sqlOp +  ConvertQuery(node.ChildNodes[2]' type) + ")";                break;                case "PrimaryExpression":                result = "(" + ConvertQuery(node.ChildNodes[0]' type) + ")";                break;                case "ProximityList":                string[] tmp = new string[node.ChildNodes.Count];                type = TermType.Exact;                for (int i = 0; i < node.ChildNodes.Count; i++) {                  tmp[i] = ConvertQuery(node.ChildNodes[i]' type);                }                result = "(" + string.Join(" NEAR "' tmp) + ")";                type = TermType.Inflectional;                break;                case "Phrase":                result = '"' + node.Token.ValueString + '"';                break;                case "ThesaurusExpression":                result = " FORMSOF (THESAURUS' " +                    node.ChildNodes[1].Token.ValueString + ") ";                break;                case "ExactExpression":                result = " \"" + node.ChildNodes[1].Token.ValueString + "\" ";                break;                case "Term":                switch (type) {                  case TermType.Inflectional:                    result = node.Token.ValueString;                    if (result.EndsWith("*"))                      result = "\"" + result + "\"";                    else                      result = " FORMSOF (INFLECTIONAL' " + result + ") ";                    break;                  case TermType.Exact:                    result = node.Token.ValueString;                      break;                }                break;                // This should never happen' even if input string is garbage              default:                throw new ApplicationException("Converter failed: unexpected term: " +                    node.Term.Name + ". Please investigate.");              }
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(2' Associativity.Right' QMARK);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(3' Associativity.Left' BAR_BAR);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(4' Associativity.Left' AMP_AMP);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(5' Associativity.Left' BAR);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(6' Associativity.Left' CARET);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(7' Associativity.Left' AMP);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(8' Associativity.Left' EQ' NEQ);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(9' Associativity.Left' INSTANCEOF' GT' GTEQ' LT' LTEQ);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(10' Associativity.Left' SHL' SHR' USHR);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(11' Associativity.Left' PLUS' MINUS);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(12' Associativity.Left' STAR' SLASH' PERCENT);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(13' Associativity.Right' PLUS_PLUS' MINUS_MINUS' TILDE' EMARK' NEW);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(14' Associativity.Left' DOT);
Magic Number,Irony.Samples.Java,JavaGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Java\JavaGrammar.cs,InitializeSyntax,The following statement contains a magic number: RegisterOperators(15' Associativity.Neutral' R_PAR' R_BKT);
Magic Number,Irony.Samples.MiniPython,MiniPythonGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\MiniPython\MiniPython.cs,MiniPythonGrammar,The following statement contains a magic number: RegisterOperators(2' "*"' "/");
Magic Number,Irony.Samples.MiniPython,MiniPythonGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\MiniPython\MiniPython.cs,MiniPythonGrammar,The following statement contains a magic number: RegisterOperators(3' Associativity.Right' "**");
Magic Number,Irony.Samples.Scheme,SchemeGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Scheme\SchemeGrammar.cs,SchemeGrammar,The following statement contains a magic number: DefineVarForm.AstConfig.PartsMap = new int[] { 1' 2 };
Magic Number,Irony.Samples.SQL,SqlGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(10' "*"' "/"' "%");
Magic Number,Irony.Samples.SQL,SqlGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(9' "+"' "-");
Magic Number,Irony.Samples.SQL,SqlGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(8' "="' ">"' "<"' ">="' "<="' "<>"' "!="' "!<"' "!>"' "LIKE"' "IN");
Magic Number,Irony.Samples.SQL,SqlGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(7' "^"' "&"' "|");
Magic Number,Irony.Samples.SQL,SqlGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(6' NOT);
Magic Number,Irony.Samples.SQL,SqlGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(5' "AND");
Magic Number,Irony.Samples.SQL,SqlGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(4' "OR");
Missing Default,Irony.Samples,WikiHtmlConverter,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiToken,The following switch statement is missing a default case: switch(wikiTerm.TermType) {          case WikiTermType.Element:             _output.Append(wikiTerm.OpenHtmlTag);             _output.Append(wikiTerm.CloseHtmlTag);            break;           case WikiTermType.Format:             ProcessFormatTag(token);             break;           case WikiTermType.Heading:           case WikiTermType.List:            _output.Append(wikiTerm.OpenHtmlTag);            _currentHeader = wikiTerm;                break;           case WikiTermType.Block:            ProcessWikiBlockTag(token);             break;           case WikiTermType.Text:            _output.Append(HtmlEncode(token.ValueString));                 break;           case WikiTermType.Table:            if (_insideCell)              _output.Append(_lastTableTag.CloseHtmlTag); //write out </td> or </th>            //We do not write opening tag immediately: we need to know if it is the last table tag on the line.            // if yes' we don't write it at all; _lastTableTag will be cleared when we start new line            _lastTableTag = wikiTerm as WikiTagTerminal;            _insideCell = false;             break;         }
Missing Default,Irony.Samples,WikiHtmlConverter,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following switch statement is missing a default case: switch(term.BlockType) {          case WikiBlockType.EscapedText:          case WikiBlockType.CodeBlock:            _output.Append(term.OpenHtmlTag);            _output.Append(HtmlEncode(token.ValueString));            _output.AppendLine(term.CloseHtmlTag);            break;          case WikiBlockType.Anchor:            _output.Append("<a name=\"" + token.ValueString +"\"/>");            break;          case WikiBlockType.LinkToAnchor:            _output.Append("<a href=\"#" + token.ValueString +"\">" + HtmlEncode(token.ValueString) + "</a>");            break;           case WikiBlockType.Url:          case WikiBlockType.FileLink:            template = "<a href=\"{0}\">{1}</a>";            segments = token.ValueString.Split('|');            if(segments.Length > 1)              _output.Append(string.Format(template' segments[1]' segments[0]));            else              _output.Append(string.Format(template' segments[0]' segments[0]));            break;           case WikiBlockType.Image:            segments = token.ValueString.Split('|');            switch(segments.Length){              case 1:                template = "<img src=\"{0}\"/>";                _output.Append(string.Format(template' segments[0]));                break;               case 2:                template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";                _output.Append(string.Format(template' segments[0]' segments[1]));                break;               case 3:                template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";                _output.Append(string.Format(template' segments[0]' segments[1]' segments[2]));                break;            }//switch segments.Length            break;         }
Missing Default,Irony.Samples,WikiHtmlConverter,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following switch statement is missing a default case: switch(segments.Length){              case 1:                template = "<img src=\"{0}\"/>";                _output.Append(string.Format(template' segments[0]));                break;               case 2:                template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";                _output.Append(string.Format(template' segments[0]' segments[1]));                break;               case 3:                template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";                _output.Append(string.Format(template' segments[0]' segments[1]' segments[2]));                break;            }
Missing Default,Irony.Samples.FullTextSearch,SearchGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,ConvertQuery,The following switch statement is missing a default case: switch(op) {                  case "":  case "&":  case "and":                    sqlOp = " AND ";                    type = TermType.Inflectional;                    break;                  case "-":                    sqlOp = " AND NOT ";                    break;                  case "|":   case "or":                    sqlOp = " OR ";                    break;                }
Missing Default,Irony.Samples.FullTextSearch,SearchGrammar,C:\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,ConvertQuery,The following switch statement is missing a default case: switch (type) {                  case TermType.Inflectional:                    result = node.Token.ValueString;                    if (result.EndsWith("*"))                      result = "\"" + result + "\"";                    else                      result = " FORMSOF (INFLECTIONAL' " + result + ") ";                    break;                  case TermType.Exact:                    result = node.Token.ValueString;                      break;                }
