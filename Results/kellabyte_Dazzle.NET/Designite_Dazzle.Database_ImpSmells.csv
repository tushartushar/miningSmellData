Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dazzle.Operations,SelectOperation,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperation.cs,Execute,The method has 105 lines of code.
Long Method,Dazzle.Query,DqlGrammar,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Query\DqlQueryGrammar.cs,DqlGrammar,The method has 225 lines of code.
Complex Method,Dazzle.Operations,SelectOperation,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperation.cs,Execute,Cyclomatic complexity of the method is 9
Empty Catch Block,Dazzle.Operations,SelectOperation,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperation.cs,Execute,The method has an empty catch block.
Empty Catch Block,Dazzle.Operations,SelectOperation,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperation.cs,Execute,The method has an empty catch block.
Magic Number,Dazzle.Operations,DeleteOperationBuilder,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\DeleteOperationBuilder.cs,BuildOperation,The following statement contains a magic number: if (node.Term.Name == this.OperationName)              {                  // Delete operation                  operation = new DeleteOperation();                  operation.TableName = node.ChildNodes[2].ChildNodes[0].Token.ValueString;                  plan.Operations.Add(operation);                }
Magic Number,Dazzle.Operations,DeleteOperationBuilder,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\DeleteOperationBuilder.cs,BuildOperation,The following statement contains a magic number: if (scope.Contains("whereClauseOpt") && node.Term.Name == "binExpr")              {                  // Where clause                  if (node.ChildNodes[0].Term.Name == "binExpr")                  {                      // Handle multiple where clauses.                      foreach (var child in node.ChildNodes)                      {                          if (child.Term.Name == "binExpr")                          {                              var column = child.ChildNodes[0].ChildNodes[0].Token.ValueString;                              var val = child.ChildNodes[2].Token.ValueString;                              operation.WhereClauses.Add(column' val);                          }                      }                  }                  else if (node.Term.Name == "binExpr" && operation.WhereClauses.Count == 0)                  {                      // Handle a single where clause.                      var column = node.ChildNodes[0].ChildNodes[0].Token.ValueString;                      var val = node.ChildNodes[2].Token.ValueString;                      operation.WhereClauses.Add(column' val);                  }              }
Magic Number,Dazzle.Operations,DeleteOperationBuilder,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\DeleteOperationBuilder.cs,BuildOperation,The following statement contains a magic number: if (scope.Contains("whereClauseOpt") && node.Term.Name == "binExpr")              {                  // Where clause                  if (node.ChildNodes[0].Term.Name == "binExpr")                  {                      // Handle multiple where clauses.                      foreach (var child in node.ChildNodes)                      {                          if (child.Term.Name == "binExpr")                          {                              var column = child.ChildNodes[0].ChildNodes[0].Token.ValueString;                              var val = child.ChildNodes[2].Token.ValueString;                              operation.WhereClauses.Add(column' val);                          }                      }                  }                  else if (node.Term.Name == "binExpr" && operation.WhereClauses.Count == 0)                  {                      // Handle a single where clause.                      var column = node.ChildNodes[0].ChildNodes[0].Token.ValueString;                      var val = node.ChildNodes[2].Token.ValueString;                      operation.WhereClauses.Add(column' val);                  }              }
Magic Number,Dazzle.Operations,SelectOperation,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperation.cs,Execute,The following statement contains a magic number: for (int i=0; i<this.WhereClauses.Count; i++)              {                  var whereClause = this.WhereClauses.ElementAt(i);                  var set = new HashSet<string>();                  sets.Add(set);                    // First try by using an index lookup and scan.                  string key = string.Format(                      SEEK_ROW_BY_INDEX'                      this.TableName'                      whereClause.Key'                      whereClause.Value);                    var enumerator = storage.GetEnumerator(key);                  if (enumerator != null)                  {                      bool cancelIndexScanning = false;                      try                      {                          while (!cancelIndexScanning && enumerator.MoveNext())                          {                              var keyComponents = enumerator.Current.Key.Split(new string[] { "/" }' StringSplitOptions.RemoveEmptyEntries);                              var value = enumerator.Current.Value;                              var keyType = GetKeyType(keyComponents' value);                                switch (keyType)                              {                                  case KeyType.IndexedTerm:                                      if (keyComponents[2] != whereClause.Key)                                      {                                          cancelIndexScanning = true;                                      }                                      break;                                  case KeyType.IndexedValue:                                      if (keyComponents[3] == whereClause.Value)                                      {                                          set.Add(value);                                      }                                      break;                              }                          }                      }                      catch (AccessViolationException e)                      {                          // TODO: Should do something here.                      }                      finally                      {                          enumerator.Dispose();                      }                  }              }
Magic Number,Dazzle.Operations,SelectOperation,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperation.cs,Execute,The following statement contains a magic number: for (int i=0; i<this.WhereClauses.Count; i++)              {                  var whereClause = this.WhereClauses.ElementAt(i);                  var set = new HashSet<string>();                  sets.Add(set);                    // First try by using an index lookup and scan.                  string key = string.Format(                      SEEK_ROW_BY_INDEX'                      this.TableName'                      whereClause.Key'                      whereClause.Value);                    var enumerator = storage.GetEnumerator(key);                  if (enumerator != null)                  {                      bool cancelIndexScanning = false;                      try                      {                          while (!cancelIndexScanning && enumerator.MoveNext())                          {                              var keyComponents = enumerator.Current.Key.Split(new string[] { "/" }' StringSplitOptions.RemoveEmptyEntries);                              var value = enumerator.Current.Value;                              var keyType = GetKeyType(keyComponents' value);                                switch (keyType)                              {                                  case KeyType.IndexedTerm:                                      if (keyComponents[2] != whereClause.Key)                                      {                                          cancelIndexScanning = true;                                      }                                      break;                                  case KeyType.IndexedValue:                                      if (keyComponents[3] == whereClause.Value)                                      {                                          set.Add(value);                                      }                                      break;                              }                          }                      }                      catch (AccessViolationException e)                      {                          // TODO: Should do something here.                      }                      finally                      {                          enumerator.Dispose();                      }                  }              }
Magic Number,Dazzle.Operations,SelectOperation,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperation.cs,Execute,The following statement contains a magic number: foreach (var key in intersection)              {                  IEnumerator<KeyValuePair<string' string>> enumerator = null;                  try                  {                      enumerator = storage.GetEnumerator(key);                      enumerator.MoveNext();                        string[] rowKeyComponents = key.Split('/');                      var row = new Row();                      row.RowKey = rowKeyComponents[rowKeyComponents.Length - 1];                      row.Columns.Add("key"' row.RowKey);                      rows.Add(row);                        // Select the columns.                      while (enumerator.MoveNext())                      {                          var keyComponents = enumerator.Current.Key.Split(new string[] { "/" }' StringSplitOptions.RemoveEmptyEntries);                          var keyType = GetKeyType(keyComponents' enumerator.Current.Value);                            if (keyType == KeyType.Row)                          {                              break;                          }                          else if (keyType == KeyType.ColumnValue && (selectAll || this.ColumnNames.Contains(keyComponents[3])))                          {                              // If all the columns are selected or this column is specified                              // in the select clause add it to the results.                              row.Columns.Add(keyComponents[3]' enumerator.Current.Value);                          }                      }                  }                  catch (AccessViolationException e)                  {                      // TODO: Should do something here.                  }                  finally                  {                      if (enumerator != null)                      {                          enumerator.Dispose();                      }                  }              }
Magic Number,Dazzle.Operations,SelectOperation,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperation.cs,Execute,The following statement contains a magic number: foreach (var key in intersection)              {                  IEnumerator<KeyValuePair<string' string>> enumerator = null;                  try                  {                      enumerator = storage.GetEnumerator(key);                      enumerator.MoveNext();                        string[] rowKeyComponents = key.Split('/');                      var row = new Row();                      row.RowKey = rowKeyComponents[rowKeyComponents.Length - 1];                      row.Columns.Add("key"' row.RowKey);                      rows.Add(row);                        // Select the columns.                      while (enumerator.MoveNext())                      {                          var keyComponents = enumerator.Current.Key.Split(new string[] { "/" }' StringSplitOptions.RemoveEmptyEntries);                          var keyType = GetKeyType(keyComponents' enumerator.Current.Value);                            if (keyType == KeyType.Row)                          {                              break;                          }                          else if (keyType == KeyType.ColumnValue && (selectAll || this.ColumnNames.Contains(keyComponents[3])))                          {                              // If all the columns are selected or this column is specified                              // in the select clause add it to the results.                              row.Columns.Add(keyComponents[3]' enumerator.Current.Value);                          }                      }                  }                  catch (AccessViolationException e)                  {                      // TODO: Should do something here.                  }                  finally                  {                      if (enumerator != null)                      {                          enumerator.Dispose();                      }                  }              }
Magic Number,Dazzle.Operations,SelectOperation,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperation.cs,GetKeyType,The following statement contains a magic number: if (keyComponents[1] == "$index")              {                  return KeyType.IndexedValue;              }              else if (keyComponents[2] == "$column")              {                  return KeyType.ColumnValue;              }
Magic Number,Dazzle.Operations,SelectOperationBuilder,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperationBuilder.cs,BuildOperation,The following statement contains a magic number: if (scope.Contains("selList") && node.Term.Name == "id_simple")              {                  // Select column list                  operation.ColumnNames.Add(node.Token.ValueString);              }              else if (scope.Contains("selList") && node.Term.Name == "*")              {                  // Select column list                  operation.ColumnNames.Add(node.Token.ValueString);              }              else if (scope.Contains("fromClauseOpt") && node.Term.Name == "id_simple")              {                  // From clause                  operation.TableName = node.Token.ValueString;              }              else if (scope.Contains("whereClauseOpt") && node.Term.Name == "binExpr")              {                  // Where clause                  if (node.ChildNodes[0].Term.Name == "binExpr")                  {                      // Handle multiple where clauses.                      foreach (var child in node.ChildNodes)                      {                          if (child.Term.Name == "binExpr")                          {                              var column = child.ChildNodes[0].ChildNodes[0].Token.ValueString;                              var val = child.ChildNodes[2].Token.ValueString;                              operation.WhereClauses.Add(column' val);                          }                      }                  }                  else if (node.Term.Name == "binExpr" && operation.WhereClauses.Count == 0)                  {                      // Handle a single where clause.                      var column = node.ChildNodes[0].ChildNodes[0].Token.ValueString;                      var val = node.ChildNodes[2].Token.ValueString;                      operation.WhereClauses.Add(column' val);                  }              }
Magic Number,Dazzle.Operations,SelectOperationBuilder,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperationBuilder.cs,BuildOperation,The following statement contains a magic number: if (scope.Contains("selList") && node.Term.Name == "id_simple")              {                  // Select column list                  operation.ColumnNames.Add(node.Token.ValueString);              }              else if (scope.Contains("selList") && node.Term.Name == "*")              {                  // Select column list                  operation.ColumnNames.Add(node.Token.ValueString);              }              else if (scope.Contains("fromClauseOpt") && node.Term.Name == "id_simple")              {                  // From clause                  operation.TableName = node.Token.ValueString;              }              else if (scope.Contains("whereClauseOpt") && node.Term.Name == "binExpr")              {                  // Where clause                  if (node.ChildNodes[0].Term.Name == "binExpr")                  {                      // Handle multiple where clauses.                      foreach (var child in node.ChildNodes)                      {                          if (child.Term.Name == "binExpr")                          {                              var column = child.ChildNodes[0].ChildNodes[0].Token.ValueString;                              var val = child.ChildNodes[2].Token.ValueString;                              operation.WhereClauses.Add(column' val);                          }                      }                  }                  else if (node.Term.Name == "binExpr" && operation.WhereClauses.Count == 0)                  {                      // Handle a single where clause.                      var column = node.ChildNodes[0].ChildNodes[0].Token.ValueString;                      var val = node.ChildNodes[2].Token.ValueString;                      operation.WhereClauses.Add(column' val);                  }              }
Magic Number,Dazzle.Operations,UpdateOperationBuilder,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\UpdateOperationBuilder.cs,BuildOperation,The following statement contains a magic number: if (node.Term.Name == "assignment")              {                  operation.Assignments.Add(node.ChildNodes[0].ChildNodes[0].Token.ValueString' node.ChildNodes[2].Token.ValueString);              }              else if (scope.Contains("whereClauseOpt") && node.Term.Name == "binExpr")              {                  // Where clause                  if (node.ChildNodes[0].Term.Name == "binExpr")                  {                      // Handle multiple where clauses.                      foreach (var child in node.ChildNodes)                      {                          if (child.Term.Name == "binExpr")                          {                              var column = child.ChildNodes[0].ChildNodes[0].Token.ValueString;                              var val = child.ChildNodes[2].Token.ValueString;                              operation.WhereClauses.Add(column' val);                          }                      }                  }                  else if (node.Term.Name == "binExpr" && operation.WhereClauses.Count == 0)                  {                      // Handle a single where clause.                      var column = node.ChildNodes[0].ChildNodes[0].Token.ValueString;                      var val = node.ChildNodes[2].Token.ValueString;                      operation.WhereClauses.Add(column' val);                  }              }
Magic Number,Dazzle.Operations,UpdateOperationBuilder,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\UpdateOperationBuilder.cs,BuildOperation,The following statement contains a magic number: if (node.Term.Name == "assignment")              {                  operation.Assignments.Add(node.ChildNodes[0].ChildNodes[0].Token.ValueString' node.ChildNodes[2].Token.ValueString);              }              else if (scope.Contains("whereClauseOpt") && node.Term.Name == "binExpr")              {                  // Where clause                  if (node.ChildNodes[0].Term.Name == "binExpr")                  {                      // Handle multiple where clauses.                      foreach (var child in node.ChildNodes)                      {                          if (child.Term.Name == "binExpr")                          {                              var column = child.ChildNodes[0].ChildNodes[0].Token.ValueString;                              var val = child.ChildNodes[2].Token.ValueString;                              operation.WhereClauses.Add(column' val);                          }                      }                  }                  else if (node.Term.Name == "binExpr" && operation.WhereClauses.Count == 0)                  {                      // Handle a single where clause.                      var column = node.ChildNodes[0].ChildNodes[0].Token.ValueString;                      var val = node.ChildNodes[2].Token.ValueString;                      operation.WhereClauses.Add(column' val);                  }              }
Magic Number,Dazzle.Operations,UpdateOperationBuilder,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\UpdateOperationBuilder.cs,BuildOperation,The following statement contains a magic number: if (node.Term.Name == "assignment")              {                  operation.Assignments.Add(node.ChildNodes[0].ChildNodes[0].Token.ValueString' node.ChildNodes[2].Token.ValueString);              }              else if (scope.Contains("whereClauseOpt") && node.Term.Name == "binExpr")              {                  // Where clause                  if (node.ChildNodes[0].Term.Name == "binExpr")                  {                      // Handle multiple where clauses.                      foreach (var child in node.ChildNodes)                      {                          if (child.Term.Name == "binExpr")                          {                              var column = child.ChildNodes[0].ChildNodes[0].Token.ValueString;                              var val = child.ChildNodes[2].Token.ValueString;                              operation.WhereClauses.Add(column' val);                          }                      }                  }                  else if (node.Term.Name == "binExpr" && operation.WhereClauses.Count == 0)                  {                      // Handle a single where clause.                      var column = node.ChildNodes[0].ChildNodes[0].Token.ValueString;                      var val = node.ChildNodes[2].Token.ValueString;                      operation.WhereClauses.Add(column' val);                  }              }
Magic Number,Dazzle.Query,DqlQueryPlanBuilder,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Query\DqlQueryPlanBuilder.cs,ReadClause,The following statement contains a magic number: foreach (var builder in this.builders)              {                  if (scope.Count >= 2 && scope.ElementAt(scope.Count - 2) == builder.OperationName)                  {                      builder.BuildOperation(scope' node' plan);                  }              }
Magic Number,Dazzle.Query,DqlQueryPlanBuilder,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Query\DqlQueryPlanBuilder.cs,ReadClause,The following statement contains a magic number: foreach (var builder in this.builders)              {                  if (scope.Count >= 2 && scope.ElementAt(scope.Count - 2) == builder.OperationName)                  {                      builder.BuildOperation(scope' node' plan);                  }              }
Magic Number,Dazzle.Query,DqlGrammar,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Query\DqlQueryGrammar.cs,DqlGrammar,The following statement contains a magic number: RegisterOperators(10' "*"' "/"' "%");
Magic Number,Dazzle.Query,DqlGrammar,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Query\DqlQueryGrammar.cs,DqlGrammar,The following statement contains a magic number: RegisterOperators(9' "+"' "-");
Magic Number,Dazzle.Query,DqlGrammar,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Query\DqlQueryGrammar.cs,DqlGrammar,The following statement contains a magic number: RegisterOperators(8' "="' ">"' "<"' ">="' "<="' "<>"' "!="' "!<"' "!>"' "LIKE"' "IN");
Magic Number,Dazzle.Query,DqlGrammar,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Query\DqlQueryGrammar.cs,DqlGrammar,The following statement contains a magic number: RegisterOperators(7' "^"' "&"' "|");
Magic Number,Dazzle.Query,DqlGrammar,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Query\DqlQueryGrammar.cs,DqlGrammar,The following statement contains a magic number: RegisterOperators(6' NOT);
Magic Number,Dazzle.Query,DqlGrammar,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Query\DqlQueryGrammar.cs,DqlGrammar,The following statement contains a magic number: RegisterOperators(5' "AND");
Magic Number,Dazzle.Query,DqlGrammar,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Query\DqlQueryGrammar.cs,DqlGrammar,The following statement contains a magic number: RegisterOperators(4' "OR");
Missing Default,Dazzle.Operations,SelectOperation,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperation.cs,Execute,The following switch statement is missing a default case: switch (keyType)                              {                                  case KeyType.IndexedTerm:                                      if (keyComponents[2] != whereClause.Key)                                      {                                          cancelIndexScanning = true;                                      }                                      break;                                  case KeyType.IndexedValue:                                      if (keyComponents[3] == whereClause.Value)                                      {                                          set.Add(value);                                      }                                      break;                              }
Missing Default,Dazzle.Operations,SelectOperation,C:\repos\kellabyte_Dazzle.NET\src\Dazzle.Database\Operations\SelectOperation.cs,GetKeyType,The following switch statement is missing a default case: switch (value)              {                  case "table":                      return KeyType.Table;                  case "row":                      return KeyType.Row;                  case "column":                      return KeyType.Column;                  case "indexed-column":                      return KeyType.IndexedColumn;                  case "indexed-term":                      return KeyType.IndexedTerm;              }
