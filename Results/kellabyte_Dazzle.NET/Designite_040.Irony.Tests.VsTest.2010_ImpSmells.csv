Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Irony.Tests,OperatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,TestOperatorPrecedence,The length of the statement  "      Assert.IsTrue(parseTree.Root.ChildNodes[1].Term.Name == "+"' "Expected + operator."); //check that top operator is "+"' not "*" " is 127.
Long Statement,Irony.Tests,OperatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,TestOperatorPrecedence,The length of the statement  "      Assert.IsTrue(parseTree.Root.ChildNodes[1].Term.Name == "+"' "Expected + operator."); //check that top operator is "+"' not "*" " is 127.
Long Statement,Irony.Tests,OperatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,TestOperatorPrecedence,The length of the statement  "      Assert.IsTrue(parseTree.Root.ChildNodes[0].Term.Name == "-"' "Expected - operator."); //check that top operator is "+"' not "*" " is 127.
Long Statement,Irony.Tests,OperatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,TestOperatorPrecedenceWithHints,The length of the statement  "      Assert.IsTrue(parseTree.Root.ChildNodes[1].Term.Name == "+"' "Expected + operator."); //check that top operator is "+"' not "*" " is 127.
Long Statement,Irony.Tests,OperatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,TestOperatorPrecedenceWithHints,The length of the statement  "      Assert.IsTrue(parseTree.Root.ChildNodes[1].Term.Name == "*"' "Expected * operator."); //check that top operator is "+"' not "*" " is 127.
Long Statement,Irony.Tests,OperatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,TestOperatorPrecedenceWithHints,The length of the statement  "      Assert.IsTrue(parseTree.Root.ChildNodes[1].Term.Name == "+"' "Expected + operator."); //check that top operator is "+"' not "*" " is 127.
Long Statement,Irony.Tests,OperatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,TestOperatorPrecedenceWithHints,The length of the statement  "      Assert.IsTrue(parseTree.Root.ChildNodes[1].Term.Name == "*"' "Expected * operator."); //check that top operator is "+"' not "*" " is 127.
Long Statement,Irony.Tests,TestHelper,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\TestHelper.cs,ParseInput,The length of the statement  "        Assert.AreEqual(g.Terminator' tree.Tokens[count - 2].Text' "Input terminator not found in the second token. Input: " + input);  " is 126.
Long Statement,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The length of the statement  "      Assert.IsTrue((DateTime)token.Value == new DateTime(2009' 11' 15)' "Failed to parse quoted date - result value does not match."); " is 129.
Long Statement,Irony.Tests,LineContinuationTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\LineContinuationTests.cs,TestContinuationTerminal_Complex,The length of the statement  "      parser = TestHelper.CreateParser(new LineContinuationTerminal("LineContinuation"' @"\continue"' @"\cont"' "++CONTINUE++")); " is 123.
Long Statement,Irony.Tests,FreeTextLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\FreeTextLiteralTests.cs,TestFreeTextLiteral_Escapes,The length of the statement  "      Assert.AreEqual(term' token.Terminal' "Failed to scan a free text ending at EOF - invalid Terminal in the returned token."); " is 124.
Long Statement,Irony.Tests,IdentifierTerminalTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\IdentifierTerminalTests.cs,TestIdentifier_CaseRestrictions,The length of the statement  "      Assert.IsTrue(token != null && token.ValueString == "bCd"' "Failed to scan identifier bCd with FirstLower restriction."); " is 121.
Long Statement,Irony.Tests,IdentifierTerminalTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\IdentifierTerminalTests.cs,TestIdentifier_CaseRestrictions,The length of the statement  "      Assert.AreEqual(TokenCategory.Error'  token.Category' "Erroneously recognized an identifier cDE with FirstUpper restriction."); " is 127.
Long Statement,Irony.Tests,IdentifierTerminalTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\IdentifierTerminalTests.cs,TestIdentifier_CaseRestrictions,The length of the statement  "      Assert.IsTrue(token != null && token.ValueString == "CdE"' "Failed to scan identifier CdE with FirstUpper restriction."); " is 121.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_SignedMatchesNegativeCorrectly,The length of the statement  "      Assert.AreEqual(-500' token.Value' "Negative number was parsed incorrectly; expected: {0}' scanned: {1}"' "-500"' token.Value); " is 127.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The length of the statement  "      token = parser.ParseInput("123. "' useTerminator: false); //should ignore dot and read number as int. compare it to python numbers - see below " is 142.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The length of the statement  "      //When going through quick parse path (for one-digit numbers)' the NumberScanInfo record is not created and hence is absent in Attributes " is 137.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The length of the statement  "      Assert.IsTrue(token.Details == null' "Quick parse test failed: ScanDetails object is found in token - quick parse path should not produce this object."); " is 153.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The length of the statement  "      //When going through quick parse path (for one-digit numbers)' the NumberScanInfo record is not created and hence is absent in Attributes " is 137.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The length of the statement  "      Assert.IsTrue(token.Details == null' "Quick parse test failed: ScanDetails object is found in token - quick parse path should not produce this object."); " is 153.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Python,The length of the statement  "      string sbig = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"; //100 digits " is 130.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Python,The length of the statement  "      Assert.IsTrue(token.Details == null' "Quick parse test failed: ScanDetails object is found in token - quick parse path should produce this object."); " is 149.
Long Statement,Irony.Tests,StringLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\StringLiteralTests.cs,TestString_Python,The length of the statement  "      Assert.IsTrue((string)token.Value == "abcd\nefg"' "Failed to process line break in triple-quote string. (Double quotes)"); " is 122.
Long Statement,Irony.Tests,StringLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\StringLiteralTests.cs,TestString_Python,The length of the statement  "      Assert.IsTrue((string)token.Value == @"00\a\b\t\n\v\f\r00"' "Failed to process string with disabled escapes. (Double quotes)"); " is 127.
Long Statement,Irony.Tests,StringLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\StringLiteralTests.cs,TestString_CSharp,The length of the statement  "      Assert.IsTrue((string)token.Value == @"abcd\" + '"' + "efg" ' @"Failed to process '\\\ + double-quote' inside the string."); " is 124.
Long Statement,Irony.Tests,StringLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\StringLiteralTests.cs,TestString_CSharp,The length of the statement  "      token = parser.ParseInput(ReplaceQuotes(@"'abc\0601xyz'  ")); //the last digit "1" should not be included in octal number " is 121.
Magic Number,Irony.Tests,ErrorRecoveryTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\ErrorRecoveryTests.cs,TestErrorRecovery,The following statement contains a magic number: Assert.AreEqual(2' parseTree.ParserMessages.Count' "Invalid # of errors.");
Magic Number,Irony.Tests,OperatorGrammar,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,OperatorGrammar,The following statement contains a magic number: RegisterOperators(10' "+"' "-");
Magic Number,Irony.Tests,OperatorGrammar,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,OperatorGrammar,The following statement contains a magic number: RegisterOperators(20' "*"' "/");
Magic Number,Irony.Tests,OperatorGrammarHintsOnTerms,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,OperatorGrammarHintsOnTerms,The following statement contains a magic number: var unOpHint = ImplyPrecedenceHere(30);
Magic Number,Irony.Tests,OperatorGrammarHintsOnTerms,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,OperatorGrammarHintsOnTerms,The following statement contains a magic number: RegisterOperators(10' "+"' "-");
Magic Number,Irony.Tests,OperatorGrammarHintsOnTerms,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,OperatorGrammarHintsOnTerms,The following statement contains a magic number: RegisterOperators(20' "*"' "/");
Magic Number,Irony.Tests,OperatorGrammarHintsOnNonTerms,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,OperatorGrammarHintsOnNonTerms,The following statement contains a magic number: var unOpHint = ImplyPrecedenceHere(30);
Magic Number,Irony.Tests,OperatorGrammarHintsOnNonTerms,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,OperatorGrammarHintsOnNonTerms,The following statement contains a magic number: RegisterOperators(10' "+"' "-");
Magic Number,Irony.Tests,OperatorGrammarHintsOnNonTerms,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\OperatorTests.cs,OperatorGrammarHintsOnNonTerms,The following statement contains a magic number: RegisterOperators(20' "*"' "/");
Magic Number,Irony.Tests,TestHelper,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\TestHelper.cs,ParseInput,The following statement contains a magic number: Assert.IsTrue(tree.Tokens.Count >= 2' "Wrong # of tokens - expected at least 2. Input: " + input);
Magic Number,Irony.Tests,TestHelper,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\TestHelper.cs,ParseInput,The following statement contains a magic number: Assert.AreEqual(g.Terminator' tree.Tokens[count - 2].Text' "Input terminator not found in the second token. Input: " + input);
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: term = new FixedLengthLiteral("fixedLengthInteger"' 2' TypeCode.Int32);
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: Assert.IsTrue((int)token.Value == 12' "Failed to parse fixed-length integer - result value does not match.");
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: term = new FixedLengthLiteral("fixedLengthString"' 2' TypeCode.String);
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: Assert.IsTrue((int)token.Value == 12' "Failed to parse CSV integer - result value does not match.");
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: Assert.IsTrue((DateTime)token.Value == new DateTime(2009' 11' 15)' "Failed to parse quoted date - result value does not match.");
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: Assert.IsTrue((DateTime)token.Value == new DateTime(2009' 11' 15)' "Failed to parse quoted date - result value does not match.");
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: Assert.IsTrue((DateTime)token.Value == new DateTime(2009' 11' 15)' "Failed to parse quoted date - result value does not match.");
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_Ops,The following statement contains a magic number: Assert.AreEqual(6' result' "Unexpected computation result");
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_Ops,The following statement contains a magic number: Assert.AreEqual(8' result' "Unexpected computation result");
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_Ops,The following statement contains a magic number: Assert.AreEqual(17' result' "Unexpected computation result");
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_Ops,The following statement contains a magic number: Assert.AreEqual(6' result' "Unexpected computation result");
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_Ops,The following statement contains a magic number: Assert.AreEqual(3.0' (double) result' 0.0001' "Unexpected computation result");
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_Ops,The following statement contains a magic number: Assert.AreEqual(3.0' (double) result' 0.0001' "Unexpected computation result");
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_Ops,The following statement contains a magic number: Assert.AreEqual(29' result' "Operator precedence test failed.");
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_BuiltIns,The following statement contains a magic number: Assert.AreEqual(11.0' (double) result' 0.001' "Unexpected computation result");
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_BuiltIns,The following statement contains a magic number: Assert.AreEqual(11.0' (double) result' 0.001' "Unexpected computation result");
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_ArrayDictDataRow,The following statement contains a magic number: eval.Globals["primes"] = new int[] { 3' 5' 7' 11' 13 };
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_ArrayDictDataRow,The following statement contains a magic number: eval.Globals["primes"] = new int[] { 3' 5' 7' 11' 13 };
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_ArrayDictDataRow,The following statement contains a magic number: eval.Globals["primes"] = new int[] { 3' 5' 7' 11' 13 };
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_ArrayDictDataRow,The following statement contains a magic number: eval.Globals["primes"] = new int[] { 3' 5' 7' 11' 13 };
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_ArrayDictDataRow,The following statement contains a magic number: eval.Globals["primes"] = new int[] { 3' 5' 7' 11' 13 };
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_ArrayDictDataRow,The following statement contains a magic number: row["Age"] = 30;
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_ArrayDictDataRow,The following statement contains a magic number: Assert.AreEqual(11' result' "Unexpected computation result");
Magic Number,Irony.Tests,EvaluatorTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\EvaluatorTests.cs,TestEvaluator_ArrayDictDataRow,The following statement contains a magic number: Assert.AreEqual(12345' result' "Unexpected computation result");
Magic Number,Irony.Tests,RegexLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\RegexLiteralTests.cs,TestRegExLiteral,The following statement contains a magic number: Assert.AreEqual(match.Index' 2' "Failed to match a regular expression");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_General,The following statement contains a magic number: Assert.IsTrue((int)token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_General,The following statement contains a magic number: Assert.IsTrue(Math.Abs(Convert.ToDouble(token.Value) - 123.4) < 0.000001' "Failed to read float value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_General,The following statement contains a magic number: Assert.IsTrue(Math.Abs(Convert.ToDouble(token.Value) - 123.4) < 0.000001' "Failed to read float value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_SignedMatchesNegativeCorrectly,The following statement contains a magic number: Assert.AreEqual(-500' token.Value' "Negative number was parsed incorrectly; expected: {0}' scanned: {1}"' "-500"' token.Value);
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: double eps = 0.0001;
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: Assert.IsTrue((int)token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: Assert.IsTrue((UInt32)token.Value == 123' "Failed to read uint value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: Assert.IsTrue((long)token.Value == 123' "Failed to read long value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: Assert.IsTrue((ulong)token.Value == 123' "Failed to read ulong value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value #1");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 1234e-1) < eps' "Failed to read double value #2");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value  #3");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value  #4");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: Assert.IsTrue(Math.Abs((Single)token.Value - 123.4) < eps' "Failed to read float(single) value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: Assert.IsTrue(Math.Abs((decimal)token.Value - 123.4m) < Convert.ToDecimal(eps)' "Failed to read decimal value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_CSharp,The following statement contains a magic number: Assert.IsTrue((int)token.Value == 123' "Failed to read int value with trailing dot");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: double eps = 0.0001;
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue((int)token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue((Int16)token.Value == 123' "Failed to read short value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue((Int32)token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue((Int32)token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue((long)token.Value == 123' "Failed to read long value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue((Int64)token.Value == 123' "Failed to read long value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue((UInt16)token.Value == 123' "Failed to read ushort value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue((UInt32)token.Value == 123' "Failed to read uint value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue((ulong)token.Value == 123' "Failed to read ulong value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue((int)token.Value == 10' "Failed to read octal int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue((long)token.Value == 10' "Failed to read octal long value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value #1");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 1234e-1) < eps' "Failed to read double value #2");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value  #3");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value  #4");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value #5");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value #6");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue(Math.Abs((Single)token.Value - 123.4) < eps' "Failed to read float(single) value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue(Math.Abs((Single)token.Value - 123.4) < eps' "Failed to read float(single) value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue(Math.Abs((decimal)token.Value - 123.4m) < Convert.ToDecimal(eps)' "Failed to read decimal value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_VB,The following statement contains a magic number: Assert.IsTrue(Math.Abs((decimal)token.Value - 123.4m) < Convert.ToDecimal(eps)' "Failed to read decimal value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Python,The following statement contains a magic number: double eps = 0.0001;
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Python,The following statement contains a magic number: Assert.IsTrue((int)token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Python,The following statement contains a magic number: Assert.IsTrue((long)token.Value == 123' "Failed to read long value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Python,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value #1");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Python,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 1234e-1) < eps' "Failed to read double value #2");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Python,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value  #3");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Python,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value  #4");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Python,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 0.1234) < eps' "Failed to read double value with leading dot");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Python,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.0) < eps' "Failed to read double value with trailing dot");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Scheme,The following statement contains a magic number: double eps = 0.0001;
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Scheme,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value #1");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Scheme,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 1234e-1) < eps' "Failed to read single value #2");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Scheme,The following statement contains a magic number: Assert.IsTrue(Math.Abs((Single)token.Value - 1234e-1) < eps' "Failed to read single value #3");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_Scheme,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)token.Value - 123.4) < eps' "Failed to read double value  #4");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\NumberLiteralTests.cs,TestNumber_WithUnderscore,The following statement contains a magic number: Assert.IsTrue((int)token.Value == 1234567' "Failed to read int value with underscores.");
Magic Number,Irony.Tests.TokenPreviewResolution,ConflictResolutionTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\TokenPreviewResolution\ConflictResolutionTests.cs,TestConflictGrammar_HintsOnTerms,The following statement contains a magic number: Assert.AreEqual(2' tree.Root.ChildNodes.Count);
Magic Number,Irony.Tests.TokenPreviewResolution,ConflictResolutionTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\TokenPreviewResolution\ConflictResolutionTests.cs,TestConflictGrammar_HintsOnTerms,The following statement contains a magic number: Assert.AreEqual(3' tree.Root.ChildNodes.Count);
Magic Number,Irony.Tests.TokenPreviewResolution,ConflictResolutionTests,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony.Tests\TokenPreviewResolution\ConflictResolutionTests.cs,TestConflictGrammar_HintsOnTerms,The following statement contains a magic number: Assert.AreEqual("methodDef"' nodes[2].Term.Name);
