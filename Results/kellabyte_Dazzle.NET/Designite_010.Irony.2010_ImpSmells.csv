Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Irony.Ast,AstBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Ast\AstBuilder.cs,VerifyLanguageData,Cyclomatic complexity of the method is 10
Complex Method,Irony.Parsing,PreferredActionHint,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\SpecialActionsHints\PreferredActionHint.cs,Apply,Cyclomatic complexity of the method is 8
Complex Method,Irony.Parsing,ConditionalParserAction,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\SpecialActionsHints\ConditionalParserAction.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,Irony.Parsing,TokenPreviewHint,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\SpecialActionsHints\TokenPreviewHint.cs,Apply,Cyclomatic complexity of the method is 9
Complex Method,Irony.Parsing,RegexLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\RegexLiteral.cs,TryMatch,Cyclomatic complexity of the method is 10
Complex Method,Irony.Parsing,ParserDataPrinter,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\ParserDataPrinter.cs,PrintStateList,Cyclomatic complexity of the method is 13
Complex Method,Irony.Parsing,CompoundTerminalBase,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\CompoundTerminalBase.cs,TryMatch,Cyclomatic complexity of the method is 10
Complex Method,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,QuickParse,Cyclomatic complexity of the method is 10
Complex Method,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,ReadBody,Cyclomatic complexity of the method is 13
Complex Method,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,ConvertValue,Cyclomatic complexity of the method is 12
Complex Method,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,ConvertToFloat,Cyclomatic complexity of the method is 10
Complex Method,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,Init,Cyclomatic complexity of the method is 13
Complex Method,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,CompleteReadBody,Cyclomatic complexity of the method is 9
Complex Method,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,ConvertValue,Cyclomatic complexity of the method is 9
Complex Method,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,HandleSpecialEscape,Cyclomatic complexity of the method is 13
Complex Method,Irony.Parsing,IdentifierTerminal,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\IdentifierTerminal.cs,ReadBody,Cyclomatic complexity of the method is 9
Complex Method,Irony.Parsing,KeyTerm,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\KeyTerm.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,Irony.Parsing,CodeOutlineFilter,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\TokenFilters\CodeOutlineFilter.cs,ProcessToken,Cyclomatic complexity of the method is 12
Complex Method,Irony.Parsing.Construction,GrammarDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\GrammarDataBuilder.cs,CollectTermsRecursive,Cyclomatic complexity of the method is 10
Complex Method,Irony.Parsing.Construction,GrammarDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\GrammarDataBuilder.cs,InitTermLists,Cyclomatic complexity of the method is 8
Complex Method,Irony.Parsing.Construction,GrammarDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\GrammarDataBuilder.cs,ValidateGrammar,Cyclomatic complexity of the method is 10
Complex Method,Irony.Parsing.Construction,ParserStateData,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\ParserDataBuilder_HelperClasses.cs,AddItem,Cyclomatic complexity of the method is 9
Complex Method,Irony.Parsing.Construction,ParserDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\ParserDataBuilder.cs,CreateLookbackTransitions,Cyclomatic complexity of the method is 9
Complex Method,Irony.Parsing.Construction,ParserDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\ParserDataBuilder.cs,ComputeConflicts,Cyclomatic complexity of the method is 8
Complex Method,Irony.Parsing.Construction,ScannerDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\ScannerDataBuilder.cs,BuildTerminalsLookupTable,Cyclomatic complexity of the method is 10
Long Parameter List,Irony.Parsing,ParserTraceEntry,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\ParserTrace.cs,ParserTraceEntry,The method has 5 parameters. Parameters: state' stackTop' input' message' isError
Long Parameter List,Irony.Parsing,WikiBlockTerminal,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\WikiTerminals\WikiBlockTerminal.cs,WikiBlockTerminal,The method has 5 parameters. Parameters: name' blockType' openTag' closeTag' htmlElementName
Long Parameter List,Irony.Parsing,WikiTagTerminal,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\WikiTerminals\WikiTagTerminal.cs,WikiTagTerminal,The method has 5 parameters. Parameters: name' termType' openTag' closeTag' htmlElementName
Long Parameter List,Irony.Parsing,WikiTerminalBase,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\WikiTerminals\_WikiTerminalBase.cs,WikiTerminalBase,The method has 5 parameters. Parameters: name' termType' openTag' closeTag' htmlElementName
Long Statement,Irony.Parsing,CustomParserAction,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\SpecialActionsHints\CustomActionHintAction.cs,Execute,The length of the statement  "      // Remember old state and input; if they don't change after custom action - it is error' we may fall into an endless loop " is 121.
Long Statement,Irony.Parsing,ConditionalParserAction,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\SpecialActionsHints\ConditionalParserAction.cs,Execute,The length of the statement  "        context.AddParserError("Fatal parser error: no conditions matched in conditional parser action' and default action is null." + " is 126.
Long Statement,Irony.Parsing,TokenPreviewHint,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\SpecialActionsHints\TokenPreviewHint.cs,Apply,The length of the statement  "      // On the other head we may call this method multiple times for different LRItems if we have multiple hints in the same state.  " is 126.
Long Statement,Irony.Parsing,ReduceParserAction,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\ParserActions\ReduceParserActions.cs,CompleteReduce,The length of the statement  "      //TODO: this special case will be handled differently. A ToTerm method should be expanded to allow "combined" terms like "NOT LIKE". " is 132.
Long Statement,Irony.Parsing,ReduceParserAction,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\ParserActions\ReduceParserActions.cs,CompleteReduce,The length of the statement  "      // OLD COMMENT: A special case is SQL operator "NOT LIKE" which consists of 2 tokens. We therefore inherit "max" precedence from any children " is 141.
Long Statement,Irony.Parsing,ReduceParserAction,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\ParserActions\ReduceParserActions.cs,CompleteReduce,The length of the statement  "      //Special case: if a non-terminal is Transient (ex: BinOp)' then result node is not this NonTerminal' but its its child (ex: symbol).  " is 133.
Long Statement,Irony.Parsing,ReduceParserAction,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\ParserActions\ReduceParserActions.cs,CompleteReduce,The length of the statement  "      // Shift action will invoke OnShifting on actual term being shifted (symbol); we need to invoke Shifting even on NonTerminal itself " is 131.
Long Statement,Irony.Parsing,ReduceListContainerParserAction,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\ParserActions\ReduceParserActions.cs,GetResultNode,The length of the statement  "        var listNode = context.ParserStack[firstChildIndex]; //get the transient list with all members - it is the first child node " is 123.
Long Statement,Irony.Parsing,RegexLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\RegexLiteral.cs,TryMatch,The length of the statement  "          return context.CreateErrorToken(Resources.ErrDupRegexSwitch' source.PreviewChar); // "Duplicate switch '{0}' for regular expression"  " is 132.
Long Statement,Irony.Parsing,RegexLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\RegexLiteral.cs,TryMatch,The length of the statement  "          return context.CreateErrorToken(Resources.ErrInvRegexSwitch' currChar); // "Invalid switch '{0}' for regular expression"   " is 120.
Long Statement,Irony.Parsing,FreeTextLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\FreeTextLiteral.cs,TryMatchContentSimple,The length of the statement  "      var stringComp = Grammar.CaseSensitive ? StringComparison.InvariantCulture : StringComparison.InvariantCultureIgnoreCase; " is 121.
Long Statement,Irony.Parsing,ParsingContext,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\ParsingContext.cs,GetExpectedTermSet,The length of the statement  "        CurrentParserState.ReportedExpectedSet = Construction.ParserDataBuilder.ComputeGroupedExpectedSetForState(Language.Grammar' CurrentParserState); " is 144.
Long Statement,Irony.Parsing,CompoundTerminalBase,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\CompoundTerminalBase.cs,ReadPrefix,The length of the statement  "      var comparisonType = CaseSensitivePrefixesSuffixes ? StringComparison.InvariantCulture : StringComparison.InvariantCultureIgnoreCase; " is 133.
Long Statement,Irony.Parsing,CompoundTerminalBase,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\CompoundTerminalBase.cs,ReadSuffix,The length of the statement  "      var comparisonType = CaseSensitivePrefixesSuffixes ? StringComparison.InvariantCulture : StringComparison.InvariantCultureIgnoreCase; " is 133.
Long Statement,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,OnValidateToken,The length of the statement  "          context.CurrentToken = context.CreateErrorToken(Resources.ErrNoLetterAfterNum); // "Number cannot be followed by a letter."  " is 123.
Long Statement,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,ConvertValue,The length of the statement  "              TryConvertToLong(details' typeCode == TypeCode.UInt64); //try to convert to Long/Ulong and place the result into details.Value field; " is 133.
Long Statement,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,QuickConvertToInt32,The length of the statement  "      if (radix == 10 && details.Body.Length > 10) return false;    //10 digits is maximum for int32; int32.MaxValue = 2 147 483 647 " is 126.
Long Statement,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,QuickConvertToDouble,The length of the statement  "      if (!double.TryParse(details.Body' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out dvalue)) return false; " is 123.
Long Statement,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,Init,The length of the statement  "        grammarData.Language.Errors.Add(GrammarErrorLevel.Error' null' Resources.ErrInvStrDef' this.Name); //"Error in string literal [{0}]: No start/end symbols specified." " is 165.
Long Statement,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,Init,The length of the statement  "          grammarData.Language.Errors.Add(GrammarErrorLevel.Error' null' Resources.ErrTemplNoSettings' this.Name); //"Error in string literal [{0}]: IsTemplate flag is set' but TemplateSettings is not provided." " is 201.
Long Statement,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,HandleSpecialEscape,The length of the statement  "              details.Error = string.Format(Resources.ErrBadUnEscape' segment.Substring(len + 1)' len);// "Invalid unicode escape ({0})' expected {1} hex digits." " is 148.
Long Statement,Irony.Parsing,KeyTerm,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\KeyTerm.cs,Init,The length of the statement  "      // Priority - determines the order in which multiple terminals try to match input for a given current char in the input. " is 120.
Long Statement,Irony.Parsing,KeyTerm,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\KeyTerm.cs,Init,The length of the statement  "      // For a given input char the scanner looks up the collection of terminals that may match this input symbol. It is the order " is 124.
Long Statement,Irony.Parsing,KeyTerm,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\KeyTerm.cs,Init,The length of the statement  "      // in this collection that is determined by Priority value - the higher the priority' the earlier the terminal gets a chance  " is 124.
Long Statement,Irony.Parsing,KeyTerm,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\KeyTerm.cs,Init,The length of the statement  "      // Keywords found in grammar by default have lowest priority to allow other terminals (like identifiers)to check the input first. " is 129.
Long Statement,Irony.Parsing,KeyTerm,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\KeyTerm.cs,Init,The length of the statement  "      // Additionally' longer symbols have higher priority' so symbols like "+=" should have higher priority value than "+" symbol.  " is 125.
Long Statement,Irony.Parsing,KeyTerm,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\KeyTerm.cs,TokenToString,The length of the statement  "      var keyw = Flags.IsSet(TermFlags.IsKeyword)? Resources.LabelKeyword : Resources.LabelKeySymbol ; //"(Keyword)" : "(Key symbol)" " is 127.
Long Statement,Irony.Parsing,Grammar,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Grammar\Grammar.cs,MakeListRule,The length of the statement  "      //"list" is the real list for which we will construct expression - it is either extra plus-list or original listNonTerminal.  " is 124.
Long Statement,Irony.Parsing.Construction,GrammarDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\GrammarDataBuilder.cs,InitTermLists,The length of the statement  "      foreach (BnfTerm term in _grammarData.AllTerms) {  //remember - we may have hints' so it's not only terminals and non-terminals " is 127.
Long Statement,Irony.Parsing.Construction,GrammarDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\GrammarDataBuilder.cs,ValidateGrammar,The length of the statement  "        _language.Errors.Add(GrammarErrorLevel.Error' null' Resources.ErrTransientNtMustHaveOneTerm'invalidTransSet.ToString()); " is 120.
Long Statement,Irony.Parsing.Construction,ParserDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\ParserDataBuilder.cs,ComputeLookaheads,The length of the statement  "          _language.Errors.Add(GrammarErrorLevel.InternalError' reduceItem.State' "Reduce item '{0}' in state {1} has no lookaheads."' reduceItem.Core' reduceItem.State); " is 160.
Long Statement,Irony.Parsing.Construction,ParserDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\ParserDataBuilder.cs,HandleUnresolvedConflicts,The length of the statement  "          _language.Errors.Add(GrammarErrorLevel.Conflict' state' Resources.ErrSRConflict' state' shiftReduceConflicts.ToString()); " is 121.
Long Statement,Irony.Parsing.Construction,ParserDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\ParserDataBuilder.cs,HandleUnresolvedConflicts,The length of the statement  "          _language.Errors.Add(GrammarErrorLevel.Conflict' state' Resources.ErrRRConflict' state' reduceReduceConflicts.ToString()); " is 122.
Long Statement,Irony.Parsing.Construction,ParserDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\ParserDataBuilder.cs,HandleUnresolvedConflicts,The length of the statement  "        //stateData.Conflicts.Clear(); -- do not clear them' let the set keep the auto-resolved conflicts' may find more use for this later " is 131.
Complex Conditional,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,ReadBody,The conditional expression  "!allowFloat && foundDigits && (isDot || isExpSymbol)"  is complex.
Complex Conditional,Irony.Parsing,Scanner,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Scanner\Scanner.cs,ComputeCurrentTerminals,The conditional expression  "Context.Status == ParserStatus.Recovering || Context.Status == ParserStatus.Previewing            || Context.CurrentParserState == null || _grammar.LanguageFlags.IsSet(LanguageFlags.DisableScannerParserLink)            || Context.Mode == ParseMode.VsLineScan"  is complex.
Virtual Method Call from Constructor,Irony.Parsing,Scanner,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Scanner\Scanner.cs,Scanner,The constructor "Scanner" calls a virtual method "CreateTokenFilters".
Virtual Method Call from Constructor,Irony.Parsing,Scanner,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Scanner\Scanner.cs,Scanner,The constructor "Scanner" calls a virtual method "BeginFiltering".
Empty Catch Block,Irony.Parsing,StringSubType,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,LongerStartFirst,The method has an empty catch block.
Empty Catch Block,Irony,StringList,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Utilities\StringUtils.cs,LongerFirst,The method has an empty catch block.
Magic Number,Irony.Parsing,DataLiteralBase,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\DataLiteralBase.cs,ConvertValue,The following statement contains a magic number: switch(DataType) {          case TypeCode.String:   return textValue;           case TypeCode.DateTime: return DateTime.ParseExact(textValue' DateTimeFormat' context.Culture);          case TypeCode.Single:          case TypeCode.Double:            var dValue = Convert.ToDouble(textValue' context.Culture);             if (DataType == TypeCode.Double)  return dValue;             return Convert.ChangeType(dValue' DataType' context.Culture);            default: //integer types            var iValue = (IntRadix == 10)? Convert.ToInt64(textValue' context.Culture) : Convert.ToInt64(textValue' IntRadix);            if (DataType == TypeCode.Int64)  return iValue;             return Convert.ChangeType(iValue' DataType' context.Culture);        }
Magic Number,Irony.Parsing,DsvLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\DsvLiteral.cs,ReadQuotedBody,The following statement contains a magic number: sb = new StringBuilder(100);
Magic Number,Irony.Parsing,RegexLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\RegexLiteral.cs,TryMatch,The following statement contains a magic number: var patternLen = source.PreviewPosition - source.Location.Position - 2;
Magic Number,Irony.Parsing,WikiTextTerminal,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\WikiTerminals\WikiTextTerminal.cs,TryMatch,The following statement contains a magic number: source.PreviewPosition += 2;
Magic Number,Irony.Parsing,SourceStream,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Scanner\SourceStream.cs,SourceStream,The following statement contains a magic number: _tabWidth = 8;
Magic Number,Irony.Parsing,SourceStream,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Scanner\SourceStream.cs,ToString,The following statement contains a magic number: result = _text.Substring(p' 20) + Resources.LabelSrcHaveMore;
Magic Number,Irony.Parsing,SourceStream,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Scanner\SourceStream.cs,ToString,The following statement contains a magic number: p + 20 < _textLength
Magic Number,Irony.Parsing,NonTerminal,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Grammar\NonTerminal.cs,ConvertNodeCaptionTemplate,The following statement contains a magic number: index < 100
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,QuickConvertToInt32,The following statement contains a magic number: radix == 10 && details.Body.Length > 10
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,QuickConvertToInt32,The following statement contains a magic number: radix == 10 && details.Body.Length > 10
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,QuickConvertToInt32,The following statement contains a magic number: radix == 10
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,TryConvertToLong,The following statement contains a magic number: radix == 10
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,ConvertToBigInteger,The following statement contains a magic number: radix == 10
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetRadix,The following statement contains a magic number: return 16;
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetRadix,The following statement contains a magic number: return 8;
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetRadix,The following statement contains a magic number: return 2;
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetRadix,The following statement contains a magic number: return 10;
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetSafeWordLength,The following statement contains a magic number: return 15;
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetSafeWordLength,The following statement contains a magic number: return 21;
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetSafeWordLength,The following statement contains a magic number: return 63;
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetSafeWordLength,The following statement contains a magic number: return 19;
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetSafeWordRadix,The following statement contains a magic number: return 1152921504606846976;
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetSafeWordRadix,The following statement contains a magic number: return 9223372036854775808;
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetSafeWordRadix,The following statement contains a magic number: return 9223372036854775808;
Magic Number,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,GetSafeWordRadix,The following statement contains a magic number: return 10000000000000000000;
Magic Number,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,HandleSpecialEscape,The following statement contains a magic number: switch (first) {          case 'u':          case 'U':            if (details.IsSet((short)StringOptions.AllowsUEscapes)) {              len = (first == 'u' ? 4 : 8);              if (segment.Length < len + 1) {                details.Error = string.Format(Resources.ErrBadUnEscape' segment.Substring(len + 1)' len);// "Invalid unicode escape ({0})' expected {1} hex digits."                return segment;              }              digits = segment.Substring(1' len);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(len + 1);              return result;             }//if            break;          case 'x':            if (details.IsSet((short)StringOptions.AllowsXEscapes)) {              //x-escape allows variable number of digits' from one to 4; let's count them              p = 1; //current position              while (p < 5 && p < segment.Length) {                if (Strings.HexDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              if (p <= 1) {                details.Error = Resources.ErrBadXEscape; // @"Invalid \x escape' at least one digit expected.";                return segment;              }              digits = segment.Substring(1' p - 1);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(p);              return result;            }//if            break;          case '0':  case '1':  case '2':  case '3':  case '4':  case '5':   case '6': case '7':            if (details.IsSet((short)StringOptions.AllowsOctalEscapes)) {              //octal escape allows variable number of digits' from one to 3; let's count them              p = 0; //current position              while (p < 3 && p < segment.Length) {                if (Strings.OctalDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              digits = segment.Substring(0' p);              ch = (char)Convert.ToUInt32(digits' 8);              result = ch + segment.Substring(p);              return result;            }//if            break;        }
Magic Number,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,HandleSpecialEscape,The following statement contains a magic number: switch (first) {          case 'u':          case 'U':            if (details.IsSet((short)StringOptions.AllowsUEscapes)) {              len = (first == 'u' ? 4 : 8);              if (segment.Length < len + 1) {                details.Error = string.Format(Resources.ErrBadUnEscape' segment.Substring(len + 1)' len);// "Invalid unicode escape ({0})' expected {1} hex digits."                return segment;              }              digits = segment.Substring(1' len);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(len + 1);              return result;             }//if            break;          case 'x':            if (details.IsSet((short)StringOptions.AllowsXEscapes)) {              //x-escape allows variable number of digits' from one to 4; let's count them              p = 1; //current position              while (p < 5 && p < segment.Length) {                if (Strings.HexDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              if (p <= 1) {                details.Error = Resources.ErrBadXEscape; // @"Invalid \x escape' at least one digit expected.";                return segment;              }              digits = segment.Substring(1' p - 1);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(p);              return result;            }//if            break;          case '0':  case '1':  case '2':  case '3':  case '4':  case '5':   case '6': case '7':            if (details.IsSet((short)StringOptions.AllowsOctalEscapes)) {              //octal escape allows variable number of digits' from one to 3; let's count them              p = 0; //current position              while (p < 3 && p < segment.Length) {                if (Strings.OctalDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              digits = segment.Substring(0' p);              ch = (char)Convert.ToUInt32(digits' 8);              result = ch + segment.Substring(p);              return result;            }//if            break;        }
Magic Number,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,HandleSpecialEscape,The following statement contains a magic number: switch (first) {          case 'u':          case 'U':            if (details.IsSet((short)StringOptions.AllowsUEscapes)) {              len = (first == 'u' ? 4 : 8);              if (segment.Length < len + 1) {                details.Error = string.Format(Resources.ErrBadUnEscape' segment.Substring(len + 1)' len);// "Invalid unicode escape ({0})' expected {1} hex digits."                return segment;              }              digits = segment.Substring(1' len);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(len + 1);              return result;             }//if            break;          case 'x':            if (details.IsSet((short)StringOptions.AllowsXEscapes)) {              //x-escape allows variable number of digits' from one to 4; let's count them              p = 1; //current position              while (p < 5 && p < segment.Length) {                if (Strings.HexDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              if (p <= 1) {                details.Error = Resources.ErrBadXEscape; // @"Invalid \x escape' at least one digit expected.";                return segment;              }              digits = segment.Substring(1' p - 1);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(p);              return result;            }//if            break;          case '0':  case '1':  case '2':  case '3':  case '4':  case '5':   case '6': case '7':            if (details.IsSet((short)StringOptions.AllowsOctalEscapes)) {              //octal escape allows variable number of digits' from one to 3; let's count them              p = 0; //current position              while (p < 3 && p < segment.Length) {                if (Strings.OctalDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              digits = segment.Substring(0' p);              ch = (char)Convert.ToUInt32(digits' 8);              result = ch + segment.Substring(p);              return result;            }//if            break;        }
Magic Number,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,HandleSpecialEscape,The following statement contains a magic number: switch (first) {          case 'u':          case 'U':            if (details.IsSet((short)StringOptions.AllowsUEscapes)) {              len = (first == 'u' ? 4 : 8);              if (segment.Length < len + 1) {                details.Error = string.Format(Resources.ErrBadUnEscape' segment.Substring(len + 1)' len);// "Invalid unicode escape ({0})' expected {1} hex digits."                return segment;              }              digits = segment.Substring(1' len);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(len + 1);              return result;             }//if            break;          case 'x':            if (details.IsSet((short)StringOptions.AllowsXEscapes)) {              //x-escape allows variable number of digits' from one to 4; let's count them              p = 1; //current position              while (p < 5 && p < segment.Length) {                if (Strings.HexDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              if (p <= 1) {                details.Error = Resources.ErrBadXEscape; // @"Invalid \x escape' at least one digit expected.";                return segment;              }              digits = segment.Substring(1' p - 1);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(p);              return result;            }//if            break;          case '0':  case '1':  case '2':  case '3':  case '4':  case '5':   case '6': case '7':            if (details.IsSet((short)StringOptions.AllowsOctalEscapes)) {              //octal escape allows variable number of digits' from one to 3; let's count them              p = 0; //current position              while (p < 3 && p < segment.Length) {                if (Strings.OctalDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              digits = segment.Substring(0' p);              ch = (char)Convert.ToUInt32(digits' 8);              result = ch + segment.Substring(p);              return result;            }//if            break;        }
Magic Number,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,HandleSpecialEscape,The following statement contains a magic number: switch (first) {          case 'u':          case 'U':            if (details.IsSet((short)StringOptions.AllowsUEscapes)) {              len = (first == 'u' ? 4 : 8);              if (segment.Length < len + 1) {                details.Error = string.Format(Resources.ErrBadUnEscape' segment.Substring(len + 1)' len);// "Invalid unicode escape ({0})' expected {1} hex digits."                return segment;              }              digits = segment.Substring(1' len);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(len + 1);              return result;             }//if            break;          case 'x':            if (details.IsSet((short)StringOptions.AllowsXEscapes)) {              //x-escape allows variable number of digits' from one to 4; let's count them              p = 1; //current position              while (p < 5 && p < segment.Length) {                if (Strings.HexDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              if (p <= 1) {                details.Error = Resources.ErrBadXEscape; // @"Invalid \x escape' at least one digit expected.";                return segment;              }              digits = segment.Substring(1' p - 1);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(p);              return result;            }//if            break;          case '0':  case '1':  case '2':  case '3':  case '4':  case '5':   case '6': case '7':            if (details.IsSet((short)StringOptions.AllowsOctalEscapes)) {              //octal escape allows variable number of digits' from one to 3; let's count them              p = 0; //current position              while (p < 3 && p < segment.Length) {                if (Strings.OctalDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              digits = segment.Substring(0' p);              ch = (char)Convert.ToUInt32(digits' 8);              result = ch + segment.Substring(p);              return result;            }//if            break;        }
Magic Number,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,HandleSpecialEscape,The following statement contains a magic number: switch (first) {          case 'u':          case 'U':            if (details.IsSet((short)StringOptions.AllowsUEscapes)) {              len = (first == 'u' ? 4 : 8);              if (segment.Length < len + 1) {                details.Error = string.Format(Resources.ErrBadUnEscape' segment.Substring(len + 1)' len);// "Invalid unicode escape ({0})' expected {1} hex digits."                return segment;              }              digits = segment.Substring(1' len);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(len + 1);              return result;             }//if            break;          case 'x':            if (details.IsSet((short)StringOptions.AllowsXEscapes)) {              //x-escape allows variable number of digits' from one to 4; let's count them              p = 1; //current position              while (p < 5 && p < segment.Length) {                if (Strings.HexDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              if (p <= 1) {                details.Error = Resources.ErrBadXEscape; // @"Invalid \x escape' at least one digit expected.";                return segment;              }              digits = segment.Substring(1' p - 1);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(p);              return result;            }//if            break;          case '0':  case '1':  case '2':  case '3':  case '4':  case '5':   case '6': case '7':            if (details.IsSet((short)StringOptions.AllowsOctalEscapes)) {              //octal escape allows variable number of digits' from one to 3; let's count them              p = 0; //current position              while (p < 3 && p < segment.Length) {                if (Strings.OctalDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              digits = segment.Substring(0' p);              ch = (char)Convert.ToUInt32(digits' 8);              result = ch + segment.Substring(p);              return result;            }//if            break;        }
Magic Number,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,HandleSpecialEscape,The following statement contains a magic number: switch (first) {          case 'u':          case 'U':            if (details.IsSet((short)StringOptions.AllowsUEscapes)) {              len = (first == 'u' ? 4 : 8);              if (segment.Length < len + 1) {                details.Error = string.Format(Resources.ErrBadUnEscape' segment.Substring(len + 1)' len);// "Invalid unicode escape ({0})' expected {1} hex digits."                return segment;              }              digits = segment.Substring(1' len);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(len + 1);              return result;             }//if            break;          case 'x':            if (details.IsSet((short)StringOptions.AllowsXEscapes)) {              //x-escape allows variable number of digits' from one to 4; let's count them              p = 1; //current position              while (p < 5 && p < segment.Length) {                if (Strings.HexDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              if (p <= 1) {                details.Error = Resources.ErrBadXEscape; // @"Invalid \x escape' at least one digit expected.";                return segment;              }              digits = segment.Substring(1' p - 1);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(p);              return result;            }//if            break;          case '0':  case '1':  case '2':  case '3':  case '4':  case '5':   case '6': case '7':            if (details.IsSet((short)StringOptions.AllowsOctalEscapes)) {              //octal escape allows variable number of digits' from one to 3; let's count them              p = 0; //current position              while (p < 3 && p < segment.Length) {                if (Strings.OctalDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              digits = segment.Substring(0' p);              ch = (char)Convert.ToUInt32(digits' 8);              result = ch + segment.Substring(p);              return result;            }//if            break;        }
Magic Number,Irony.Parsing,IdentifierTerminal,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\IdentifierTerminal.cs,ReadUnicodeEscape,The following statement contains a magic number: switch (source.PreviewChar) {          case 'u': len = 4; break;          case 'U': len = 8; break;           default:            details.Error = Resources.ErrInvEscSymbol; // "Invalid escape symbol' expected 'u' or 'U' only."            return '\0';         }
Magic Number,Irony.Parsing,IdentifierTerminal,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\IdentifierTerminal.cs,ReadUnicodeEscape,The following statement contains a magic number: switch (source.PreviewChar) {          case 'u': len = 4; break;          case 'U': len = 8; break;           default:            details.Error = Resources.ErrInvEscSymbol; // "Invalid escape symbol' expected 'u' or 'U' only."            return '\0';         }
Magic Number,Irony.Parsing,IdentifierTerminal,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\IdentifierTerminal.cs,ReadUnicodeEscape,The following statement contains a magic number: char result = (char)Convert.ToUInt32(digits' 16);
Magic Number,Irony.Parsing.Construction,ParserDataBuilder,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Data\Construction\ParserDataBuilder.cs,ComputeLR0ItemSetKey,The following statement contains a magic number: StringBuilder sb = new StringBuilder(100);
Missing Default,Irony.Parsing,PreferredActionHint,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\SpecialActionsHints\PreferredActionHint.cs,Apply,The following switch statement is missing a default case: switch (ActionType) {          case PreferredActionType.Shift:            var currTerm = owner.Core.Current as Terminal;            if (currTerm == null || !conflicts.Contains(currTerm)) return; //nothing to do            //Current term for shift item (hint owner) is a conflict - resolve it with shift action            var newState = owner.ShiftedItem.State;            var shiftAction = new ShiftParserAction(owner);            state.Actions[currTerm] = shiftAction;            conflicts.Remove(currTerm);            return;          case PreferredActionType.Reduce:            if (!owner.Core.IsFinal) return; //we take care of reduce items only here            //we have a reduce item with "Reduce" hint. Check if any of lookaheads are in conflict            ReduceParserAction reduceAction = null;            foreach (var lkhead in owner.Lookaheads)              if (conflicts.Contains(lkhead)) {                if (reduceAction == null)                  reduceAction = new ReduceParserAction(owner.Core.Production);                state.Actions[lkhead] = reduceAction;                conflicts.Remove(lkhead);              }            return;        }
Missing Default,Irony.Parsing,TokenPreviewHint,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Parser\SpecialActionsHints\TokenPreviewHint.cs,Apply,The following switch statement is missing a default case: switch (_actionType) {          case PreferredActionType.Reduce:            if (!owner.Core.IsFinal) return;             //it is reduce action; find lookaheads in conflict            var lkhs = owner.Lookaheads;            if (lkhs.Count == 0) return; //if no conflicts then nothing to do            var reduceAction = new ReduceParserAction(owner.Core.Production);            var reduceCondEntry = new ConditionalEntry(CheckCondition' reduceAction' _description);            foreach (var lkh in lkhs) {              AddConditionalEntry(state' lkh' reduceCondEntry);              if (conflicts.Contains(lkh))                conflicts.Remove(lkh);            }            break;           case PreferredActionType.Shift:            var curr = owner.Core.Current as Terminal;            if (curr == null) return; //it is either reduce item' or curr is a NonTerminal - we cannot shift it            var shiftAction = new ShiftParserAction(owner);            var shiftCondEntry = new ConditionalEntry(CheckCondition' shiftAction' _description);            AddConditionalEntry(state' curr' shiftCondEntry);            if (conflicts.Contains(curr))              conflicts.Remove(curr);            break;         }
Missing Default,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,ConvertValue,The following switch statement is missing a default case: switch (details.TypeCodes[0]) {          case TypeCode.Int32:             if (QuickConvertToInt32(details)) return true;            break;          case TypeCode.Double:            if (QuickConvertToDouble(details)) return true;            break;        }
Missing Default,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,ConvertValue,The following switch statement is missing a default case: switch (typeCode) {            case TypeCode.Single:   case TypeCode.Double:  case TypeCode.Decimal:  case TypeCodeImaginary:              return ConvertToFloat(typeCode' details);            case TypeCode.SByte:    case TypeCode.Byte:    case TypeCode.Int16:    case TypeCode.UInt16:            case TypeCode.Int32:    case TypeCode.UInt32:  case TypeCode.Int64:    case TypeCode.UInt64:              if (details.Value == null) //if it is not done yet                TryConvertToLong(details' typeCode == TypeCode.UInt64); //try to convert to Long/Ulong and place the result into details.Value field;              if(TryCastToIntegerType(typeCode' details)) //now try to cast the ULong value to the target type                 return true;              break;            case TypeCodeBigInt:              if (ConvertToBigInteger(details)) return true;              break;           }
Missing Default,Irony.Parsing,NumberLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\NumberLiteral.cs,ConvertToFloat,The following switch statement is missing a default case: switch (typeCode) {          case TypeCode.Double:          case TypeCodeImaginary:            double dValue;            if (!Double.TryParse(body' NumberStyles.Float' CultureInfo.InvariantCulture' out dValue)) return false;            if (typeCode == TypeCodeImaginary)              details.Value = new Complex64(0' dValue);            else              details.Value = dValue;             return true;          case TypeCode.Single:            float fValue;            if (!Single.TryParse(body' NumberStyles.Float' CultureInfo.InvariantCulture' out fValue)) return false;            details.Value = fValue;            return true;           case TypeCode.Decimal:            decimal decValue;            if (!Decimal.TryParse(body' NumberStyles.Float' CultureInfo.InvariantCulture' out decValue)) return false;            details.Value = decValue;            return true;          }
Missing Default,Irony.Parsing,StringLiteral,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\Terminals\StringLiteral.cs,HandleSpecialEscape,The following switch statement is missing a default case: switch (first) {          case 'u':          case 'U':            if (details.IsSet((short)StringOptions.AllowsUEscapes)) {              len = (first == 'u' ? 4 : 8);              if (segment.Length < len + 1) {                details.Error = string.Format(Resources.ErrBadUnEscape' segment.Substring(len + 1)' len);// "Invalid unicode escape ({0})' expected {1} hex digits."                return segment;              }              digits = segment.Substring(1' len);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(len + 1);              return result;             }//if            break;          case 'x':            if (details.IsSet((short)StringOptions.AllowsXEscapes)) {              //x-escape allows variable number of digits' from one to 4; let's count them              p = 1; //current position              while (p < 5 && p < segment.Length) {                if (Strings.HexDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              if (p <= 1) {                details.Error = Resources.ErrBadXEscape; // @"Invalid \x escape' at least one digit expected.";                return segment;              }              digits = segment.Substring(1' p - 1);              ch = (char) Convert.ToUInt32(digits' 16);              result = ch + segment.Substring(p);              return result;            }//if            break;          case '0':  case '1':  case '2':  case '3':  case '4':  case '5':   case '6': case '7':            if (details.IsSet((short)StringOptions.AllowsOctalEscapes)) {              //octal escape allows variable number of digits' from one to 3; let's count them              p = 0; //current position              while (p < 3 && p < segment.Length) {                if (Strings.OctalDigits.IndexOf(segment[p]) < 0) break;                p++;              }              //p now point to char right after the last digit              digits = segment.Substring(0' p);              ch = (char)Convert.ToUInt32(digits' 8);              result = ch + segment.Substring(p);              return result;            }//if            break;        }
Missing Default,Irony.Parsing,CodeOutlineFilter,D:\research\architectureSmells\repos\kellabyte_Dazzle.NET\lib\Irony\src\Irony\Parsing\TokenFilters\CodeOutlineFilter.cs,ProcessEofToken,The following switch statement is missing a default case: switch (_context.Mode) {          case ParseMode.File:            pushDedents = _produceIndents; //Do dedents if token filter tracks indents            break;          case ParseMode.CommandLine:            //only if user entered empty line' we dedent all            pushDedents = _produceIndents && _doubleEof;            pushEos = !_prevIsContinuation && !_doubleEof; //if previous symbol is continuation symbol then don't push Eos            break;          case ParseMode.VsLineScan:            pushDedents = false; //Do not dedent at all on every line end            break;        }
