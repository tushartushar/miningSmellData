Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OWASP.WebGoat.NET,RebuildDatabase,C:\repos\jerryhoff_WebGoat.NET\WebGoat\dbtest.aspx.cs,UpdateConfigFile,Cyclomatic complexity of the method is 9
Long Parameter List,OWASP.WebGoat.NET,PathManipulation,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\PathManipulation.aspx.cs,ResponseFile,The method has 5 parameters. Parameters: _Request' _Response' _fileName' _fullPath' _speed
Long Identifier,OWASP.WebGoat.NET,AddNewUser,C:\repos\jerryhoff_WebGoat.NET\WebGoat\AddNewUser.aspx.cs,,The length of the parameter InvalidUserNameOrPasswordMessage is 32.
Long Statement,OWASP.WebGoat.NET,ForgotPassword,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\ForgotPassword.aspx.cs,ButtonRecoverPassword_Click,The length of the statement  "                    labelPassword.Text = "Security Question Challenge Successfully Completed! <br/>Your password is: " + getPassword(txtEmail.Text); " is 128.
Long Statement,OWASP.WebGoat.NET,UploadPathManipulation,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\UploadPathManipulation.aspx.cs,btnUpload_Click,The length of the statement  "                    labelUpload.Text = "<div class='success' style='text-align:center'>The file " + FileUpload1.FileName + " has been saved in to the WebGoatCoins/uploads directory</div>"; " is 168.
Long Statement,OWASP.WebGoat.NET,StoredXSS,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\StoredXSS.aspx.cs,LoadComments,The length of the statement  "                comments += "<strong>Email:</strong>" + row["email"] + "<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>"; " is 146.
Long Statement,OWASP.WebGoat.NET,StoredXSS,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\StoredXSS.aspx.cs,FixedLoadComments,The length of the statement  "                comments += "<strong>Email:</strong>" + Server.HtmlEncode(row["email"].ToString()) + "<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>"; " is 176.
Long Statement,OWASP.WebGoat.NET,PathManipulation,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\PathManipulation.aspx.cs,ResponseFile,The length of the statement  "	                _Response.AddHeader("Content-Disposition"' "attachment;filename=" + HttpUtility.UrlEncode(_fileName' System.Text.Encoding.UTF8)); " is 129.
Long Statement,OWASP.WebGoat.NET,AddNewUser,C:\repos\jerryhoff_WebGoat.NET\WebGoat\AddNewUser.aspx.cs,CreateAccountButton_Click,The length of the statement  "	                CreateAccountResults.Text = "The password you provided is invalid. It must be seven characters long and have at least one non-alphanumeric character."; " is 151.
Long Statement,OWASP.WebGoat.NET.WebGoatCoins,Catalog,C:\repos\jerryhoff_WebGoat.NET\WebGoat\WebGoatCoins\Catalog.aspx.cs,Page_Load,The length of the statement  "                lblOutput.Text += "<p/><h2 class='title-regular-2 clearfix'>Category: " + catRow["catName"].ToString() + "</h2><hr/><p/>\n"; " is 124.
Long Statement,OWASP.WebGoat.NET.WebGoatCoins,Catalog,C:\repos\jerryhoff_WebGoat.NET\WebGoat\WebGoatCoins\Catalog.aspx.cs,Page_Load,The length of the statement  "                    lblOutput.Text += "<img src=\"../resources/images/moreinfo1.png\" onmouseover=\"this.src='../resources/images/moreinfo2.png';\" onmouseout=\"this.src='../resources/images/moreinfo1.png';\" />\n"; " is 195.
Long Statement,OWASP.WebGoat.NET.WebGoatCoins,ForgotPassword,C:\repos\jerryhoff_WebGoat.NET\WebGoat\WebGoatCoins\ForgotPassword.aspx.cs,ButtonRecoverPassword_Click,The length of the statement  "                    labelPassword.Text = "Security Question Challenge Successfully Completed! <br/>Your password is: " + getPassword(txtEmail.Text); " is 128.
Long Statement,OWASP.WebGoat.NET.WebGoatCoins,Orders,C:\repos\jerryhoff_WebGoat.NET\WebGoat\WebGoatCoins\Orders.aspx.cs,Page_Load,The length of the statement  "            if (Request.Cookies["customerNumber"] == null || !int.TryParse(Request.Cookies["customerNumber"].Value.ToString()' out id)) " is 123.
Long Statement,OWASP.WebGoat.NET.WebGoatCoins,ProductDetails,C:\repos\jerryhoff_WebGoat.NET\WebGoat\WebGoatCoins\ProductDetails.aspx.cs,LoadComments,The length of the statement  "                    comments += "<strong>Email:</strong>" + commentRow["email"] + "<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>"; " is 153.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,SqliteDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\SqliteDbProvider.cs,GetCustomerDetails,The length of the statement  "            string sql = "select Customers.customerNumber' Customers.customerName' Customers.logoFileName' Customers.contactLastName' Customers.contactFirstName' " +" is 153.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,SqliteDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\SqliteDbProvider.cs,GetCustomerDetails,The length of the statement  "                "Customers.phone' Customers.addressLine1' Customers.addressLine2' Customers.city' Customers.state' Customers.postalCode' Customers.country' " +" is 143.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,SqliteDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\SqliteDbProvider.cs,GetCustomerDetails,The length of the statement  "                "Customers.salesRepEmployeeNumber' Customers.creditLimit' CustomerLogin.email' CustomerLogin.password' CustomerLogin.question_id' CustomerLogin.answer " +" is 154.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,SqliteDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\SqliteDbProvider.cs,GetCustomerDetails,The length of the statement  "                "From Customers' CustomerLogin where Customers.customerNumber = CustomerLogin.customerNumber and Customers.customerNumber = " + customerNumber;" is 143.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,SqliteDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\SqliteDbProvider.cs,AddComment,The length of the statement  "            string sql = "insert into Comments(productCode' email' comment) values ('" + productCode + "'''" + email + "'''" + comment + "');";" is 131.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,SqliteDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\SqliteDbProvider.cs,UpdateCustomerPassword,The length of the statement  "            string sql = "update CustomerLogin set password = '" + Encoder.Encode(password) + "' where customerNumber = " + customerNumber;" is 127.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,SqliteDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\SqliteDbProvider.cs,GetEmailByName,The length of the statement  "            string sql = "select firstName' lastName' email from Employees where firstName like '" + name + "%' or lastName like '" + name + "%'";" is 134.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,MySqlDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\MySqlDbProvider.cs,GetCustomerDetails,The length of the statement  "            string sql = "select Customers.customerNumber' Customers.customerName' Customers.logoFileName' Customers.contactLastName' Customers.contactFirstName' " + " is 153.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,MySqlDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\MySqlDbProvider.cs,GetCustomerDetails,The length of the statement  "                "Customers.phone' Customers.addressLine1' Customers.addressLine2' Customers.city' Customers.state' Customers.postalCode' Customers.country' " + " is 143.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,MySqlDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\MySqlDbProvider.cs,GetCustomerDetails,The length of the statement  "                "Customers.salesRepEmployeeNumber' Customers.creditLimit' CustomerLogin.email' CustomerLogin.password' CustomerLogin.question_id' CustomerLogin.answer " + " is 154.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,MySqlDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\MySqlDbProvider.cs,GetCustomerDetails,The length of the statement  "                "From Customers' CustomerLogin where Customers.customerNumber = CustomerLogin.customerNumber and Customers.customerNumber = " + customerNumber; " is 143.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,MySqlDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\MySqlDbProvider.cs,AddComment,The length of the statement  "            string sql = "insert into Comments(productCode' email' comment) values ('" + productCode + "'''" + email + "'''" + comment + "');"; " is 131.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,MySqlDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\MySqlDbProvider.cs,UpdateCustomerPassword,The length of the statement  "            string sql = "update CustomerLogin set password = '" + Encoder.Encode(password) + "' where customerNumber = " + customerNumber; " is 127.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,MySqlDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\MySqlDbProvider.cs,GetEmailByName,The length of the statement  "            string sql = "select firstName' lastName' email from Employees where firstName like '" + name + "%' or lastName like '" + name + "%'"; " is 134.
Long Statement,OWASP.WebGoat.NET.App_Code.DB,MySqlDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\MySqlDbProvider.cs,GetEmailByCustomerNumber,The length of the statement  "                output = (String)MySqlHelper.ExecuteScalar(_connectionString' "select email from CustomerLogin where customerNumber = " + num); " is 127.
Long Statement,OWASP.WebGoat.NET.App_Code,Encoder,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\Encoder.cs,ToJSONSAutocompleteString,The length of the statement  "            sb.Append("data:" + sb.ToString().Substring(sb.ToString().IndexOf('[')' (sb.ToString().LastIndexOf(']') - sb.ToString().IndexOf('[')) + 1) + "\n}"); " is 148.
Long Statement,OWASP.WebGoat.NET.App_Code,CookieManager,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\CookieManager.cs,SetCookie,The length of the statement  "//            HttpCookie cookie_id = new HttpCookie("customerNumber"' ds.Tables[0].Rows[0]["customerNumber"].ToString()); " is 121.
Magic Number,OWASP.WebGoat.NET,EncryptVSEncode,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\EncryptVSEncode.aspx.cs,CustomCryptoEncrypt,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  if (i % 2 == 0)                  {                      bytes[i] = (byte)(bytes[i] | 2);                  }                  else                  {                      bytes[i] = (byte)(bytes[i] & 2);                  }                           }
Magic Number,OWASP.WebGoat.NET,EncryptVSEncode,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\EncryptVSEncode.aspx.cs,CustomCryptoEncrypt,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  if (i % 2 == 0)                  {                      bytes[i] = (byte)(bytes[i] | 2);                  }                  else                  {                      bytes[i] = (byte)(bytes[i] & 2);                  }                           }
Magic Number,OWASP.WebGoat.NET,EncryptVSEncode,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\EncryptVSEncode.aspx.cs,CustomCryptoEncrypt,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  if (i % 2 == 0)                  {                      bytes[i] = (byte)(bytes[i] | 2);                  }                  else                  {                      bytes[i] = (byte)(bytes[i] & 2);                  }                           }
Magic Number,OWASP.WebGoat.NET,SQLInjectionDiscovery,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\SQLInjectionDiscovery.aspx.cs,btnFind_Click,The following statement contains a magic number: try              {                  string name = txtID.Text.Substring(0' 3);                  string output = du.GetEmailByCustomerNumber(name);                    lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : output;              }              catch (Exception ex)              {                  lblOutput.Text = ex.Message;              }
Magic Number,OWASP.WebGoat.NET,PathManipulation,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\PathManipulation.aspx.cs,Page_Load,The following statement contains a magic number: if(filename != null)          		{                      try                      {                          ResponseFile(Request' Response' filename' MapPath("~/Downloads/" + filename)' 100);                      }                      catch (Exception ex)                      {                          Console.WriteLine(ex.Message);                          lblStatus.Text = "File not found: " + filename;                         }                  }
Magic Number,OWASP.WebGoat.NET,PathManipulation,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\PathManipulation.aspx.cs,ResponseFile,The following statement contains a magic number: try  	        {  	            FileStream myFile =	new FileStream(_fullPath' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);  	            BinaryReader br = new BinaryReader(myFile);  	            try  	            {  	            	                _Response.AddHeader("Accept-Ranges"' "bytes");  	                _Response.Buffer = false;  	                long fileLength = myFile.Length;  	                long startBytes = 0;  			  	                int pack = 10240; //10K bytes  	                if (_Request.Headers["Range"] != null)  	                {  	                    _Response.StatusCode = 206;  	                    string[] range = _Request.Headers["Range"].Split(new char[] { '='' '-' });  	                    startBytes = Convert.ToInt64(range[1]);  	                }  	                _Response.AddHeader("Content-Length"' (fileLength - startBytes).ToString());  	          	                if (startBytes != 0)  	                {  	                    _Response.AddHeader("Content-Range"' string.Format(" bytes {0}-{1}/{2}"' startBytes' fileLength - 1' fileLength));  	                }  	          	                _Response.AddHeader("Connection"' "Keep-Alive");  	                _Response.ContentType = "application/octet-stream";  	                _Response.AddHeader("Content-Disposition"' "attachment;filename=" + HttpUtility.UrlEncode(_fileName' System.Text.Encoding.UTF8));  			  	                br.BaseStream.Seek(startBytes' SeekOrigin.Begin);  	                int maxCount = (int)Math.Floor((double)((fileLength - startBytes) / pack)) + 1;  					  	                for (int i = 0; i < maxCount; i++)  	                {  	                    if (_Response.IsClientConnected)  	                    {  	                        _Response.BinaryWrite(br.ReadBytes(pack));  	                    }  	                    else  	                    {  	                        i = maxCount;  	                    }  	                }  				}  	            catch(Exception ex)  	            {  	            	Console.WriteLine(ex.Message);  	                return false;  	            }  	            finally  	            {  	                br.Close();  	                myFile.Close();  	            }  	        }  	        catch(Exception ex)  	        {  	        	Console.WriteLine(ex.Message);  	            return false;  	        }
Magic Number,OWASP.WebGoat.NET,PathManipulation,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\PathManipulation.aspx.cs,ResponseFile,The following statement contains a magic number: try  	        {  	            FileStream myFile =	new FileStream(_fullPath' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);  	            BinaryReader br = new BinaryReader(myFile);  	            try  	            {  	            	                _Response.AddHeader("Accept-Ranges"' "bytes");  	                _Response.Buffer = false;  	                long fileLength = myFile.Length;  	                long startBytes = 0;  			  	                int pack = 10240; //10K bytes  	                if (_Request.Headers["Range"] != null)  	                {  	                    _Response.StatusCode = 206;  	                    string[] range = _Request.Headers["Range"].Split(new char[] { '='' '-' });  	                    startBytes = Convert.ToInt64(range[1]);  	                }  	                _Response.AddHeader("Content-Length"' (fileLength - startBytes).ToString());  	          	                if (startBytes != 0)  	                {  	                    _Response.AddHeader("Content-Range"' string.Format(" bytes {0}-{1}/{2}"' startBytes' fileLength - 1' fileLength));  	                }  	          	                _Response.AddHeader("Connection"' "Keep-Alive");  	                _Response.ContentType = "application/octet-stream";  	                _Response.AddHeader("Content-Disposition"' "attachment;filename=" + HttpUtility.UrlEncode(_fileName' System.Text.Encoding.UTF8));  			  	                br.BaseStream.Seek(startBytes' SeekOrigin.Begin);  	                int maxCount = (int)Math.Floor((double)((fileLength - startBytes) / pack)) + 1;  					  	                for (int i = 0; i < maxCount; i++)  	                {  	                    if (_Response.IsClientConnected)  	                    {  	                        _Response.BinaryWrite(br.ReadBytes(pack));  	                    }  	                    else  	                    {  	                        i = maxCount;  	                    }  	                }  				}  	            catch(Exception ex)  	            {  	            	Console.WriteLine(ex.Message);  	                return false;  	            }  	            finally  	            {  	                br.Close();  	                myFile.Close();  	            }  	        }  	        catch(Exception ex)  	        {  	        	Console.WriteLine(ex.Message);  	            return false;  	        }
Magic Number,OWASP.WebGoat.NET.WebGoatCoins,Catalog,C:\repos\jerryhoff_WebGoat.NET\WebGoat\WebGoatCoins\Catalog.aspx.cs,Page_Load,The following statement contains a magic number: foreach (DataRow catRow in ds.Tables["categories"].Rows)              {                  lblOutput.Text += "<p/><h2 class='title-regular-2 clearfix'>Category: " + catRow["catName"].ToString() + "</h2><hr/><p/>\n";                  foreach (DataRow prodRow in catRow.GetChildRows("cat_prods"))                  {                      lblOutput.Text += "<div class='product' align='center'>\n";                      lblOutput.Text += "<img src='./images/products/" + prodRow[3] + "'/><br/>\n";                      lblOutput.Text += "" + prodRow[1] + "<br/>\n";                      lblOutput.Text += "<a href=\"ProductDetails.aspx?productNumber=" + prodRow[0].ToString() + "\"><br/>\n";                      lblOutput.Text += "<img src=\"../resources/images/moreinfo1.png\" onmouseover=\"this.src='../resources/images/moreinfo2.png';\" onmouseout=\"this.src='../resources/images/moreinfo1.png';\" />\n";                      lblOutput.Text += "</a>\n";                      lblOutput.Text += "</div>\n";                  }              }
Magic Number,OWASP.WebGoat.NET.WebGoatCoins,CustomerLogin,C:\repos\jerryhoff_WebGoat.NET\WebGoat\WebGoatCoins\CustomerLogin.aspx.cs,ButtonLogOn_Click,The following statement contains a magic number: FormsAuthenticationTicket ticket =                          new FormsAuthenticationTicket(                              1' //version                               email' //name                               DateTime.Now' //issueDate                              DateTime.Now.AddDays(14)' //expireDate                               true' //isPersistent                              "customer"' //userData (customer role)                              FormsAuthentication.FormsCookiePath //cookiePath              );
Magic Number,OWASP.WebGoat.NET.App_Code.DB,SqliteDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\SqliteDbProvider.cs,GetSecurityQuestionAndAnswer,The following statement contains a magic number: string[] qAndA = new string[2];
Magic Number,OWASP.WebGoat.NET.App_Code.DB,MySqlDbProvider,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\DB\MySqlDbProvider.cs,GetSecurityQuestionAndAnswer,The following statement contains a magic number: string[] qAndA = new string[2];
Magic Number,OWASP.WebGoat.NET.App_Code,Encoder,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\Encoder.cs,EncryptStringAES,The following statement contains a magic number: try              {                  // generate the key from the shared secret and the salt                  Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret' _salt);                    // Create a RijndaelManaged object                  // with the specified key and IV.                  aesAlg = new RijndaelManaged();                  aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);                  aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);                    // Create a decrytor to perform the stream transform.                  ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key' aesAlg.IV);                    // Create the streams used for encryption.                  using (MemoryStream msEncrypt = new MemoryStream())                  {                      using (CryptoStream csEncrypt = new CryptoStream(msEncrypt' encryptor' CryptoStreamMode.Write))                      {                          using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))                          {                                //Write all data to the stream.                              swEncrypt.Write(plainText);                          }                      }                      outStr = Convert.ToBase64String(msEncrypt.ToArray());                  }              }              finally              {                  // Clear the RijndaelManaged object.                  if (aesAlg != null)                      aesAlg.Clear();              }
Magic Number,OWASP.WebGoat.NET.App_Code,Encoder,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\Encoder.cs,EncryptStringAES,The following statement contains a magic number: try              {                  // generate the key from the shared secret and the salt                  Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret' _salt);                    // Create a RijndaelManaged object                  // with the specified key and IV.                  aesAlg = new RijndaelManaged();                  aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);                  aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);                    // Create a decrytor to perform the stream transform.                  ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key' aesAlg.IV);                    // Create the streams used for encryption.                  using (MemoryStream msEncrypt = new MemoryStream())                  {                      using (CryptoStream csEncrypt = new CryptoStream(msEncrypt' encryptor' CryptoStreamMode.Write))                      {                          using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))                          {                                //Write all data to the stream.                              swEncrypt.Write(plainText);                          }                      }                      outStr = Convert.ToBase64String(msEncrypt.ToArray());                  }              }              finally              {                  // Clear the RijndaelManaged object.                  if (aesAlg != null)                      aesAlg.Clear();              }
Magic Number,OWASP.WebGoat.NET.App_Code,Encoder,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\Encoder.cs,DecryptStringAES,The following statement contains a magic number: try              {                  // generate the key from the shared secret and the salt                  Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret' _salt);                    // Create a RijndaelManaged object                  // with the specified key and IV.                  aesAlg = new RijndaelManaged();                  aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);                  aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);                    // Create a decrytor to perform the stream transform.                  ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key' aesAlg.IV);                  // Create the streams used for decryption.                                  byte[] bytes = Convert.FromBase64String(cipherText);                  using (MemoryStream msDecrypt = new MemoryStream(bytes))                  {                      using (CryptoStream csDecrypt = new CryptoStream(msDecrypt' decryptor' CryptoStreamMode.Read))                      {                          using (StreamReader srDecrypt = new StreamReader(csDecrypt))                                // Read the decrypted bytes from the decrypting stream                              // and place them in a string.                              plaintext = srDecrypt.ReadToEnd();                      }                  }              }              finally              {                  // Clear the RijndaelManaged object.                  if (aesAlg != null)                      aesAlg.Clear();              }
Magic Number,OWASP.WebGoat.NET.App_Code,Encoder,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\Encoder.cs,DecryptStringAES,The following statement contains a magic number: try              {                  // generate the key from the shared secret and the salt                  Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(sharedSecret' _salt);                    // Create a RijndaelManaged object                  // with the specified key and IV.                  aesAlg = new RijndaelManaged();                  aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);                  aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);                    // Create a decrytor to perform the stream transform.                  ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key' aesAlg.IV);                  // Create the streams used for decryption.                                  byte[] bytes = Convert.FromBase64String(cipherText);                  using (MemoryStream msDecrypt = new MemoryStream(bytes))                  {                      using (CryptoStream csDecrypt = new CryptoStream(msDecrypt' decryptor' CryptoStreamMode.Read))                      {                          using (StreamReader srDecrypt = new StreamReader(csDecrypt))                                // Read the decrypted bytes from the decrypting stream                              // and place them in a string.                              plaintext = srDecrypt.ReadToEnd();                      }                  }              }              finally              {                  // Clear the RijndaelManaged object.                  if (aesAlg != null)                      aesAlg.Clear();              }
Magic Number,OWASP.WebGoat.NET.App_Code,Encoder,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\Encoder.cs,EncodeTicket,The following statement contains a magic number: FormsAuthenticationTicket ticket =                  new FormsAuthenticationTicket(                      1' //version                       token' //token                       DateTime.Now' //issueDate                      DateTime.Now.AddDays(14)' //expireDate                       true' //isPersistent                      "customer"' //userData (customer role)                      FormsAuthentication.FormsCookiePath //cookiePath              );
Magic Number,OWASP.WebGoat.NET.App_Code,ConfigFile,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\ConfigFile.cs,Load,The following statement contains a magic number: foreach (string line in File.ReadAllLines(_filePath))              {                                    if (line.Length == 0)                      continue;                                    if (line[0] == '#')                  {                      comment = line;                      continue;                  }                                     string[] tokens = line.Split(SPLIT_CHAR);                                    if (tokens.Length >=2)                  {                      string key = tokens[0].ToLower();                      _settings[key] = tokens[1];                                            if (!string.IsNullOrEmpty(comment))                          _settingComments[key] = comment;                  }                                   comment = string.Empty;                      }
Magic Number,OWASP.WebGoat.NET.App_Code,Util,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\Util.cs,RunProcessWithInput,The following statement contains a magic number: using (Process process = new Process())             {                 process.EnableRaisingEvents = true;                 process.StartInfo = startInfo;                  process.OutputDataReceived += (sender' e) => {                     if (e.Data != null)                         log.Info(e.Data);                 };                  process.ErrorDataReceived += (sender' e) =>                 {                     if (e.Data != null)                         log.Error(e.Data);                 };                  AutoResetEvent are = new AutoResetEvent(false);                  process.Exited += (sender' e) =>                  {                     Thread.Sleep(1000);                     are.Set();                     log.Info("Process exited");                  };                  process.Start();                    using (StreamReader reader = new StreamReader(new FileStream(input' FileMode.Open)))                  {                      string line;                      string replaced;                      while ((line = reader.ReadLine()) != null)                      {                          if (Environment.OSVersion.Platform == PlatformID.Win32NT)                              replaced = line.Replace("DB_Scripts/datafiles/"' "DB_Scripts\\\\datafiles\\\\");                          else                              replaced = line;                            log.Debug("Line: " + replaced);                            process.StandardInput.WriteLine(replaced);                      }                  }                      process.StandardInput.Close();                       process.BeginOutputReadLine();                 process.BeginErrorReadLine();                      //NOTE: Looks like we have a mono bug: https://bugzilla.xamarin.com/show_bug.cgi?id=6291                 //have a wait time for now.                                  are.WaitOne(10 * 1000);                  if (process.HasExited)                     return process.ExitCode;                 else //WTF? Should have exited dammit!                 {                     process.Kill();                     return 1;                 }             }
Magic Number,OWASP.WebGoat.NET.App_Code,Util,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\Util.cs,RunProcessWithInput,The following statement contains a magic number: using (Process process = new Process())             {                 process.EnableRaisingEvents = true;                 process.StartInfo = startInfo;                  process.OutputDataReceived += (sender' e) => {                     if (e.Data != null)                         log.Info(e.Data);                 };                  process.ErrorDataReceived += (sender' e) =>                 {                     if (e.Data != null)                         log.Error(e.Data);                 };                  AutoResetEvent are = new AutoResetEvent(false);                  process.Exited += (sender' e) =>                  {                     Thread.Sleep(1000);                     are.Set();                     log.Info("Process exited");                  };                  process.Start();                    using (StreamReader reader = new StreamReader(new FileStream(input' FileMode.Open)))                  {                      string line;                      string replaced;                      while ((line = reader.ReadLine()) != null)                      {                          if (Environment.OSVersion.Platform == PlatformID.Win32NT)                              replaced = line.Replace("DB_Scripts/datafiles/"' "DB_Scripts\\\\datafiles\\\\");                          else                              replaced = line;                            log.Debug("Line: " + replaced);                            process.StandardInput.WriteLine(replaced);                      }                  }                      process.StandardInput.Close();                       process.BeginOutputReadLine();                 process.BeginErrorReadLine();                      //NOTE: Looks like we have a mono bug: https://bugzilla.xamarin.com/show_bug.cgi?id=6291                 //have a wait time for now.                                  are.WaitOne(10 * 1000);                  if (process.HasExited)                     return process.ExitCode;                 else //WTF? Should have exited dammit!                 {                     process.Kill();                     return 1;                 }             }
Magic Number,OWASP.WebGoat.NET.App_Code,Util,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\Util.cs,RunProcessWithInput,The following statement contains a magic number: using (Process process = new Process())             {                 process.EnableRaisingEvents = true;                 process.StartInfo = startInfo;                  process.OutputDataReceived += (sender' e) => {                     if (e.Data != null)                         log.Info(e.Data);                 };                  process.ErrorDataReceived += (sender' e) =>                 {                     if (e.Data != null)                         log.Error(e.Data);                 };                  AutoResetEvent are = new AutoResetEvent(false);                  process.Exited += (sender' e) =>                  {                     Thread.Sleep(1000);                     are.Set();                     log.Info("Process exited");                  };                  process.Start();                    using (StreamReader reader = new StreamReader(new FileStream(input' FileMode.Open)))                  {                      string line;                      string replaced;                      while ((line = reader.ReadLine()) != null)                      {                          if (Environment.OSVersion.Platform == PlatformID.Win32NT)                              replaced = line.Replace("DB_Scripts/datafiles/"' "DB_Scripts\\\\datafiles\\\\");                          else                              replaced = line;                            log.Debug("Line: " + replaced);                            process.StandardInput.WriteLine(replaced);                      }                  }                      process.StandardInput.Close();                       process.BeginOutputReadLine();                 process.BeginErrorReadLine();                      //NOTE: Looks like we have a mono bug: https://bugzilla.xamarin.com/show_bug.cgi?id=6291                 //have a wait time for now.                                  are.WaitOne(10 * 1000);                  if (process.HasExited)                     return process.ExitCode;                 else //WTF? Should have exited dammit!                 {                     process.Kill();                     return 1;                 }             }
Magic Number,OWASP.WebGoat.NET.App_Code,WeakMessageDigest,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\WeakMessageDigest.cs,GenByte,The following statement contains a magic number: bVal = (byte) (val % (127 - 32 -1) + 33);
Magic Number,OWASP.WebGoat.NET.App_Code,WeakMessageDigest,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\WeakMessageDigest.cs,GenByte,The following statement contains a magic number: bVal = (byte) (val % (127 - 32 -1) + 33);
Magic Number,OWASP.WebGoat.NET.App_Code,WeakMessageDigest,C:\repos\jerryhoff_WebGoat.NET\WebGoat\App_Code\WeakMessageDigest.cs,GenByte,The following statement contains a magic number: bVal = (byte) (val % (127 - 32 -1) + 33);
Magic Number,OWASP.WebGoat.NET.Content,Unsafe,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\Unsafe.aspx.cs,btnReverse_Click,The following statement contains a magic number: const int INPUT_LEN = 256;
Missing Default,OWASP.WebGoat.NET,EncryptVSEncode,C:\repos\jerryhoff_WebGoat.NET\WebGoat\Content\EncryptVSEncode.aspx.cs,SHA,The following switch statement is missing a default case: switch (hash)              {                  case WG_Hash.Sha1:                      sha = new SHA1Managed();                      break;                  case WG_Hash.Sha256:                      sha = new SHA256Managed();                      break;              }
