Implementation smell,Namespace,Class,File,Method,Description
Long Method,Articulate,Subject,D:\newReposJune17\Mpstark_articulate\Articulate\CommandChunks\Subject.cs,GenerateRuleList,The method has 88 lines of code.
Long Method,Articulate,Subject,D:\newReposJune17\Mpstark_articulate\Articulate\CommandChunks\Subject.cs,GenerateKeyLookup,The method has 69 lines of code.
Long Method,Articulate,CommandPool,D:\newReposJune17\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The method has 682 lines of code.
Long Method,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Window_Loaded,The method has 70 lines of code.
Long Method,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The method has 111 lines of code.
Complex Method,Articulate,SoundEffectsPlayer,D:\newReposJune17\Mpstark_articulate\Articulate\Components\SoundEffectsPlayer.cs,CreatePlayers,Cyclomatic complexity of the method is 11
Complex Method,Articulate,VoiceRecognizer,D:\newReposJune17\Mpstark_articulate\Articulate\Components\VoiceRecognizer.cs,VoiceRecognizer,Cyclomatic complexity of the method is 11
Complex Method,Articulate,Extensions,D:\newReposJune17\Mpstark_articulate\Articulate\Extensions.cs,Combine,Cyclomatic complexity of the method is 7
Complex Method,Articulate,MouseOutputBase,D:\newReposJune17\Mpstark_articulate\Articulate\IO\DirectInput.cs,ToDirectInput,Cyclomatic complexity of the method is 17
Complex Method,Articulate,OutputExtensions,D:\newReposJune17\Mpstark_articulate\Articulate\IO\OutputBase.cs,Flatten,Cyclomatic complexity of the method is 9
Complex Method,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Window_Loaded,Cyclomatic complexity of the method is 12
Complex Method,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Translation_LanguageChanged,Cyclomatic complexity of the method is 13
Complex Method,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,Cyclomatic complexity of the method is 58
Complex Method,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,KeyboardHookProc,Cyclomatic complexity of the method is 7
Long Parameter List,Articulate,Command,D:\newReposJune17\Mpstark_articulate\Articulate\CommandChunks\Command.cs,Command,The method has 4 parameters.
Long Parameter List,Articulate,Command,D:\newReposJune17\Mpstark_articulate\Articulate\CommandChunks\Command.cs,Command,The method has 5 parameters.
Long Parameter List,Articulate,Command,D:\newReposJune17\Mpstark_articulate\Articulate\CommandChunks\Command.cs,GenerateRuleList,The method has 4 parameters.
Long Parameter List,Articulate,ForegroundProcess,D:\newReposJune17\Mpstark_articulate\Articulate\Components\ForegroundProcess.cs,QueryFullProcessImageName,The method has 4 parameters.
Long Parameter List,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,CallNextHookEx,The method has 4 parameters.
Long Parameter List,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,SetWindowsHookEx,The method has 4 parameters.
Long Parameter List,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,ToAscii,The method has 5 parameters.
Long Parameter List,SierraLib.GlobalHooks,MouseEventExtArgs,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\MouseEventExtArgs.cs,MouseEventExtArgs,The method has 5 parameters.
Long Statement,Articulate,AdvancedSettings,D:\newReposJune17\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "	var CommandPauseEvent = Observable.FromEventPattern<RoutedPropertyChangedEventArgs<double>> (EndCommandPause' "ValueChanged"); " is 126.
Long Statement,Articulate,AdvancedSettings,D:\newReposJune17\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "	RxSubscriptions.Push (CommandPauseEvent.Skip (1).Distinct ().Sample (TimeSpan.FromMilliseconds (50)).ObserveOnDispatcher ().Subscribe (args => { " is 144.
Long Statement,Articulate,AdvancedSettings,D:\newReposJune17\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "	RxSubscriptions.Push (CommandPauseEvent.Skip (1).Distinct ().Sample (TimeSpan.FromMilliseconds (500)).ObserveOn (ThreadPoolScheduler.Instance).Subscribe (args => { " is 163.
Long Statement,Articulate,AdvancedSettings,D:\newReposJune17\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "	var KeyReleaseEvent = Observable.FromEventPattern<RoutedPropertyChangedEventArgs<double>> (KeyReleasePause' "ValueChanged"); " is 124.
Long Statement,Articulate,AdvancedSettings,D:\newReposJune17\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "	RxSubscriptions.Push (KeyReleaseEvent.Skip (1).Distinct ().Sample (TimeSpan.FromMilliseconds (50)).ObserveOnDispatcher ().Subscribe (args => { " is 142.
Long Statement,Articulate,AdvancedSettings,D:\newReposJune17\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "	RxSubscriptions.Push (KeyReleaseEvent.Skip (1).Distinct ().Sample (TimeSpan.FromMilliseconds (500)).ObserveOn (ThreadPoolScheduler.Instance).Subscribe (args => { " is 161.
Long Statement,Articulate,CommandPool,D:\newReposJune17\Mpstark_articulate\Articulate\Components\CommandPool.cs,ExecuteAsync,The length of the statement  "				await DirectInputEmulator.SendInputAsync (subjectObject.KeyLookup [subject].SpaceOperations (Core.Instance.Configuration.KeyPressDelay)); " is 137.
Long Statement,Articulate,CommandPool,D:\newReposJune17\Mpstark_articulate\Articulate\Components\CommandPool.cs,ExecuteAsync,The length of the statement  "		await DirectInputEmulator.SendInputAsync (commandObjects [command].KeyLookup [command].SpaceOperations (Core.Instance.Configuration.KeyPressDelay)); " is 148.
Long Statement,Articulate,CommandPool,D:\newReposJune17\Mpstark_articulate\Articulate\Components\CommandPool.cs,ExecuteAsync,The length of the statement  "			await DirectInputEmulator.SendInputAsync (commandObjects [command].KeyLookup [directObject].SpaceOperations (Core.Instance.Configuration.KeyPressDelay)); " is 153.
Long Statement,Articulate,CommandPool,D:\newReposJune17\Mpstark_articulate\Articulate\Components\CommandPool.cs,parseSemantic,The length of the statement  "		string result = (index < 0) ? semantic [key].Value.ToString () : semantic [key].Value.ToString ().Remove (index' "[object Object]".Length); " is 139.
Long Statement,Articulate,CommandPool,D:\newReposJune17\Mpstark_articulate\Articulate\Components\CommandPool.cs,parseSemanticList,The length of the statement  "		string result = (index < 0) ? semantic [key].Value.ToString () : semantic [key].Value.ToString ().Remove (index' "[object Object]".Length); " is 139.
Long Statement,Articulate,KeyMonitor,D:\newReposJune17\Mpstark_articulate\Articulate\Components\KeyMonitor.cs,TestKeys,The length of the statement  "	var newActiveKeyBind = Configuration.KeyBinds.FirstOrDefault (x => x.IsActive (ActiveKeyboardKeys' ActiveMouseButtons)); " is 120.
Long Statement,Articulate,SoundEffectsPlayer,D:\newReposJune17\Mpstark_articulate\Articulate\Components\SoundEffectsPlayer.cs,CreatePlayers,The length of the statement  "			this.m_SoundEffectPlayers.Add (SoundEffects.CommandAccepted' new SoundPlayer (Resources.SoundEffects.SoundEffects.command_accepted)); " is 133.
Long Statement,Articulate,SoundEffectsPlayer,D:\newReposJune17\Mpstark_articulate\Articulate\Components\SoundEffectsPlayer.cs,CreatePlayers,The length of the statement  "			this.m_SoundEffectPlayers.Add (SoundEffects.CommandRejected' new SoundPlayer (Resources.SoundEffects.SoundEffects.command_rejected)); " is 133.
Long Statement,Articulate,SoundEffectsPlayer,D:\newReposJune17\Mpstark_articulate\Articulate\Components\SoundEffectsPlayer.cs,CreatePlayers,The length of the statement  "			this.m_SoundEffectPlayers.Add (SoundEffects.StartListening' new SoundPlayer (Resources.SoundEffects.SoundEffects.started_listening)); " is 133.
Long Statement,Articulate,SoundEffectsPlayer,D:\newReposJune17\Mpstark_articulate\Articulate\Components\SoundEffectsPlayer.cs,CreatePlayers,The length of the statement  "			this.m_SoundEffectPlayers.Add (SoundEffects.StopListening' new SoundPlayer (Resources.SoundEffects.SoundEffects.stopped_listening)); " is 132.
Long Statement,Articulate,VoiceRecognizer,D:\newReposJune17\Mpstark_articulate\Articulate\Components\VoiceRecognizer.cs,sre_SpeechRecognized,The length of the statement  "	TriggerCommandAccepted (recognizedPhrase.Result.Words.Aggregate (""' (phraseSoFar' word) => phraseSoFar + word.Text + " ")' recognizedPhrase.Result.Confidence); " is 160.
Long Statement,Articulate,VoiceRecognizer,D:\newReposJune17\Mpstark_articulate\Articulate\Components\VoiceRecognizer.cs,sre_SpeechRecognized,The length of the statement  "		Trace.WriteLine (string.Format ("Skipping command' {0} is not in the list of monitored applications"' activeApplication)); " is 122.
Long Statement,Articulate,VoiceRecognizer,D:\newReposJune17\Mpstark_articulate\Articulate\Components\VoiceRecognizer.cs,sre_SpeechRecognitionRejected,The length of the statement  "	TriggerCommandRejected (recognizedPhrase.Result.Words.Aggregate (""' (phraseSoFar' word) => phraseSoFar + word.Text + " ")' recognizedPhrase.Result.Confidence); " is 160.
Long Statement,Articulate,App,D:\newReposJune17\Mpstark_articulate\Articulate\App.xaml.cs,HandleError,The length of the statement  "	using (StreamWriter sw = new StreamWriter (Path.Combine (crashLogFolder' "Crash - " + DateTime.Now.ToString ("yyyy-MM-dd HH-mm-ss") + ".txt"))) { " is 145.
Long Statement,Articulate,DirectInputEmulator,D:\newReposJune17\Mpstark_articulate\Articulate\IO\DirectInputEmulator.cs,KeyPress,The length of the statement  "		return new OutputGroup (keys.Select (x => (OutputBase)new KeyDown (x)).SpaceOperations (Core.Instance.Configuration.KeyReleaseDelay).Combine (new Sleep (Core.Instance.Configuration.KeyPressDelay)).Combine (keys.Reverse ().Select (x => new KeyUp (x)).SpaceOperations (Core.Instance.Configuration.KeyReleaseDelay))); " is 314.
Long Statement,Articulate,DirectInputEmulator,D:\newReposJune17\Mpstark_articulate\Articulate\IO\DirectInputEmulator.cs,MouseClick,The length of the statement  "		return new OutputGroup (buttons.Select (x => (OutputBase)new MouseDown (x)).Combine (new Sleep (Core.Instance.Configuration.MouseReleaseDelay)).Combine (buttons.Reverse ().Select (x => new MouseUp (x)))); " is 204.
Long Statement,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Window_Loaded,The length of the statement  "				TranslationManager.Instance.Translations.Add (new FileBasedTranslation (CultureInfo.GetCultureInfo (System.IO.Path.GetFileNameWithoutExtension (file.Name))' fs)); " is 162.
Long Statement,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Window_Loaded,The length of the statement  "	LanguageList.ItemsSource = TranslationManager.Instance.Translations.Select (x => x ["translation_language"' null] ?? x.Culture.DisplayName); " is 140.
Long Statement,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Window_Loaded,The length of the statement  "	LanguageList.SelectedItem = TranslationManager.Instance.CurrentTranslation ["translation_language"' null] ?? TranslationManager.Instance.CurrentLanguage.DisplayName; " is 165.
Long Statement,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,LoadRecognizer,The length of the statement  "		Enabled = Logic.Configuration.Mode == Articulate.ListenMode.Continuous || Logic.Configuration.Mode == Articulate.ListenMode.PushToIgnore; " is 137.
Long Statement,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,AdvancedSettings_Click,The length of the statement  "	Enabled = Logic.Configuration.Mode == Articulate.ListenMode.Continuous || Logic.Configuration.Mode == Articulate.ListenMode.PushToIgnore; " is 137.
Long Statement,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,OnKeysPressed,The length of the statement  "		Enabled = Logic.Configuration.Mode == Articulate.ListenMode.PushToTalk || Logic.Configuration.Mode == Articulate.ListenMode.PushToArm; " is 134.
Long Statement,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,OnKeysReleased,The length of the statement  "				Enabled = Logic.Configuration.Mode == Articulate.ListenMode.Continuous || Logic.Configuration.Mode == Articulate.ListenMode.PushToIgnore; " is 137.
Long Statement,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,ListenMode_Selected,The length of the statement  "	Enabled = Logic.Configuration.Mode == Articulate.ListenMode.Continuous || Logic.Configuration.Mode == Articulate.ListenMode.PushToIgnore; " is 137.
Long Statement,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Languages_SelectionChanged,The length of the statement  "	var translation = TranslationManager.Instance.Translations.Find (x => (x ["translation_language"' null] ?? x.Culture.DisplayName) == LanguageList.SelectedItem.ToString ()); " is 172.
Long Statement,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The length of the statement  "		MouseEventExtArgs e = new MouseEventExtArgs (button' clickCount' mouseHookStruct.Point.X' mouseHookStruct.Point.Y' mouseDelta); " is 127.
Long Statement,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The length of the statement  "		if ((s_MouseMove != null || s_MouseMoveExt != null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y)) { " is 130.
Long Statement,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,EnsureSubscribedToGlobalMouseEvents,The length of the statement  "		s_MouseHookHandle = SetWindowsHookEx (WH_MOUSE_LL' s_MouseDelegate' //Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0])' " is 140.
Long Statement,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,EnsureSubscribedToGlobalMouseEvents,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Long Statement,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,TryUnsubscribeFromGlobalMouseEvents,The length of the statement  "	if (s_MouseClick == null && s_MouseDown == null && s_MouseMove == null && s_MouseUp == null && s_MouseClickExt == null && s_MouseMoveExt == null && s_MouseWheel == null) { " is 171.
Long Statement,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,ForceUnsunscribeFromGlobalMouseEvents,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Long Statement,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,KeyboardHookProc,The length of the statement  "		KeyboardHookStruct MyKeyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct)); " is 122.
Long Statement,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,KeyboardHookProc,The length of the statement  "			if (ToAscii (MyKeyboardHookStruct.VirtualKeyCode' MyKeyboardHookStruct.ScanCode' keyState' inBuffer' MyKeyboardHookStruct.Flags) == 1) { " is 136.
Long Statement,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,EnsureSubscribedToGlobalKeyboardEvents,The length of the statement  "		s_KeyboardHookHandle = SetWindowsHookEx (WH_KEYBOARD_LL' s_KeyboardDelegate' Marshal.GetHINSTANCE (Assembly.GetExecutingAssembly ().GetModules () [0])' 0); " is 155.
Long Statement,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,EnsureSubscribedToGlobalKeyboardEvents,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Long Statement,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,ForceUnsunscribeFromGlobalKeyboardEvents,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Complex Conditional,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The conditional expression  "(s_MouseMove != null || s_MouseMoveExt != null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y)"  is complex.
Complex Conditional,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,TryUnsubscribeFromGlobalMouseEvents,The conditional expression  "s_MouseClick == null && s_MouseDown == null && s_MouseMove == null && s_MouseUp == null && s_MouseClickExt == null && s_MouseMoveExt == null && s_MouseWheel == null"  is complex.
Empty Catch Block,Articulate,Settings,D:\newReposJune17\Mpstark_articulate\Articulate\Settings\Settings.cs,Save,The method has an empty catch block.
Empty Catch Block,Articulate,App,D:\newReposJune17\Mpstark_articulate\Articulate\App.xaml.cs,WriteError,The method has an empty catch block.
Magic Number,Articulate,AdvancedSettings,D:\newReposJune17\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The following statement contains a magic number: RxSubscriptions.Push (CommandPauseEvent.Skip (1).Distinct ().Sample (TimeSpan.FromMilliseconds (50)).ObserveOnDispatcher ().Subscribe (args => {  	EndCommandPauseNumber.Content = Math.Floor (args.EventArgs.NewValue).ToString ();  }));  
Magic Number,Articulate,AdvancedSettings,D:\newReposJune17\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The following statement contains a magic number: RxSubscriptions.Push (CommandPauseEvent.Skip (1).Distinct ().Sample (TimeSpan.FromMilliseconds (500)).ObserveOn (ThreadPoolScheduler.Instance).Subscribe (args => {  	Logic.Configuration.EndCommandPause = (int)args.EventArgs.NewValue;  	if (Logic != null)  		Logic.Recognizer.EndSilenceTimeout = (int)args.EventArgs.NewValue;  }));  
Magic Number,Articulate,AdvancedSettings,D:\newReposJune17\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The following statement contains a magic number: RxSubscriptions.Push (KeyReleaseEvent.Skip (1).Distinct ().Sample (TimeSpan.FromMilliseconds (50)).ObserveOnDispatcher ().Subscribe (args => {  	KeyReleasePauseNumber.Content = Math.Floor (args.EventArgs.NewValue).ToString ();  }));  
Magic Number,Articulate,AdvancedSettings,D:\newReposJune17\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The following statement contains a magic number: RxSubscriptions.Push (KeyReleaseEvent.Skip (1).Distinct ().Sample (TimeSpan.FromMilliseconds (500)).ObserveOn (ThreadPoolScheduler.Instance).Subscribe (args => {  	Logic.Configuration.KeyReleaseDelay = (int)args.EventArgs.NewValue;  	if (Logic != null)  		Logic.Recognizer.EndSilenceTimeout = (int)args.EventArgs.NewValue;  }));  
Magic Number,Articulate,Subject,D:\newReposJune17\Mpstark_articulate\Articulate\CommandChunks\Subject.cs,GenerateRuleList,The following statement contains a magic number: squadNumbersConcatChoice.SetRepeat (1' 10);  
Magic Number,Articulate,ForegroundProcess,D:\newReposJune17\Mpstark_articulate\Articulate\Components\ForegroundProcess.cs,GetExecutablePath,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6) {  	return GetExecutablePathAboveVista (Process.Id);  }  
Magic Number,Articulate,VoiceRecognizer,D:\newReposJune17\Mpstark_articulate\Articulate\Components\VoiceRecognizer.cs,VoiceRecognizer,The following statement contains a magic number: try {  	var installedRecognizers = SpeechRecognitionEngine.InstalledRecognizers ();  	RecognizerInfo speechRecognizer = null;  	switch (CultureInfo.InstalledUICulture.Name) {  	case "en-GB":  		speechRecognizer = (installedRecognizers.FirstOrDefault (x => x.Culture.Name == "en-GB") ?? installedRecognizers.FirstOrDefault (x => x.Culture.TwoLetterISOLanguageName == "en"));  		break;  	case "en-US":  	default:  		speechRecognizer = installedRecognizers.FirstOrDefault (x => x.Culture.TwoLetterISOLanguageName == "en");  		break;  	}  	if (speechRecognizer == null) {  		SetupError = String.Format ("You don't appear to have the {0} Speech Recognizer installed. Articulate requires this recognizer to be present in order to function correctly."' "English");  		State = VoiceRecognizerState.Error;  		return;  	}  	// Setup members  	ConfidenceLock = new Object ();  	EngineShuttingDown = new AutoResetEvent (false);  	State = VoiceRecognizerState.Paused;  	// Create a new SpeechRecognitionEngine instance.  	Engine = new SpeechRecognitionEngine (speechRecognizer);  	try {  		// Setup the audio device  		Engine.SetInputToDefaultAudioDevice ();  	} catch (InvalidOperationException ex) {  		// No default input device  		Trace.WriteLine (ex.Message);  		SetupError = "Check input device.\n\n";  		State = VoiceRecognizerState.Error;  		return;  	}  	// Set the confidence setting  	ConfidenceMargin = 90;  	// Create the Grammar instance and load it into the speech recognition engine.  	Grammar g = new Grammar (CommandPool.BuildSrgsGrammar (speechRecognizer.Culture));  	Engine.LoadGrammar (g);  	// Register a handlers for the SpeechRecognized and SpeechRecognitionRejected event  	Engine.SpeechRecognized += sre_SpeechRecognized;  	Engine.SpeechRecognitionRejected += sre_SpeechRecognitionRejected;  	Engine.RecognizeCompleted += sre_RecognizeCompleted;  	StartListening ();  } catch (Exception ex) {  	// Something went wrong setting up the voiceEngine.  	Trace.WriteLine (ex.Message);  	SetupError = String.Format ("{0}\nCurrent Culture: {1}\nAvailable Recognizers: {2}\nStack Trace:\n{3}"' ex.Message' CultureInfo.InstalledUICulture.Name' SpeechRecognitionEngine.InstalledRecognizers ().Select (x => x.Culture.Name).Aggregate ((x' y) => x + "' " + y)' ex.StackTrace);  	State = VoiceRecognizerState.Error;  }  
Magic Number,Articulate,VoiceRecognizer,D:\newReposJune17\Mpstark_articulate\Articulate\Components\VoiceRecognizer.cs,VoiceRecognizer,The following statement contains a magic number: ConfidenceMargin = 90;  
Magic Number,Articulate,Settings,D:\newReposJune17\Mpstark_articulate\Articulate\Settings\Settings.cs,Settings,The following statement contains a magic number: ConfidenceMargin = 80;  
Magic Number,Articulate,Settings,D:\newReposJune17\Mpstark_articulate\Articulate\Settings\Settings.cs,Settings,The following statement contains a magic number: EndCommandPause = 500;  
Magic Number,Articulate,Settings,D:\newReposJune17\Mpstark_articulate\Articulate\Settings\Settings.cs,Settings,The following statement contains a magic number: KeyPressDelay = 75;  
Magic Number,Articulate,Settings,D:\newReposJune17\Mpstark_articulate\Articulate\Settings\Settings.cs,Settings,The following statement contains a magic number: KeyReleaseDelay = 25;  
Magic Number,Articulate,Settings,D:\newReposJune17\Mpstark_articulate\Articulate\Settings\Settings.cs,Settings,The following statement contains a magic number: MouseReleaseDelay = 25;  
Magic Number,Articulate,Settings,D:\newReposJune17\Mpstark_articulate\Articulate\Settings\Settings.cs,EnsureRanges,The following statement contains a magic number: KeyPressDelay = Math.Max (Math.Min (KeyPressDelay' 200)' 0);  
Magic Number,Articulate,Settings,D:\newReposJune17\Mpstark_articulate\Articulate\Settings\Settings.cs,EnsureRanges,The following statement contains a magic number: KeyReleaseDelay = Math.Max (Math.Min (KeyReleaseDelay' 500)' 10);  
Magic Number,Articulate,Settings,D:\newReposJune17\Mpstark_articulate\Articulate\Settings\Settings.cs,EnsureRanges,The following statement contains a magic number: KeyReleaseDelay = Math.Max (Math.Min (KeyReleaseDelay' 500)' 10);  
Magic Number,Articulate,Settings,D:\newReposJune17\Mpstark_articulate\Articulate\Settings\Settings.cs,EnsureRanges,The following statement contains a magic number: MouseReleaseDelay = Math.Max (Math.Min (MouseReleaseDelay' 500)' 10);  
Magic Number,Articulate,Settings,D:\newReposJune17\Mpstark_articulate\Articulate\Settings\Settings.cs,EnsureRanges,The following statement contains a magic number: MouseReleaseDelay = Math.Max (Math.Min (MouseReleaseDelay' 500)' 10);  
Magic Number,Articulate,App,D:\newReposJune17\Mpstark_articulate\Articulate\App.xaml.cs,HandleError,The following statement contains a magic number: using (StreamWriter sw = new StreamWriter (Path.Combine (crashLogFolder' "Crash - " + DateTime.Now.ToString ("yyyy-MM-dd HH-mm-ss") + ".txt"))) {  	sw.WriteLine ("Articulate Application Crash");  	sw.WriteLine ("OS: " + Environment.OSVersion.VersionString);  	sw.WriteLine ("64-Bit: " + (IntPtr.Size == 8 ? "Yes" : "No"));  	sw.WriteLine (".NET Version: " + Environment.Version.ToString ());  	sw.WriteLine ("Command Line: " + Environment.CommandLine);  	sw.WriteLine ();  	sw.Flush ();  	sw.AutoFlush = true;  	WriteError (sw' ex);  }  
Magic Number,Articulate,App,D:\newReposJune17\Mpstark_articulate\Articulate\App.xaml.cs,HandleError,The following statement contains a magic number: sw.WriteLine ("64-Bit: " + (IntPtr.Size == 8 ? "Yes" : "No"));  
Magic Number,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: RxSubscriptions.Push (ConfidenceEvent.Skip (1).Distinct ().Sample (TimeSpan.FromMilliseconds (500)).Subscribe (args => {  	Logic.Configuration.ConfidenceMargin = (int)args.EventArgs.NewValue;  	if (Logic != null)  		Logic.Recognizer.ConfidenceMargin = (int)args.EventArgs.NewValue;  }));  
Magic Number,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: RxSubscriptions.Push (ConfidenceEvent.Skip (1).Distinct ().Sample (TimeSpan.FromMilliseconds (50)).ObserveOnDispatcher ().Subscribe (args => {  	ConfidenceMarginNumber.Content = Math.Floor (args.EventArgs.NewValue).ToString ();  }));  
Magic Number,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,OnKeysReleased,The following statement contains a magic number: ThreadPool.RegisterWaitForSingleObject (PushToTalkRelease' (state' completed) => {  	if (completed)  		Dispatcher.Invoke (() => {  			Enabled = Logic.Configuration.Mode == Articulate.ListenMode.Continuous || Logic.Configuration.Mode == Articulate.ListenMode.PushToIgnore;  		});  }' null' 500' true);  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: if (nCode >= 0) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	int clickCount = 0;  	bool mouseDown = false;  	bool mouseUp = false;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONDBLCLK:  		button = MouseButtons.Left;  		clickCount = 2;  		break;  	case WM_RBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONDBLCLK:  		button = MouseButtons.Right;  		clickCount = 2;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  		break;  	case WM_XBUTTONDOWN:  		mouseDown = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONUP:  		mouseUp = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONDBLCLK:  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 2;  		break;  	default:  		//TODO: X BUTTONS (I havent them so was unable to test)  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' MouseData is not used.   		break;  	}  	//generate event   	MouseEventExtArgs e = new MouseEventExtArgs (button' clickCount' mouseHookStruct.Point.X' mouseHookStruct.Point.Y' mouseDelta);  	//Mouse up  	if (s_MouseUp != null && mouseUp) {  		s_MouseUp.Invoke (null' e);  	}  	//Mouse down  	if (s_MouseDown != null && mouseDown) {  		s_MouseDown.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClick != null && clickCount > 0) {  		s_MouseClick.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClickExt != null && clickCount > 0) {  		s_MouseClickExt.Invoke (null' e);  	}  	//If someone listens to double click and a click is heppened  	if (s_MouseDoubleClick != null && clickCount == 2) {  		s_MouseDoubleClick.Invoke (null' e);  	}  	//Wheel was moved  	if (s_MouseWheel != null && mouseDelta != 0) {  		s_MouseWheel.Invoke (null' e);  	}  	//If someone listens to move and there was a change in coordinates raise move event  	if ((s_MouseMove != null || s_MouseMoveExt != null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y)) {  		m_OldX = mouseHookStruct.Point.X;  		m_OldY = mouseHookStruct.Point.Y;  		if (s_MouseMove != null) {  			s_MouseMove.Invoke (null' e);  		}  		if (s_MouseMoveExt != null) {  			s_MouseMoveExt.Invoke (null' e);  		}  	}  	if (e.Handled) {  		return -1;  	}  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: if (nCode >= 0) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	int clickCount = 0;  	bool mouseDown = false;  	bool mouseUp = false;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONDBLCLK:  		button = MouseButtons.Left;  		clickCount = 2;  		break;  	case WM_RBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONDBLCLK:  		button = MouseButtons.Right;  		clickCount = 2;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  		break;  	case WM_XBUTTONDOWN:  		mouseDown = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONUP:  		mouseUp = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONDBLCLK:  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 2;  		break;  	default:  		//TODO: X BUTTONS (I havent them so was unable to test)  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' MouseData is not used.   		break;  	}  	//generate event   	MouseEventExtArgs e = new MouseEventExtArgs (button' clickCount' mouseHookStruct.Point.X' mouseHookStruct.Point.Y' mouseDelta);  	//Mouse up  	if (s_MouseUp != null && mouseUp) {  		s_MouseUp.Invoke (null' e);  	}  	//Mouse down  	if (s_MouseDown != null && mouseDown) {  		s_MouseDown.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClick != null && clickCount > 0) {  		s_MouseClick.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClickExt != null && clickCount > 0) {  		s_MouseClickExt.Invoke (null' e);  	}  	//If someone listens to double click and a click is heppened  	if (s_MouseDoubleClick != null && clickCount == 2) {  		s_MouseDoubleClick.Invoke (null' e);  	}  	//Wheel was moved  	if (s_MouseWheel != null && mouseDelta != 0) {  		s_MouseWheel.Invoke (null' e);  	}  	//If someone listens to move and there was a change in coordinates raise move event  	if ((s_MouseMove != null || s_MouseMoveExt != null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y)) {  		m_OldX = mouseHookStruct.Point.X;  		m_OldY = mouseHookStruct.Point.Y;  		if (s_MouseMove != null) {  			s_MouseMove.Invoke (null' e);  		}  		if (s_MouseMoveExt != null) {  			s_MouseMoveExt.Invoke (null' e);  		}  	}  	if (e.Handled) {  		return -1;  	}  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: if (nCode >= 0) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	int clickCount = 0;  	bool mouseDown = false;  	bool mouseUp = false;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONDBLCLK:  		button = MouseButtons.Left;  		clickCount = 2;  		break;  	case WM_RBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONDBLCLK:  		button = MouseButtons.Right;  		clickCount = 2;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  		break;  	case WM_XBUTTONDOWN:  		mouseDown = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONUP:  		mouseUp = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONDBLCLK:  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 2;  		break;  	default:  		//TODO: X BUTTONS (I havent them so was unable to test)  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' MouseData is not used.   		break;  	}  	//generate event   	MouseEventExtArgs e = new MouseEventExtArgs (button' clickCount' mouseHookStruct.Point.X' mouseHookStruct.Point.Y' mouseDelta);  	//Mouse up  	if (s_MouseUp != null && mouseUp) {  		s_MouseUp.Invoke (null' e);  	}  	//Mouse down  	if (s_MouseDown != null && mouseDown) {  		s_MouseDown.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClick != null && clickCount > 0) {  		s_MouseClick.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClickExt != null && clickCount > 0) {  		s_MouseClickExt.Invoke (null' e);  	}  	//If someone listens to double click and a click is heppened  	if (s_MouseDoubleClick != null && clickCount == 2) {  		s_MouseDoubleClick.Invoke (null' e);  	}  	//Wheel was moved  	if (s_MouseWheel != null && mouseDelta != 0) {  		s_MouseWheel.Invoke (null' e);  	}  	//If someone listens to move and there was a change in coordinates raise move event  	if ((s_MouseMove != null || s_MouseMoveExt != null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y)) {  		m_OldX = mouseHookStruct.Point.X;  		m_OldY = mouseHookStruct.Point.Y;  		if (s_MouseMove != null) {  			s_MouseMove.Invoke (null' e);  		}  		if (s_MouseMoveExt != null) {  			s_MouseMoveExt.Invoke (null' e);  		}  	}  	if (e.Handled) {  		return -1;  	}  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: if (nCode >= 0) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	int clickCount = 0;  	bool mouseDown = false;  	bool mouseUp = false;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONDBLCLK:  		button = MouseButtons.Left;  		clickCount = 2;  		break;  	case WM_RBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONDBLCLK:  		button = MouseButtons.Right;  		clickCount = 2;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  		break;  	case WM_XBUTTONDOWN:  		mouseDown = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONUP:  		mouseUp = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONDBLCLK:  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 2;  		break;  	default:  		//TODO: X BUTTONS (I havent them so was unable to test)  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' MouseData is not used.   		break;  	}  	//generate event   	MouseEventExtArgs e = new MouseEventExtArgs (button' clickCount' mouseHookStruct.Point.X' mouseHookStruct.Point.Y' mouseDelta);  	//Mouse up  	if (s_MouseUp != null && mouseUp) {  		s_MouseUp.Invoke (null' e);  	}  	//Mouse down  	if (s_MouseDown != null && mouseDown) {  		s_MouseDown.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClick != null && clickCount > 0) {  		s_MouseClick.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClickExt != null && clickCount > 0) {  		s_MouseClickExt.Invoke (null' e);  	}  	//If someone listens to double click and a click is heppened  	if (s_MouseDoubleClick != null && clickCount == 2) {  		s_MouseDoubleClick.Invoke (null' e);  	}  	//Wheel was moved  	if (s_MouseWheel != null && mouseDelta != 0) {  		s_MouseWheel.Invoke (null' e);  	}  	//If someone listens to move and there was a change in coordinates raise move event  	if ((s_MouseMove != null || s_MouseMoveExt != null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y)) {  		m_OldX = mouseHookStruct.Point.X;  		m_OldY = mouseHookStruct.Point.Y;  		if (s_MouseMove != null) {  			s_MouseMove.Invoke (null' e);  		}  		if (s_MouseMoveExt != null) {  			s_MouseMoveExt.Invoke (null' e);  		}  	}  	if (e.Handled) {  		return -1;  	}  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: if (nCode >= 0) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	int clickCount = 0;  	bool mouseDown = false;  	bool mouseUp = false;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONDBLCLK:  		button = MouseButtons.Left;  		clickCount = 2;  		break;  	case WM_RBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONDBLCLK:  		button = MouseButtons.Right;  		clickCount = 2;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  		break;  	case WM_XBUTTONDOWN:  		mouseDown = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONUP:  		mouseUp = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONDBLCLK:  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 2;  		break;  	default:  		//TODO: X BUTTONS (I havent them so was unable to test)  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' MouseData is not used.   		break;  	}  	//generate event   	MouseEventExtArgs e = new MouseEventExtArgs (button' clickCount' mouseHookStruct.Point.X' mouseHookStruct.Point.Y' mouseDelta);  	//Mouse up  	if (s_MouseUp != null && mouseUp) {  		s_MouseUp.Invoke (null' e);  	}  	//Mouse down  	if (s_MouseDown != null && mouseDown) {  		s_MouseDown.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClick != null && clickCount > 0) {  		s_MouseClick.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClickExt != null && clickCount > 0) {  		s_MouseClickExt.Invoke (null' e);  	}  	//If someone listens to double click and a click is heppened  	if (s_MouseDoubleClick != null && clickCount == 2) {  		s_MouseDoubleClick.Invoke (null' e);  	}  	//Wheel was moved  	if (s_MouseWheel != null && mouseDelta != 0) {  		s_MouseWheel.Invoke (null' e);  	}  	//If someone listens to move and there was a change in coordinates raise move event  	if ((s_MouseMove != null || s_MouseMoveExt != null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y)) {  		m_OldX = mouseHookStruct.Point.X;  		m_OldY = mouseHookStruct.Point.Y;  		if (s_MouseMove != null) {  			s_MouseMove.Invoke (null' e);  		}  		if (s_MouseMoveExt != null) {  			s_MouseMoveExt.Invoke (null' e);  		}  	}  	if (e.Handled) {  		return -1;  	}  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: if (nCode >= 0) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	int clickCount = 0;  	bool mouseDown = false;  	bool mouseUp = false;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONDBLCLK:  		button = MouseButtons.Left;  		clickCount = 2;  		break;  	case WM_RBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONDBLCLK:  		button = MouseButtons.Right;  		clickCount = 2;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  		break;  	case WM_XBUTTONDOWN:  		mouseDown = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONUP:  		mouseUp = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONDBLCLK:  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 2;  		break;  	default:  		//TODO: X BUTTONS (I havent them so was unable to test)  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' MouseData is not used.   		break;  	}  	//generate event   	MouseEventExtArgs e = new MouseEventExtArgs (button' clickCount' mouseHookStruct.Point.X' mouseHookStruct.Point.Y' mouseDelta);  	//Mouse up  	if (s_MouseUp != null && mouseUp) {  		s_MouseUp.Invoke (null' e);  	}  	//Mouse down  	if (s_MouseDown != null && mouseDown) {  		s_MouseDown.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClick != null && clickCount > 0) {  		s_MouseClick.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClickExt != null && clickCount > 0) {  		s_MouseClickExt.Invoke (null' e);  	}  	//If someone listens to double click and a click is heppened  	if (s_MouseDoubleClick != null && clickCount == 2) {  		s_MouseDoubleClick.Invoke (null' e);  	}  	//Wheel was moved  	if (s_MouseWheel != null && mouseDelta != 0) {  		s_MouseWheel.Invoke (null' e);  	}  	//If someone listens to move and there was a change in coordinates raise move event  	if ((s_MouseMove != null || s_MouseMoveExt != null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y)) {  		m_OldX = mouseHookStruct.Point.X;  		m_OldY = mouseHookStruct.Point.Y;  		if (s_MouseMove != null) {  			s_MouseMove.Invoke (null' e);  		}  		if (s_MouseMoveExt != null) {  			s_MouseMoveExt.Invoke (null' e);  		}  	}  	if (e.Handled) {  		return -1;  	}  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: if (nCode >= 0) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	int clickCount = 0;  	bool mouseDown = false;  	bool mouseUp = false;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONDBLCLK:  		button = MouseButtons.Left;  		clickCount = 2;  		break;  	case WM_RBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONDBLCLK:  		button = MouseButtons.Right;  		clickCount = 2;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  		break;  	case WM_XBUTTONDOWN:  		mouseDown = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONUP:  		mouseUp = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONDBLCLK:  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 2;  		break;  	default:  		//TODO: X BUTTONS (I havent them so was unable to test)  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' MouseData is not used.   		break;  	}  	//generate event   	MouseEventExtArgs e = new MouseEventExtArgs (button' clickCount' mouseHookStruct.Point.X' mouseHookStruct.Point.Y' mouseDelta);  	//Mouse up  	if (s_MouseUp != null && mouseUp) {  		s_MouseUp.Invoke (null' e);  	}  	//Mouse down  	if (s_MouseDown != null && mouseDown) {  		s_MouseDown.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClick != null && clickCount > 0) {  		s_MouseClick.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClickExt != null && clickCount > 0) {  		s_MouseClickExt.Invoke (null' e);  	}  	//If someone listens to double click and a click is heppened  	if (s_MouseDoubleClick != null && clickCount == 2) {  		s_MouseDoubleClick.Invoke (null' e);  	}  	//Wheel was moved  	if (s_MouseWheel != null && mouseDelta != 0) {  		s_MouseWheel.Invoke (null' e);  	}  	//If someone listens to move and there was a change in coordinates raise move event  	if ((s_MouseMove != null || s_MouseMoveExt != null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y)) {  		m_OldX = mouseHookStruct.Point.X;  		m_OldY = mouseHookStruct.Point.Y;  		if (s_MouseMove != null) {  			s_MouseMove.Invoke (null' e);  		}  		if (s_MouseMoveExt != null) {  			s_MouseMoveExt.Invoke (null' e);  		}  	}  	if (e.Handled) {  		return -1;  	}  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: if (nCode >= 0) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	int clickCount = 0;  	bool mouseDown = false;  	bool mouseUp = false;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Left;  		clickCount = 1;  		break;  	case WM_LBUTTONDBLCLK:  		button = MouseButtons.Left;  		clickCount = 2;  		break;  	case WM_RBUTTONDOWN:  		mouseDown = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONUP:  		mouseUp = true;  		button = MouseButtons.Right;  		clickCount = 1;  		break;  	case WM_RBUTTONDBLCLK:  		button = MouseButtons.Right;  		clickCount = 2;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  		break;  	case WM_XBUTTONDOWN:  		mouseDown = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONUP:  		mouseUp = true;  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 1;  		break;  	case WM_XBUTTONDBLCLK:  		button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  		clickCount = 2;  		break;  	default:  		//TODO: X BUTTONS (I havent them so was unable to test)  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' MouseData is not used.   		break;  	}  	//generate event   	MouseEventExtArgs e = new MouseEventExtArgs (button' clickCount' mouseHookStruct.Point.X' mouseHookStruct.Point.Y' mouseDelta);  	//Mouse up  	if (s_MouseUp != null && mouseUp) {  		s_MouseUp.Invoke (null' e);  	}  	//Mouse down  	if (s_MouseDown != null && mouseDown) {  		s_MouseDown.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClick != null && clickCount > 0) {  		s_MouseClick.Invoke (null' e);  	}  	//If someone listens to click and a click is heppened  	if (s_MouseClickExt != null && clickCount > 0) {  		s_MouseClickExt.Invoke (null' e);  	}  	//If someone listens to double click and a click is heppened  	if (s_MouseDoubleClick != null && clickCount == 2) {  		s_MouseDoubleClick.Invoke (null' e);  	}  	//Wheel was moved  	if (s_MouseWheel != null && mouseDelta != 0) {  		s_MouseWheel.Invoke (null' e);  	}  	//If someone listens to move and there was a change in coordinates raise move event  	if ((s_MouseMove != null || s_MouseMoveExt != null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y)) {  		m_OldX = mouseHookStruct.Point.X;  		m_OldY = mouseHookStruct.Point.Y;  		if (s_MouseMove != null) {  			s_MouseMove.Invoke (null' e);  		}  		if (s_MouseMoveExt != null) {  			s_MouseMoveExt.Invoke (null' e);  		}  	}  	if (e.Handled) {  		return -1;  	}  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam) {  case WM_LBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONDBLCLK:  	button = MouseButtons.Left;  	clickCount = 2;  	break;  case WM_RBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONDBLCLK:  	button = MouseButtons.Right;  	clickCount = 2;  	break;  case WM_MOUSEWHEEL:  	//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   	//One wheel click is defined as WHEEL_DELTA' which is 120.   	//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  	mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  	break;  case WM_XBUTTONDOWN:  	mouseDown = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONUP:  	mouseUp = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONDBLCLK:  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 2;  	break;  default:  	//TODO: X BUTTONS (I havent them so was unable to test)  	//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   	//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   	//and the low-order word is reserved. This value can be one or more of the following values.   	//Otherwise' MouseData is not used.   	break;  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam) {  case WM_LBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONDBLCLK:  	button = MouseButtons.Left;  	clickCount = 2;  	break;  case WM_RBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONDBLCLK:  	button = MouseButtons.Right;  	clickCount = 2;  	break;  case WM_MOUSEWHEEL:  	//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   	//One wheel click is defined as WHEEL_DELTA' which is 120.   	//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  	mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  	break;  case WM_XBUTTONDOWN:  	mouseDown = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONUP:  	mouseUp = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONDBLCLK:  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 2;  	break;  default:  	//TODO: X BUTTONS (I havent them so was unable to test)  	//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   	//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   	//and the low-order word is reserved. This value can be one or more of the following values.   	//Otherwise' MouseData is not used.   	break;  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam) {  case WM_LBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONDBLCLK:  	button = MouseButtons.Left;  	clickCount = 2;  	break;  case WM_RBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONDBLCLK:  	button = MouseButtons.Right;  	clickCount = 2;  	break;  case WM_MOUSEWHEEL:  	//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   	//One wheel click is defined as WHEEL_DELTA' which is 120.   	//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  	mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  	break;  case WM_XBUTTONDOWN:  	mouseDown = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONUP:  	mouseUp = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONDBLCLK:  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 2;  	break;  default:  	//TODO: X BUTTONS (I havent them so was unable to test)  	//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   	//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   	//and the low-order word is reserved. This value can be one or more of the following values.   	//Otherwise' MouseData is not used.   	break;  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam) {  case WM_LBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONDBLCLK:  	button = MouseButtons.Left;  	clickCount = 2;  	break;  case WM_RBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONDBLCLK:  	button = MouseButtons.Right;  	clickCount = 2;  	break;  case WM_MOUSEWHEEL:  	//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   	//One wheel click is defined as WHEEL_DELTA' which is 120.   	//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  	mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  	break;  case WM_XBUTTONDOWN:  	mouseDown = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONUP:  	mouseUp = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONDBLCLK:  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 2;  	break;  default:  	//TODO: X BUTTONS (I havent them so was unable to test)  	//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   	//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   	//and the low-order word is reserved. This value can be one or more of the following values.   	//Otherwise' MouseData is not used.   	break;  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam) {  case WM_LBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONDBLCLK:  	button = MouseButtons.Left;  	clickCount = 2;  	break;  case WM_RBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONDBLCLK:  	button = MouseButtons.Right;  	clickCount = 2;  	break;  case WM_MOUSEWHEEL:  	//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   	//One wheel click is defined as WHEEL_DELTA' which is 120.   	//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  	mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  	break;  case WM_XBUTTONDOWN:  	mouseDown = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONUP:  	mouseUp = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONDBLCLK:  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 2;  	break;  default:  	//TODO: X BUTTONS (I havent them so was unable to test)  	//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   	//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   	//and the low-order word is reserved. This value can be one or more of the following values.   	//Otherwise' MouseData is not used.   	break;  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam) {  case WM_LBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONDBLCLK:  	button = MouseButtons.Left;  	clickCount = 2;  	break;  case WM_RBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONDBLCLK:  	button = MouseButtons.Right;  	clickCount = 2;  	break;  case WM_MOUSEWHEEL:  	//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   	//One wheel click is defined as WHEEL_DELTA' which is 120.   	//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  	mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  	break;  case WM_XBUTTONDOWN:  	mouseDown = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONUP:  	mouseUp = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONDBLCLK:  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 2;  	break;  default:  	//TODO: X BUTTONS (I havent them so was unable to test)  	//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   	//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   	//and the low-order word is reserved. This value can be one or more of the following values.   	//Otherwise' MouseData is not used.   	break;  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam) {  case WM_LBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Left;  	clickCount = 1;  	break;  case WM_LBUTTONDBLCLK:  	button = MouseButtons.Left;  	clickCount = 2;  	break;  case WM_RBUTTONDOWN:  	mouseDown = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONUP:  	mouseUp = true;  	button = MouseButtons.Right;  	clickCount = 1;  	break;  case WM_RBUTTONDBLCLK:  	button = MouseButtons.Right;  	clickCount = 2;  	break;  case WM_MOUSEWHEEL:  	//If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.   	//One wheel click is defined as WHEEL_DELTA' which is 120.   	//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  	mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  	break;  case WM_XBUTTONDOWN:  	mouseDown = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONUP:  	mouseUp = true;  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 1;  	break;  case WM_XBUTTONDBLCLK:  	button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  	clickCount = 2;  	break;  default:  	//TODO: X BUTTONS (I havent them so was unable to test)  	//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   	//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   	//and the low-order word is reserved. This value can be one or more of the following values.   	//Otherwise' MouseData is not used.   	break;  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: clickCount = 2;  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: clickCount = 2;  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: clickCount = 2;  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: if (s_MouseDoubleClick != null && clickCount == 2) {  	s_MouseDoubleClick.Invoke (null' e);  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,KeyboardHookProc,The following statement contains a magic number: if (nCode >= 0) {  	//read structure KeyboardHookStruct at lParam  	KeyboardHookStruct MyKeyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct));  	//raise KeyDown  	if (s_KeyDown != null && (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.VirtualKeyCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		s_KeyDown.Invoke (null' e);  		handled = e.Handled;  	}  	// raise KeyPress  	if (s_KeyPress != null && wParam == WM_KEYDOWN) {  		bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  		bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  		byte[] keyState = new byte[256];  		GetKeyboardState (keyState);  		byte[] inBuffer = new byte[2];  		if (ToAscii (MyKeyboardHookStruct.VirtualKeyCode' MyKeyboardHookStruct.ScanCode' keyState' inBuffer' MyKeyboardHookStruct.Flags) == 1) {  			char key = (char)inBuffer [0];  			if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  				key = Char.ToUpper (key);  			KeyPressEventArgs e = new KeyPressEventArgs (key);  			s_KeyPress.Invoke (null' e);  			handled = handled || e.Handled;  		}  	}  	// raise KeyUp  	if (s_KeyUp != null && (wParam == WM_KEYUP || wParam == WM_SYSKEYUP)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.VirtualKeyCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		s_KeyUp.Invoke (null' e);  		handled = handled || e.Handled;  	}  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,KeyboardHookProc,The following statement contains a magic number: if (nCode >= 0) {  	//read structure KeyboardHookStruct at lParam  	KeyboardHookStruct MyKeyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct));  	//raise KeyDown  	if (s_KeyDown != null && (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.VirtualKeyCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		s_KeyDown.Invoke (null' e);  		handled = e.Handled;  	}  	// raise KeyPress  	if (s_KeyPress != null && wParam == WM_KEYDOWN) {  		bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  		bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  		byte[] keyState = new byte[256];  		GetKeyboardState (keyState);  		byte[] inBuffer = new byte[2];  		if (ToAscii (MyKeyboardHookStruct.VirtualKeyCode' MyKeyboardHookStruct.ScanCode' keyState' inBuffer' MyKeyboardHookStruct.Flags) == 1) {  			char key = (char)inBuffer [0];  			if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  				key = Char.ToUpper (key);  			KeyPressEventArgs e = new KeyPressEventArgs (key);  			s_KeyPress.Invoke (null' e);  			handled = handled || e.Handled;  		}  	}  	// raise KeyUp  	if (s_KeyUp != null && (wParam == WM_KEYUP || wParam == WM_SYSKEYUP)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.VirtualKeyCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		s_KeyUp.Invoke (null' e);  		handled = handled || e.Handled;  	}  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,KeyboardHookProc,The following statement contains a magic number: if (s_KeyPress != null && wParam == WM_KEYDOWN) {  	bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  	bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  	byte[] keyState = new byte[256];  	GetKeyboardState (keyState);  	byte[] inBuffer = new byte[2];  	if (ToAscii (MyKeyboardHookStruct.VirtualKeyCode' MyKeyboardHookStruct.ScanCode' keyState' inBuffer' MyKeyboardHookStruct.Flags) == 1) {  		char key = (char)inBuffer [0];  		if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  			key = Char.ToUpper (key);  		KeyPressEventArgs e = new KeyPressEventArgs (key);  		s_KeyPress.Invoke (null' e);  		handled = handled || e.Handled;  	}  }  
Magic Number,SierraLib.GlobalHooks,HookManager,D:\newReposJune17\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,KeyboardHookProc,The following statement contains a magic number: if (s_KeyPress != null && wParam == WM_KEYDOWN) {  	bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  	bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  	byte[] keyState = new byte[256];  	GetKeyboardState (keyState);  	byte[] inBuffer = new byte[2];  	if (ToAscii (MyKeyboardHookStruct.VirtualKeyCode' MyKeyboardHookStruct.ScanCode' keyState' inBuffer' MyKeyboardHookStruct.Flags) == 1) {  		char key = (char)inBuffer [0];  		if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  			key = Char.ToUpper (key);  		KeyPressEventArgs e = new KeyPressEventArgs (key);  		s_KeyPress.Invoke (null' e);  		handled = handled || e.Handled;  	}  }  
Missing Default,Articulate,MouseOutputBase,D:\newReposJune17\Mpstark_articulate\Articulate\IO\DirectInput.cs,ToDirectInput,The following switch statement is missing a default case: switch (Button) {  case System.Windows.Forms.MouseButtons.Left:  	input.Mouse.Flags = 0x2;  	break;  case System.Windows.Forms.MouseButtons.Right:  	input.Mouse.Flags = 0x8;  	break;  case System.Windows.Forms.MouseButtons.Middle:  	input.Mouse.Flags = 0x20;  	break;  case System.Windows.Forms.MouseButtons.XButton1:  	input.Mouse.Flags = 0x80;  	input.Mouse.Data = 0x1;  	break;  case System.Windows.Forms.MouseButtons.XButton2:  	input.Mouse.Flags = 0x80;  	input.Mouse.Data = 0x2;  	break;  }  
Missing Default,Articulate,MainWindow,D:\newReposJune17\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Translation_LanguageChanged,The following switch statement is missing a default case: switch (Logic.Recognizer.State) {  case VoiceRecognizer.VoiceRecognizerState.Error:  	State = "state_error".Translate ("ERROR");  	break;  case VoiceRecognizer.VoiceRecognizerState.Listening:  case VoiceRecognizer.VoiceRecognizerState.ListeningOnce:  	State = "state_online".Translate ("LISTENING");  	break;  case VoiceRecognizer.VoiceRecognizerState.Paused:  case VoiceRecognizer.VoiceRecognizerState.Pausing:  	State = "state_offline".Translate ("OFFLINE");  	break;  }  
