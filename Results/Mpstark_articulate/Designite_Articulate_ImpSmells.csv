Implementation smell,Namespace,Class,File,Method,Description
Long Method,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The method has 378 lines of code.
Long Method,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The method has 143 lines of code.
Complex Method,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,Cyclomatic complexity of the method is 22
Complex Method,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,KeyboardHookProc,Cyclomatic complexity of the method is 8
Long Parameter List,Articulate,Command,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\CommandChunks\Command.cs,Command,The method has 5 parameters. Parameters: semantic' alternates' keyList' subjectRef' directObject
Long Parameter List,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,ToAscii,The method has 5 parameters. Parameters: uVirtKey' uScanCode' lpbKeyState' lpwTransKey' fuState
Long Parameter List,SierraLib.GlobalHooks,MouseEventExtArgs,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\MouseEventExtArgs.cs,MouseEventExtArgs,The method has 5 parameters. Parameters: buttons' clicks' x' y' delta
Long Identifier,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,,The length of the parameter ArticulateErrorMessageProperty is 30.
Long Statement,Articulate,AdvancedSettings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "			var CommandPauseEvent = Observable.FromEventPattern<RoutedPropertyChangedEventArgs<double>>(EndCommandPause' "ValueChanged");" is 125.
Long Statement,Articulate,AdvancedSettings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "			RxSubscriptions.Push(CommandPauseEvent.Skip(1).Distinct().Sample(TimeSpan.FromMilliseconds(50)).ObserveOnDispatcher().Subscribe(args =>" is 135.
Long Statement,Articulate,AdvancedSettings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "			RxSubscriptions.Push(CommandPauseEvent.Skip(1).Distinct().Sample(TimeSpan.FromMilliseconds(500)).ObserveOn(ThreadPoolScheduler.Instance).Subscribe(args =>" is 154.
Long Statement,Articulate,AdvancedSettings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "			var KeyReleaseEvent = Observable.FromEventPattern<RoutedPropertyChangedEventArgs<double>>(KeyReleasePause' "ValueChanged");" is 123.
Long Statement,Articulate,AdvancedSettings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "			RxSubscriptions.Push(KeyReleaseEvent.Skip(1).Distinct().Sample(TimeSpan.FromMilliseconds(50)).ObserveOnDispatcher().Subscribe(args =>" is 133.
Long Statement,Articulate,AdvancedSettings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The length of the statement  "			RxSubscriptions.Push(KeyReleaseEvent.Skip(1).Distinct().Sample(TimeSpan.FromMilliseconds(500)).ObserveOn(ThreadPoolScheduler.Instance).Subscribe(args =>" is 152.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command map = new Command("MAP"' new string[] { "map"' "toggle map"' "show map"' "hide map"' "open map"' "close map" }' new[] { DirectInputEmulator.KeyPress(DirectInputKeys.M) }); " is 179.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command inventory = new Command("INVENTORY"' new string[] { "inventory"' "toggle inventory"' "show inventory"' "hide inventory"' "open inventory"' "close inventory" }' new[] { DirectInputEmulator.KeyPress(DirectInputKeys.I) }); " is 227.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command lights = new Command("LIGHTS"' new string[] { "lights"' "light"' "flashlight"' "torch"' "laser" }' new[] { DirectInputEmulator.KeyPress(DirectInputKeys.L) }); " is 166.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command returnToFormation = new Command("FORMUP"' new string[] { "return to formation"' "form up"' "fallback"' "fall back"' "regroup"' "join up"' "rally on me"' "rally to me" }' new [] { DirectInputEmulator.KeyPress(DirectInputKeys.One)' DirectInputEmulator.KeyPress(DirectInputKeys.One) }' subjectRef);" is 303.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "			Command advance = new Command("ADVANCE"' new string[] { "advance"' "move up" }' new[] { DirectInputEmulator.KeyPress(DirectInputKeys.One)' DirectInputEmulator.KeyPress(DirectInputKeys.Two) }' subjectRef);" is 204.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command stayBack = new Command("STAYBACK"' new string[] { "stay back"' "go back"' "back up" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.One)'  DirectInputEmulator.KeyPress(DirectInputKeys.Three) }' subjectRef);" is 224.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command flankLeft = new Command("FLANKLEFT"' new string[] { "flank left"' "go left" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.One)'  DirectInputEmulator.KeyPress(DirectInputKeys.Four) }' subjectRef);" is 215.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command flankRight = new Command("FLANKRIGHT"' new string[] { "flank right"' "go right" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.One)'  DirectInputEmulator.KeyPress(DirectInputKeys.Five) }' subjectRef);" is 219.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command stop = new Command("STOP"' new string[] { "stop"' "hold position"' "halt"' "stay there"' "stay here" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.One)'  DirectInputEmulator.KeyPress(DirectInputKeys.Six) }' subjectRef);" is 239.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command waitForMe = new Command("WAIT"' new string[] { "wait for me"' "wait up"' "wait" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.One)'  DirectInputEmulator.KeyPress(DirectInputKeys.Six) }' subjectRef);" is 218.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command cover = new Command("COVER"' new string[] { "go for cover"' "look for cover"' "cover"' "find cover"' "get to cover"' "hide" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.One)'  DirectInputEmulator.KeyPress(DirectInputKeys.Seven) }' subjectRef);" is 264.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command nextWaypoint = new Command("NEXTWAYPOINT"' new string[] { "next waypoint"' "go to the next waypoint" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.One)'  DirectInputEmulator.KeyPress(DirectInputKeys.Eight) }' subjectRef);" is 241.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command moveTo = new Command("MOVETO"' new string[] { "move to"' "move"' "move there"' "move up" }' new[] { DirectInputEmulator.KeyPress(DirectInputKeys.Space) }' subjectRef); " is 175.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command openTargetMenu = new Command("OPENTARGET"' new string[] { "show targets"' "target menu"' "open target menu"' "targets" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Two) }' subjectRef);" is 205.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command cancelTarget = new Command("CANCELTARGET"' new string[] { "cancel target"' "cancel targets"' "no target" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Two)'  DirectInputEmulator.KeyPress(DirectInputKeys.One) }' subjectRef);" is 243.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command openFire = new Command("OPENFIRE"' new string[] { "open fire"' "go loud"' "fire at will" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Three)'  DirectInputEmulator.KeyPress(DirectInputKeys.One) }' subjectRef);" is 229.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command holdFire = new Command("HOLDFIRE"' new string[] { "hold fire"' "go quiet"' "cease fire" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Three)'  DirectInputEmulator.KeyPress(DirectInputKeys.Two) }' subjectRef);" is 228.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command fire = new Command("FIRE"' new string[] { "fire"' "take the shot" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Three)'  DirectInputEmulator.KeyPress(DirectInputKeys.Three) }' subjectRef);" is 208.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command engage = new Command("ENGAGE"' new string[] { "engage"' "move to engage" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Three)'  DirectInputEmulator.KeyPress(DirectInputKeys.Four) }' subjectRef);" is 214.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command enageAtWill = new Command("ENGAGEATWILL"' new string[] { "engage at will" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Three)'  DirectInputEmulator.KeyPress(DirectInputKeys.Five) }' subjectRef);" is 215.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command disengage = new Command("DISENGAGE"' new string[] { "disengage" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Three)'  DirectInputEmulator.KeyPress(DirectInputKeys.Six) }' subjectRef);" is 204.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command scanHorizon = new Command("SCANHORIZON"' new string[] { "scan horizon"' "scan the horizon" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Three)'  DirectInputEmulator.KeyPress(DirectInputKeys.Seven) }' subjectRef);" is 233.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            direction.Add(new string[] { "north east" }' "NORTHEAST"' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Two) });" is 121.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            direction.Add(new string[] { "south east" }' "SOUTHEAST"' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Four) });" is 122.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            direction.Add(new string[] { "south west" }' "SOUTHWEST"' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Six) });" is 121.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            direction.Add(new string[] { "north west" }' "NORTHWEST"' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Eight) });" is 123.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command watch = new Command("WATCH"' new string[] { "watch"' "watch the"}' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Three)'  DirectInputEmulator.KeyPress(DirectInputKeys.Eight) }' subjectRef' direction);" is 217.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command suppresiveFire = new Command("SUPRESS"' new string[] { "suppresive fire"' "suppress" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Three)'  DirectInputEmulator.KeyPress(DirectInputKeys.Nine) }' subjectRef);" is 226.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command openMountMenu = new Command("OPENMOUNT"' new string[] { "show mount menu"' "open mount menu"' "show vehicles"' "mount menu"' "get in vehicle" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Four) }' subjectRef);" is 229.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command dismount = new Command("DISMOUNT"' new string[] { "dismount"' "get out" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Four)'  DirectInputEmulator.KeyPress(DirectInputKeys.One) }' subjectRef);" is 211.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command lowfuel = new Command("LOWFUEL"' new string[] { "fuel low"' "bingo fuel"' "be advised bingo fuel"' "be advised low fuel"' "be advised fuel low" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Five)'  DirectInputEmulator.KeyPress(DirectInputKeys.Two) }' subjectRef);" is 283.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command lowammo = new Command("LOWAMMO"' new string[] { "I'm running low on ammo"' "running low on ammo"' "ammo low" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Five)'  DirectInputEmulator.KeyPress(DirectInputKeys.Three) }' subjectRef);" is 250.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command injured = new Command("INJURED"' new string[] { "I'm injured"' "injured"' "medic"' "I need a medic"' "I need some help"' "I need some help now"' "somebody help me"' "wounded"' "I'm hit"' "fuck I'm hurt" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Five)'  DirectInputEmulator.KeyPress(DirectInputKeys.Four) }' subjectRef);" is 343.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command sitrep = new Command("SITREP"' new string[] { "report in over"' "sitrep"' "report status"' "report in" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Five)'  DirectInputEmulator.KeyPress(DirectInputKeys.Five) }' subjectRef);" is 243.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command underfire = new Command("underfire"' new string[] { "I'm under fire"' "taking fire"' "under fire"' "enemy fire" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Five)'  DirectInputEmulator.KeyPress(DirectInputKeys.Six) }' subjectRef);" is 251.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command hostiledown = new Command("HOSTILEDOWN"' new string[] { "hostile down"' "target down"' "scratch one"' "he is down"' "target neutralized"' "tango down" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Five)'  DirectInputEmulator.KeyPress(DirectInputKeys.Seven) }' subjectRef);" is 292.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command friendlydown = new Command("KIA"' new string[] { "we have lost one"' "man down"' "he is hit"' "shit we have got a man down"' "we have got a man down" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Five)'  DirectInputEmulator.KeyPress(DirectInputKeys.Eight) }' subjectRef);" is 291.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command openActionMenu = new Command("OPENACTION"' new string[] { "show actions"' "action menu"' "perform action"' "do action"' "open action menu"' "actions" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Six) }' subjectRef);" is 236.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command stealth = new Command("STEALTH"' new string[] { "stealth"' "stealthy"' "stealth mode" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Seven)'  DirectInputEmulator.KeyPress(DirectInputKeys.One) }' subjectRef);" is 226.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command combat = new Command("COMBAT"' new string[] { "combat"' "danger"' "combat mode" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Seven)'  DirectInputEmulator.KeyPress(DirectInputKeys.Two) }' subjectRef);" is 220.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "			Command aware = new Command("AWARE"' new string[] { "aware"' "alert"' "aware mode"' "stay sharp"' "stay frosty"' "stay alert" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Seven)'  DirectInputEmulator.KeyPress(DirectInputKeys.Three) }' subjectRef);" is 260.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command relax = new Command("RELAX"' new string[] { "relax"' "relaxed mode"' "safe" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Seven)'  DirectInputEmulator.KeyPress(DirectInputKeys.Four) }' subjectRef);" is 217.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command standUp = new Command("STANDUP"' new string[] { "stand up"' "get up"' "stand" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Seven)'  DirectInputEmulator.KeyPress(DirectInputKeys.Six) }' subjectRef);" is 218.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command stayCrouched = new Command("CROUCH"' new string[] { "get low"' "crouch"' "stay crouched"' "stay low" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Seven)'  DirectInputEmulator.KeyPress(DirectInputKeys.Seven) }' subjectRef);" is 243.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command goProne = new Command("PRONE"' new string[] { "go prone"' "get down"' "prone"' "hit the dirt"' "down" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Seven)'  DirectInputEmulator.KeyPress(DirectInputKeys.Eight) }' subjectRef);" is 244.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command copyMyStance = new Command("COPYMYSTANCE"' new string[] { "copy my stance"' "default stance" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Seven)'  DirectInputEmulator.KeyPress(DirectInputKeys.Nine) }' subjectRef);" is 234.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command column = new Command("COLUMN"' new string[] { "formation column"' "form column"}' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Eight)'  DirectInputEmulator.KeyPress(DirectInputKeys.One) }' subjectRef);" is 219.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command staggeredColumn = new Command("STAGGEREDCOLUMN"' new string[] { "formation staggered column"' "form staggered column" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Eight)'  DirectInputEmulator.KeyPress(DirectInputKeys.Two) }' subjectRef);" is 258.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command wedge = new Command("WEDGE"' new string[] { "formation wedge"' "form wedge" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Eight)'  DirectInputEmulator.KeyPress(DirectInputKeys.Three) }' subjectRef);" is 218.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command echelonLeft = new Command("ECHELONLEFT"' new string[] { "formation echelon left"' "form echelon left" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Eight)'  DirectInputEmulator.KeyPress(DirectInputKeys.Four) }' subjectRef);" is 243.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command echeloneRight = new Command("ECHELONRIGHT"' new string[] { "formation echelon right"' "form echelon right" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Eight)'  DirectInputEmulator.KeyPress(DirectInputKeys.Five) }' subjectRef);" is 248.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command vee = new Command("VEE"' new string[] { "formation vee"' "form vee" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Eight)'  DirectInputEmulator.KeyPress(DirectInputKeys.Six) }' subjectRef);" is 208.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command line = new Command("LINE"' new string[] { "formation line"' "form line" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Eight)'  DirectInputEmulator.KeyPress(DirectInputKeys.Seven) }' subjectRef);" is 214.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command file = new Command("FILE"' new string[] { "formation file"' "form file" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Eight)'  DirectInputEmulator.KeyPress(DirectInputKeys.Eight) }' subjectRef);" is 214.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command diamond = new Command("DIAMOND"' new string[] { "formation diamond"' "form diamond" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Eight)'  DirectInputEmulator.KeyPress(DirectInputKeys.Nine) }' subjectRef);" is 225.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            team.Add(new string[] { "team green"' "green" }' "GREEN"' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Two) });" is 121.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            team.Add(new string[] { "team blue"' "blue" }' "BLUE"' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Three) });" is 120.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            team.Add(new string[] { "team yellow"' "yellow" }' "YELLOW"' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Four) });" is 125.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            team.Add(new string[] { "team white"' "white" }' "WHITE"' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Five) });" is 122.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,BuildSrgsGrammar,The length of the statement  "            Command assignTeam = new Command("ASSIGN"' new string[] { "assign"' "assign to"' "add to"' "switch to" }' new [] {  DirectInputEmulator.KeyPress(DirectInputKeys.Nine) }' subjectRef' team);" is 188.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,ExecuteAsync,The length of the statement  "						await DirectInputEmulator.SendInputAsync(subjectObject.KeyLookup[subject].SpaceOperations(Core.Instance.Configuration.KeyPressDelay));" is 134.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,ExecuteAsync,The length of the statement  "				await DirectInputEmulator.SendInputAsync(commandObjects[command].KeyLookup[command].SpaceOperations(Core.Instance.Configuration.KeyPressDelay));" is 144.
Long Statement,Articulate,CommandPool,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\CommandPool.cs,ExecuteAsync,The length of the statement  "					await DirectInputEmulator.SendInputAsync(commandObjects[command].KeyLookup[directObject].SpaceOperations(Core.Instance.Configuration.KeyPressDelay));" is 149.
Long Statement,Articulate,SoundEffectsPlayer,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\SoundEffectsPlayer.cs,CreatePlayers,The length of the statement  "						this.m_SoundEffectPlayers.Add(SoundEffects.CommandAccepted' new SoundPlayer(Resources.SoundEffects.SoundEffects.command_accepted));" is 131.
Long Statement,Articulate,SoundEffectsPlayer,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\SoundEffectsPlayer.cs,CreatePlayers,The length of the statement  "						this.m_SoundEffectPlayers.Add(SoundEffects.CommandRejected' new SoundPlayer(Resources.SoundEffects.SoundEffects.command_rejected));" is 131.
Long Statement,Articulate,SoundEffectsPlayer,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\SoundEffectsPlayer.cs,CreatePlayers,The length of the statement  "						this.m_SoundEffectPlayers.Add(SoundEffects.StartListening' new SoundPlayer(Resources.SoundEffects.SoundEffects.started_listening));" is 131.
Long Statement,Articulate,SoundEffectsPlayer,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\SoundEffectsPlayer.cs,CreatePlayers,The length of the statement  "						this.m_SoundEffectPlayers.Add(SoundEffects.StopListening' new SoundPlayer(Resources.SoundEffects.SoundEffects.stopped_listening));" is 130.
Long Statement,Articulate,VoiceRecognizer,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\VoiceRecognizer.cs,sre_SpeechRecognized,The length of the statement  "			TriggerCommandAccepted(recognizedPhrase.Result.Words.Aggregate(""' (phraseSoFar' word) => phraseSoFar + word.Text + " ")' recognizedPhrase.Result.Confidence); " is 158.
Long Statement,Articulate,VoiceRecognizer,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\VoiceRecognizer.cs,sre_SpeechRecognized,The length of the statement  "				Trace.WriteLine(string.Format("Skipping command' {0} is not in the list of monitored applications"' activeApplication)); " is 120.
Long Statement,Articulate,VoiceRecognizer,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\VoiceRecognizer.cs,sre_SpeechRecognitionRejected,The length of the statement  "			TriggerCommandRejected(recognizedPhrase.Result.Words.Aggregate(""' (phraseSoFar' word) => phraseSoFar + word.Text + " ")' recognizedPhrase.Result.Confidence); " is 158.
Long Statement,Articulate,App,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\App.xaml.cs,HandleError,The length of the statement  "			using (StreamWriter sw = new StreamWriter(Path.Combine(crashLogFolder' "Crash - " + DateTime.Now.ToString("yyyy-MM-dd HH-mm-ss") + ".txt")))" is 140.
Long Statement,Articulate,DirectInputEmulator,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\IO\DirectInputEmulator.cs,KeyPress,The length of the statement  "				return new OutputGroup(keys.Select(x => (OutputBase)new KeyDown(x)).SpaceOperations(Core.Instance.Configuration.KeyReleaseDelay)" is 128.
Long Statement,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Window_Loaded,The length of the statement  "						TranslationManager.Instance.Translations.Add(new FileBasedTranslation(CultureInfo.GetCultureInfo(System.IO.Path.GetFileNameWithoutExtension(file.Name))' fs)); " is 158.
Long Statement,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Window_Loaded,The length of the statement  "			LanguageList.ItemsSource = TranslationManager.Instance.Translations.Select(x => x["translation_language"' null] ?? x.Culture.DisplayName); " is 138.
Long Statement,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Window_Loaded,The length of the statement  "			LanguageList.SelectedItem = TranslationManager.Instance.CurrentTranslation["translation_language"' null] ?? TranslationManager.Instance.CurrentLanguage.DisplayName; " is 164.
Long Statement,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,LoadRecognizer,The length of the statement  "				Enabled = Logic.Configuration.Mode == Articulate.ListenMode.Continuous || Logic.Configuration.Mode == Articulate.ListenMode.PushToIgnore; " is 137.
Long Statement,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,AdvancedSettings_Click,The length of the statement  "			Enabled = Logic.Configuration.Mode == Articulate.ListenMode.Continuous || Logic.Configuration.Mode == Articulate.ListenMode.PushToIgnore; " is 137.
Long Statement,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,OnKeysPressed,The length of the statement  "				Enabled = Logic.Configuration.Mode == Articulate.ListenMode.PushToTalk || Logic.Configuration.Mode == Articulate.ListenMode.PushToArm; " is 134.
Long Statement,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,OnKeysReleased,The length of the statement  "						Enabled = Logic.Configuration.Mode == Articulate.ListenMode.Continuous || Logic.Configuration.Mode == Articulate.ListenMode.PushToIgnore; " is 137.
Long Statement,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,ListenMode_Selected,The length of the statement  "			Enabled = Logic.Configuration.Mode == Articulate.ListenMode.Continuous || Logic.Configuration.Mode == Articulate.ListenMode.PushToIgnore; " is 137.
Long Statement,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Languages_SelectionChanged,The length of the statement  "			var translation = TranslationManager.Instance.Translations.Find(x => (x["translation_language"' null] ?? x.Culture.DisplayName) == LanguageList.SelectedItem.ToString()); " is 169.
Long Statement,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The length of the statement  "                if ((s_MouseMove!=null || s_MouseMoveExt!=null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y))" is 124.
Long Statement,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,EnsureSubscribedToGlobalMouseEvents,The length of the statement  "                    //Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set. " is 148.
Long Statement,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,ForceUnsunscribeFromGlobalMouseEvents,The length of the statement  "                    //Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set. " is 148.
Long Statement,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,KeyboardHookProc,The length of the statement  "                KeyboardHookStruct MyKeyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure(lParam' typeof(KeyboardHookStruct));" is 121.
Long Statement,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,EnsureSubscribedToGlobalKeyboardEvents,The length of the statement  "                    //Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set. " is 148.
Long Statement,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,ForceUnsunscribeFromGlobalKeyboardEvents,The length of the statement  "                    //Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set. " is 148.
Complex Conditional,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The conditional expression  "(s_MouseMove!=null || s_MouseMoveExt!=null) && (m_OldX != mouseHookStruct.Point.X || m_OldY != mouseHookStruct.Point.Y)"  is complex.
Complex Conditional,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,TryUnsubscribeFromGlobalMouseEvents,The conditional expression  "s_MouseClick == null &&                 s_MouseDown == null &&                 s_MouseMove == null &&                 s_MouseUp == null &&                 s_MouseClickExt == null &&                 s_MouseMoveExt == null &&                 s_MouseWheel == null"  is complex.
Empty Catch Block,Articulate,Settings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Settings\Settings.cs,Save,The method has an empty catch block.
Empty Catch Block,Articulate,App,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\App.xaml.cs,WriteError,The method has an empty catch block.
Magic Number,Articulate,AdvancedSettings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The following statement contains a magic number: RxSubscriptions.Push(CommandPauseEvent.Skip(1).Distinct().Sample(TimeSpan.FromMilliseconds(50)).ObserveOnDispatcher().Subscribe(args => 			{ 				EndCommandPauseNumber.Content = Math.Floor(args.EventArgs.NewValue).ToString(); 			}));
Magic Number,Articulate,AdvancedSettings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The following statement contains a magic number: RxSubscriptions.Push(CommandPauseEvent.Skip(1).Distinct().Sample(TimeSpan.FromMilliseconds(500)).ObserveOn(ThreadPoolScheduler.Instance).Subscribe(args => 			{ 				Logic.Configuration.EndCommandPause = (int)args.EventArgs.NewValue;  				if (Logic != null) 					Logic.Recognizer.EndSilenceTimeout = (int)args.EventArgs.NewValue; 			}));
Magic Number,Articulate,AdvancedSettings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The following statement contains a magic number: RxSubscriptions.Push(KeyReleaseEvent.Skip(1).Distinct().Sample(TimeSpan.FromMilliseconds(50)).ObserveOnDispatcher().Subscribe(args => 			{ 				KeyReleasePauseNumber.Content = Math.Floor(args.EventArgs.NewValue).ToString(); 			}));
Magic Number,Articulate,AdvancedSettings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\AdvancedSettings.xaml.cs,OnLoaded,The following statement contains a magic number: RxSubscriptions.Push(KeyReleaseEvent.Skip(1).Distinct().Sample(TimeSpan.FromMilliseconds(500)).ObserveOn(ThreadPoolScheduler.Instance).Subscribe(args => 			{ 				Logic.Configuration.KeyReleaseDelay = (int)args.EventArgs.NewValue;  				if (Logic != null) 					Logic.Recognizer.EndSilenceTimeout = (int)args.EventArgs.NewValue; 			}));
Magic Number,Articulate,Subject,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\CommandChunks\Subject.cs,GenerateRuleList,The following statement contains a magic number: squadNumbersConcatChoice.SetRepeat(1' 10);
Magic Number,Articulate,ForegroundProcess,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\ForegroundProcess.cs,GetExecutablePath,The following statement contains a magic number: Environment.OSVersion.Version.Major >= 6
Magic Number,Articulate,ForegroundProcess,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\ForegroundProcess.cs,GetExecutablePathAboveVista,The following statement contains a magic number: var buffer = new StringBuilder(1024);
Magic Number,Articulate,VoiceRecognizer,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Components\VoiceRecognizer.cs,VoiceRecognizer,The following statement contains a magic number: ConfidenceMargin = 90;
Magic Number,Articulate,Settings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Settings\Settings.cs,Settings,The following statement contains a magic number: ConfidenceMargin = 80;
Magic Number,Articulate,Settings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Settings\Settings.cs,Settings,The following statement contains a magic number: EndCommandPause = 500;
Magic Number,Articulate,Settings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Settings\Settings.cs,Settings,The following statement contains a magic number: KeyPressDelay = 75;
Magic Number,Articulate,Settings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Settings\Settings.cs,Settings,The following statement contains a magic number: KeyReleaseDelay = 25;
Magic Number,Articulate,Settings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Settings\Settings.cs,Settings,The following statement contains a magic number: MouseReleaseDelay = 25;
Magic Number,Articulate,Settings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Settings\Settings.cs,EnsureRanges,The following statement contains a magic number: KeyPressDelay = Math.Max(Math.Min(KeyPressDelay' 200)' 0);
Magic Number,Articulate,Settings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Settings\Settings.cs,EnsureRanges,The following statement contains a magic number: KeyReleaseDelay = Math.Max(Math.Min(KeyReleaseDelay' 500)' 10);
Magic Number,Articulate,Settings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Settings\Settings.cs,EnsureRanges,The following statement contains a magic number: KeyReleaseDelay = Math.Max(Math.Min(KeyReleaseDelay' 500)' 10);
Magic Number,Articulate,Settings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Settings\Settings.cs,EnsureRanges,The following statement contains a magic number: MouseReleaseDelay = Math.Max(Math.Min(MouseReleaseDelay' 500)' 10);
Magic Number,Articulate,Settings,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\Settings\Settings.cs,EnsureRanges,The following statement contains a magic number: MouseReleaseDelay = Math.Max(Math.Min(MouseReleaseDelay' 500)' 10);
Magic Number,Articulate,App,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\App.xaml.cs,HandleError,The following statement contains a magic number: sw.WriteLine("64-Bit: " + (IntPtr.Size == 8 ? "Yes" : "No"));
Magic Number,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: RxSubscriptions.Push(ConfidenceEvent.Skip(1).Distinct().Sample(TimeSpan.FromMilliseconds(500)).Subscribe(args =>  			{  				Logic.Configuration.ConfidenceMargin = (int)args.EventArgs.NewValue;    				if (Logic != null)  					Logic.Recognizer.ConfidenceMargin = (int)args.EventArgs.NewValue;  			}));
Magic Number,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: RxSubscriptions.Push(ConfidenceEvent.Skip(1).Distinct().Sample(TimeSpan.FromMilliseconds(50)).ObserveOnDispatcher().Subscribe(args =>  			{  				ConfidenceMarginNumber.Content = Math.Floor(args.EventArgs.NewValue).ToString();  			}));
Magic Number,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,OnKeysReleased,The following statement contains a magic number: ThreadPool.RegisterWaitForSingleObject(PushToTalkRelease' (state' completed) =>  			{  				if (completed)  					Dispatcher.Invoke(() =>  					{  						Enabled = Logic.Configuration.Mode == Articulate.ListenMode.Continuous || Logic.Configuration.Mode == Articulate.ListenMode.PushToIgnore;  					});  			}' null' 500' true);
Magic Number,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam)                 {                     case WM_LBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONDBLCLK:                          button = MouseButtons.Left;                         clickCount = 2;                         break;                     case WM_RBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONDBLCLK:                          button = MouseButtons.Right;                         clickCount = 2;                         break;                     case WM_MOUSEWHEEL:                         //If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.                          //One wheel click is defined as WHEEL_DELTA' which is 120.                          //(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value                         mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);                         break;                      case WM_XBUTTONDOWN:                         mouseDown = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONUP:                         mouseUp = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONDBLCLK:                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 2;                         break;                      default:                     //TODO: X BUTTONS (I havent them so was unable to test)                         //If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'                          //or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'                          //and the low-order word is reserved. This value can be one or more of the following values.                          //Otherwise' MouseData is not used.                          break;                 }
Magic Number,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam)                 {                     case WM_LBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONDBLCLK:                          button = MouseButtons.Left;                         clickCount = 2;                         break;                     case WM_RBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONDBLCLK:                          button = MouseButtons.Right;                         clickCount = 2;                         break;                     case WM_MOUSEWHEEL:                         //If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.                          //One wheel click is defined as WHEEL_DELTA' which is 120.                          //(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value                         mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);                         break;                      case WM_XBUTTONDOWN:                         mouseDown = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONUP:                         mouseUp = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONDBLCLK:                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 2;                         break;                      default:                     //TODO: X BUTTONS (I havent them so was unable to test)                         //If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'                          //or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'                          //and the low-order word is reserved. This value can be one or more of the following values.                          //Otherwise' MouseData is not used.                          break;                 }
Magic Number,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam)                 {                     case WM_LBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONDBLCLK:                          button = MouseButtons.Left;                         clickCount = 2;                         break;                     case WM_RBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONDBLCLK:                          button = MouseButtons.Right;                         clickCount = 2;                         break;                     case WM_MOUSEWHEEL:                         //If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.                          //One wheel click is defined as WHEEL_DELTA' which is 120.                          //(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value                         mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);                         break;                      case WM_XBUTTONDOWN:                         mouseDown = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONUP:                         mouseUp = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONDBLCLK:                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 2;                         break;                      default:                     //TODO: X BUTTONS (I havent them so was unable to test)                         //If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'                          //or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'                          //and the low-order word is reserved. This value can be one or more of the following values.                          //Otherwise' MouseData is not used.                          break;                 }
Magic Number,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam)                 {                     case WM_LBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONDBLCLK:                          button = MouseButtons.Left;                         clickCount = 2;                         break;                     case WM_RBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONDBLCLK:                          button = MouseButtons.Right;                         clickCount = 2;                         break;                     case WM_MOUSEWHEEL:                         //If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.                          //One wheel click is defined as WHEEL_DELTA' which is 120.                          //(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value                         mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);                         break;                      case WM_XBUTTONDOWN:                         mouseDown = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONUP:                         mouseUp = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONDBLCLK:                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 2;                         break;                      default:                     //TODO: X BUTTONS (I havent them so was unable to test)                         //If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'                          //or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'                          //and the low-order word is reserved. This value can be one or more of the following values.                          //Otherwise' MouseData is not used.                          break;                 }
Magic Number,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam)                 {                     case WM_LBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONDBLCLK:                          button = MouseButtons.Left;                         clickCount = 2;                         break;                     case WM_RBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONDBLCLK:                          button = MouseButtons.Right;                         clickCount = 2;                         break;                     case WM_MOUSEWHEEL:                         //If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.                          //One wheel click is defined as WHEEL_DELTA' which is 120.                          //(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value                         mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);                         break;                      case WM_XBUTTONDOWN:                         mouseDown = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONUP:                         mouseUp = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONDBLCLK:                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 2;                         break;                      default:                     //TODO: X BUTTONS (I havent them so was unable to test)                         //If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'                          //or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'                          //and the low-order word is reserved. This value can be one or more of the following values.                          //Otherwise' MouseData is not used.                          break;                 }
Magic Number,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam)                 {                     case WM_LBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONDBLCLK:                          button = MouseButtons.Left;                         clickCount = 2;                         break;                     case WM_RBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONDBLCLK:                          button = MouseButtons.Right;                         clickCount = 2;                         break;                     case WM_MOUSEWHEEL:                         //If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.                          //One wheel click is defined as WHEEL_DELTA' which is 120.                          //(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value                         mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);                         break;                      case WM_XBUTTONDOWN:                         mouseDown = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONUP:                         mouseUp = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONDBLCLK:                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 2;                         break;                      default:                     //TODO: X BUTTONS (I havent them so was unable to test)                         //If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'                          //or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'                          //and the low-order word is reserved. This value can be one or more of the following values.                          //Otherwise' MouseData is not used.                          break;                 }
Magic Number,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: switch (wParam)                 {                     case WM_LBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Left;                         clickCount = 1;                         break;                     case WM_LBUTTONDBLCLK:                          button = MouseButtons.Left;                         clickCount = 2;                         break;                     case WM_RBUTTONDOWN:                         mouseDown = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONUP:                         mouseUp = true;                         button = MouseButtons.Right;                         clickCount = 1;                         break;                     case WM_RBUTTONDBLCLK:                          button = MouseButtons.Right;                         clickCount = 2;                         break;                     case WM_MOUSEWHEEL:                         //If the message is WM_MOUSEWHEEL' the high-order word of MouseData member is the wheel delta.                          //One wheel click is defined as WHEEL_DELTA' which is 120.                          //(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value                         mouseDelta = (short)((mouseHookStruct.MouseData >> 16) & 0xffff);                         break;                      case WM_XBUTTONDOWN:                         mouseDown = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONUP:                         mouseUp = true;                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 1;                         break;                     case WM_XBUTTONDBLCLK:                         button = ((mouseHookStruct.MouseData >> 16) & 0xff) == XBUTTON1 ? MouseButtons.XButton1 : MouseButtons.XButton2;                         clickCount = 2;                         break;                      default:                     //TODO: X BUTTONS (I havent them so was unable to test)                         //If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'                          //or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'                          //and the low-order word is reserved. This value can be one or more of the following values.                          //Otherwise' MouseData is not used.                          break;                 }
Magic Number,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,MouseHookProc,The following statement contains a magic number: s_MouseDoubleClick != null && clickCount == 2
Magic Number,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,KeyboardHookProc,The following statement contains a magic number: byte[] keyState = new byte[256];
Magic Number,SierraLib.GlobalHooks,HookManager,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\GlobalHooks\HookManager.Callbacks.cs,KeyboardHookProc,The following statement contains a magic number: byte[] inBuffer = new byte[2];
Missing Default,Articulate,MouseOutputBase,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\IO\DirectInput.cs,ToDirectInput,The following switch statement is missing a default case: switch (Button) 			{ 				case System.Windows.Forms.MouseButtons.Left: 					input.Mouse.Flags = 0x2; 					break; 				case System.Windows.Forms.MouseButtons.Right: 					input.Mouse.Flags = 0x8; 					break; 				case System.Windows.Forms.MouseButtons.Middle: 					input.Mouse.Flags = 0x20; 					break; 				case System.Windows.Forms.MouseButtons.XButton1: 					input.Mouse.Flags = 0x80; 					input.Mouse.Data = 0x1; 					break;  				case System.Windows.Forms.MouseButtons.XButton2: 					input.Mouse.Flags = 0x80; 					input.Mouse.Data = 0x2; 					break; 			}
Missing Default,Articulate,MainWindow,C:\research\architectureSmells\repos\Mpstark_articulate\Articulate\MainWindow.xaml.cs,Translation_LanguageChanged,The following switch statement is missing a default case: switch (Logic.Recognizer.State)  				{  					case VoiceRecognizer.VoiceRecognizerState.Error:  						State = "state_error".Translate("ERROR");  						break;  					case VoiceRecognizer.VoiceRecognizerState.Listening:  					case VoiceRecognizer.VoiceRecognizerState.ListeningOnce:  						State = "state_online".Translate("LISTENING");  						break;    					case VoiceRecognizer.VoiceRecognizerState.Paused:  					case VoiceRecognizer.VoiceRecognizerState.Pausing:  						State = "state_offline".Translate("OFFLINE");  						break;  				}
