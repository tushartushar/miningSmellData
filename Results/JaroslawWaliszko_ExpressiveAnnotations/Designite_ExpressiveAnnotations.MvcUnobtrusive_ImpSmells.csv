Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ExpressiveAnnotations.MvcUnobtrusive,Helper,C:\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive\Helper.cs,GetCoarseType,Cyclomatic complexity of the method is 8
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Caching,ProcessStorage<TKey;TValue>,C:\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive\Caching\ProcessStorage.cs,GetOrAdd,The length of the statement  "            return lazyResult.Value; /* From http://bit.ly/2b8E1AS: If multiple concurrent threads try to call GetOrAdd with the same key at once' multiple Lazy objects may be " is 163.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Caching,ProcessStorage<TKey;TValue>,C:\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive\Caching\ProcessStorage.cs,GetOrAdd,The length of the statement  "                                      * created but these are cheap' and all but one will be thrown away. The return Lazy object will be the same across all threads' and the " is 135.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Caching,ProcessStorage<TKey;TValue>,C:\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive\Caching\ProcessStorage.cs,GetOrAdd,The length of the statement  "                                      * first one to call the Value property will run the expensive delegate method' whilst the other threads are locked' waiting for the result. */ " is 142.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Validators,ExpressiveValidator<T>,C:\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive\Validators\ExpressiveValidator.cs,AllocateSuffix,The length of the statement  "            return count == 1 ? string.Empty : char.ConvertFromUtf32(95 + count); // single lowercase letter from latin alphabet or an empty string " is 135.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Validators,ExpressiveValidator<T>,C:\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive\Validators\ExpressiveValidator.cs,AssertNoNamingCollisionsAtCorrespondingSegments,The length of the statement  "            // instead of extending the checks above to combination (4 2)' check for collisions with methods is done separately to provide more accurate messages: " is 150.
Complex Conditional,ExpressiveAnnotations.MvcUnobtrusive.Validators,ExpressiveValidator<T>,C:\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive\Validators\ExpressiveValidator.cs,AssertNoRestrictedMetaIdentifierUsed,The conditional expression  "FieldsMap.Keys.Select(x => x.Split('.').First()).Contains(meta)                  || EnumsMap.Keys.Select(x => x.Split('.').First()).Contains(meta)                  || ConstsMap.Keys.Select(x => x.Split('.').First()).Contains(meta)                  || MethodsList.Contains(meta)"  is complex.
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Validators,ExpressiveValidator<T>,C:\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive\Validators\ExpressiveValidator.cs,AllocateSuffix,The following statement contains a magic number: return count == 1 ? string.Empty : char.ConvertFromUtf32(95 + count);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Validators,ExpressiveValidator<T>,C:\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive\Validators\ExpressiveValidator.cs,AssertAttribsQuantityAllowed,The following statement contains a magic number: const int max = 27;
