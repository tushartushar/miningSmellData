Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_without_context,The method has 143 lines of code.
Long Method,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The method has 201 lines of code.
Long Method,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_toolchain_methods_logic,The method has 169 lines of code.
Long Method,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The method has 138 lines of code.
Complex Method,ExpressiveAnnotations.Tests,Helper,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\Helper.cs,ArrayDeepEqual,Cyclomatic complexity of the method is 8
Complex Method,ExpressiveAnnotations.Tests,Helper,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\Helper.cs,PrefixPrintToBuffer,Cyclomatic complexity of the method is 11
Complex Method,ExpressiveAnnotations.Tests,Helper,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\Helper.cs,Symbol,Cyclomatic complexity of the method is 21
Long Parameter List,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,GetFinalMemberName,The method has 5 parameters. Parameters: attrib' contextModel' mamberValue' givenMemberName' givenDisplayName
Long Parameter List,ExpressiveAnnotations.Tests,Model,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,Long,The method has 13 parameters. Parameters: i' j' k' l' m' n' o' p' r' s' t' u' v
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_attributes_uniqueness,The length of the statement  "            Assert.Equal(2' attributes.Count); // ignores redundant attributes of the same type id' because they do nothing new (exact type name' exact expression) " is 151.
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_attributes_uniqueness,The length of the statement  "            Assert.Equal(4' attributes.Count); // all type ids are unique (despite the same type names of some attributes' they contain different expressions) " is 146.
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_attributes_compilation_caching_directly,The length of the statement  "            nonCached = MeasureExecutionTime(() => attribs.ForEach(x => x.Compile(typeof(WorkModel)' force: true))); // forcibly recompile already compiled expressions " is 155.
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_custom_error_message_after_validation,The length of the statement  "                "field: {0}' expr: {1} | Value1: {Value1}{Value1:n}' Internal.Internal.Value1: {Internal.Internal.Value1}' {Internal.Internal.Value2:N}"' " is 137.
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_custom_error_message_after_validation,The length of the statement  "                "field: {{0}}' expr: {{1}} | Value1: {{Value1}}{{Value1:n}}' Internal.Internal.Value1: {{Internal.Internal.Value1}}' {{Internal.Internal.Value2:N}}"' " is 149.
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_custom_error_message_after_validation,The length of the statement  "                "field: {0}' expr: {1} | Value1: {Value1}{Value1:n}' Internal.Internal.Value1: {Internal.Internal.Value1}' {Internal.Internal.Value2:N}"); " is 138.
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_custom_error_message_after_validation,The length of the statement  "                "field: {{{0}}}' expr: {{{1}}} | Value1: {{{Value1}}}{{{Value1:n}}}' Internal.Internal.Value1: {{{Internal.Internal.Value1}}}' {{{Internal.Internal.Value2:N}}}"' " is 161.
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_custom_error_message_after_validation,The length of the statement  "                "field: {{{{0}}}}' expr: {{{{1}}}} | Value1: {{{{Value1}}}}{{{{Value1:n}}}}' Internal.Internal.Value1: {{{{Internal.Internal.Value1}}}}' {{{{Internal.Internal.Value2:N}}}}"' " is 173.
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_custom_error_message_after_validation,The length of the statement  "                "field: {{0}}' expr: {{1}} | Value1: {{Value1}}{{Value1:n}}' Internal.Internal.Value1: {{Internal.Internal.Value1}}' {{Internal.Internal.Value2:N}}"); " is 150.
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_custom_error_message_after_validation,The length of the statement  "                "field: {{0' expr: {{1 | Value1: {{Value1{{Value1:n' Internal.Internal.Value1: Internal.Internal.Value1}}' Internal.Internal.Value2:N}}"' " is 137.
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_custom_error_message_after_validation,The length of the statement  "                "field: {0' expr: {1 | Value1: {Value1{Value1:n' Internal.Internal.Value1: Internal.Internal.Value1}' Internal.Internal.Value2:N}"); " is 132.
Long Statement,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,throw_when_requirement_is_applied_to_field_of_non_nullable_value_type,The length of the statement  "                "RequiredIfAttribute has no effect when applied to a field of non-nullable value type 'System.Int32'. Use nullable 'System.Int32?' version instead' or switch to AssertThatAttribute otherwise."' " is 193.
Long Statement,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The length of the statement  "            Assert.Equal("'\r\na\r\n b\r\nc\r\n'"' tokens[34].Value); // used alternatively to verbatim string (new line \n in expression string literal has been replaced by windows \r\n) " is 175.
Long Statement,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_analysis_apathy_to_culture_settings,The length of the statement  "                var tkn = lexer.Analyze("0.1").First(); // e.g. double literal should be always written using dot in our expressions language' no matter the culture " is 148.
Long Statement,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_string_token_extraction,The length of the statement  "            AssertToken( // here' non-verbatim version' see \r\n which represents current environment new line (simply expressed by \n in our language) " is 139.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_without_context,The length of the statement  "            Assert.True(parser.Parse<bool>("(true || ((true || (false || true)))) || (true && true && false || (false || true && (true && true || ((false))))) && false").Invoke()); " is 168.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_without_context,The length of the statement  "            Assert.True(parser.Parse<bool>("( !!((!(!!!true || !!false || !true))) && true && !(true && false) ) && (!((!(!true))) || !!!(((!true))))").Invoke()); " is 150.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_without_context,The length of the statement  "            Helper.CulturalExecution(() => Assert.True(parser.Parse<bool>("1.2 + 'a' + .12=='1'2a0'12'").Invoke())' "pl"); // regional specific decimal separator " is 149.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_without_context,The length of the statement  "            Toolchain.Instance.AddFunction("Avg"' (Expression<Toolchain.ParamsDelegate<double' double?>>)(items => items.Any() ? items.Average() : (double?)null)); " is 151.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The length of the statement  "            Assert.True(parser.Parse<Model' bool>("Array[0].Number + Array[0].Array[0].Number + Array[1].Number + Array[1].Array[0].Number == 0").Invoke(model)); " is 149.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The length of the statement  "            Assert.True(parser.Parse<Model' bool>("Collection[0].Number + Collection[0].Collection[0].Number + Collection[1].Number + Collection[1].Collection[0].Number == 0").Invoke(model)); " is 179.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The length of the statement  "            Assert.True(parser.Parse<Model' bool>("Collection[true ? 0 : 1].Collection[true ? [0][0] : 1].Number == -2").Invoke(model)); " is 124.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,acceptable_methods_signatures_are_registered_correctly,The length of the statement  "            funcManager.AddFunction("MN"' (Expression<Func<int' int' int' int' int' int' int' int>>)((i' j' k' l' m' n' o) => i + j + k + l + m + n + o)); " is 142.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_context_methods_ambiguity,The length of the statement  "            var e = Assert.Throws<ParseErrorException>(() => parser.Parse<ModelWithAmbiguousMethods' bool>("Whoami(0) == 'model method 0'")); " is 129.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_implicit_type_conversion,The length of the statement  "            Assert.True(parser.Parse<bool>("Whoami('0') == 'utility method 0'").Invoke()); // successful conversion from String to Object " is 125.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_implicit_type_conversion,The length of the statement  "            Assert.True(parser.Parse<bool>("Whoami(1' '2') == 'utility method 1 - 2'").Invoke()); // types matched' no conversion needed " is 124.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_implicit_type_conversion,The length of the statement  "            var e = Assert.Throws<ParseErrorException>(() => parser.Parse<object' bool>("Whoami('1'' '2') == 'utility method 1 - 2'")); " is 123.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_implicit_type_conversion,The length of the statement  "            Assert.Equal("Function 'Whoami' 1st argument implicit conversion from 'System.String' to expected 'System.Int32' failed."' e.Error); " is 132.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_implicit_type_conversion,The length of the statement  "            Assert.Equal("Function 'Whoami' 2nd argument implicit conversion from 'System.Int32' to expected 'System.String' failed."' e.Error); " is 132.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            var e = Assert.Throws<ParseErrorException>(() => parser.Parse<Model' bool>("Long(''' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13)")); " is 128.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            Assert.Equal("Function 'Long' 1st argument implicit conversion from 'System.String' to expected 'System.Int32' failed."' e.Error); " is 130.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            e = Assert.Throws<ParseErrorException>(() => parser.Parse<Model' bool>("Long(1' ''' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13)")); " is 124.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            Assert.Equal("Function 'Long' 2nd argument implicit conversion from 'System.String' to expected 'System.Int32' failed."' e.Error); " is 130.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            e = Assert.Throws<ParseErrorException>(() => parser.Parse<Model' bool>("Long(1' 2' ''' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13)")); " is 124.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            Assert.Equal("Function 'Long' 3rd argument implicit conversion from 'System.String' to expected 'System.Int32' failed."' e.Error); " is 130.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            e = Assert.Throws<ParseErrorException>(() => parser.Parse<Model' bool>("Long(1' 2' 3' ''' 5' 6' 7' 8' 9' 10' 11' 12' 13)")); " is 124.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            Assert.Equal("Function 'Long' 4th argument implicit conversion from 'System.String' to expected 'System.Int32' failed."' e.Error); " is 130.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            e = Assert.Throws<ParseErrorException>(() => parser.Parse<Model' bool>("Long(1' 2' 3' 4' 5' 6' 7' 8' 9' 10' ''' 12' 13)")); " is 123.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            Assert.Equal("Function 'Long' 11th argument implicit conversion from 'System.String' to expected 'System.Int32' failed."' e.Error); " is 131.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            e = Assert.Throws<ParseErrorException>(() => parser.Parse<Model' bool>("Long(1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' ''' 13)")); " is 123.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            Assert.Equal("Function 'Long' 12th argument implicit conversion from 'System.String' to expected 'System.Int32' failed."' e.Error); " is 131.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            e = Assert.Throws<ParseErrorException>(() => parser.Parse<Model' bool>("Long(1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' '')")); " is 123.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,function_arguments_order_identification_is_formatted_correctly,The length of the statement  "            Assert.Equal("Function 'Long' 13th argument implicit conversion from 'System.String' to expected 'System.Int32' failed."' e.Error); " is 131.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_short_circuit_evaluation,The length of the statement  "            // reason? - first argument is suffient to determine the value of the expression so the second one is not going to be evaluated " is 127.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_toolchain_methods_logic,The length of the statement  "            Assert.True(parser.Parse<bool>("TimeSpan(1' 2' 3' 4).TotalMilliseconds == 4 * 1000 + 3 * 60 * 1000 + 2 * 60 * 60 * 1000 + 1 * 24 * 60 * 60 * 1000").Invoke()); " is 158.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_toolchain_methods_logic,The length of the statement  "            Assert.True(parser.Parse<bool>(@"IsRegexMatch('-0.3e-2'' '^[\\+-]?\\d*\\.?\\d+(?:[eE][\\+-]?\\d+)?$') == true").Invoke()); " is 122.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_toolchain_methods_logic,The length of the statement  "            Assert.True(parser.Parse<bool>(@"IsRegexMatch('John\'s cat named ""\\\'""\n (Backslash Quote)'' '^\\d+$') == false").Invoke()); " is 127.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_toolchain_methods_logic,The length of the statement  "            Assert.True(parser.Parse<bool>("Guid('a1111111-1111-1111-1111-111111111111') == Guid('A1111111-1111-1111-1111-111111111111')").Invoke()); " is 137.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_toolchain_methods_logic,The length of the statement  "            Assert.Throws<FormatException>(() => parser.Parse<bool>("Guid('abc') == Guid('abc')").Invoke()); // Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx) " is 182.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_bitwise_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.DateTime' and 'System.DateTime'."' e.Error); " is 123.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_bitwise_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'ExpressiveAnnotations.Tests.ParserTest+YesNo' and 'ExpressiveAnnotations.Tests.ParserTest+YesNo'."' e.Error); " is 181.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_logical_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.DateTime' and 'System.DateTime'."' e.Error); " is 123.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_logical_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'ExpressiveAnnotations.Tests.ParserTest+YesNo' and 'ExpressiveAnnotations.Tests.ParserTest+YesNo'."' e.Error); " is 181.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.DateTime' and 'System.Int32'."' e.Error); " is 120.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.DateTime' and 'System.String'."' e.Error); " is 121.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.Nullable`1[System.DateTime]' and 'System.String'."' e.Error); " is 140.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'ExpressiveAnnotations.Analysis.Lexer' and 'ExpressiveAnnotations.Analysis.Parser'."' e.Error); " is 166.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'ExpressiveAnnotations.Tests.Utility+Stability' and 'ExpressiveAnnotations.Tests.ParserTest+YesNo'."' e.Error); " is 182.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.DateTime' and 'System.Int32'."' e.Error); " is 120.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.DateTime' and 'System.Object'."' e.Error); " is 121.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.Nullable`1[System.DateTime]' and 'System.Object'."' e.Error); " is 140.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.Nullable`1[System.DateTime]' and 'null'."' e.Error); " is 131.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.DateTime' and 'System.Object'."' e.Error); " is 121.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.TimeSpan' and 'System.Object'."' e.Error); " is 121.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'ExpressiveAnnotations.Tests.Utility+Stability' and 'ExpressiveAnnotations.Tests.ParserTest+YesNo'."' e.Error); " is 182.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.DateTime' and 'System.Int32'."' e.Error); " is 120.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.Nullable`1[System.DateTime]' and 'System.Int32'."' e.Error); " is 139.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.TimeSpan' and 'System.Int32'."' e.Error); " is 120.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.Nullable`1[System.TimeSpan]' and 'System.Int32'."' e.Error); " is 139.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.DateTime' and 'System.Object'."' e.Error); " is 121.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The length of the statement  "            Assert.Equal($"Operator '{oper}' cannot be applied to operands of type 'System.TimeSpan' and 'System.Object'."' e.Error); " is 121.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_remaining_type_mismatch_errors_for_addition_operator,The length of the statement  "            Assert.Equal("Operator '+' cannot be applied to operands of type 'System.Nullable`1[System.DateTime]' and 'System.Nullable`1[System.DateTime]'."' e.Error); " is 155.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_remaining_type_mismatch_errors_for_addition_operator,The length of the statement  "            Assert.Equal("Operator '+' cannot be applied to operands of type 'System.DateTime' and 'System.Nullable`1[System.DateTime]'."' e.Error); " is 136.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            Assert.Equal("Expected \"null\"' bool' int' float' bin' hex' string' array or id. Unexpected end of expression."' e.Error); " is 123.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            Assert.Equal("Expected \"null\"' bool' int' float' bin' hex' string' array or id. Unexpected end of expression."' e.Error); " is 123.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            Assert.Equal("Function 'Max' 2nd argument implicit conversion from 'System.String' to expected 'System.Int32' failed."' e.Error); " is 129.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            Assert.Equal("Unexpected token: '.1'."' e.Error); // "unexpected" is not "invalid" - token is valid' but used in wrong context " is 126.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            Assert.Equal("Indexing operation not supported. Subscript operator can be applied to either an array or a type declaring indexer."' e.Error); " is 141.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            Assert.Equal("Expected \"null\"' bool' int' float' bin' hex' string' array or id. Unexpected end of expression."' e.Error); " is 123.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            Assert.Equal("Type of conditional expression cannot be determined because there is no implicit conversion between 'System.Double' and 'System.String'."' e.Error); " is 162.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            Assert.Equal("Type of conditional expression cannot be determined because there is no implicit conversion between 'System.String' and 'System.Double'."' e.Error); " is 162.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            Assert.Equal("Type of conditional expression cannot be determined because there is no implicit conversion between 'null' and 'System.Int32'."' e.Error); " is 152.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            Assert.Equal("Type of conditional expression cannot be determined because there is no implicit conversion between 'System.Int32' and 'null'."' e.Error); " is 152.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            e = Assert.Throws<ParseErrorException>(() => parser.Parse<Model' bool>("Collection[true ? 0 : 1].Collection[true ? [0][0] : 1].Unknown == -2")); " is 144.
Long Statement,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The length of the statement  "            Assert.Equal("Indexing operation not supported. Subscript operator can be applied to either an array or a type declaring indexer."' e.Error); " is 141.
Long Statement,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,verify_serialization_of_basic_parse_exception,The length of the statement  "            var e = new ParseErrorException(@"Operator '!' cannot be applied to operand of type 'System.String'."' new ParseErrorException()); " is 130.
Long Statement,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,verify_serialization_of_complete_parse_exception,The length of the statement  "            var e = new ParseErrorException("Operator '!' cannot be applied to operand of type 'System.String'."' "true && !'false'"' new Location(1' 9)' new ParseErrorException("other")); " is 176.
Long Statement,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,verify_display_names_extraction_from_given_type,The length of the statement  "            var e = Assert.Throws<ArgumentException>(() => ExpressiveAnnotations.Helper.ExtractDisplayName(typeof(Model)' "internal")); " is 123.
Long Statement,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,verify_display_names_extraction_from_given_type,The length of the statement  "            e = Assert.Throws<ArgumentException>(() => ExpressiveAnnotations.Helper.ExtractDisplayName(typeof(Model)' "Internal.Value123")); " is 128.
Long Statement,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,verify_display_names_extraction_from_given_type,The length of the statement  "            Assert.StartsWith("No display name provided for NoName field. Use either Display attribute or DisplayName attribute."' e.Message); " is 130.
Magic Number,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_attributes_uniqueness,The following statement contains a magic number: Assert.Equal(2' attributes.Count);
Magic Number,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_attributes_uniqueness,The following statement contains a magic number: Assert.Equal(4' attributes.Count);
Magic Number,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_attributes_compilation_caching_indirectly,The following statement contains a magic number: const int testLoops = 10;
Magic Number,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,verify_attributes_compilation_caching_directly,The following statement contains a magic number: const int testLoops = 10;
Magic Number,ExpressiveAnnotations.Tests,AttribsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,AssertErrorMessage,The following statement contains a magic number: var context = new ValidationContext(new MsgModel              {                  Value1 = 0'                  Internal = new MsgModel                  {                      Value1 = 1'                      Internal = new MsgModel {Value1 = 2}                  }              })              {                  MemberName = "Value1"              };
Magic Number,ExpressiveAnnotations.Tests,Model,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\AttribsTest.cs,NextWeek,The following statement contains a magic number: return DateTime.Now.AddDays(7);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(37' tokens.Length);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("&&"' tokens[2].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.L_AND' tokens[2].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("=="' tokens[3].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.EQ' tokens[3].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("!="' tokens[4].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.NEQ' tokens[4].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("<"' tokens[5].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.LT' tokens[5].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("<="' tokens[6].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.LE' tokens[6].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(">"' tokens[7].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.GT' tokens[7].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(">="' tokens[8].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.GE' tokens[8].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("+"' tokens[9].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.ADD' tokens[9].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("-"' tokens[10].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.SUB' tokens[10].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("*"' tokens[11].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.MUL' tokens[11].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("/"' tokens[12].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.DIV' tokens[12].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("%"' tokens[13].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.MOD' tokens[13].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("~"' tokens[14].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.B_NOT' tokens[14].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("&"' tokens[15].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.B_AND' tokens[15].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("^"' tokens[16].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.XOR' tokens[16].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("|"' tokens[17].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.B_OR' tokens[17].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("<<"' tokens[18].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.L_SHIFT' tokens[18].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(">>"' tokens[19].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.R_SHIFT' tokens[19].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("("' tokens[20].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.L_PAR' tokens[20].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(")"' tokens[21].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.R_PAR' tokens[21].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("["' tokens[22].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.L_BRACKET' tokens[22].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("]"' tokens[23].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.R_BRACKET' tokens[23].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("."' tokens[24].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.PERIOD' tokens[24].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("?"' tokens[25].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.QMARK' tokens[25].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(":"' tokens[26].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.COLON' tokens[26].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(null' tokens[27].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.NULL' tokens[27].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(true' tokens[28].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.BOOL' tokens[28].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(false' tokens[29].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.BOOL' tokens[29].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(123' tokens[30].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(123' tokens[30].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.INT' tokens[30].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(0.3e-2' tokens[31].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(0.3e-2' tokens[31].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.FLOAT' tokens[31].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(10' tokens[32].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(10' tokens[32].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.BIN' tokens[32].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(255' tokens[33].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(255' tokens[33].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.HEX' tokens[33].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("'\r\na\r\n b\r\nc\r\n'"' tokens[34].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.STRING' tokens[34].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal("メidメ"' tokens[35].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.ID' tokens[35].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(string.Empty' tokens[36].Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_valid_tokens_extraction,The following statement contains a magic number: Assert.Equal(TokenType.EOF' tokens[36].Type);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_invalid_tokens_detection,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_invalid_tokens_detection,The following statement contains a magic number: Assert.Equal(new Location(2' 4)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_invalid_tokens_detection,The following statement contains a magic number: Assert.Equal(new Location(2' 4)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_invalid_tokens_detection,The following statement contains a magic number: Assert.Equal(new Location(1' 12)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_analysis_apathy_to_culture_settings,The following statement contains a magic number: Assert.Equal(0.1' tkn.Value);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_bin_token_extraction,The following statement contains a magic number: AssertToken("0b11111111"' 255' TokenType.BIN);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_float_token_extraction,The following statement contains a magic number: AssertToken(".2"' .2' TokenType.FLOAT);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_float_token_extraction,The following statement contains a magic number: AssertToken("3.14"' 3.14' TokenType.FLOAT);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_float_token_extraction,The following statement contains a magic number: AssertToken("5e6"' 5e6' TokenType.FLOAT);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_float_token_extraction,The following statement contains a magic number: AssertToken("5e-6"' 5e-6' TokenType.FLOAT);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_float_token_extraction,The following statement contains a magic number: AssertToken("5e+6"' 5e+6' TokenType.FLOAT);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_float_token_extraction,The following statement contains a magic number: AssertToken("9.0E-10"' 9.0E-10' TokenType.FLOAT);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,verify_float_token_extraction,The following statement contains a magic number: AssertToken(".11e10"' .11e10' TokenType.FLOAT);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,AssertToken,The following statement contains a magic number: Assert.Equal(2' tokens.Length);
Magic Number,ExpressiveAnnotations.Tests,LexerTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\LexerTest.cs,AssertNotToken,The following statement contains a magic number: var recognized = tokens.Length == 2 && tokens[0].Type == type && tokens[1].Type == TokenType.EOF;
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_without_context,The following statement contains a magic number: Assert.True(result.ArrayDeepEqual(new object[] {new[] {1' 2}' new[] {3}' 4}));
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_without_context,The following statement contains a magic number: Assert.True(result.ArrayDeepEqual(new object[] {new[] {1' 2}' new[] {3}' 4}));
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_without_context,The following statement contains a magic number: Assert.True(result.ArrayDeepEqual(new object[] {new[] {1' 2}' new[] {3}' 4}));
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: var model = new Model              {                  NDate = now'                  Date = now'                  NSpan = now - new DateTime(1999' 1' 1)'                  Span = new TimeSpan(0)'                  Number = 0'                  Chaaar = 'a''                  Flag = true'                  NFlag = true'                  Text = "hello world"'                  PoliticalStability = Utility.Stability.High'                  SbyteNumber = SbyteEnum.First'                  ByteNumber = ByteEnum.First'                  ShortNumber = ShortEnum.First'                  UshortNumber = UshortEnum.First'                  IntNumber = IntEnum.First'                  UintNumber = UintEnum.First'                  LongNumber = LongEnum.First'                  UlongNumber = UlongEnum.First'                  Guid = Guid.NewGuid()'                  NGuid1 = Guid.NewGuid()'                  NGuid2 = Guid.Empty'                  InsensString = new StringInsens("asd")'                  NInsensString = new StringInsens("ASD")'                  IntArray = new[] {1'2'3}'                  IntJaggedArray = new[]                  {                    new[] {1'2'3}'                    new[] {4'5'6}'                  }'                  Array = new[]                  {                      new Model {Number = -1' Array = new[] {new Model {Number = -2}}}'                      new Model {Number = 1' Array = new[] {new Model {Number = 2}}}                  }'                  Collection = new CustomCollection<Model>()'                  SubModel = new Model                  {                      NDate = now.AddDays(1)'                      Date = now.AddDays(1)'                      Number = 1'                      Flag = false'                      NFlag = false'                      Text = " hello world "'                      PoliticalStability = null'                  }              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: var model = new Model              {                  NDate = now'                  Date = now'                  NSpan = now - new DateTime(1999' 1' 1)'                  Span = new TimeSpan(0)'                  Number = 0'                  Chaaar = 'a''                  Flag = true'                  NFlag = true'                  Text = "hello world"'                  PoliticalStability = Utility.Stability.High'                  SbyteNumber = SbyteEnum.First'                  ByteNumber = ByteEnum.First'                  ShortNumber = ShortEnum.First'                  UshortNumber = UshortEnum.First'                  IntNumber = IntEnum.First'                  UintNumber = UintEnum.First'                  LongNumber = LongEnum.First'                  UlongNumber = UlongEnum.First'                  Guid = Guid.NewGuid()'                  NGuid1 = Guid.NewGuid()'                  NGuid2 = Guid.Empty'                  InsensString = new StringInsens("asd")'                  NInsensString = new StringInsens("ASD")'                  IntArray = new[] {1'2'3}'                  IntJaggedArray = new[]                  {                    new[] {1'2'3}'                    new[] {4'5'6}'                  }'                  Array = new[]                  {                      new Model {Number = -1' Array = new[] {new Model {Number = -2}}}'                      new Model {Number = 1' Array = new[] {new Model {Number = 2}}}                  }'                  Collection = new CustomCollection<Model>()'                  SubModel = new Model                  {                      NDate = now.AddDays(1)'                      Date = now.AddDays(1)'                      Number = 1'                      Flag = false'                      NFlag = false'                      Text = " hello world "'                      PoliticalStability = null'                  }              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: var model = new Model              {                  NDate = now'                  Date = now'                  NSpan = now - new DateTime(1999' 1' 1)'                  Span = new TimeSpan(0)'                  Number = 0'                  Chaaar = 'a''                  Flag = true'                  NFlag = true'                  Text = "hello world"'                  PoliticalStability = Utility.Stability.High'                  SbyteNumber = SbyteEnum.First'                  ByteNumber = ByteEnum.First'                  ShortNumber = ShortEnum.First'                  UshortNumber = UshortEnum.First'                  IntNumber = IntEnum.First'                  UintNumber = UintEnum.First'                  LongNumber = LongEnum.First'                  UlongNumber = UlongEnum.First'                  Guid = Guid.NewGuid()'                  NGuid1 = Guid.NewGuid()'                  NGuid2 = Guid.Empty'                  InsensString = new StringInsens("asd")'                  NInsensString = new StringInsens("ASD")'                  IntArray = new[] {1'2'3}'                  IntJaggedArray = new[]                  {                    new[] {1'2'3}'                    new[] {4'5'6}'                  }'                  Array = new[]                  {                      new Model {Number = -1' Array = new[] {new Model {Number = -2}}}'                      new Model {Number = 1' Array = new[] {new Model {Number = 2}}}                  }'                  Collection = new CustomCollection<Model>()'                  SubModel = new Model                  {                      NDate = now.AddDays(1)'                      Date = now.AddDays(1)'                      Number = 1'                      Flag = false'                      NFlag = false'                      Text = " hello world "'                      PoliticalStability = null'                  }              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: var model = new Model              {                  NDate = now'                  Date = now'                  NSpan = now - new DateTime(1999' 1' 1)'                  Span = new TimeSpan(0)'                  Number = 0'                  Chaaar = 'a''                  Flag = true'                  NFlag = true'                  Text = "hello world"'                  PoliticalStability = Utility.Stability.High'                  SbyteNumber = SbyteEnum.First'                  ByteNumber = ByteEnum.First'                  ShortNumber = ShortEnum.First'                  UshortNumber = UshortEnum.First'                  IntNumber = IntEnum.First'                  UintNumber = UintEnum.First'                  LongNumber = LongEnum.First'                  UlongNumber = UlongEnum.First'                  Guid = Guid.NewGuid()'                  NGuid1 = Guid.NewGuid()'                  NGuid2 = Guid.Empty'                  InsensString = new StringInsens("asd")'                  NInsensString = new StringInsens("ASD")'                  IntArray = new[] {1'2'3}'                  IntJaggedArray = new[]                  {                    new[] {1'2'3}'                    new[] {4'5'6}'                  }'                  Array = new[]                  {                      new Model {Number = -1' Array = new[] {new Model {Number = -2}}}'                      new Model {Number = 1' Array = new[] {new Model {Number = 2}}}                  }'                  Collection = new CustomCollection<Model>()'                  SubModel = new Model                  {                      NDate = now.AddDays(1)'                      Date = now.AddDays(1)'                      Number = 1'                      Flag = false'                      NFlag = false'                      Text = " hello world "'                      PoliticalStability = null'                  }              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: var model = new Model              {                  NDate = now'                  Date = now'                  NSpan = now - new DateTime(1999' 1' 1)'                  Span = new TimeSpan(0)'                  Number = 0'                  Chaaar = 'a''                  Flag = true'                  NFlag = true'                  Text = "hello world"'                  PoliticalStability = Utility.Stability.High'                  SbyteNumber = SbyteEnum.First'                  ByteNumber = ByteEnum.First'                  ShortNumber = ShortEnum.First'                  UshortNumber = UshortEnum.First'                  IntNumber = IntEnum.First'                  UintNumber = UintEnum.First'                  LongNumber = LongEnum.First'                  UlongNumber = UlongEnum.First'                  Guid = Guid.NewGuid()'                  NGuid1 = Guid.NewGuid()'                  NGuid2 = Guid.Empty'                  InsensString = new StringInsens("asd")'                  NInsensString = new StringInsens("ASD")'                  IntArray = new[] {1'2'3}'                  IntJaggedArray = new[]                  {                    new[] {1'2'3}'                    new[] {4'5'6}'                  }'                  Array = new[]                  {                      new Model {Number = -1' Array = new[] {new Model {Number = -2}}}'                      new Model {Number = 1' Array = new[] {new Model {Number = 2}}}                  }'                  Collection = new CustomCollection<Model>()'                  SubModel = new Model                  {                      NDate = now.AddDays(1)'                      Date = now.AddDays(1)'                      Number = 1'                      Flag = false'                      NFlag = false'                      Text = " hello world "'                      PoliticalStability = null'                  }              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: var model = new Model              {                  NDate = now'                  Date = now'                  NSpan = now - new DateTime(1999' 1' 1)'                  Span = new TimeSpan(0)'                  Number = 0'                  Chaaar = 'a''                  Flag = true'                  NFlag = true'                  Text = "hello world"'                  PoliticalStability = Utility.Stability.High'                  SbyteNumber = SbyteEnum.First'                  ByteNumber = ByteEnum.First'                  ShortNumber = ShortEnum.First'                  UshortNumber = UshortEnum.First'                  IntNumber = IntEnum.First'                  UintNumber = UintEnum.First'                  LongNumber = LongEnum.First'                  UlongNumber = UlongEnum.First'                  Guid = Guid.NewGuid()'                  NGuid1 = Guid.NewGuid()'                  NGuid2 = Guid.Empty'                  InsensString = new StringInsens("asd")'                  NInsensString = new StringInsens("ASD")'                  IntArray = new[] {1'2'3}'                  IntJaggedArray = new[]                  {                    new[] {1'2'3}'                    new[] {4'5'6}'                  }'                  Array = new[]                  {                      new Model {Number = -1' Array = new[] {new Model {Number = -2}}}'                      new Model {Number = 1' Array = new[] {new Model {Number = 2}}}                  }'                  Collection = new CustomCollection<Model>()'                  SubModel = new Model                  {                      NDate = now.AddDays(1)'                      Date = now.AddDays(1)'                      Number = 1'                      Flag = false'                      NFlag = false'                      Text = " hello world "'                      PoliticalStability = null'                  }              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: var model = new Model              {                  NDate = now'                  Date = now'                  NSpan = now - new DateTime(1999' 1' 1)'                  Span = new TimeSpan(0)'                  Number = 0'                  Chaaar = 'a''                  Flag = true'                  NFlag = true'                  Text = "hello world"'                  PoliticalStability = Utility.Stability.High'                  SbyteNumber = SbyteEnum.First'                  ByteNumber = ByteEnum.First'                  ShortNumber = ShortEnum.First'                  UshortNumber = UshortEnum.First'                  IntNumber = IntEnum.First'                  UintNumber = UintEnum.First'                  LongNumber = LongEnum.First'                  UlongNumber = UlongEnum.First'                  Guid = Guid.NewGuid()'                  NGuid1 = Guid.NewGuid()'                  NGuid2 = Guid.Empty'                  InsensString = new StringInsens("asd")'                  NInsensString = new StringInsens("ASD")'                  IntArray = new[] {1'2'3}'                  IntJaggedArray = new[]                  {                    new[] {1'2'3}'                    new[] {4'5'6}'                  }'                  Array = new[]                  {                      new Model {Number = -1' Array = new[] {new Model {Number = -2}}}'                      new Model {Number = 1' Array = new[] {new Model {Number = 2}}}                  }'                  Collection = new CustomCollection<Model>()'                  SubModel = new Model                  {                      NDate = now.AddDays(1)'                      Date = now.AddDays(1)'                      Number = 1'                      Flag = false'                      NFlag = false'                      Text = " hello world "'                      PoliticalStability = null'                  }              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: var model = new Model              {                  NDate = now'                  Date = now'                  NSpan = now - new DateTime(1999' 1' 1)'                  Span = new TimeSpan(0)'                  Number = 0'                  Chaaar = 'a''                  Flag = true'                  NFlag = true'                  Text = "hello world"'                  PoliticalStability = Utility.Stability.High'                  SbyteNumber = SbyteEnum.First'                  ByteNumber = ByteEnum.First'                  ShortNumber = ShortEnum.First'                  UshortNumber = UshortEnum.First'                  IntNumber = IntEnum.First'                  UintNumber = UintEnum.First'                  LongNumber = LongEnum.First'                  UlongNumber = UlongEnum.First'                  Guid = Guid.NewGuid()'                  NGuid1 = Guid.NewGuid()'                  NGuid2 = Guid.Empty'                  InsensString = new StringInsens("asd")'                  NInsensString = new StringInsens("ASD")'                  IntArray = new[] {1'2'3}'                  IntJaggedArray = new[]                  {                    new[] {1'2'3}'                    new[] {4'5'6}'                  }'                  Array = new[]                  {                      new Model {Number = -1' Array = new[] {new Model {Number = -2}}}'                      new Model {Number = 1' Array = new[] {new Model {Number = 2}}}                  }'                  Collection = new CustomCollection<Model>()'                  SubModel = new Model                  {                      NDate = now.AddDays(1)'                      Date = now.AddDays(1)'                      Number = 1'                      Flag = false'                      NFlag = false'                      Text = " hello world "'                      PoliticalStability = null'                  }              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: var model = new Model              {                  NDate = now'                  Date = now'                  NSpan = now - new DateTime(1999' 1' 1)'                  Span = new TimeSpan(0)'                  Number = 0'                  Chaaar = 'a''                  Flag = true'                  NFlag = true'                  Text = "hello world"'                  PoliticalStability = Utility.Stability.High'                  SbyteNumber = SbyteEnum.First'                  ByteNumber = ByteEnum.First'                  ShortNumber = ShortEnum.First'                  UshortNumber = UshortEnum.First'                  IntNumber = IntEnum.First'                  UintNumber = UintEnum.First'                  LongNumber = LongEnum.First'                  UlongNumber = UlongEnum.First'                  Guid = Guid.NewGuid()'                  NGuid1 = Guid.NewGuid()'                  NGuid2 = Guid.Empty'                  InsensString = new StringInsens("asd")'                  NInsensString = new StringInsens("ASD")'                  IntArray = new[] {1'2'3}'                  IntJaggedArray = new[]                  {                    new[] {1'2'3}'                    new[] {4'5'6}'                  }'                  Array = new[]                  {                      new Model {Number = -1' Array = new[] {new Model {Number = -2}}}'                      new Model {Number = 1' Array = new[] {new Model {Number = 2}}}                  }'                  Collection = new CustomCollection<Model>()'                  SubModel = new Model                  {                      NDate = now.AddDays(1)'                      Date = now.AddDays(1)'                      Number = 1'                      Flag = false'                      NFlag = false'                      Text = " hello world "'                      PoliticalStability = null'                  }              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: var model = new Model              {                  NDate = now'                  Date = now'                  NSpan = now - new DateTime(1999' 1' 1)'                  Span = new TimeSpan(0)'                  Number = 0'                  Chaaar = 'a''                  Flag = true'                  NFlag = true'                  Text = "hello world"'                  PoliticalStability = Utility.Stability.High'                  SbyteNumber = SbyteEnum.First'                  ByteNumber = ByteEnum.First'                  ShortNumber = ShortEnum.First'                  UshortNumber = UshortEnum.First'                  IntNumber = IntEnum.First'                  UintNumber = UintEnum.First'                  LongNumber = LongEnum.First'                  UlongNumber = UlongEnum.First'                  Guid = Guid.NewGuid()'                  NGuid1 = Guid.NewGuid()'                  NGuid2 = Guid.Empty'                  InsensString = new StringInsens("asd")'                  NInsensString = new StringInsens("ASD")'                  IntArray = new[] {1'2'3}'                  IntJaggedArray = new[]                  {                    new[] {1'2'3}'                    new[] {4'5'6}'                  }'                  Array = new[]                  {                      new Model {Number = -1' Array = new[] {new Model {Number = -2}}}'                      new Model {Number = 1' Array = new[] {new Model {Number = 2}}}                  }'                  Collection = new CustomCollection<Model>()'                  SubModel = new Model                  {                      NDate = now.AddDays(1)'                      Date = now.AddDays(1)'                      Number = 1'                      Flag = false'                      NFlag = false'                      Text = " hello world "'                      PoliticalStability = null'                  }              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: model.Collection[0].Collection[0] = new Model {Number = -2};
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_logic_with_context,The following statement contains a magic number: model.Collection[1].Collection[0] = new Model {Number = 2};
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_implicit_type_conversion,The following statement contains a magic number: Assert.Equal(new Location(1' 8)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_implicit_type_conversion,The following statement contains a magic number: Assert.Equal(new Location(1' 11)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_toolchain_methods_logic,The following statement contains a magic number: var dateModel = new {Date = new DateTime(2016' 4' 27)};
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_toolchain_methods_logic,The following statement contains a magic number: var dateModel = new {Date = new DateTime(2016' 4' 27)};
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_toolchain_methods_logic,The following statement contains a magic number: var dateModel = new {Date = new DateTime(2016' 4' 27)};
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_toolchain_methods_logic,The following statement contains a magic number: var arrModel = new              {                  SingleElementArray = new[] {1.0}'                  MultipleElementsArray = new[] {1.0' 2' 3}              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_toolchain_methods_logic,The following statement contains a magic number: var arrModel = new              {                  SingleElementArray = new[] {1.0}'                  MultipleElementsArray = new[] {1.0' 2' 3}              };
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_bitwise_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_bitwise_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_bitwise_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_bitwise_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 11)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_bitwise_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_bitwise_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 5)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_remaining_type_mismatch_errors_for_shift_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_remaining_type_mismatch_errors_for_shift_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_logical_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_logical_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_logical_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 3)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_logical_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 11)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_logical_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 3)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 5)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_equality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 24)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 5)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 16)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 3)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_inequality_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 24)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 3)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 3)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_addition_and_subtraction_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_multiplication_and_division_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 3)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_multiplication_and_division_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_multiplication_and_division_operators,The following statement contains a magic number: Assert.Equal(new Location(2' 15)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_multiplication_and_division_operators,The following statement contains a magic number: Assert.Equal(new Location(2' 15)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_type_mismatch_errors_for_multiplication_and_division_operators,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_remaining_type_mismatch_errors_for_addition_operator,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_remaining_type_mismatch_errors_for_addition_operator,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_remaining_type_mismatch_errors_for_addition_operator,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_remaining_type_mismatch_errors_for_subtraction_operator,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_remaining_type_mismatch_errors_for_subtraction_operator,The following statement contains a magic number: Assert.Equal(new Location(1' 15)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_remaining_type_mismatch_errors_for_subtraction_operator,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 2)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(4' 9)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(4' 9)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 3)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 2)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 5)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 2)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 5)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(2' 14)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(2' 14)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 4)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 2)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 2)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 2)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 2)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 2)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 13)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 13)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 7)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 8)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 9)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 11)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 11)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 6)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 56)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 12)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 10)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 13)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 15)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 3)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,ParserTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\ParserTest.cs,verify_various_parsing_errors,The following statement contains a magic number: Assert.Equal(new Location(1' 3)' e.Location' new LocationComparer());
Magic Number,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,verify_serialization_of_complete_parse_exception,The following statement contains a magic number: var e = new ParseErrorException("Operator '!' cannot be applied to operand of type 'System.String'."' "true && !'false'"' new Location(1' 9)' new ParseErrorException("other"));
Magic Number,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,verify_serialization_of_complete_parse_exception,The following statement contains a magic number: Assert.Equal(9' e.Location.Column);
Magic Number,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,verify_serialization_of_complete_parse_exception,The following statement contains a magic number: Assert.Equal(9' e.Location.Column);
Magic Number,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,verify_fields_values_extraction_from_given_instance,The following statement contains a magic number: var model = new Model              {                  Value1 = 1'                  Value2 = 2'                  Internal = new Model                  {                      Value1 = 11'                      Value2 = null                  }              };
Magic Number,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,verify_fields_values_extraction_from_given_instance,The following statement contains a magic number: var model = new Model              {                  Value1 = 1'                  Value2 = 2'                  Internal = new Model                  {                      Value1 = 11'                      Value2 = null                  }              };
Magic Number,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,verify_fields_values_extraction_from_given_instance,The following statement contains a magic number: Assert.Equal(11' ExpressiveAnnotations.Helper.ExtractValue(model' "Internal.Value1"));
Magic Number,ExpressiveAnnotations.Tests,UtilsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.Tests\UtilsTest.cs,print_token_for_debug_purposes,The following statement contains a magic number: var token = new Token(TokenType.FLOAT' 1.0' "1.0"' new Location(1' 2));
