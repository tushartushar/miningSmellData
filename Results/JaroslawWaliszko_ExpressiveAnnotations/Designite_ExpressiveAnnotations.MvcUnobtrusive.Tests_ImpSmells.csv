Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,BaseTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\BaseTest.cs,GetControllerContext,The length of the statement  "            var controllerContext = new ControllerContext(mockHttpContext.Object' new RouteData()' new Mock<ControllerBase>().Object); " is 122.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProcessStorageTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProcessStorageTest.cs,MakeThreads,The length of the statement  "                        counter.Push(Thread.CurrentThread.ManagedThreadId); // we want to test that this value factory delegate is invoked only once' even if map is accessed concurrently for the same key " is 179.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_single_model_with_multiple_annotations,The length of the statement  "            var assertValidators = assertAttributes.Select(attribute => new AssertThatValidator(metadata' controllerContext' attribute)).ToList(); " is 134.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_single_model_with_multiple_annotations,The length of the statement  "            var requirValidators = requirAttributes.Select(attribute => new RequiredIfValidator(metadata' controllerContext' attribute)).ToList(); " is 134.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_multiple_models_with_multiple_annotations,The length of the statement  "                var assertValidators = assertAttributes.Select(attribute => new AssertThatValidator(metadata' controllerContext' attribute)).ToList(); " is 134.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_multiple_models_with_multiple_annotations,The length of the statement  "                var requirValidators = requirAttributes.Select(attribute => new RequiredIfValidator(metadata' controllerContext' attribute)).ToList(); " is 134.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,throw_for_validators_creation_when_no_httpcontext_is_available,The length of the statement  "            var e = Assert.Throws<ValidationException>(() => new AssertThatValidator(metadata' controllerContext' assertAttribute)); " is 120.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,throw_when_requirement_is_applied_to_field_of_non_nullable_value_type,The length of the statement  "            var e = Assert.Throws<ValidationException>(() => new RequiredIfValidator(metadata' controllerContext' requirAttribute)); " is 120.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,throw_when_requirement_is_applied_to_field_of_non_nullable_value_type,The length of the statement  "                "RequiredIfAttribute has no effect when applied to a field of non-nullable value type 'System.Int32'. Use nullable 'System.Int32?' version instead' or switch to AssertThatAttribute otherwise."' " is 193.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_parsing_error_catched_by_validator,The length of the statement  "            var e = Assert.Throws<ValidationException>(() => new AssertThatValidator(metadata' controllerContext' new AssertThatAttribute("Value > #"))); " is 141.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_parsing_error_catched_by_validator,The length of the statement  "            e = Assert.Throws<ValidationException>(() => new RequiredIfValidator(metadata' controllerContext' new RequiredIfAttribute("Value > #"))); " is 137.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,client_validation_rules_are_json_formatting_insensitive,The length of the statement  "            const string expression = "Value > 0 && MathModel.PI == 3.142 && Status == ValidatorsTest.State.High && SubModel.InsensString == NInsensString"; " is 144.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,client_validation_rules_are_json_formatting_insensitive,The length of the statement  "            Assert.Equal("{\"Value\":\"number\"'\"Status\":\"enumeration\"'\"SubModel.InsensString\":\"stringinsens\"'\"NInsensString\":\"stringinsens\"}"' (string) assertRule.ValidationParameters["fieldsmap"]' false); " is 206.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,client_validation_rules_are_json_formatting_insensitive,The length of the statement  "            Assert.Equal("{\"SubModel.InsensString\":\"stringparser\"'\"Array\":\"arrayparser\"}"' (string) assertRule.ValidationParameters["parsersmap"]' false); " is 150.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,client_validation_rules_are_json_formatting_insensitive,The length of the statement  "            Assert.Equal("\"Value > 0 && MathModel.PI == 3.142 && Status == ValidatorsTest.State.High && SubModel.InsensString == NInsensString\""' (string) assertRule.ValidationParameters["expression"]' false); " is 199.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,client_validation_rules_are_json_formatting_insensitive,The length of the statement  "            Assert.Equal("{\"Value\":\"number\"'\"Status\":\"enumeration\"'\"SubModel.InsensString\":\"stringinsens\"'\"NInsensString\":\"stringinsens\"}"' (string) requirRule.ValidationParameters["fieldsmap"]' false); " is 206.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,client_validation_rules_are_json_formatting_insensitive,The length of the statement  "            Assert.Equal("{\"SubModel.InsensString\":\"stringparser\"'\"Array\":\"arrayparser\"}"' (string) assertRule.ValidationParameters["parsersmap"]' false); " is 150.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,client_validation_rules_are_json_formatting_insensitive,The length of the statement  "            Assert.Equal("\"Value > 0 && MathModel.PI == 3.142 && Status == ValidatorsTest.State.High && SubModel.InsensString == NInsensString\""' (string) requirRule.ValidationParameters["expression"]' false); " is 199.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_formatted_message_sent_to_client,The length of the statement  "            var expected = "_Value1 > 2_{Value}__{Value}_" + map.Value + map.Value + "_{Value}" + "{" + map.Value + "}" + "{{Value}}_"; " is 123.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_that_culture_change_affects_message_sent_to_client,The length of the statement  "                var assert = new AssertThatValidator(metadata' controllerContext' new AssertThatAttribute("1 > 2") {ErrorMessage = "{Lang:n}"}); " is 128.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_that_culture_change_affects_message_sent_to_client,The length of the statement  "                var assert = new AssertThatValidator(metadata' controllerContext' new AssertThatAttribute("1 > 2") {ErrorMessage = "{Lang:n}"}); " is 128.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "            var e = Assert.Throws<ValidationException>(() => new AssertThatValidator(metadata' controllerContext' new AssertThatAttribute("Value == Value.Zero"))); " is 151.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "            e = Assert.Throws<ValidationException>(() => new RequiredIfValidator(metadata' controllerContext' new RequiredIfAttribute("Value == Value.Zero"))); " is 147.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "            e = Assert.Throws<ValidationException>(() => new AssertThatValidator(metadata' controllerContext' new AssertThatAttribute("Number(Number.One) == 0"))); " is 151.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "                "Naming collisions cannot be accepted by client-side - method Number(...) is colliding with Number.One field identifier."' " is 122.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "            e = Assert.Throws<ValidationException>(() => new RequiredIfValidator(metadata' controllerContext' new RequiredIfAttribute("Number(Number.One) == 0"))); " is 151.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "                "Naming collisions cannot be accepted by client-side - method Number(...) is colliding with Number.One field identifier."' " is 122.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "            e = Assert.Throws<ValidationException>(() => new AssertThatValidator(metadata' controllerContext' new AssertThatAttribute("Number(Number) == 0"))); " is 147.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "            e = Assert.Throws<ValidationException>(() => new RequiredIfValidator(metadata' controllerContext' new RequiredIfAttribute("Number(Number) == 0"))); " is 147.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "            e = Assert.Throws<ValidationException>(() => new AssertThatValidator(metadata' controllerContext' new AssertThatAttribute("Number(Number.One) == 0"))); " is 151.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "                "Naming collisions cannot be accepted by client-side - method Number(...) is colliding with Number.One enum identifier."' " is 121.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "            e = Assert.Throws<ValidationException>(() => new RequiredIfValidator(metadata' controllerContext' new RequiredIfAttribute("Number(Number.One) == 0"))); " is 151.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,naming_collisions_at_client_side_are_detected,The length of the statement  "                "Naming collisions cannot be accepted by client-side - method Number(...) is colliding with Number.One enum identifier."' " is 121.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,meta_identifier_is_restricted_for_internal_client_side_purposes,The length of the statement  "            var e = Assert.Throws<ValidationException>(() => new AssertThatValidator(metadata' controllerContext' new AssertThatAttribute("Value == __meta__"))); " is 149.
Long Statement,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_validators_caching,The length of the statement  "                .Aggregate("!(1 < 0*~0)"' (accumulator' item) => $"({accumulator} && {item})"); // give the parser some work (deep dive) " is 120.
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProcessStorageTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProcessStorageTest.cs,verify_bahaviour_for_concurrent_access_under_different_keys,The following statement contains a magic number: Assert.Equal(2' counter.Count);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProcessStorageTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProcessStorageTest.cs,verify_bahaviour_for_concurrent_access_under_different_keys,The following statement contains a magic number: Assert.Equal(2' storage.Count);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProcessStorageTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProcessStorageTest.cs,verify_bahaviour_for_concurrent_access_under_different_keys,The following statement contains a magic number: Assert.Equal(2' storage.Count);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProcessStorageTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProcessStorageTest.cs,verify_bahaviour_for_concurrent_access_under_identical_keys,The following statement contains a magic number: Assert.Equal(2' storage.Count);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProcessStorageTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProcessStorageTest.cs,verify_bahaviour_for_concurrent_access_under_identical_keys,The following statement contains a magic number: Assert.Equal(2' storage.Count);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProcessStorageTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProcessStorageTest.cs,MakeThreads,The following statement contains a magic number: var threads = keys.Select(key =>                  new Thread(load =>                  {                      var storage = (ConcurrentStack<TestItem>) ((object[]) load)[0];                      var counter = (ConcurrentStack<int>) ((object[]) load)[1];                        var item = ProcessStorage<string' TestItem>.GetOrAdd(key.ToString()' _ =>                      {                          Debug.WriteLine($"{key} :: {Thread.CurrentThread.ManagedThreadId}");                          counter.Push(Thread.CurrentThread.ManagedThreadId); // we want to test that this value factory delegate is invoked only once' even if map is accessed concurrently for the same key                          Thread.Sleep(500);                          return new TestItem {Id = key};                      });                      storage.Push(item);                  })).ToArray();
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProviderTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProviderTest.cs,validators_ordered_by_ascending_priorities,The following statement contains a magic number: Assert.Equal(4' exps.Count);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProviderTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProviderTest.cs,validators_ordered_by_ascending_priorities,The following statement contains a magic number: Assert.Equal(3' exps[2]);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProviderTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProviderTest.cs,validators_ordered_by_ascending_priorities,The following statement contains a magic number: Assert.Equal(3' exps[2]);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProviderTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProviderTest.cs,validators_ordered_by_ascending_priorities,The following statement contains a magic number: Assert.Equal(2' exps[3]);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProviderTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProviderTest.cs,validators_ordered_by_ascending_priorities,The following statement contains a magic number: Assert.Equal(2' exps[3]);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProviderTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProviderTest.cs,validators_ordered_by_ascending_priorities,The following statement contains a magic number: Assert.Equal(4' exps.Count);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProviderTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProviderTest.cs,validators_ordered_by_ascending_priorities,The following statement contains a magic number: Assert.Equal(3' exps[2]);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProviderTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProviderTest.cs,validators_ordered_by_ascending_priorities,The following statement contains a magic number: Assert.Equal(3' exps[2]);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProviderTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProviderTest.cs,validators_ordered_by_ascending_priorities,The following statement contains a magic number: Assert.Equal(2' exps[3]);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ProviderTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ProviderTest.cs,validators_ordered_by_ascending_priorities,The following statement contains a magic number: Assert.Equal(2' exps[3]);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_single_model_with_multiple_annotations,The following statement contains a magic number: var assertAttributes = Enumerable.Range(0' 28).Select(x => new AssertThatAttribute($"Value > {x}")).ToArray();
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_single_model_with_multiple_annotations,The following statement contains a magic number: var requirAttributes = Enumerable.Range(0' 28).Select(x => new RequiredIfAttribute($"Value > {x}")).ToArray();
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_single_model_with_multiple_annotations,The following statement contains a magic number: var e = Assert.Throws<ValidationException>(() =>              {                  while (i < assertValidators.Count)                  {                      var validator = assertValidators[i];                      var rule = validator.GetClientValidationRules().Single();                      var suffix = i == 0 ? string.Empty : char.ConvertFromUtf32(96 + i);                      Assert.Equal($"assertthat{suffix}"' rule.ValidationType);                      i++;                  }              });
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_single_model_with_multiple_annotations,The following statement contains a magic number: Assert.Equal(27' i);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_single_model_with_multiple_annotations,The following statement contains a magic number: e = Assert.Throws<ValidationException>(() =>              {                  while (j < requirValidators.Count)                  {                      var validator = requirValidators[j];                      var rule = validator.GetClientValidationRules().Single();                      var suffix = j == 0 ? string.Empty : char.ConvertFromUtf32(96 + j);                      Assert.Equal($"requiredif{suffix}"' rule.ValidationType);                      j++;                  }              });
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_single_model_with_multiple_annotations,The following statement contains a magic number: Assert.Equal(27' j);
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_multiple_models_with_single_annotation,The following statement contains a magic number: var models = Enumerable.Range(0' 28).Select(x => new Model()).ToList();
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_multiple_models_with_multiple_annotations,The following statement contains a magic number: var models = Enumerable.Range(0' 28).Select(x => new Model()).ToList();
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_multiple_models_with_multiple_annotations,The following statement contains a magic number: var assertAttributes = Enumerable.Range(0' 28).Select(x => new AssertThatAttribute($"Value > {x}")).ToArray();
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_multiple_models_with_multiple_annotations,The following statement contains a magic number: var requirAttributes = Enumerable.Range(0' 28).Select(x => new RequiredIfAttribute($"Value > {x}")).ToArray();
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_multiple_models_with_multiple_annotations,The following statement contains a magic number: models.ForEach(model =>              {                  var metadata = GetModelMetadata(model' m => m.Value);                  var controllerContext = GetControllerContext();                  var assertValidators = assertAttributes.Select(attribute => new AssertThatValidator(metadata' controllerContext' attribute)).ToList();                    var i = 0;                  var e = Assert.Throws<ValidationException>(() =>                  {                      while (i < assertValidators.Count)                      {                          var validator = assertValidators[i];                          var rule = validator.GetClientValidationRules().Single();                          var suffix = i == 0 ? string.Empty : char.ConvertFromUtf32(96 + i);                          Assert.Equal($"assertthat{suffix}"' rule.ValidationType);                          i++;                      }                  });                  Assert.Equal(27' i); // 27 attributes passed                  Assert.Equal(                      "AssertThatValidator: collecting of client validation rules for Value field failed."'                      e.Message);                  Assert.IsType<InvalidOperationException>(e.InnerException);                  Assert.Equal(                      "No more than 27 unique attributes of the same type can be applied for a single field or property."'                      e.InnerException.Message);              });
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_multiple_models_with_multiple_annotations,The following statement contains a magic number: models.ForEach(model =>              {                  var metadata = GetModelMetadata(model' m => m.Value);                  var controllerContext = GetControllerContext();                  var assertValidators = assertAttributes.Select(attribute => new AssertThatValidator(metadata' controllerContext' attribute)).ToList();                    var i = 0;                  var e = Assert.Throws<ValidationException>(() =>                  {                      while (i < assertValidators.Count)                      {                          var validator = assertValidators[i];                          var rule = validator.GetClientValidationRules().Single();                          var suffix = i == 0 ? string.Empty : char.ConvertFromUtf32(96 + i);                          Assert.Equal($"assertthat{suffix}"' rule.ValidationType);                          i++;                      }                  });                  Assert.Equal(27' i); // 27 attributes passed                  Assert.Equal(                      "AssertThatValidator: collecting of client validation rules for Value field failed."'                      e.Message);                  Assert.IsType<InvalidOperationException>(e.InnerException);                  Assert.Equal(                      "No more than 27 unique attributes of the same type can be applied for a single field or property."'                      e.InnerException.Message);              });
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_multiple_models_with_multiple_annotations,The following statement contains a magic number: models.ForEach(model =>              {                  var metadata = GetModelMetadata(model' m => m.Value);                  var controllerContext = GetControllerContext();                  var requirValidators = requirAttributes.Select(attribute => new RequiredIfValidator(metadata' controllerContext' attribute)).ToList();                    var j = 0;                  var e = Assert.Throws<ValidationException>(() =>                  {                      while (j < requirValidators.Count)                      {                          var validator = requirValidators[j];                          var rule = validator.GetClientValidationRules().Single();                          var suffix = j == 0 ? string.Empty : char.ConvertFromUtf32(96 + j);                          Assert.Equal($"requiredif{suffix}"' rule.ValidationType);                          j++;                      }                  });                  Assert.Equal(27' j); // 27 attributes passed                  Assert.Equal(                      "RequiredIfValidator: collecting of client validation rules for Value field failed."'                      e.Message);                  Assert.IsType<InvalidOperationException>(e.InnerException);                  Assert.Equal(                      "No more than 27 unique attributes of the same type can be applied for a single field or property."'                      e.InnerException.Message);              });
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_client_validation_rules_collecting_for_multiple_models_with_multiple_annotations,The following statement contains a magic number: models.ForEach(model =>              {                  var metadata = GetModelMetadata(model' m => m.Value);                  var controllerContext = GetControllerContext();                  var requirValidators = requirAttributes.Select(attribute => new RequiredIfValidator(metadata' controllerContext' attribute)).ToList();                    var j = 0;                  var e = Assert.Throws<ValidationException>(() =>                  {                      while (j < requirValidators.Count)                      {                          var validator = requirValidators[j];                          var rule = validator.GetClientValidationRules().Single();                          var suffix = j == 0 ? string.Empty : char.ConvertFromUtf32(96 + j);                          Assert.Equal($"requiredif{suffix}"' rule.ValidationType);                          j++;                      }                  });                  Assert.Equal(27' j); // 27 attributes passed                  Assert.Equal(                      "RequiredIfValidator: collecting of client validation rules for Value field failed."'                      e.Message);                  Assert.IsType<InvalidOperationException>(e.InnerException);                  Assert.Equal(                      "No more than 27 unique attributes of the same type can be applied for a single field or property."'                      e.InnerException.Message);              });
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_validators_caching,The following statement contains a magic number: const int testLoops = 10;
Magic Number,ExpressiveAnnotations.MvcUnobtrusive.Tests,ValidatorsTest,D:\research\architectureSmells\repos\JaroslawWaliszko_ExpressiveAnnotations\src\ExpressiveAnnotations.MvcUnobtrusive.Tests\ValidatorsTest.cs,verify_validators_caching,The following statement contains a magic number: var generatedCode = Enumerable.Repeat(0' 100).Select(x => "!(1 < 0*~0)")                  .Aggregate("!(1 < 0*~0)"' (accumulator' item) => $"({accumulator} && {item})");
