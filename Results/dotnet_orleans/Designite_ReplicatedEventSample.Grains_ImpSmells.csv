Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ReplicatedEventSample.Grains,EventGrain,F:\newReposMay17\dotnet_orleans\Samples\ReplicatedEventSample\ReplicatedEventSample.Grains\EventGrain.cs,GetTopThree,The length of the statement  "	var result = State.outcomes.OrderByDescending (o => o.Value.Score).Take (3).Select (o => new KeyValuePair<string' int> (o.Value.Name' o.Value.Score)).ToList (); " is 160.
Long Statement,ReplicatedEventSample.Grains,ReplicatedEventTable,F:\newReposMay17\dotnet_orleans\Samples\ReplicatedEventSample\ReplicatedEventSample.Grains\ReplicatedEventTable.cs,IterateOverQuery,The length of the statement  "		querySegment = await query.AsTableQuery ().ExecuteSegmentedAsync (querySegment != null ? querySegment.ContinuationToken : null); " is 128.
Magic Number,ReplicatedEventSample.Grains,EventGrain,F:\newReposMay17\dotnet_orleans\Samples\ReplicatedEventSample\ReplicatedEventSample.Grains\EventGrain.cs,OnStateChanged,The following statement contains a magic number: if (State.outcomes.Count > 5) {  	var leader = State.outcomes.OrderByDescending (o => o.Value.Score).First ().Value.Name;  	if (lastAnnouncedLeader == null)  		message = string.Format ("{0} is leading {1}"' leader' EventName);  	else if (lastAnnouncedLeader != leader)  		message = string.Format ("{0} is now leading {1}"' leader' EventName);  	lastAnnouncedLeader = leader;  }  
Magic Number,ReplicatedEventSample.Grains,GeneratorGrain,F:\newReposMay17\dotnet_orleans\Samples\ReplicatedEventSample\ReplicatedEventSample.Grains\GeneratorGrain.cs,Start,The following statement contains a magic number: DelayDeactivation (TimeSpan.FromMinutes (10));  
Magic Number,ReplicatedEventSample.Grains,GeneratorGrain,F:\newReposMay17\dotnet_orleans\Samples\ReplicatedEventSample\ReplicatedEventSample.Grains\GeneratorGrain.cs,Start,The following statement contains a magic number: if (!started) {  	started = true;  	// find event grain for this generator  	eventGrain = GrainFactory.GetGrain<IEventGrain> ("event" + this.GetPrimaryKeyLong ());  	RegisterTimer (Generate' null' TimeSpan.FromSeconds (random.Next (20))' // start within 20 secs  	TimeSpan.FromSeconds (2 + random.NextDouble ()));  	// one outcome about every 2.5 seconds  }  
Magic Number,ReplicatedEventSample.Grains,GeneratorGrain,F:\newReposMay17\dotnet_orleans\Samples\ReplicatedEventSample\ReplicatedEventSample.Grains\GeneratorGrain.cs,Start,The following statement contains a magic number: if (!started) {  	started = true;  	// find event grain for this generator  	eventGrain = GrainFactory.GetGrain<IEventGrain> ("event" + this.GetPrimaryKeyLong ());  	RegisterTimer (Generate' null' TimeSpan.FromSeconds (random.Next (20))' // start within 20 secs  	TimeSpan.FromSeconds (2 + random.NextDouble ()));  	// one outcome about every 2.5 seconds  }  
Magic Number,ReplicatedEventSample.Grains,GeneratorGrain,F:\newReposMay17\dotnet_orleans\Samples\ReplicatedEventSample\ReplicatedEventSample.Grains\GeneratorGrain.cs,Start,The following statement contains a magic number: RegisterTimer (Generate' null' TimeSpan.FromSeconds (random.Next (20))' // start within 20 secs  TimeSpan.FromSeconds (2 + random.NextDouble ()));  
Magic Number,ReplicatedEventSample.Grains,GeneratorGrain,F:\newReposMay17\dotnet_orleans\Samples\ReplicatedEventSample\ReplicatedEventSample.Grains\GeneratorGrain.cs,Start,The following statement contains a magic number: RegisterTimer (Generate' null' TimeSpan.FromSeconds (random.Next (20))' // start within 20 secs  TimeSpan.FromSeconds (2 + random.NextDouble ()));  
Magic Number,ReplicatedEventSample.Grains,GeneratorGrain,F:\newReposMay17\dotnet_orleans\Samples\ReplicatedEventSample\ReplicatedEventSample.Grains\GeneratorGrain.cs,Generate,The following statement contains a magic number: await Task.Delay ((int)(1000 * random.NextDouble ()));  
Magic Number,ReplicatedEventSample.Grains,TickerGrain,F:\newReposMay17\dotnet_orleans\Samples\ReplicatedEventSample\ReplicatedEventSample.Grains\TickerGrain.cs,GetTickerLine,The following statement contains a magic number: if (last_thing_that_happened == null || timestamp + TimeSpan.FromSeconds (30) < DateTime.UtcNow)  	return Task.FromResult ("no news right now");  else  	return Task.FromResult (last_thing_that_happened);  
