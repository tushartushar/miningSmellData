Implementation smell,Namespace,Class,File,Method,Description
Long Method,Orleans.Runtime,TypeUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeUtils.cs,IsCSharpKeyword,The method has 110 lines of code.
Long Method,Orleans.Runtime,HeadersContainer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\Message.cs,Serializer,The method has 101 lines of code.
Long Method,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The method has 137 lines of code.
Long Method,Orleans.Messaging,ClientMessageCenter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\ClientMessageCenter.cs,GetGatewayConnection,The method has 106 lines of code.
Long Method,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,TryReadSimpleType,The method has 106 lines of code.
Long Method,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The method has 159 lines of code.
Long Method,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The method has 146 lines of code.
Long Method,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,SerializeArray,The method has 142 lines of code.
Long Method,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,DeserializeArray,The method has 121 lines of code.
Complex Method,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,SendRequestMessage,Cyclomatic complexity of the method is 9
Complex Method,Orleans.Runtime,AssemblyLoader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\AssemblyLoader.cs,EnumerateApprovedAssemblies,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,TypeUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeUtils.cs,GetInnerTypes,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,TypeUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeUtils.cs,GetParseableName,Cyclomatic complexity of the method is 13
Complex Method,Orleans.Runtime,TypeUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeUtils.cs,GetTypes,Cyclomatic complexity of the method is 11
Complex Method,Orleans.Runtime,LogFormatter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Logging\LogFormatter.cs,PrintException_Helper,Cyclomatic complexity of the method is 9
Complex Method,Orleans.Runtime,HeadersContainer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\Message.cs,Serializer,Cyclomatic complexity of the method is 31
Complex Method,Orleans.Runtime,HeadersContainer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\Message.cs,Deserializer,Cyclomatic complexity of the method is 34
Complex Method,Orleans.Runtime,MessageFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\MessageFactory.cs,CreateResponseMessage,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,GrainInterfaceMap,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainInterfaceMap.cs,AddMap,Cyclomatic complexity of the method is 12
Complex Method,Orleans.Runtime,GrainInterfaceMap,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainInterfaceMap.cs,AddEntry,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,GrainTypeResolver,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainTypeResolver.cs,TryGetGrainClassData,Cyclomatic complexity of the method is 10
Complex Method,Orleans.Runtime,EquallyDividedMultiRange,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\RingRange.cs,EquallyDividedMultiRange,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,Cyclomatic complexity of the method is 17
Complex Method,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,EnumerableToString,Cyclomatic complexity of the method is 8
Complex Method,Orleans.CodeGeneration,GrainInterfaceUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\GrainInterfaceUtils.cs,ValidateInterfaceMethods,Cyclomatic complexity of the method is 9
Complex Method,Orleans.CodeGeneration,GrainInterfaceUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\GrainInterfaceUtils.cs,IsPureObserverInterface,Cyclomatic complexity of the method is 8
Complex Method,Orleans.CodeGeneration,GrainInterfaceUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\GrainInterfaceUtils.cs,GetMethodsImpl,Cyclomatic complexity of the method is 9
Complex Method,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,ResolveIPAddress,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,GetLocalIPAddress,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Configuration.Validators,ApplicationPartValidator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Validators\ApplicationPartValidator.cs,ValidateConfiguration,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Messaging,ClientMessageCenter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\ClientMessageCenter.cs,GetGatewayConnection,Cyclomatic complexity of the method is 11
Complex Method,Orleans.Networking.Shared,TransportConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\TransportConnection.cs,FastEnumerable,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,TryReadSimpleType,Cyclomatic complexity of the method is 28
Complex Method,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,CheckSpecialTypeCode,Cyclomatic complexity of the method is 25
Complex Method,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,Cyclomatic complexity of the method is 67
Complex Method,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadConstant,Cyclomatic complexity of the method is 11
Complex Method,Orleans.Serialization,ILSerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ILSerializerGenerator.cs,EmitDeserializer,Cyclomatic complexity of the method is 9
Complex Method,Orleans.Serialization,ILSerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ILSerializerGenerator.cs,GetSerializationCallbacks,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,Register,Cyclomatic complexity of the method is 16
Complex Method,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,DeepCopierHelper,Cyclomatic complexity of the method is 18
Complex Method,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,SerializeInner,Cyclomatic complexity of the method is 13
Complex Method,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,SerializeArray,Cyclomatic complexity of the method is 23
Complex Method,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,DeserializeInner,Cyclomatic complexity of the method is 14
Complex Method,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,DeserializeArray,Cyclomatic complexity of the method is 22
Complex Method,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,ResolveTypeName,Cyclomatic complexity of the method is 12
Complex Method,Orleans.Serialization,TypeUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\TypeUtilities.cs,IsShallowCopyableInternal,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Serialization,TypeUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\TypeUtilities.cs,OrleansTypeKeyString,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Serialization,TypeUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\TypeUtilities.cs,IsAccessibleFromAssembly,Cyclomatic complexity of the method is 17
Complex Method,Orleans.Threading,UnfairSemaphore,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolWorkQueue.cs,Wait,Cyclomatic complexity of the method is 13
Complex Method,Orleans.Transactions,TransactionalStatusExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Transactions\TransactionalStatus.cs,ConvertToUserException,Cyclomatic complexity of the method is 8
Long Parameter List,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,OutsideRuntimeClient,The method has 7 parameters. Parameters: loggerFactory' clientMessagingOptions' typeManagementOptions' statisticsOptions' appRequestStatistics' schedulerStageStatistics' clientStatisticsManager
Long Parameter List,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,SendRequest,The method has 6 parameters. Parameters: target' request' context' debugContext' options' genericArguments
Long Parameter List,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,SendRequestMessage,The method has 6 parameters. Parameters: target' message' context' debugContext' options' genericArguments
Long Parameter List,Orleans.Runtime,TypeFormattingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeFormattingOptions.cs,TypeFormattingOptions,The method has 6 parameters. Parameters: nameSuffix' includeNamespace' includeGenericParameters' includeTypeParameters' nestedClassSeparator' includeGlobal
Long Parameter List,Orleans.Runtime,TypeUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeUtils.cs,GetParseableName,The method has 5 parameters. Parameters: type' builder' typeArguments' options' getNameFunc
Long Parameter List,Orleans.Runtime,GrainInterfaceMap,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainInterfaceMap.cs,AddEntry,The method has 5 parameters. Parameters: iface' grain' placement' registrationStrategy' primaryImplementation
Long Parameter List,Orleans.Runtime,GrainInterfaceMap,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainInterfaceMap.cs,TryGetTypeInfo,The method has 5 parameters. Parameters: typeCode' grainClass' placement' registrationStrategy' genericArguments
Long Parameter List,Orleans.Runtime,GrainReferenceRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainReferenceRuntime.cs,GrainReferenceRuntime,The method has 6 parameters. Parameters: logger' runtimeClient' cancellationTokenRuntime' internalGrainFactory' serializationManager' outgoingCallFilters
Long Parameter List,Orleans.Runtime,GrainReferenceRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainReferenceRuntime.cs,InvokeOneWayMethod,The method has 5 parameters. Parameters: reference' methodId' arguments' options' silo
Long Parameter List,Orleans.Runtime,GrainReferenceRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainReferenceRuntime.cs,InvokeMethodAsync,The method has 5 parameters. Parameters: reference' methodId' arguments' options' silo
Long Parameter List,Orleans.Runtime,IRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\IRuntimeClient.cs,SendRequest,The method has 6 parameters. Parameters: target' request' context' debugContext' options' genericArguments
Long Parameter List,Orleans.Runtime,OutgoingCallInvoker,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutgoingCallInvoker.cs,OutgoingCallInvoker,The method has 7 parameters. Parameters: grain' request' options' debugContext' sendRequest' mapping' filters
Long Parameter List,Orleans.Runtime,SharedCallbackData,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\SharedCallbackData.cs,SharedCallbackData,The method has 5 parameters. Parameters: unregister' logger' messagingOptions' requestStatistics' responseTimeout
Long Parameter List,Orleans.Runtime,SiloRuntimeStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\IPerformanceMetrics.cs,SiloRuntimeStatistics,The method has 7 parameters. Parameters: messageCenter' activationCount' recentlyUsedActivationCount' appEnvironmentStatistics' hostEnvironmentStatistics' loadSheddingOptions' dateTime
Long Parameter List,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,OnMessageSend,The method has 5 parameters. Parameters: messageSendCounter' msg' numTotalBytes' headerBytes' connectionDirection
Long Parameter List,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,OnMessageReceive,The method has 5 parameters. Parameters: messageReceivedCounter' msg' numTotalBytes' headerBytes' connectionDirection
Long Parameter List,Orleans.Runtime,IGrainInfo,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\SystemTargetInterfaces\IRemoteGrainDirectory.cs,RemoveActivation,The method has 5 parameters. Parameters: act' cause' lazyDeregistrationDelay' entry' wasRemoved
Long Parameter List,Orleans.Runtime,IDependencyTelemetryConsumer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Telemetry\IDependencyTelemetryConsumer.cs,TrackDependency,The method has 5 parameters. Parameters: dependencyName' commandName' startTime' duration' success
Long Parameter List,Orleans.Runtime,IRequestTelemetryConsumer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Telemetry\IRequestTelemetryConsumer.cs,TrackRequest,The method has 5 parameters. Parameters: name' startTime' duration' responseCode' success
Long Parameter List,Orleans.Runtime,ITelemetryProducer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Telemetry\ITelemetryProducer.cs,TrackDependency,The method has 5 parameters. Parameters: name' commandName' startTime' duration' success
Long Parameter List,Orleans.Runtime,ITelemetryProducer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Telemetry\ITelemetryProducer.cs,TrackRequest,The method has 5 parameters. Parameters: name' startTime' duration' responseCode' success
Long Parameter List,Orleans.Runtime,TelemetryManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Telemetry\TelemetryManager.cs,TrackDependency,The method has 5 parameters. Parameters: name' commandName' startTime' duration' success
Long Parameter List,Orleans.Runtime,TelemetryManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Telemetry\TelemetryManager.cs,TrackRequest,The method has 5 parameters. Parameters: name' startTime' duration' responseCode' success
Long Parameter List,Orleans.Runtime,AsyncTaskSafeTimer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\AsyncTaskSafeTimer.cs,AsyncTaskSafeTimer,The method has 5 parameters. Parameters: logger' asynTaskCallback' state' dueTime' period
Long Parameter List,Orleans.Runtime,SafeTimer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimer.cs,SafeTimer,The method has 5 parameters. Parameters: logger' callback' state' dueTime' period
Long Parameter List,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,SafeTimerBase,The method has 5 parameters. Parameters: logger' asynTaskCallback' state' dueTime' period
Long Parameter List,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,SafeTimerBase,The method has 5 parameters. Parameters: logger' syncCallback' state' dueTime' period
Long Parameter List,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,Init,The method has 6 parameters. Parameters: logger' asynCallback' synCallback' state' due' period
Long Parameter List,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,CheckTimerDelay,The method has 8 parameters. Parameters: previousTickTime' totalNumTicks' dueTime' timerFrequency' logger' getName' errorCode' freezeCheck
Long Parameter List,Orleans.Internal,AsyncExecutorWithRetries,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetries,The method has 5 parameters. Parameters: action' maxNumErrorTries' retryExceptionFilter' maxExecutionTime' onErrorBackOff
Long Parameter List,Orleans.Internal,AsyncExecutorWithRetries,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetries,The method has 5 parameters. Parameters: function' maxNumErrorTries' retryExceptionFilter' maxExecutionTime' onErrorBackOff
Long Parameter List,Orleans.Internal,AsyncExecutorWithRetries,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetries,The method has 8 parameters. Parameters: function' maxNumSuccessTries' maxNumErrorTries' retryValueFilter' retryExceptionFilter' maxExecutionTime' onSuccessBackOff' onErrorBackOff
Long Parameter List,Orleans.Internal,AsyncExecutorWithRetries,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetriesHelper,The method has 10 parameters. Parameters: function' callCounter' maxNumSuccessTries' maxNumErrorTries' maxExecutionTime' startExecutionTime' retryValueFilter' retryExceptionFilter' onSuccessBackOff' onErrorBackOff
Long Parameter List,Orleans.Streams,IStreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\IStreamGrainExtensions.cs,DeliverImmutable,The method has 5 parameters. Parameters: subscriptionId' streamId' item' currentToken' handshakeToken
Long Parameter List,Orleans.Streams,IStreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\IStreamGrainExtensions.cs,DeliverMutable,The method has 5 parameters. Parameters: subscriptionId' streamId' item' currentToken' handshakeToken
Long Parameter List,Orleans.Streams,StreamConsumer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumer.cs,StreamConsumer,The method has 6 parameters. Parameters: stream' streamProviderName' runtime' pubSub' logger' isRewindable
Long Parameter List,Orleans.Streams,StreamConsumer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumer.cs,SubscribeAsyncImpl,The method has 5 parameters. Parameters: observer' batchObserver' token' filterFunc' filterData
Long Parameter List,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,SetObserver,The method has 6 parameters. Parameters: subscriptionId' stream' observer' batchObserver' token' filter
Long Parameter List,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,DeliverImmutable,The method has 5 parameters. Parameters: subscriptionId' streamId' item' currentToken' handshakeToken
Long Parameter List,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,DeliverMutable,The method has 5 parameters. Parameters: subscriptionId' streamId' item' currentToken' handshakeToken
Long Parameter List,Orleans.Streams,StreamSubscriptionHandleImpl<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamSubscriptionHandleImpl.cs,StreamSubscriptionHandleImpl,The method has 6 parameters. Parameters: subscriptionId' observer' batchObserver' streamImpl' filterWrapper' token
Long Parameter List,Orleans.Streams,PersistentStreamProducer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\PersistentStreamProducer.cs,PersistentStreamProducer,The method has 5 parameters. Parameters: stream' providerUtilities' queueAdapter' isRewindable' serializationManager
Long Parameter List,Orleans.Streams,IStreamPubSub,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Providers\IStreamProviderRuntime.cs,RegisterConsumer,The method has 5 parameters. Parameters: subscriptionId' streamId' streamProvider' streamConsumer' filter
Long Parameter List,Orleans.Streams,GrainBasedPubSubRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\GrainBasedPubSubRuntime.cs,RegisterConsumer,The method has 5 parameters. Parameters: subscriptionId' streamId' streamProvider' streamConsumer' filter
Long Parameter List,Orleans.Streams,ImplicitStreamPubSub,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\ImplicitStreamPubSub.cs,RegisterConsumer,The method has 5 parameters. Parameters: subscriptionId' streamId' streamProvider' streamConsumer' filter
Long Parameter List,Orleans.Streams,StreamPubSubImpl,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\StreamPubSubImpl.cs,RegisterConsumer,The method has 5 parameters. Parameters: subscriptionId' streamId' streamProvider' streamConsumer' filter
Long Parameter List,Orleans.Streams,IQueueAdapter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\QueueAdapters\IQueueAdapter.cs,QueueMessageBatchAsync,The method has 5 parameters. Parameters: streamGuid' streamNamespace' events' token' requestContext
Long Parameter List,Orleans.Streams,QueueAdapterExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\QueueAdapters\IQueueAdapter.cs,QueueMessageAsync,The method has 6 parameters. Parameters: adapter' streamGuid' streamNamespace' evt' token' requestContext
Long Parameter List,Orleans.LogConsistency,ILogViewAdaptorFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\LogConsistency\ILogViewAdaptorFactory.cs,MakeLogViewAdaptor,The method has 5 parameters. Parameters: hostgrain' initialstate' graintypename' grainStorage' services
Long Parameter List,Orleans.LogConsistency,LogConsistentGrain<TView>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\LogConsistency\LogConsistentGrain.cs,InstallAdaptor,The method has 5 parameters. Parameters: factory' state' grainTypeName' grainStorage' services
Long Parameter List,Orleans.Messaging,ClientMessageCenter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\ClientMessageCenter.cs,ClientMessageCenter,The method has 12 parameters. Parameters: clientMessagingOptions' localAddress' gen' clientId' serializationManager' runtimeClient' messageFactory' connectionStatusListener' loggerFactory' statisticsOptions' connectionManager' gatewayManager
Long Parameter List,Orleans.Runtime.Messaging,ClientOutboundConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ClientOutboundConnection.cs,ClientOutboundConnection,The method has 9 parameters. Parameters: remoteSiloAddress' connection' middleware' messageFactory' serviceProvider' messageCenter' trace' connectionManager' connectionOptions
Long Parameter List,Orleans.Runtime.Messaging,ClientOutboundConnectionFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ClientOutboundConnectionFactory.cs,ClientOutboundConnectionFactory,The method has 5 parameters. Parameters: serviceProvider' connectionOptions' clientConnectionOptions' messageFactory' trace
Long Parameter List,Orleans.Runtime.Messaging,Connection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Connection.cs,Connection,The method has 5 parameters. Parameters: connection' middleware' messageFactory' serviceProvider' trace
Long Parameter List,Orleans.Runtime.Messaging,NetworkingTrace,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\NetworkingTrace.cs,Log,The method has 5 parameters. Parameters: logLevel' eventId' state' exception' formatter
Long Parameter List,Orleans.Networking.Shared,SocketConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketConnection.cs,SocketConnection,The method has 6 parameters. Parameters: socket' memoryPool' scheduler' trace' maxReadBufferSize' maxWriteBufferSize
Long Parameter List,Orleans.Networking.Shared,SocketsTrace,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketsTrace.cs,Log,The method has 5 parameters. Parameters: logLevel' eventId' state' exception' formatter
Long Parameter List,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The method has 6 parameters. Parameters: serializationManager' t' serializerName' deserializerName' copierName' genericArgs
Long Parameter List,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The method has 7 parameters. Parameters: serializationManager' concreteType' definingType' copierName' serializerName' deserializerName' genericArgs
Long Parameter List,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,SerializationManager,The method has 6 parameters. Parameters: serviceProvider' serializationProviderOptions' loggerFactory' typeResolver' serializationStatistics' largeMessageWarningThreshold
Long Parameter List,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,Register,The method has 5 parameters. Parameters: t' cop' ser' deser' forceOverride
Long Parameter List,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,SerializeInner,The method has 5 parameters. Parameters: sm' obj' expected' context' writer
Long Parameter List,Orleans.Serialization,SerializerFeatureExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializerFeatureExtensions.cs,AddSerializerDelegates,The method has 5 parameters. Parameters: serializerFeature' type' copier' serializer' deserializer
Long Parameter List,Orleans.Serialization,SerializerFeatureExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializerFeatureExtensions.cs,AddSerializerDelegates,The method has 6 parameters. Parameters: serializerFeature' type' copier' serializer' deserializer' overrideExisting
Long Parameter List,Orleans.Providers.Streams.Common,PersistentStreamProvider,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\PersistentStreamProvider.cs,PersistentStreamProvider,The method has 6 parameters. Parameters: name' pubsubOptions' lifeCycleOptions' runtime' serializationManager' logger
Long Parameter List,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The method has 6 parameters. Parameters: manager' grainFactory' streamId' streamProviderName' primaryKey' grainClassNamePrefix
Long Parameter List,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The method has 6 parameters. Parameters: manager' grainFactory' streamId' streamProviderName' primaryKey' grainClassNamePrefix
Long Parameter List,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The method has 6 parameters. Parameters: manager' grainFactory' streamId' streamProviderName' primaryKey' grainClassNamePrefix
Long Parameter List,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The method has 7 parameters. Parameters: manager' grainFactory' streamId' streamProviderName' primaryKey' keyExtension' grainClassNamePrefix
Long Parameter List,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The method has 7 parameters. Parameters: manager' grainFactory' streamId' streamProviderName' primaryKey' keyExtension' grainClassNamePrefix
Long Parameter List,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProducer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducer.cs,SimpleMessageStreamProducer,The method has 9 parameters. Parameters: stream' streamProviderName' providerUtilities' fireAndForgetDelivery' optimizeForImmutableData' pubSub' isRewindable' serializationManager' loggerFactory
Long Parameter List,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProducerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,SimpleMessageStreamProducerExtension,The method has 5 parameters. Parameters: providerRt' pubsub' loggerFactory' fireAndForget' optimizeForImmutable
Long Parameter List,Orleans.Providers.Streams.SimpleMessageStream,StreamConsumerExtensionCollection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,DeliverToRemote,The method has 6 parameters. Parameters: remoteConsumer' streamId' subscriptionId' item' optimizeForImmutableData' fireAndForgetDelivery
Long Parameter List,Orleans.Providers.Streams.SimpleMessageStream,StreamConsumerExtensionCollection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,NotifyError,The method has 5 parameters. Parameters: remoteConsumer' subscriptionId' exc' streamId' fireAndForgetDelivery
Long Parameter List,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProvider,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProvider.cs,SimpleMessageStreamProvider,The method has 5 parameters. Parameters: name' options' loggerFactory' providerRuntime' serializationManager
Long Parameter List,Orleans.Threading,ThreadPoolExecutorOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ExecutorOptions.cs,ThreadPoolExecutorOptions,The method has 12 parameters. Parameters: name' stageType' cts' loggerFactory' degreeOfParallelism' drainAfterCancel' preserveOrder' workItemExecutionTimeTreshold' delayWarningThreshold' workItemStatusProvider' actionFilters' exceptionFilters
Long Parameter List,Orleans.Threading,ThreadPoolThread,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolThread.cs,ThreadPoolThread,The method has 5 parameters. Parameters: name' cancellationToken' loggerFactory' statisticsOptions' schedulerStageStatistics
Long Identifier,Orleans,AsyncBatchedContinuationQueue<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\AsyncBatchedContinuationQueue.cs,,The length of the parameter DEFAULT_AGGREGATE_CONTINUATION_MAX_TIME is 39.
Long Identifier,Orleans,ClientOptionsLogger,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\OptionLogger\IOptionsLogger.cs,,The length of the parameter ClientOptionLoggerLifeCycleRing is 31.
Long Identifier,Orleans,GatewayCountChangedEventArgs,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\ClientInvokeCallback.cs,GatewayCountChangedEventArgs,The length of the parameter currentNumberOfConnectedGateways is 32.
Long Identifier,Orleans,GatewayCountChangedEventArgs,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\ClientInvokeCallback.cs,GatewayCountChangedEventArgs,The length of the parameter previousNumberOfConnectedGateways is 33.
Long Identifier,Orleans,GrainCasterFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\GrainCasterFactory.cs,,The length of the parameter GrainReferenceCastHelperMethodInfo is 34.
Long Identifier,Orleans,GrainFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\GrainFactory.cs,,The length of the parameter typedSystemTargetReferenceCache is 31.
Long Identifier,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,,The length of the parameter incomingMessagesThreadTimeTracking is 34.
Long Identifier,Orleans.Runtime,Constants,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\Constants.cs,,The length of the parameter DATA_CONNECTION_FOR_REMINDERS_STRING_NAME is 41.
Long Identifier,Orleans.Runtime,Constants,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\Constants.cs,,The length of the parameter ADO_INVARIANT_FOR_REMINDERS_NAME is 32.
Long Identifier,Orleans.Runtime,Constants,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\Constants.cs,,The length of the parameter ORLEANS_CLUSTERING_AZURESTORAGE is 31.
Long Identifier,Orleans.Runtime,Constants,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\Constants.cs,,The length of the parameter ORLEANS_REMINDERS_AZURESTORAGE is 30.
Long Identifier,Orleans.Runtime,Constants,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\Constants.cs,,The length of the parameter LifecycleSchedulingSystemTargetId is 33.
Long Identifier,Orleans.Runtime,Constants,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\Constants.cs,,The length of the parameter DeploymentLoadPublisherSystemTargetId is 37.
Long Identifier,Orleans.Runtime,Constants,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\Constants.cs,,The length of the parameter StreamProviderManagerAgentSystemTargetId is 40.
Long Identifier,Orleans.Runtime,Constants,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\Constants.cs,,The length of the parameter TransactionAgentSystemTargetId is 30.
Long Identifier,Orleans.Runtime,Constants,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\Constants.cs,,The length of the parameter PULLING_AGENTS_MANAGER_SYSTEM_TARGET_TYPE_CODE is 46.
Long Identifier,Orleans.Runtime,Constants,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\Constants.cs,,The length of the parameter PULLING_AGENT_SYSTEM_TARGET_TYPE_CODE is 37.
Long Identifier,Orleans.Runtime,Constants,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\Constants.cs,,The length of the parameter DEFAULT_LOGGER_BULK_MESSAGE_LIMIT is 33.
Long Identifier,Orleans.Runtime,GrainCancellationTokenRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainCancellationTokenRuntime.cs,,The length of the parameter _cancelCallRetryExceptionFilter is 31.
Long Identifier,Orleans.Runtime,ApplicationRequestsStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\ApplicationRequestsStatisticsGroup.cs,,The length of the parameter NUM_APP_REQUESTS_EXP_LATENCY_HISTOGRAM_CATEGORIES is 49.
Long Identifier,Orleans.Runtime,ApplicationRequestsStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\ApplicationRequestsStatisticsGroup.cs,,The length of the parameter NUM_APP_REQUESTS_LINEAR_LATENCY_HISTOGRAM_CATEGORIES is 52.
Long Identifier,Orleans.Runtime,CounterStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\CounterStatistic.cs,,The length of the parameter allStatisticsFromSpecificThread is 31.
Long Identifier,Orleans.Runtime,CounterStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\CounterStatistic.cs,,The length of the parameter specificStatisticFromAllThreads is 31.
Long Identifier,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,,The length of the parameter dispatcherMessagesProcessedOkPerDirection is 41.
Long Identifier,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,,The length of the parameter dispatcherMessagesProcessedErrorsPerDirection is 45.
Long Identifier,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,,The length of the parameter dispatcherMessagesProcessedReRoutePerDirection is 46.
Long Identifier,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,,The length of the parameter dispatcherMessagesProcessingReceivedPerDirection is 48.
Long Identifier,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,,The length of the parameter dispatcherMessagesProcessedTotal is 32.
Long Identifier,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,,The length of the parameter dispatcherMessagesReceivedTotal is 31.
Long Identifier,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,,The length of the parameter perSocketDirectionStatsReceive is 30.
Long Identifier,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,,The length of the parameter perSiloPingReplyReceivedCounters is 32.
Long Identifier,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,,The length of the parameter perSiloPingReplyMissedCounters is 30.
Long Identifier,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,,The length of the parameter NUM_MSG_SIZE_HISTOGRAM_CATEGORIES is 33.
Long Identifier,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,,The length of the parameter turnsExecutedPerWorkerThreadApplicationTurns is 44.
Long Identifier,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,,The length of the parameter turnsExecutedPerWorkerThreadSystemTurns is 39.
Long Identifier,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,,The length of the parameter turnsExecutedPerWorkerThreadNull is 32.
Long Identifier,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,,The length of the parameter turnsExecutedByAllWorkerThreadsTotalApplicationTurns is 52.
Long Identifier,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,,The length of the parameter turnsExecutedByAllWorkerThreadsTotalSystemTurns is 47.
Long Identifier,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,,The length of the parameter turnsExecutedByAllWorkerThreadsTotalNullTurns is 45.
Long Identifier,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,,The length of the parameter turnsExecutedByAllWorkItemGroupsTotalApplicationTurns is 53.
Long Identifier,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,,The length of the parameter turnsExecutedByAllWorkItemGroupsTotalSystem is 43.
Long Identifier,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the parameter latencyPenalizedThreadAllocationConst is 37.
Long Identifier,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the parameter latencyPenalizedThreadAllocationCoef is 36.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter NETWORKING_SOCKETS_SILO_CLOSED is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter NETWORKING_SOCKETS_SILO_OPENED is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter NETWORKING_SOCKETS_GATEWAYTOCLIENT_CLOSED is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter NETWORKING_SOCKETS_GATEWAYTOCLIENT_OPENED is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter NETWORKING_SOCKETS_CLIENTTOGATEWAY_CLOSED is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter NETWORKING_SOCKETS_CLIENTTOGATEWAY_OPENED is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_SENT_MESSAGES_PER_DIRECTION is 37.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_SENT_MESSAGES_PER_SILO is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_SENT_MESSAGESIZEHISTOGRAM is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_SENT_FAILED_PER_DIRECTION is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_SENT_DROPPED_PER_DIRECTION is 36.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_SENT_BATCH_SIZE_PER_SOCKET_DIRECTION is 46.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_SENT_BATCH_SIZE_BYTES_HISTOGRAM_PER_SOCKET_DIRECTION is 62.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_RECEIVED_MESSAGES_TOTAL is 33.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_RECEIVED_MESSAGES_PER_DIRECTION is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_RECEIVED_MESSAGES_PER_SILO is 36.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_RECEIVED_BYTES_TOTAL is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_RECEIVED_BYTES_HEADER is 31.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_RECEIVED_MESSAGESIZEHISTOGRAM is 39.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_RECEIVED_BATCH_SIZE_PER_SOCKET_DIRECTION is 50.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_RECEIVED_BATCH_SIZE_BYTES_HISTOGRAM_PER_SOCKET_DIRECTION is 66.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_DISPATCHER_RECEIVED_PER_DIRECTION is 43.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_DISPATCHER_RECEIVED_TOTAL is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_DISPATCHER_RECEIVED_ON_NULL is 37.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_DISPATCHER_RECEIVED_ON_ACTIVATION is 43.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_DISPATCHER_PROCESSED_OK_PER_DIRECTION is 47.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_DISPATCHER_PROCESSED_ERRORS_PER_DIRECTION is 51.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_DISPATCHER_PROCESSED_REROUTE_PER_DIRECTION is 52.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_DISPATCHER_PROCESSED_TOTAL is 36.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_IMA_ENQUEUED_TO_NULL is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_IMA_ENQUEUED_TO_SYSTEM_TARGET is 39.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_IMA_ENQUEUED_TO_ACTIVATION is 36.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_PROCESSING_ACTIVATION_DATA_ALL is 40.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_PINGS_RECEIVED_PER_SILO is 33.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_PINGS_REPLYRECEIVED_PER_SILO is 38.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_PINGS_REPLYMISSED_PER_SILO is 36.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_REJECTED_PER_DIRECTION is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGING_REROUTED_PER_DIRECTION is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGE_CENTER_SEND_QUEUE_LENGTH is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGE_CENTER_RECEIVE_QUEUE_LENGTH is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter QUEUES_QUEUE_SIZE_AVERAGE_PER_QUEUE is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter QUEUES_QUEUE_SIZE_INSTANTANEOUS_PER_QUEUE is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter QUEUES_AVERAGE_ARRIVAL_RATE_PER_QUEUE is 37.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter QUEUES_TIME_IN_QUEUE_AVERAGE_MILLIS_PER_QUEUE is 45.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter QUEUES_TIME_IN_QUEUE_TOTAL_MILLIS_PER_QUEUE is 43.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter THREADS_PROCESSED_REQUESTS_PER_THREAD is 37.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter THREADS_EXECUTION_TIME_TOTAL_CPU_CYCLES is 39.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter THREADS_EXECUTION_TIME_TOTAL_WALL_CLOCK is 39.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter THREADS_PROCESSING_TIME_TOTAL_CPU_CYCLES is 40.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter THREADS_PROCESSING_TIME_TOTAL_WALL_CLOCK is 40.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter THREADS_EXECUTION_TIME_AVERAGE_CPU_CYCLES is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter THREADS_EXECUTION_TIME_AVERAGE_WALL_CLOCK is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter THREADS_PROCESSING_TIME_AVERAGE_CPU_CYCLES is 42.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter THREADS_PROCESSING_TIME_AVERAGE_WALL_CLOCK is 42.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter RUNTIME_GC_ALLOCATEDBYTESINKBPERSEC is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter RUNTIME_GC_PROMOTEDMEMORYFROMGEN1KB is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter RUNTIME_GC_LARGEOBJECTHEAPSIZEKB is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter RUNTIME_GC_PROMOTEDMEMORYFROMGEN0KB is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter RUNTIME_MEMORY_TOTALPHYSICALMEMORYMB is 36.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter RUNTIME_MEMORY_AVAILABLEMEMORYMB is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter RUNTIME_DOT_NET_THREADPOOL_INUSE_WORKERTHREADS is 46.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter RUNTIME_DOT_NET_THREADPOOL_INUSE_COMPLETIONPORTTHREADS is 54.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter RUNTIME_THREADS_ASYNC_AGENT_PERAGENTTYPE is 40.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter RUNTIME_THREADS_ASYNC_AGENT_TOTAL_THREADS_CREATED is 49.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_TURNSEXECUTED_APPLICATION_BYALLWORKERTHREADS is 54.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_TURNSEXECUTED_APPLICATION_BYALLWORKITEMGROUPS is 55.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_TURNSEXECUTED_APPLICATION_PERTHREAD is 45.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_TURNSEXECUTED_SYSTEM_BYALLWORKERTHREADS is 49.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_TURNSEXECUTED_SYSTEM_BYALLWORKITEMGROUPS is 50.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_TURNSEXECUTED_SYSTEM_PERTHREAD is 40.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_TURNSEXECUTED_NULL_BYALLWORKERTHREADS is 47.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_TURNSEXECUTED_NULL_PERTHREAD is 38.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_TURNSEXECUTED_TOTAL_START is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_TURNSEXECUTED_TOTAL_END is 33.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_ACTIVATION_TURNSEXECUTED_PERACTIVATION is 48.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_ACTIVATION_STATUS_PERACTIVATION is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_TURN_LENGTH_HISTOGRAM is 31.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_NUM_LONG_RUNNING_TURNS is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_NUM_LONG_QUEUE_WAIT_TIMES is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_ITEMS_ENQUEUED_TOTAL is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_ITEMS_DEQUEUED_TOTAL is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_CLOSURE_WORK_ITEMS_CREATED is 36.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SCHEDULER_CLOSURE_WORK_ITEMS_EXECUTED is 37.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BUFFERPOOL_BUFFERS_INPOOL is 39.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BUFFERPOOL_ALLOCATED_BUFFERS is 42.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BUFFERPOOL_CHECKED_OUT_BUFFERS is 44.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BUFFERPOOL_CHECKED_IN_BUFFERS is 43.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BUFFERPOOL_DROPPED_BUFFERS is 40.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BUFFERPOOL_DROPPED_TOO_LARGE_BUFFERS is 50.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BUFFERPOOL_INUSE_CHECKED_OUT_NOT_CHECKED_IN_BUFFERS is 65.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BUFFERPOOL_INUSE_ALLOCATED_NOT_INPOOL_BUFFERS is 59.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BODY_SERIALIZATION is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BODY_DESERIALIZATION is 34.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_HEADER_SERIALIZATION is 34.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_HEADER_DESERIALIZATION is 36.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_HEADER_SERIALIZATION_NUMHEADERS is 45.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_HEADER_DESERIALIZATION_NUMHEADERS is 47.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BODY_DEEPCOPY_MILLIS is 34.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BODY_SERIALIZATION_MILLIS is 39.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BODY_DESERIALIZATION_MILLIS is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_HEADER_SERIALIZATION_MILLIS is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_HEADER_DESERIALIZATION_MILLIS is 43.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_TOTAL_TIME_IN_SERIALIZER_MILLIS is 45.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BODY_FALLBACK_SERIALIZATION is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BODY_FALLBACK_DESERIALIZATION is 43.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BODY_FALLBACK_DEEPCOPIES is 38.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BODY_FALLBACK_SERIALIZATION_MILLIS is 48.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BODY_FALLBACK_DESERIALIZATION_MILLIS is 50.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter SERIALIZATION_BODY_FALLBACK_DEEPCOPY_MILLIS is 43.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CATALOG_ACTIVATION_FAILED_TO_ACTIVATE is 37.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CATALOG_ACTIVATION_COLLECTION_NUMBER_OF_COLLECTIONS is 51.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CATALOG_ACTIVATION_SHUTDOWN_VIA_COLLECTION is 42.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CATALOG_ACTIVATION_SHUTDOWN_VIA_DEACTIVATE_ON_IDLE is 50.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CATALOG_ACTIVATION_SHUTDOWN_VIA_DIRECT_SHUTDOWN is 47.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CATALOG_ACTIVATION_SHUTDOWN_VIA_DEACTIVATE_STUCK_ACTIVATION is 59.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CATALOG_ACTIVATION_NON_EXISTENT_ACTIVATIONS is 43.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CATALOG_ACTIVATION_CONCURRENT_REGISTRATION_ATTEMPTS is 51.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_LOOKUPS_LOCAL_ISSUED is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_LOOKUPS_LOCAL_SUCCESSES is 33.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_LOOKUPS_REMOTE_RECEIVED is 33.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_LOOKUPS_LOCALDIRECTORY_ISSUED is 39.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_LOOKUPS_LOCALDIRECTORY_SUCCESSES is 42.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_LOOKUPS_CACHE_ISSUED is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_LOOKUPS_CACHE_SUCCESSES is 33.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_LOOKUPS_CACHE_HITRATIO is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_VALIDATIONS_CACHE_SENT is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_VALIDATIONS_CACHE_RECEIVED is 36.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_RING_MYPORTION_RINGDISTANCE is 37.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_RING_MYPORTION_RINGPERCENTAGE is 39.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_RING_MYPORTION_AVERAGERINGPERCENTAGE is 46.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_REGISTRATIONS_ISSUED is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_REGISTRATIONS_REMOTE_SENT is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_REGISTRATIONS_REMOTE_RECEIVED is 39.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_REGISTRATIONS_SINGLE_ACT_ISSUED is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_REGISTRATIONS_SINGLE_ACT_LOCAL is 40.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_REGISTRATIONS_SINGLE_ACT_REMOTE_SENT is 46.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_REGISTRATIONS_SINGLE_ACT_REMOTE_RECEIVED is 50.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_UNREGISTRATIONS_ISSUED is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_UNREGISTRATIONS_LOCAL is 31.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_UNREGISTRATIONS_REMOTE_SENT is 37.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_UNREGISTRATIONS_REMOTE_RECEIVED is 41.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_UNREGISTRATIONS_MANY_ISSUED is 37.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_UNREGISTRATIONS_MANY_REMOTE_SENT is 42.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter DIRECTORY_UNREGISTRATIONS_MANY_REMOTE_RECEIVED is 46.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CONSISTENTRING_MYRANGE_RINGDISTANCE is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CONSISTENTRING_MYRANGE_RINGPERCENTAGE is 37.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CONSISTENTRING_AVERAGERINGPERCENTAGE is 36.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MEMBERSHIP_ACTIVE_CLUSTER_SIZE is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter WATCHDOG_NUM_FAILED_HEALTH_CHECKS is 33.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter CLIENT_CONNECTED_GATEWAY_COUNT is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter APP_REQUESTS_LATENCY_HISTOGRAM is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter APP_REQUESTS_TOTAL_NUMBER_OF_REQUESTS is 37.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter APP_REQUESTS_TPS_TOTAL_SINCE_START is 34.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter REMINDERS_AVERAGE_TARDINESS_SECONDS is 35.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter REMINDERS_NUMBER_ACTIVE_REMINDERS is 33.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter REMINDERS_COUNTERS_TICKS_DELIVERED is 34.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter STREAMS_PUBSUB_PRODUCERS_ADDED is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter STREAMS_PUBSUB_PRODUCERS_REMOVED is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter STREAMS_PUBSUB_PRODUCERS_TOTAL is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter STREAMS_PUBSUB_CONSUMERS_ADDED is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter STREAMS_PUBSUB_CONSUMERS_REMOVED is 32.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter STREAMS_PUBSUB_CONSUMERS_TOTAL is 30.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter STREAMS_PERSISTENT_STREAM_NUM_PULLING_AGENTS is 44.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter STREAMS_PERSISTENT_STREAM_NUM_READ_MESSAGES is 43.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter STREAMS_PERSISTENT_STREAM_NUM_SENT_MESSAGES is 43.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter STREAMS_PERSISTENT_STREAM_PUBSUB_CACHE_SIZE is 43.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter STREAMS_PERSISTENT_STREAM_QUEUE_CACHE_SIZE is 42.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGE_ACCEPTOR_ALLOCATED_SOCKET_EVENT_ARGS is 44.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGE_ACCEPTOR_CHECKED_IN_SOCKET_EVENT_ARGS is 45.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGE_ACCEPTOR_CHECKED_OUT_SOCKET_EVENT_ARGS is 46.
Long Identifier,Orleans.Runtime,StatisticNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StatisticNames.cs,,The length of the parameter MESSAGE_ACCEPTOR_IN_USE_SOCKET_EVENT_ARGS is 41.
Long Identifier,Orleans.Internal,OrleansTaskExtentions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\TaskExtensions.cs,WithTimeout,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Orleans.Internal,OrleansTaskExtentions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\TaskExtensions.cs,WithTimeout,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Orleans.CodeGeneration,GenericMethodInvoker,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\GenericMethodInvoker.cs,,The length of the parameter GenericMethodInvokerDelegateMethodInfo is 38.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_LIVENESS_NUM_TABLE_I_AM_ALIVE_LIMIT is 43.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_LIVENESS_PROBE_TIMEOUT is 30.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_LIVENESS_TABLE_REFRESH_TIMEOUT is 38.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_LIVENESS_DEATH_VOTE_EXPIRATION_TIMEOUT is 46.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_LIVENESS_I_AM_ALIVE_TABLE_PUBLISH_TIMEOUT is 49.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_LIVENESS_MAX_JOIN_ATTEMPT_TIME is 38.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_VALIDATE_INITIAL_CONNECTIVITY is 37.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_LIVENESS_USE_LIVENESS_GOSSIP is 36.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_LIVENESS_NUM_PROBED_SILOS is 33.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_LIVENESS_NUM_MISSED_PROBES_LIMIT is 40.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_LIVENESS_NUM_VOTES_FOR_DEATH_DECLARATION is 48.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_DEFUNCT_SILO_EXPIRATION is 31.
Long Identifier,Orleans.Configuration,ClusterMembershipOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\ClusterMembershipOptions.cs,,The length of the parameter DEFAULT_DEFUNCT_SILO_CLEANUP_PERIOD is 35.
Long Identifier,Orleans.Configuration,GatewayOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\GatewayOptions.cs,,The length of the parameter DEFAULT_GATEWAY_LIST_REFRESH_PERIOD is 35.
Long Identifier,Orleans.Configuration,GatewayOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\GatewayOptions.cs,,The length of the parameter DEFAULT_PREFERED_GATEWAY_INDEX is 30.
Long Identifier,Orleans.Configuration,GrainVersioningOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\GrainVersioningOptions.cs,,The length of the parameter DEFAULT_COMPATABILITY_STRATEGY is 30.
Long Identifier,Orleans.Configuration,GrainVersioningOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\GrainVersioningOptions.cs,,The length of the parameter DEFAULT_VERSION_SELECTOR_STRATEGY is 33.
Long Identifier,Orleans.Configuration,MessagingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MessagingOptions.cs,,The length of the parameter RESPONSE_TIMEOUT_WITH_DEBUGGER is 30.
Long Identifier,Orleans.Configuration,MessagingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MessagingOptions.cs,,The length of the parameter DEFAULT_BUFFER_POOL_BUFFER_SIZE is 31.
Long Identifier,Orleans.Configuration,MessagingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MessagingOptions.cs,,The length of the parameter DEFAULT_BUFFER_POOL_PREALLOCATION_SIZE is 38.
Long Identifier,Orleans.Configuration,MessagingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MessagingOptions.cs,,The length of the parameter DEFAULT_PROPAGATE_E2E_ACTIVITY_ID is 33.
Long Identifier,Orleans.Configuration,MessagingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MessagingOptions.cs,,The length of the parameter DEFAULT_LARGE_MESSAGE_WARNING_THRESHOLD is 39.
Long Identifier,Orleans.Configuration,MessagingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MessagingOptions.cs,,The length of the parameter DEFAULT_MAX_MESSAGE_SEND_RETRIES is 32.
Long Identifier,Orleans.Configuration,MessagingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MessagingOptions.cs,,The length of the parameter DEFAULT_MAX_MESSAGE_HEADER_SIZE is 31.
Long Identifier,Orleans.Configuration,MultiClusterOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MultiClusterOptions.cs,,The length of the parameter DEFAULT_MAX_MULTICLUSTER_GATEWAYS is 33.
Long Identifier,Orleans.Configuration,MultiClusterOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MultiClusterOptions.cs,,The length of the parameter DEFAULT_BACKGROUND_GOSSIP_INTERVAL is 34.
Long Identifier,Orleans.Configuration,MultiClusterOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MultiClusterOptions.cs,,The length of the parameter DEFAULT_USE_GLOBAL_SINGLE_INSTANCE is 34.
Long Identifier,Orleans.Configuration,MultiClusterOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MultiClusterOptions.cs,,The length of the parameter DEFAULT_GLOBAL_SINGLE_INSTANCE_NUMBER_RETRIES is 45.
Long Identifier,Orleans.Configuration,MultiClusterOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\MultiClusterOptions.cs,,The length of the parameter DEFAULT_GLOBAL_SINGLE_INSTANCE_RETRY_INTERVAL is 45.
Long Identifier,Orleans.Configuration,NetworkingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\NetworkingOptions.cs,,The length of the parameter DEFAULT_OPENCONNECTION_TIMEOUT is 30.
Long Identifier,Orleans.Configuration,PerformanceTuningOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\PerformanceTuningOptions.cs,,The length of the parameter DEFAULT_MIN_DOT_NET_CONNECTION_LIMIT is 36.
Long Identifier,Orleans.Configuration,StatisticsOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\StatisticsOptions.cs,,The length of the parameter DEFAULT_PERF_COUNTERS_WRITE_PERIOD is 34.
Long Identifier,Orleans.Configuration,TypeManagementOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Options\TypeManagementOptions.cs,,The length of the parameter DEFAULT_REFRESH_CLUSTER_INTERFACEMAP_TIME is 41.
Long Identifier,Orleans.Configuration,ConnectionOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionOptions.cs,,The length of the parameter DEFAULT_OPENCONNECTION_TIMEOUT is 30.
Long Identifier,Orleans.Configuration,StreamPullingAgentOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\Options\PersistentStreamProviderOptions.cs,,The length of the parameter DEFAULT_BATCH_CONTAINER_BATCH_SIZE is 34.
Long Identifier,Orleans.Configuration,StreamPullingAgentOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\Options\PersistentStreamProviderOptions.cs,,The length of the parameter DEFAULT_GET_QUEUE_MESSAGES_TIMER_PERIOD is 39.
Long Identifier,Orleans.Configuration,StreamPullingAgentOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\Options\PersistentStreamProviderOptions.cs,,The length of the parameter DEFAULT_MAX_EVENT_DELIVERY_TIME is 31.
Long Identifier,Orleans.Configuration,StreamPullingAgentOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\Options\PersistentStreamProviderOptions.cs,,The length of the parameter DEFAULT_STREAM_INACTIVITY_PERIOD is 32.
Long Identifier,Orleans.Configuration,SimpleMessageStreamProviderOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProviderOptions.cs,,The length of the parameter DEFAULT_VALUE_FIRE_AND_FORGET_DELIVERY is 38.
Long Identifier,Orleans.Configuration,SimpleMessageStreamProviderOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProviderOptions.cs,,The length of the parameter DEFAULT_VALUE_OPTIMIZE_FOR_IMMUTABLE_DATA is 41.
Long Identifier,Orleans.Runtime.Configuration,LimitNames,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\LimitNames.cs,,The length of the parameter LIMIT_MAX_ENQUEUED_REQUESTS_STATELESS_WORKER is 44.
Long Identifier,Orleans.Configuration.Validators,LoadSheddingValidator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Validators\LoadSheddingValidator.cs,,The length of the parameter HostEnvironmentStatisticsNotConfigured is 38.
Long Identifier,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,,The length of the parameter MAXIMUM_ITEM_STRING_LOG_LENGTH is 30.
Long Identifier,Orleans.Networking.Shared,TransportConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\TransportConnection.cs,,The length of the parameter IConnectionTransportFeatureType is 31.
Long Identifier,Orleans.Networking.Shared,TransportConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\TransportConnection.cs,,The length of the parameter IConnectionLifetimeFeatureType is 30.
Long Identifier,Orleans.Networking.Shared,TransportConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\TransportConnection.cs,,The length of the parameter _currentIConnectionTransportFeature is 35.
Long Identifier,Orleans.Networking.Shared,TransportConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\TransportConnection.cs,,The length of the parameter _currentIConnectionItemsFeature is 31.
Long Identifier,Orleans.Networking.Shared,TransportConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\TransportConnection.cs,,The length of the parameter _currentIConnectionLifetimeFeature is 34.
Long Identifier,Orleans.Providers,ClientProviderRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Providers\ClientProviderRuntime.cs,,The length of the parameter combinedGrainBasedAndImplicitPubSub is 35.
Long Identifier,Orleans.Providers,ProviderTypeLoader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Providers\ProviderTypeLoader.cs,AddProviderTypeManager,The length of the parameter loadedProviderTypeLoadersSingleton is 34.
Long Identifier,Orleans.Providers,ProviderTypeLoader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Providers\ProviderTypeLoader.cs,ProcessLoadedAssemblies,The length of the parameter loadedProviderTypeLoadersSingleton is 34.
Long Identifier,Orleans.Serialization,DotNetSerializableUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\DotNetSerializableUtilities.cs,,The length of the parameter SerializationConstructorParameterTypes is 38.
Long Identifier,Orleans.Serialization,ILBasedExceptionSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ILBasedExceptionSerializer.cs,,The length of the parameter fallbackBaseExceptionSerializer is 31.
Long Identifier,Orleans.Serialization,ReflectedSerializationMethodInfo,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ReflectedSerializationMethodInfo.cs,,The length of the parameter GetStreamFromSerializationContext is 33.
Long Identifier,Orleans.Serialization,ReflectedSerializationMethodInfo,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ReflectedSerializationMethodInfo.cs,,The length of the parameter GetStreamFromDeserializationContext is 35.
Long Identifier,Orleans.Serialization,ReflectedSerializationMethodInfo,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ReflectedSerializationMethodInfo.cs,,The length of the parameter RecordObjectWhileDeserializing is 30.
Long Identifier,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,,The length of the parameter typeToExternalSerializerDictionary is 34.
Long Identifier,Orleans.Transactions,TransactionContext,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Transactions\TransactionContext.cs,,The length of the parameter Orleans_TransactionContext_Key is 30.
Long Statement,Orleans,ApplicationPartManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\ApplicationParts\ApplicationPartManagerExtensions.cs,AddApplicationPart,The length of the statement  "            return new ApplicationPartManagerWithAssemblies(manager.AddApplicationPart(new AssemblyPart(assembly))' new[] { assembly }); " is 124.
Long Statement,Orleans,ApplicationPartManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\ApplicationParts\ApplicationPartManagerExtensions.cs,AddFromApplicationBaseDirectory,The length of the statement  "            if (string.IsNullOrWhiteSpace(appDomainBase) || !Directory.Exists(appDomainBase)) return new ApplicationPartManagerWithAssemblies(manager' Enumerable.Empty<Assembly>()); " is 169.
Long Statement,Orleans,ApplicationPartManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\ApplicationParts\ApplicationPartManagerExtensions.cs,GetApplicationPartManager,The length of the statement  "                if (result == null) throw new InvalidOperationException($"The ApplicationPartManager value is of the wrong type {value.GetType()}. It should be {nameof(ApplicationPartManager)}"); " is 179.
Long Statement,Orleans,AsyncBatchedContinuationQueue<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\AsyncBatchedContinuationQueue.cs,Queue,The length of the statement  "                        if (readyQueue.Count > aggregateBatchSize || timeSinceLastContinuation >= aggregateContinuationMaxTime || numPendingTasks == 0) " is 127.
Long Statement,Orleans,MultiTaskCompletionSource,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\MultiTaskCompletionSource.cs,SetOneResult,The length of the statement  "                    throw new InvalidOperationException("SetOneResult was called more times than initialy specified by the count argument."); " is 121.
Long Statement,Orleans,ClientBuilder,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\ClientBuilder.cs,Build,The length of the statement  "            if (this.built) throw new InvalidOperationException($"{nameof(this.Build)} may only be called once per {nameof(ClientBuilder)} instance."); " is 139.
Long Statement,Orleans,ClientBuilder,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\ClientBuilder.cs,Build,The length of the statement  "            serviceProvider.GetService<SerializationManager>().RegisterSerializers(serviceProvider.GetService<IApplicationPartManager>()); " is 126.
Long Statement,Orleans,ClientBuilder,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\ClientBuilder.cs,ConfigureContainer,The length of the statement  "            this.serviceProviderBuilder.ConfigureContainer((HostBuilderContext context' TContainerBuilder containerBuilder) => configureContainer(containerBuilder)); " is 153.
Long Statement,Orleans,ClientBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\ClientBuilderExtensions.cs,ConfigureLogging,The length of the statement  "            return builder.ConfigureServices(collection => collection.AddLogging(loggingBuilder => configureLogging(loggingBuilder))); " is 122.
Long Statement,Orleans,ClientBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\ClientBuilderExtensions.cs,UseLocalhostClustering,The length of the statement  "                    if (string.Equals(serviceId' ClusterOptions.DevelopmentServiceId) && string.Equals(clusterId' ClusterOptions.DevelopmentClusterId)) " is 131.
Long Statement,Orleans,ClusterClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\ClusterClient.cs,ThrowIfDisposedOrNotInitialized,The length of the statement  "            if (!this.IsInitialized) throw new InvalidOperationException($"Client is not initialized. Current client state is {this.state}."); " is 130.
Long Statement,Orleans,DefaultClientServices,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\DefaultClientServices.cs,AddDefaultServices,The length of the statement  "            services.AddSingleton<ILifecycleParticipant<IClusterClientLifecycle>' ConnectionManagerLifecycleAdapter<IClusterClientLifecycle>>(); " is 132.
Long Statement,Orleans,GrainFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\GrainFactory.cs,GetSystemTarget,The length of the statement  "                    reference = this.Cast<TGrainInterface>(GrainReference.FromGrainId(grainId' this.GrainReferenceRuntime' null' destination)); " is 123.
Long Statement,Orleans,GrainFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\GrainFactory.cs,GetTypeCode,The length of the statement  "            this.runtimeClient.GrainTypeResolver.TryGetGrainClassData(grainInterfaceType' out GrainClassData implementation' string.Empty); " is 127.
Long Statement,Orleans,InterfaceToImplementationMappingCache,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\InterfaceToImplementationMappingCache.cs,CreateMapForNonGeneric,The length of the statement  "                            genericInterfaceMethodMap[GrainInterfaceUtils.ComputeMethodId(genericIfaceMethods[i])] = new Entry(mapping.TargetMethods[k]' genericIfaceMethods[i]); " is 149.
Long Statement,Orleans,InterfaceToImplementationMappingCache,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\InterfaceToImplementationMappingCache.cs,CreateMapForConstructedGeneric,The length of the statement  "                        methodMap[GrainInterfaceUtils.ComputeMethodId(genericInterfaceMethod)] = new Entry(concreteMap.TargetMethods[k]' concreteMap.InterfaceMethods[k]); " is 146.
Long Statement,Orleans,LifecycleSubject,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Lifecycle\LifecycleSubject.cs,OnStop,The length of the statement  "                        "Stopping lifecycle encountered an error at stage {Stage}. Continuing to stop. Exception: {Exception}"' this.highStage' ex); " is 124.
Long Statement,Orleans,InvokableObjectManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\InvokableObjectManager.cs,Dispatch,The length of the statement  "                    string.Format("Did not find TargetObserverId header in the message = {0}. A request message to a client is expected to have an observerId."' message)); " is 151.
Long Statement,Orleans,InvokableObjectManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\InvokableObjectManager.cs,Invoke,The length of the statement  "                //// Remove from the dictionary record for the garbage collected object? But now we won't be able to detect invalid dispatch IDs anymore. " is 137.
Long Statement,Orleans,InvokableObjectManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\InvokableObjectManager.cs,Invoke,The length of the statement  "                        "Object associated with Observer ID {0} has been garbage collected. Deleting object reference and unregistering it. Message = {1}"' " is 131.
Long Statement,Orleans,InvokableObjectManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\InvokableObjectManager.cs,Invoke,The length of the statement  "                // http://stackoverflow.com/questions/12245935/is-task-factory-startnew-guaranteed-to-use-another-thread-than-the-calling-thr " is 125.
Long Statement,Orleans,InvokableObjectManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\InvokableObjectManager.cs,LocalObjectMessagePumpAsync,The length of the statement  "                                "Exception during message body deserialization in " + nameof(LocalObjectMessagePumpAsync) + " for message: {Message}' Exception: {Exception}"' " is 142.
Long Statement,Orleans,InvokableObjectManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\InvokableObjectManager.cs,ReportException,The length of the statement  "                            "Exception during invocation of notification method {0}' interface {1}. Ignoring exception because this is a one way request."' " is 127.
Long Statement,Orleans,InvokableObjectManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\InvokableObjectManager.cs,ReportException,The length of the statement  "                    throw new InvalidOperationException($"Unrecognized direction for message {message}' request {request}' which resulted in exception: {exception}"); " is 146.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,ConsumeServices,The length of the statement  "                this.localAddress = this.clientMessagingOptions.LocalAddress ?? ConfigUtilities.GetLocalIPAddress(this.clientMessagingOptions.PreferredFamily' this.clientMessagingOptions.NetworkInterfaceName); " is 193.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,ConsumeServices,The length of the statement  "                    incomingMessagesThreadTimeTracking = new ThreadTrackingStatistic("ClientReceiver"' this.loggerFactory' this.statisticsOptions' this.schedulerStageStatistics); " is 158.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,Start,The length of the statement  "            // Deliberately avoid capturing the current synchronization context during startup and execute on the default scheduler. " is 120.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,Start,The length of the statement  "            // This helps to avoid any issues (such as deadlocks) caused by executing with the client's synchronization context/scheduler. " is 126.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,Start,The length of the statement  "            logger.Info(ErrorCode.ProxyClient_StartDone' "{0} Started OutsideRuntimeClient with Global Client ID: {1}"' BARS' CurrentActivationAddress.ToString() + "' client GUID ID: " + handshakeClientId); " is 194.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,StartInternal,The length of the statement  "            transport = ActivatorUtilities.CreateInstance<ClientMessageCenter>(this.ServiceProvider' localAddress' generation' handshakeClientId); " is 134.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,RefreshGrainTypeResolver,The length of the statement  "                this.logger.Warn(ErrorCode.TypeManager_GetClusterGrainTypeResolverError' "Refresh the GrainTypeResolver failed. Will be retried after"' ex); " is 140.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,HandleMessage,The length of the statement  "                    CurrentActivationAddress = ActivationAddress.GetAddress(transport.MyAddress' clientId' CurrentActivationAddress.Activation); " is 124.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,ReceiveResponse,The length of the statement  "                // Unfortunately' it is not enough' since CallContext.LogicalGetData will not flow "up" from task completion source into the resolved task. " is 139.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,CreateObjectReference,The length of the statement  "            GrainReference gr = GrainReference.NewObserverGrainReference(clientId' GuidId.GetNewGuidId()' this.GrainReferenceRuntime); " is 122.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,PrintAppDomainDetails,The length of the statement  "            return string.Format("<AppDomain.Id={0}' AppDomain.FriendlyName={1}>"' AppDomain.CurrentDomain.Id' AppDomain.CurrentDomain.FriendlyName); " is 137.
Long Statement,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,NotifyGatewayCountChanged,The length of the statement  "                this.GatewayCountChanged?.Invoke(this' new GatewayCountChangedEventArgs(currentNumberOfGateways' previousNumberOfGateways)); " is 124.
Long Statement,Orleans,ReminderData,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\SystemTargetInterfaces\IReminderTable.cs,ToString,The length of the statement  "            return string.Format("<IOrleansReminder: GrainRef={0} ReminderName={1} ETag={2}>"' GrainRef.ToDetailedString()' ReminderName' ETag); " is 132.
Long Statement,Orleans,SetExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\SetExtensions.cs,ToStrings,The length of the statement  "            //Do NOT use Aggregate for string concatenation. It is very inefficient' will reallocate and copy lots of intermediate strings. " is 127.
Long Statement,Orleans.Runtime,AssemblyLoader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\AssemblyLoader.cs,DiscoverAssemblies,The length of the statement  "                AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += CachedReflectionOnlyTypeResolver.OnReflectionOnlyAssemblyResolve; " is 122.
Long Statement,Orleans.Runtime,AssemblyLoader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\AssemblyLoader.cs,DiscoverAssemblies,The length of the statement  "                AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve -= CachedReflectionOnlyTypeResolver.OnReflectionOnlyAssemblyResolve; " is 122.
Long Statement,Orleans.Runtime,AssemblyLoader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\AssemblyLoader.cs,EnumerateApprovedAssemblies,The length of the statement  "                            if (logger.IsEnabled(LogLevel.Information)) logger.Info("{0} is not compatible with current process' loading is skipped."' j); " is 126.
Long Statement,Orleans.Runtime,AssemblyLoader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\AssemblyLoader.cs,InterpretFileLoadException,The length of the statement  "                // this can happen when System.Reflection.Metadata or System.Collections.Immutable assembly version is different (one requires the other) and there is no correct binding redirect in the app.config " is 196.
Long Statement,Orleans.Runtime,AssemblyLoader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\AssemblyLoader.cs,InterpretFileLoadException,The length of the statement  "                complaints = new string[] {String.Format("A conflicting assembly has already been loaded from {0}."' matched.Location)}; " is 120.
Long Statement,Orleans.Runtime,AssemblyLoader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\AssemblyLoader.cs,IsCompatibleWithCurrentProcess,The length of the statement  "                            complaints = new[] { $"The file {fileName} is not loadable into this process' either it is not an MSIL assembly or the complied for a different processor architecture." }; " is 171.
Long Statement,Orleans.Runtime,AssemblyLoader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\AssemblyLoader.cs,IsCompatibleWithCurrentProcess,The length of the statement  "                complaints = new[] { "MissingMethodException occurred. Please try to add a BindingRedirect for System.Collections.ImmutableCollections to the App.config file to correct this error." }; " is 184.
Long Statement,Orleans.Runtime,CachedTypeResolver,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\CachedTypeResolver.cs,TryResolveType,The length of the statement  "            if (string.IsNullOrWhiteSpace(name)) throw new ArgumentException("A FullName must not be null nor consist of only whitespace."' "name"); " is 136.
Long Statement,Orleans.Runtime,CachedTypeResolver,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\CachedTypeResolver.cs,TryPerformUncachedTypeResolution,The length of the statement  "            if (type.Assembly.ReflectionOnly) throw new InvalidOperationException(string.Format("Type resolution for {0} yielded reflection-only type."' name)); " is 148.
Long Statement,Orleans.Runtime,CachedTypeResolver,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\CachedTypeResolver.cs,TryPerformUncachedTypeResolution,The length of the statement  "            if (string.IsNullOrWhiteSpace(fullName)) throw new ArgumentException("A type name must not be null nor consist of only whitespace."' "fullName"); " is 145.
Long Statement,Orleans.Runtime,CachedTypeResolver,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\AssemblyLoader\CachedTypeResolver.cs,TryPerformUncachedTypeResolution,The length of the statement  "                return asm?.GetType(name' throwOnError: false' ignoreCase: ignoreCase) ?? Type.GetType(name' throwOnError: false' ignoreCase: ignoreCase); " is 138.
Long Statement,Orleans.Runtime,AsyncPipeline,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\AsyncPipeline.cs,Add,The length of the statement  "            // whitebox testing results-- we initialize pipeSz with an inconsistent copy of Count because it's better than nothing and will reflect that the pipeline size was in a valid state during some portion of this method' even if it isn't at a properly synchronized moment. " is 267.
Long Statement,Orleans.Runtime,AsyncPipeline,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\AsyncPipeline.cs,Add,The length of the statement  "            // we should be using a try...finally to execute the whitebox testing logic here but it apparently adds too much latency to be palatable for AsyncPipelineSimpleTest()' which is sensitive to latency. " is 198.
Long Statement,Orleans.Runtime,TypeUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeUtils.cs,GetInnerTypes,The length of the statement  "            var candidatesWithPositions = charsWithPositions.Zip(charsWithPositions.Skip(1)' (c1' c2) => new { Str = c1.Ch.ToString() + c2.Ch' Pos = c1.Pos }); " is 147.
Long Statement,Orleans.Runtime,TypeUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeUtils.cs,GetInnerTypes,The length of the statement  "            var tokenPairs = new[] { new { Start = "[["' End = "]]" }' new { Start = "["' End = "]" } }; // Longer tokens need to come before shorter ones " is 142.
Long Statement,Orleans.Runtime,TypeUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeUtils.cs,IsConcreteGrainClass,The length of the statement  "            complaints = complain ? new[] { string.Format("Grain type {0} is abstract and cannot be instantiated."' type.FullName) } : null; " is 128.
Long Statement,Orleans.Runtime,TypeUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeUtils.cs,GetTypes,The length of the statement  "            return assembly.IsDynamic ? Enumerable.Empty<Type>() : GetDefinedTypes(assembly' logger).Where(type => !type.IsNestedPrivate && whereFunc(type)); " is 145.
Long Statement,Orleans.Runtime,TypeUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeUtils.cs,IsOrleansOrReferencesOrleans,The length of the statement  "            return DoReferencesContain(references' OrleansCoreAssembly) || DoReferencesContain(references' OrleansAbstractionsAssembly) " is 123.
Long Statement,Orleans.Runtime,OrleansLoggerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Logging\ILoggerExtensions.cs,Fail,The length of the statement  "            logger.Error(errorCode' "INTERNAL FAILURE! About to crash! Fail message is: " + message + Environment.NewLine + Environment.StackTrace); " is 136.
Long Statement,Orleans.Runtime,Message,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\Message.cs,DropExpiredMessage,The length of the statement  "            logger.LogWarning((int)ErrorCode.Messaging_DroppingExpiredMessage' "Dropped expired message during {Phase} phase.  Message: {Message}"' phase.ToString()' logger.IsEnabled(LogLevel.Trace) ? this.ToLongString() : this.ToString()); " is 228.
Long Statement,Orleans.Runtime,HeadersContainer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\Message.cs,GetHeadersMask,The length of the statement  "                headers = _isReturnedFromRemoteCluster == default(bool) ? headers & ~Headers.IS_RETURNED_FROM_REMOTE_CLUSTER : headers | Headers.IS_RETURNED_FROM_REMOTE_CLUSTER; " is 161.
Long Statement,Orleans.Runtime,HeadersContainer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\Message.cs,GetHeadersMask,The length of the statement  "                headers = _isUsingIfaceVersion == default(bool) ? headers & ~Headers.IS_USING_INTERFACE_VERSION : headers | Headers.IS_USING_INTERFACE_VERSION; " is 143.
Long Statement,Orleans.Runtime,HeadersContainer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\Message.cs,GetHeadersMask,The length of the statement  "                headers = _cacheInvalidationHeader == null || _cacheInvalidationHeader.Count == 0 ? headers & ~Headers.CACHE_INVALIDATION_HEADER : headers | Headers.CACHE_INVALIDATION_HEADER; " is 175.
Long Statement,Orleans.Runtime,HeadersContainer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\Message.cs,GetHeadersMask,The length of the statement  "                headers = string.IsNullOrEmpty(GenericGrainType) ? headers & ~Headers.GENERIC_GRAIN_TYPE : headers | Headers.GENERIC_GRAIN_TYPE; " is 128.
Long Statement,Orleans.Runtime,HeadersContainer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\Message.cs,GetHeadersMask,The length of the statement  "                headers = _rejectionType == default(RejectionTypes) ? headers & ~Headers.REJECTION_TYPE : headers | Headers.REJECTION_TYPE; " is 123.
Long Statement,Orleans.Runtime,HeadersContainer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\Message.cs,GetHeadersMask,The length of the statement  "                headers = _requestContextData == null || _requestContextData.Count == 0 ? headers & ~Headers.REQUEST_CONTEXT : headers | Headers.REQUEST_CONTEXT; " is 145.
Long Statement,Orleans.Runtime,HeadersContainer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\Message.cs,GetHeadersMask,The length of the statement  "                headers = IsTransactionRequired ? headers | Headers.IS_TRANSACTION_REQUIRED : headers & ~Headers.IS_TRANSACTION_REQUIRED; " is 121.
Long Statement,Orleans.Runtime,MessageFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\MessageFactory.cs,CreateRejectionResponse,The length of the statement  "            if (this.logger.IsEnabled(LogLevel.Debug)) this.logger.Debug("Creating {0} rejection with info '{1}' for {2} at:" + Environment.NewLine + "{3}"' type' info' this' Utils.GetStackTrace()); " is 186.
Long Statement,Orleans.Runtime,CallbackData,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\CallbackData.cs,OnTimeout,The length of the statement  "            string errorMsg = $"Response did not arrive on time in {timeout} for message: {msg}. Target History is: {messageHistory}."; " is 123.
Long Statement,Orleans.Runtime,CallbackData,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\CallbackData.cs,OnTargetSiloFail,The length of the statement  "                $"The target silo became unavailable for message: {msg}. Target History is: {messageHistory}. See {Constants.TroubleshootingHelpLink} for troubleshooting help."; " is 161.
Long Statement,Orleans.Runtime,GrainReferenceRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainReferenceRuntime.cs,InvokeOneWayMethod,The length of the statement  "            Task<object> resultTask = InvokeMethodAsync<object>(reference' methodId' arguments' options | InvokeMethodOptions.OneWay' silo); " is 128.
Long Statement,Orleans.Runtime,GrainReferenceRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainReferenceRuntime.cs,InvokeMethod_Impl,The length of the statement  "                    debugContext = GetDebugContext(reference.InterfaceName' reference.GetMethodName(reference.InterfaceId' request.MethodId)' request.Arguments); " is 141.
Long Statement,Orleans.Runtime,GrainReferenceRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainReferenceRuntime.cs,InvokeMethod_Impl,The length of the statement  "                        debugContext = GetDebugContext(reference.InterfaceName' reference.GetMethodName(reference.InterfaceId' request.MethodId)' request.Arguments); " is 141.
Long Statement,Orleans.Runtime,GrainReferenceRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainReferenceRuntime.cs,SendRequest,The length of the statement  "            var resolver = isOneWayCall ? null : new TaskCompletionSource<object>(TaskCreationOptions.RunContinuationsAsynchronously); " is 122.
Long Statement,Orleans.Runtime,GrainReferenceRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainReferenceRuntime.cs,InvokeWithFilters,The length of the statement  "            var invoker = new OutgoingCallInvoker(reference' request' options' debugContext' this.sendRequestDelegate' this.grainReferenceMethodCache' this.filters); " is 153.
Long Statement,Orleans.Runtime,GrainReferenceRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainReferenceRuntime.cs,CallClientInvokeCallback,The length of the statement  "            // Make callback to any registered client callback function' allowing opportunity for an application to set any additional RequestContext info' etc. " is 148.
Long Statement,Orleans.Runtime,GrainReferenceRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainReferenceRuntime.cs,CallClientInvokeCallback,The length of the statement  "            // Should we set some kind of callback-in-progress flag to detect and prevent any inappropriate callback loops on this GrainReference? " is 134.
Long Statement,Orleans.Runtime,GrainReferenceRuntime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainReferenceRuntime.cs,CheckForGrainArguments,The length of the statement  "                    throw new ArgumentException(String.Format("Cannot pass a grain object {0} as an argument to a method. Pass this.AsReference<GrainInterface>() instead."' argument.GetType().FullName)); " is 183.
Long Statement,Orleans.Runtime,GrainTypeResolver,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainTypeResolver.cs,TryGetGrainClassData,The length of the statement  "                throw new OrleansException(String.Format("Cannot resolve grain interface ID={0} to a grain class because of multiple implementations of it: {1}"' " is 145.
Long Statement,Orleans.Runtime,GrainTypeResolver,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainTypeResolver.cs,TryGetGrainClassData,The length of the statement  "            throw new OrleansException(String.Format("Cannot resolve grain interface ID={0}' grainClassNamePrefix={1} to a grain class because of multiple implementations of it: {2}"' " is 171.
Long Statement,Orleans.Runtime,HashRing<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\HashRing.cs,AddElement,The length of the statement  "                // Find the last element with hash smaller than the new element' and insert the latter after (this is why we have +1 here) the former. " is 134.
Long Statement,Orleans.Runtime,SchedulingUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\ISchedulingContext.cs,IsSystemPriorityContext,The length of the statement  "            // System Priorit Context are either associated with the (null) context' system target or regular (non low priority) system thread. " is 131.
Long Statement,Orleans.Runtime,SchedulingUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\ISchedulingContext.cs,IsSystemPriorityContext,The length of the statement  "            // Both System targets' system thread and normal grains have OrleansContext instances' of the appropriate type (based on SchedulingContext.ContextType). " is 152.
Long Statement,Orleans.Runtime,SchedulingUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\ISchedulingContext.cs,IsSystemContext,The length of the statement  "            // System Context are either associated with the (null) context' system target or any (low and high priority) system thread. " is 124.
Long Statement,Orleans.Runtime,SchedulingUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\ISchedulingContext.cs,IsSystemContext,The length of the statement  "            // Both System targets' system thread and normal grains have OrleansContext instances' of the appropriate type (based on SchedulingContext.ContextType). " is 152.
Long Statement,Orleans.Runtime,SchedulingUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\ISchedulingContext.cs,IsSystemContext,The length of the statement  "            return context == null || context.ContextType== SchedulingContextType.SystemTarget || context.ContextType == SchedulingContextType.SystemThread; " is 144.
Long Statement,Orleans.Runtime,SingleRange,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\RingRange.cs,ToString,The length of the statement  "            return String.Format("<(x{0'8:X8} x{1'8:X8}]' Size=x{2'8:X8}' %Ring={3:0.000}%>"' begin' end' RangeSize()' RangePercentage()); " is 126.
Long Statement,Orleans.Runtime,GeneralMultiRange,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\RingRange.cs,ToFullString,The length of the statement  "            return String.Format("<MultiRange: Size=x{0'8:X8}' %Ring={1:0.000}%' {2} Ranges: {3}>"' RangeSize()' RangePercentage()' ranges.Count' Utils.EnumerableToString(ranges' r => r.ToFullString())); " is 191.
Long Statement,Orleans.Runtime,EquallyDividedMultiRange,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\RingRange.cs,ToFullString,The length of the statement  "            return String.Format("<EquallyDevidedMultiRange: Size=x{0'8:X8}' %Ring={1:0.000}%' {2} Ranges: {3}>"' rangeSize' rangePercentage' multiRanges.Count' " is 148.
Long Statement,Orleans.Runtime,RuntimeContext,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\RuntimeContext.cs,InitializeThread,The length of the statement  "            // E.g. if InitializeThread() is mistakenly called on a wrong thread' would that thread be considered a worker pool thread from that point on?  " is 142.
Long Statement,Orleans.Runtime,RuntimeContext,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\RuntimeContext.cs,SetExecutionContext,The length of the statement  "            if (context == null) throw new InvalidOperationException("SetExecutionContext called on unexpected non-WorkerPool thread"); " is 123.
Long Statement,Orleans.Runtime,BufferPool,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BufferPool.cs,InitGlobalBufferPool,The length of the statement  "            GlobalPool = new BufferPool(messagingOptions.BufferPoolBufferSize' messagingOptions.BufferPoolMaxSize' messagingOptions.BufferPoolPreallocationSize' "Global"); " is 159.
Long Statement,Orleans.Runtime,ByteArrayBuilder,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ByteArrayBuilder.cs,Append,The length of the statement  "            // 2) Make sure to ALWAYS copy arrays which size is EXACTLY bufferSize' otherwise if the data was passed as an Immutable arg'  " is 125.
Long Statement,Orleans.Runtime,ByteArrayBuilder,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ByteArrayBuilder.cs,Append,The length of the statement  "            // 3) If we already have MINIMUM_BUFFER_SIZE in the current buffer and passed enough data' also skip the copy and append it as its own buffer.  " is 142.
Long Statement,Orleans.Runtime,ByteArrayBuilder,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ByteArrayBuilder.cs,Append,The length of the statement  "            if (((arrLen != bufferSize) && (currentOffset > MINIMUM_BUFFER_SIZE) && (arrLen > MINIMUM_BUFFER_SIZE)) || (arrLen > bufferSize)) " is 129.
Long Statement,Orleans.Runtime,ByteArrayBuilder,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ByteArrayBuilder.cs,BuildSegmentListWithLengthLimit,The length of the statement  "                    result.Add(new ArraySegment<byte>(segment.Array' bytesStillToSkip' Math.Min(length - countSoFar' segment.Count - bytesStillToSkip))); " is 133.
Long Statement,Orleans.Runtime,AverageTimeSpanStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\AverageTimeSpanStatistic.cs,ThrowIfNotConsistent,The length of the statement  "                    $"Please verity that all invocations of AverageTimeSpanStatistic.FindOrCreate() for instance \"{name.Name}\" all specify the same storage type {Enum.GetName(typeof(CounterStorage)' expected.Storage)}"' " is 201.
Long Statement,Orleans.Runtime,CounterStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\CounterStatistic.cs,GetDisplayString,The length of the statement  "                    $"{Name}.Current={current.ToString(CultureInfo.InvariantCulture)}'      Delta={delta.ToString(CultureInfo.InvariantCulture)}"; " is 126.
Long Statement,Orleans.Runtime,HistogramValueStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\HistogramValueStatistic.cs,PrintHistogramImpl,The length of the statement  "                        sb.Append(String.Format(CultureInfo.InvariantCulture' "[{0}:{1}]={2}' "' TimeSpan.FromTicks((long)start).TotalMilliseconds' one' bucket)); " is 138.
Long Statement,Orleans.Runtime,GrainStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\IPerformanceMetrics.cs,ToString,The length of the statement  "            return string.Format("GrainStatistic: GrainType={0} NumSilos={1} NumGrains={2} NumActivations={3} "' GrainType' SiloCount' GrainCount' ActivationCount); " is 152.
Long Statement,Orleans.Runtime,SimpleGrainStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\IPerformanceMetrics.cs,ToString,The length of the statement  "            return string.Format("SimpleGrainStatistic: GrainType={0} Silo={1} NumActivations={2} "' GrainType' SiloAddress' ActivationCount); " is 130.
Long Statement,Orleans.Runtime,LogStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\LogStatistics.cs,Start,The length of the statement  "            reportTimer = new AsyncTaskSafeTimer(loggerFactory.CreateLogger<AsyncTaskSafeTimer>()' Reporter' null' reportFrequency' reportFrequency); // Start a new fresh timer. " is 165.
Long Statement,Orleans.Runtime,LogStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\LogStatistics.cs,DumpCounters,The length of the statement  "            foreach (ICounter stat in allCounters.Where(cs => cs.Storage != CounterStorage.DontStore).Union(additionalCounters).Where(cs => cs.IsValueDelta)) " is 145.
Long Statement,Orleans.Runtime,LogStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "                var numHeadersPerMsg = FloatValueStatistic.CreateDoNotRegister("AutoGenerated.Serialization.Header.Serialization.NumHeadersPerMsg"' " is 131.
Long Statement,Orleans.Runtime,LogStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "                var numHeaderBytesPerMsg = FloatValueStatistic.CreateDoNotRegister("AutoGenerated.Serialization.Header.Serialization.NumHeaderBytesPerMsg"' " is 139.
Long Statement,Orleans.Runtime,LogStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "                var numBodyBytesPerMsg = FloatValueStatistic.CreateDoNotRegister("AutoGenerated.Serialization.Body.Serialization.NumBodyBytesPerMsg"' " is 133.
Long Statement,Orleans.Runtime,LogStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "                var headerSerMillisPerMessage = FloatValueStatistic.CreateDoNotRegister("AutoGenerated.Serialization.Header.Serialization.MillisPerMessage"' " is 140.
Long Statement,Orleans.Runtime,LogStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "                var headerDeserMillisPerMessage = FloatValueStatistic.CreateDoNotRegister("AutoGenerated.Serialization.Header.Deserialization.MillisPerMessage"' " is 144.
Long Statement,Orleans.Runtime,LogStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "                var bodySerMillisPerMessage = FloatValueStatistic.CreateDoNotRegister("AutoGenerated.Serialization.Body.Serialization.MillisPerMessage"' " is 136.
Long Statement,Orleans.Runtime,LogStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "                var bodyDeserMillisPerMessage = FloatValueStatistic.CreateDoNotRegister("AutoGenerated.Serialization.Body.Deserialization.MillisPerMessage"' " is 140.
Long Statement,Orleans.Runtime,LogStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "                var bodyCopyMillisPerMessage = FloatValueStatistic.CreateDoNotRegister("AutoGenerated.Serialization.Body.DeepCopy.MillisPerMessage"' " is 132.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "                    new StatisticName(StatisticNames.MESSAGING_DISPATCHER_PROCESSED_OK_PER_DIRECTION' Enum.GetName(typeof(Message.Directions)' direction))); " is 136.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "            dispatcherMessagesProcessedErrorsPerDirection = new CounterStatistic[Enum.GetValues(typeof(Message.Directions)).Length]; " is 120.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "                    new StatisticName(StatisticNames.MESSAGING_DISPATCHER_PROCESSED_ERRORS_PER_DIRECTION' Enum.GetName(typeof(Message.Directions)' direction))); " is 140.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "            dispatcherMessagesProcessedReRoutePerDirection = new CounterStatistic[Enum.GetValues(typeof(Message.Directions)).Length]; " is 121.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "                    new StatisticName(StatisticNames.MESSAGING_DISPATCHER_PROCESSED_REROUTE_PER_DIRECTION' Enum.GetName(typeof(Message.Directions)' direction))); " is 141.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "            dispatcherMessagesProcessingReceivedPerDirection = new CounterStatistic[Enum.GetValues(typeof(Message.Directions)).Length]; " is 123.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "                    new StatisticName(StatisticNames.MESSAGING_DISPATCHER_RECEIVED_PER_DIRECTION' Enum.GetName(typeof(Message.Directions)' direction))); " is 132.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "            dispatcherReceivedByContext[1] = CounterStatistic.FindOrCreate(StatisticNames.MESSAGING_DISPATCHER_RECEIVED_ON_ACTIVATION); " is 123.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "                    new StatisticName(StatisticNames.MESSAGING_SENT_MESSAGES_PER_DIRECTION' Enum.GetName(typeof(Message.Directions)' direction))); " is 126.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "                    new StatisticName(StatisticNames.MESSAGING_RECEIVED_MESSAGES_PER_DIRECTION' Enum.GetName(typeof(Message.Directions)' direction))); " is 130.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "                    new StatisticName(StatisticNames.MESSAGING_REROUTED_PER_DIRECTION' Enum.GetName(typeof(Message.Directions)' direction))); " is 121.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "            sentMsgSizeHistogram = ExponentialHistogramValueStatistic.Create_ExponentialHistogram(StatisticNames.MESSAGING_SENT_MESSAGESIZEHISTOGRAM' NUM_MSG_SIZE_HISTOGRAM_CATEGORIES); " is 173.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "            receiveMsgSizeHistogram = ExponentialHistogramValueStatistic.Create_ExponentialHistogram(StatisticNames.MESSAGING_RECEIVED_MESSAGESIZEHISTOGRAM' NUM_MSG_SIZE_HISTOGRAM_CATEGORIES); " is 180.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "            perSocketDirectionStatsSend[(int)ConnectionDirection.SiloToSilo] = new PerSocketDirectionStats(true' ConnectionDirection.SiloToSilo); " is 133.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "            perSocketDirectionStatsReceive[(int)ConnectionDirection.SiloToSilo] = new PerSocketDirectionStats(false' ConnectionDirection.SiloToSilo); " is 137.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "            perSocketDirectionStatsSend[(int)ConnectionDirection.GatewayToClient] = new PerSocketDirectionStats(true' ConnectionDirection.GatewayToClient); " is 143.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "            perSocketDirectionStatsReceive[(int)ConnectionDirection.GatewayToClient] = new PerSocketDirectionStats(false' ConnectionDirection.GatewayToClient); " is 147.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "            perSocketDirectionStatsSend[(int)ConnectionDirection.ClientToGateway] = new PerSocketDirectionStats(true' ConnectionDirection.ClientToGateway); " is 143.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "            perSocketDirectionStatsReceive[(int)ConnectionDirection.ClientToGateway] = new PerSocketDirectionStats(false' ConnectionDirection.ClientToGateway); " is 147.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,GetMessageSendCounter,The length of the statement  "            return FindCounter(perSiloSendCounters' new StatisticName(StatisticNames.MESSAGING_SENT_MESSAGES_PER_SILO' (remoteSilo != null ? remoteSilo.ToString() : "Null"))' CounterStorage.LogOnly); " is 187.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,GetMessageReceivedCounter,The length of the statement  "            return FindCounter(perSiloReceiveCounters' new StatisticName(StatisticNames.MESSAGING_RECEIVED_MESSAGES_PER_SILO' (addr != null ? addr.ToString() : "Null"))' CounterStorage.LogOnly); " is 182.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,OnPingSend,The length of the statement  "            FindCounter(perSiloPingSendCounters' new StatisticName(StatisticNames.MESSAGING_PINGS_SENT_PER_SILO' destination.ToString())' CounterStorage.LogOnly).Increment(); " is 162.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,OnPingReceive,The length of the statement  "            FindCounter(perSiloPingReceiveCounters' new StatisticName(StatisticNames.MESSAGING_PINGS_RECEIVED_PER_SILO' destination.ToString())' CounterStorage.LogOnly).Increment(); " is 169.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,OnPingReplyReceived,The length of the statement  "            FindCounter(perSiloPingReplyReceivedCounters' new StatisticName(StatisticNames.MESSAGING_PINGS_REPLYRECEIVED_PER_SILO' replier.ToString())' CounterStorage.LogOnly).Increment(); " is 176.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,OnPingReplyMissed,The length of the statement  "            FindCounter(perSiloPingReplyMissedCounters' new StatisticName(StatisticNames.MESSAGING_PINGS_REPLYMISSED_PER_SILO' replier.ToString())' CounterStorage.LogOnly).Increment(); " is 172.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,OnFailedSentMessage,The length of the statement  "                    new StatisticName(StatisticNames.MESSAGING_SENT_FAILED_PER_DIRECTION' Enum.GetName(typeof(Message.Directions)' direction))); " is 124.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,OnDroppedSentMessage,The length of the statement  "                    new StatisticName(StatisticNames.MESSAGING_SENT_DROPPED_PER_DIRECTION' Enum.GetName(typeof(Message.Directions)' direction))); " is 125.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,OnRejectedMessage,The length of the statement  "                    new StatisticName(StatisticNames.MESSAGING_REJECTED_PER_DIRECTION' Enum.GetName(typeof(Message.Directions)' direction))); " is 121.
Long Statement,Orleans.Runtime,NetworkingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\NetworkingStatisticsGroup.cs,Init,The length of the statement  "            openedSockets[(int)ConnectionDirection.SiloToSilo] = CounterStatistic.FindOrCreate(StatisticNames.NETWORKING_SOCKETS_SILO_OPENED); " is 130.
Long Statement,Orleans.Runtime,NetworkingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\NetworkingStatisticsGroup.cs,Init,The length of the statement  "            closedSockets[(int)ConnectionDirection.SiloToSilo] = CounterStatistic.FindOrCreate(StatisticNames.NETWORKING_SOCKETS_SILO_CLOSED); " is 130.
Long Statement,Orleans.Runtime,NetworkingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\NetworkingStatisticsGroup.cs,Init,The length of the statement  "            openedSockets[(int)ConnectionDirection.GatewayToClient] = CounterStatistic.FindOrCreate(StatisticNames.NETWORKING_SOCKETS_GATEWAYTOCLIENT_OPENED); " is 146.
Long Statement,Orleans.Runtime,NetworkingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\NetworkingStatisticsGroup.cs,Init,The length of the statement  "            closedSockets[(int)ConnectionDirection.GatewayToClient] = CounterStatistic.FindOrCreate(StatisticNames.NETWORKING_SOCKETS_GATEWAYTOCLIENT_CLOSED); " is 146.
Long Statement,Orleans.Runtime,NetworkingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\NetworkingStatisticsGroup.cs,Init,The length of the statement  "            openedSockets[(int)ConnectionDirection.ClientToGateway] = CounterStatistic.FindOrCreate(StatisticNames.NETWORKING_SOCKETS_CLIENTTOGATEWAY_OPENED); " is 146.
Long Statement,Orleans.Runtime,NetworkingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\NetworkingStatisticsGroup.cs,Init,The length of the statement  "            closedSockets[(int)ConnectionDirection.ClientToGateway] = CounterStatistic.FindOrCreate(StatisticNames.NETWORKING_SOCKETS_CLIENTTOGATEWAY_CLOSED); " is 146.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The length of the statement  "                    Array.Resize(ref turnsExecutedPerWorkerThreadApplicationTurns' 2 * turnsExecutedPerWorkerThreadApplicationTurns.Length); " is 120.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The length of the statement  "                turnsExecutedPerWorkerThreadApplicationTurns[i] = CounterStatistic.FindOrCreate(new StatisticName(StatisticNames.SCHEDULER_TURNSEXECUTED_APPLICATION_PERTHREAD' threadName)); " is 173.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The length of the statement  "                turnsExecutedPerWorkerThreadSystemTurns[i] = CounterStatistic.FindOrCreate(new StatisticName(StatisticNames.SCHEDULER_TURNSEXECUTED_SYSTEM_PERTHREAD' threadName)); " is 163.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The length of the statement  "                turnsExecutedPerWorkerThreadNull[i] = CounterStatistic.FindOrCreate(new StatisticName(StatisticNames.SCHEDULER_TURNSEXECUTED_NULL_PERTHREAD' threadName)); " is 154.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The length of the statement  "                turnsExecutedPerWorkItemGroup[i] = CounterStatistic.FindOrCreate(new StatisticName(StatisticNames.SCHEDULER_ACTIVATION_TURNSEXECUTED_PERACTIVATION' workItemGroupName)' storage); " is 177.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The length of the statement  "                workItemGroupStatuses[i] = StringValueStatistic.FindOrCreate(new StatisticName(StatisticNames.SCHEDULER_ACTIVATION_STATUS_PERACTIVATION' workItemGroupName)' statusGetter' storage); " is 180.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,UnRegisterWorkItemGroup,The length of the statement  "                () => String.Format("SchedulerStatisticsGroup.UnRegisterWorkItemGroup({0})"' turnsExecutedPerWorkItemGroup[workItemGroup].Name)); " is 129.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,UnRegisterWorkItemGroup,The length of the statement  "                () => String.Format("SchedulerStatisticsGroup.UnRegisterWorkItemGroup({0})"' workItemGroupStatuses[workItemGroup].Name));   " is 121.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,OnTurnExecutionStartsByWorkGroup,The length of the statement  "                throw new ArgumentException(String.Format("Cannot execute null context work item on work item group {0}."' workItemGroup)); " is 123.
Long Statement,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the statement  "                    Dictionary<string' double> wallClockPerRequest = new Dictionary<string' double>(); // Wallclock time per request for each stage " is 127.
Long Statement,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the statement  "                    // Wait time estimation - implementation of strategy 2 from the "local-throughput.pdf" "Coping with Practical Measurements".  " is 124.
Long Statement,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the statement  "                    // Final equation thread allocation - implementation of theorem 2 from the "local-throughput.pdf" "Incorporating Ready Time".  " is 125.
Long Statement,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the statement  "                        throughputThreadAllocation.Add(stage' cores * numberOfRequests[stage] * (cpuPerRequest[stage] * (1 + stableReadyTimeProportion) + waitTimes[stage]) / cpuSum); " is 158.
Long Statement,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the statement  "                        latencyThreadAllocation.Add(stage' lambda[stage]/s[stage] + Math.Sqrt(lambda[stage])*(cores - sum1)/(Math.Sqrt(s[stage]*beta[stage])*sum2)); " is 140.
Long Statement,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the statement  "                        sb.AppendLine("  lambda:                                  " + lambda[stage].ToString("F3") + " arrival rate requests/sec"); " is 123.
Long Statement,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the statement  "                        sb.AppendLine("  s:                                       " + s[stage].ToString("F3") + " per thread service rate requests/sec"); " is 129.
Long Statement,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the statement  "                        sb.AppendLine("  Throughput thread allocation:            " + Math.Ceiling(throughputThreadAllocation[stage]) + " threads  (rounded up from " + throughputThreadAllocation[stage].ToString("F3") + ")"); " is 200.
Long Statement,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the statement  "                        sb.AppendLine("  Latency thread allocation:               " + Math.Ceiling(latencyThreadAllocation[stage]) + " threads  (rounded up from " + latencyThreadAllocation[stage].ToString("F3") + ")"); " is 194.
Long Statement,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The length of the statement  "                        sb.AppendLine("  Regularlized latency thread allocation:  " + latencyPenalizedThreadAllocationConst[stage].ToString("F3") + " + " + latencyPenalizedThreadAllocationCoef[stage].ToString("F3") + " / sqrt(eta) threads  (rounded this value up)"); " is 242.
Long Statement,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,GetWallClockPerStagePerRequest,The length of the statement  "                    // We need to add the pure Take time' since in the GetCpuPerStagePerRequest we includes both processingCPUCycleTime and the Take time.  " is 134.
Long Statement,Orleans.Runtime,TimeIntervalThreadCycleCounterBased,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\ThreadCycleStopWatch.cs,Stop,The length of the statement  "                // Some threadpool threads seem to be reset' this is normal with .NET threadpool threads as its assumed they are restart out of our control " is 139.
Long Statement,Orleans.Runtime,ThreadTrackingStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\ThreadTrackingStatistic.cs,OnStartProcessing,The length of the statement  "            // As this function is called constantly' we perform two additional tasks in this function which require calls from the thread being tracked (the constructor is not called from the tracked thread) " is 196.
Long Statement,Orleans.Runtime,ThreadTrackingStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\ThreadTrackingStatistic.cs,OnStartProcessing,The length of the statement  "                // If this is the first function call where client has connected' we ensure execution timers are started and context switches are tracked " is 137.
Long Statement,Orleans.Runtime,ThreadTrackingStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\ThreadTrackingStatistic.cs,OnStartProcessing,The length of the statement  "                // Must toggle this counter as its "Elapsed" value contains the value when it was last stopped' this is a limitation of our techniques for CPU tracking of threads " is 162.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,Start,The length of the statement  "            if (timerStarted) throw new InvalidOperationException(String.Format("Calling start on timer {0} is not allowed' since it was already created in a started mode with specified due."' GetFullName())); " is 197.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,Start,The length of the statement  "            if (period == TimeSpan.Zero) throw new ArgumentOutOfRangeException("period"' period' "Cannot use TimeSpan.Zero for timer period"); " is 130.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,Init,The length of the statement  "            if (synCallback == null && asynCallback == null) throw new ArgumentNullException("synCallback"' "Cannot use null for both sync and asyncTask timer callbacks."); " is 160.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,Init,The length of the statement  "            if (numNonNulls > 1) throw new ArgumentNullException("synCallback"' "Cannot define more than one timer callbacks. Pick one."); " is 126.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,Init,The length of the statement  "            if (period == TimeSpan.Zero) throw new ArgumentOutOfRangeException("period"' period' "Cannot use TimeSpan.Zero for timer period"); " is 130.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,Init,The length of the statement  "            if (logger.IsEnabled(LogLevel.Debug)) logger.Debug(ErrorCode.TimerChanging' "Creating timer {0} with dueTime={1} period={2}"' GetFullName()' due' period); " is 154.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,CheckTimerFreeze,The length of the statement  "                        dueTime' timerFrequency' logger' () => String.Format("{0}.{1}"' GetFullName()' callerName())' ErrorCode.Timer_SafeTimerIsNotTicking' true); " is 139.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,CheckTimerDelay,The length of the statement  "            var errMsg = String.Format("{0}{1} did not fire on time. Last fired at {2}' {3} since previous fire' should have fired after {4}."' " is 131.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,Change,The length of the statement  "            if (period == TimeSpan.Zero) throw new ArgumentOutOfRangeException("period"' period' string.Format("Cannot use TimeSpan.Zero for timer {0} period"' GetFullName())); " is 164.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,Change,The length of the statement  "            if (logger.IsEnabled(LogLevel.Debug)) logger.Debug(ErrorCode.TimerChanging' "Changing timer {0} to dueTime={1} period={2}"' GetFullName()' newDueTime' period); " is 159.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,HandleSyncTimerCallback,The length of the statement  "                if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(ErrorCode.TimerBeforeCallback' "About to make sync timer callback for timer {0}"' GetFullName()); " is 148.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,HandleSyncTimerCallback,The length of the statement  "                if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(ErrorCode.TimerAfterCallback' "Completed sync timer callback for timer {0}"' GetFullName()); " is 143.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,HandleSyncTimerCallback,The length of the statement  "                logger.Warn(ErrorCode.TimerCallbackError' string.Format("Ignored exception {0} during sync timer callback {1}"' exc.Message' GetFullName())' exc); " is 146.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "            // It may happen than the asyncCallbackFunc will resolve some promises on which the higher level application code is depends upon " is 129.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "            // In the unit test case this may lead to the situation where unit test has finished' but p1 or p2 or p3 have not been observed yet. " is 132.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "            // To properly fix this we may use a mutex/monitor to delay execution of asyncCallbackFunc until all CWs and Finally in the code below were scheduled  " is 149.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "            // This however will relay on scheduler executing these in separate threads to prevent deadlock' so needs to be done carefully.  " is 127.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "            // In particular' need to make sure we execute asyncCallbackFunc in another thread (so use StartNew instead of ExecuteWithSafeTryCatch). " is 136.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "                if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(ErrorCode.TimerBeforeCallback' "About to make async task timer callback for timer {0}"' GetFullName()); " is 154.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "                if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(ErrorCode.TimerAfterCallback' "Completed async task timer callback for timer {0}"' GetFullName()); " is 149.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "                logger.Warn(ErrorCode.TimerCallbackError' string.Format("Ignored exception {0} during async task timer callback {1}"' exc.Message' GetFullName())' exc); " is 152.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,QueueNextTimerTick,The length of the statement  "                if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(ErrorCode.TimerChanging' "About to QueueNextTimerTick for timer {0}"' GetFullName()); " is 136.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,QueueNextTimerTick,The length of the statement  "                    if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(ErrorCode.TimerStopped' "Timer {0} is now stopped and disposed"' GetFullName()); " is 131.
Long Statement,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,QueueNextTimerTick,The length of the statement  "                    if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(ErrorCode.TimerNextTick' "Queued next tick for timer {0} in {1}"' GetFullName()' timerFrequency); " is 148.
Long Statement,Orleans.Runtime,KeyedServiceExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\KeyedService.cs,AddTransientKeyedService,The length of the statement  "            return collection.AddSingleton<IKeyedService<TKey' TService>>(sp => new KeyedService<TKey' TService>(key' sp' factory)); " is 120.
Long Statement,Orleans.Runtime,KeyedServiceExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\KeyedService.cs,AddTransientKeyedService,The length of the statement  "            return collection.AddSingleton<IKeyedService<TKey' TService>>(sp => new KeyedService<TKey' TService' TInstance>(key'sp)); " is 121.
Long Statement,Orleans.Runtime,KeyedServiceExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\KeyedService.cs,AddSingletonKeyedService,The length of the statement  "            return collection.AddSingleton<IKeyedService<TKey' TService>>(sp => new KeyedSingletonService<TKey' TService>(key' sp' factory)); " is 129.
Long Statement,Orleans.Runtime,KeyedServiceExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\KeyedService.cs,AddSingletonKeyedService,The length of the statement  "            return collection.AddSingleton<IKeyedService<TKey' TService>>(sp => new KeyedSingletonService<TKey' TService' TInstance>(key' sp)); " is 131.
Long Statement,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,TimeSpanToString,The length of the statement  "            return String.Format("{0}h:{1}m:{2}s.{3}ms"' timeSpan.Hours' timeSpan.Minutes' timeSpan.Seconds' timeSpan.Milliseconds); " is 120.
Long Statement,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,ToGatewayUri,The length of the statement  "            var builder = new UriBuilder("gwy.tcp"' address.Endpoint.Address.ToString()' address.Endpoint.Port' address.Generation.ToString()); " is 131.
Long Statement,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,Flatten,The length of the statement  "            throw new AggregateException("A ReflectionTypeLoadException has been thrown. The original exception and the contents of the LoaderExceptions property have been aggregated for your convenience."' all); " is 200.
Long Statement,Orleans.Internal,AsyncExecutorWithRetries,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetriesHelper,The length of the statement  "                                $"ExecuteWithRetries has exceeded its max execution time of {maxExecutionTime}. Now is {LogFormatter.PrintDate(now)}' started at {LogFormatter.PrintDate(startExecutionTime)}' passed {now - startExecutionTime}"); " is 211.
Long Statement,Orleans.Internal,OrleansTaskExtentions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\TaskExtensions.cs,ThrowInvalidTaskResultType,The length of the statement  "            var message = $"Expected result of type {type} but encountered a null value. This may be caused by a grain call filter swallowing an exception."; " is 145.
Long Statement,Orleans.Internal,StandardExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\StandardExtensions.cs,NextTimeSpan,The length of the statement  "            if (timeSpan <= TimeSpan.Zero) throw new ArgumentOutOfRangeException("timeSpan"' timeSpan' "SafeRandom.NextTimeSpan timeSpan must be a positive number."); " is 154.
Long Statement,Orleans.Internal,StandardExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\StandardExtensions.cs,NextTimeSpan,The length of the statement  "            if (minValue <= TimeSpan.Zero) throw new ArgumentOutOfRangeException("minValue"' minValue' "SafeRandom.NextTimeSpan minValue must be a positive number."); " is 154.
Long Statement,Orleans.Internal,StandardExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\StandardExtensions.cs,NextTimeSpan,The length of the statement  "            if (minValue >= maxValue) throw new ArgumentOutOfRangeException("minValue"' minValue' "SafeRandom.NextTimeSpan minValue must be greater than maxValue."); " is 153.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\GrainInterfaceUtils.cs,IsTaskBasedInterface,The length of the statement  "            // An interface is task-based if it has at least one method that returns a Task or at least one parent that's task-based. " is 121.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\GrainInterfaceUtils.cs,ValidateInterfaceMethods,The length of the statement  "                    violations.Add(String.Format("Method {0}.{1} must return Task or Task<T> because it is defined within a grain interface."' " is 122.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\GrainInterfaceUtils.cs,ValidateInterfaceMethods,The length of the statement  "                        violations.Add(String.Format("Argument {0} of method {1}.{2} is an output parameter. Output parameters are not allowed in grain interfaces."' " is 141.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\GrainInterfaceUtils.cs,ValidateInterfaceMethods,The length of the statement  "                        violations.Add(String.Format("Argument {0} of method {1}.{2} is an a reference parameter. Reference parameters are not allowed."' " is 129.
Long Statement,Orleans.Configuration,OptionConfigureExtensionMethods,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\OptionLogger\OptionFormatterExtensionMethods.cs,TryConfigureFormatterResolver,The length of the statement  "            var registration = services.FirstOrDefault(service => service.ServiceType == typeof(IOptionFormatterResolver<TOptions>)); " is 121.
Long Statement,Orleans.Configuration,OptionConfigureExtensionMethods,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\OptionLogger\OptionFormatterExtensionMethods.cs,ConfigureNamedOptionForLogging,The length of the statement  "            return services.AddSingleton<IOptionFormatter>(sp => sp.GetService<IOptionFormatterResolver<TOptions>>().Resolve(name)); " is 120.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,ParseAdditionalAssemblyDirectories,The length of the statement  "                        directories[grandchild.Attributes["Path"].Value] = recursive ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly; " is 123.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,ParseStatistics,The length of the statement  "                config.StatisticsCollectionLevel = ConfigUtilities.ParseEnum<StatisticsLevel>(root.GetAttribute("StatisticsCollectionLevel")' " is 125.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,ValidateSerializationProvider,The length of the statement  "                throw new FormatException(string.Format("The serialization provider type {0} is generic and has a missing type parameter specification"' type.FullName)); " is 153.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,ValidateSerializationProvider,The length of the statement  "                throw new FormatException(string.Format("The serialization provider type {0} does not have a parameterless constructor"' type.FullName)); " is 137.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,ValidateSerializationProvider,The length of the statement  "                throw new FormatException(string.Format("The serialization provider type {0} has a non-public parameterless constructor"' type.FullName)); " is 138.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,ParseIPEndPoint,The length of the statement  "            if (!root.HasAttribute("Address")) throw new FormatException("Missing Address attribute for " + root.LocalName + " element"); " is 125.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,ResolveIPAddress,The length of the statement  "            throw new ArgumentException("Hostname '" + addrOrHost + "' with subnet " + subnetStr + " and family " + family + " is not a valid IP address or DNS name"); " is 155.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,GetLocalIPAddress,The length of the statement  "                    if (ip.Address.AddressFamily == family) // Picking the first address of the requested family for now. Will need to revisit later " is 128.
Long Statement,Orleans.Runtime.Configuration,TelemetryConfiguration,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\TelemetryConfiguration.cs,Add,The length of the statement  "                throw new TypeLoadException($"Cannot load TelemetryConsumer class {typeName} from assembly {assembly?.FullName ?? assemblyName} - Error={exc}"); " is 144.
Long Statement,Orleans.Runtime.Configuration,TelemetryConfiguration,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\TelemetryConfiguration.cs,Add,The length of the statement  "            if (pluginType == null) throw new TypeLoadException($"Cannot locate plugin class {typeName} in assembly {assembly.FullName}"); " is 126.
Long Statement,Orleans.Runtime.Configuration,TelemetryConfiguration,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\TelemetryConfiguration.cs,Add,The length of the statement  "            if (!typeof(ITelemetryConsumer).IsAssignableFrom(pluginType)) throw new InvalidOperationException($"Telemetry consumer class {typeName} must implement one of {nameof(ITelemetryConsumer)} based interfaces"); " is 206.
Long Statement,Orleans.Hosting,GrainCallFilterExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\GrainCallFilterExtensions.cs,AddGrainCallFilter,The length of the statement  "            throw new NotSupportedException($"{nameof(AddGrainCallFilter)} is no longer supported. Use ISiloHostBuilder.AddIncomingGrainCallFilter(...) instead."); " is 151.
Long Statement,Orleans.Hosting,GrainCallFilterExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\GrainCallFilterExtensions.cs,AddGrainCallFilter,The length of the statement  "            throw new NotSupportedException($"{nameof(AddGrainCallFilter)} is no longer supported. Use ISiloHostBuilder.AddIncomingGrainCallFilter(...) instead."); " is 151.
Long Statement,Orleans.Hosting,GrainCallFilterExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Core\GrainCallFilterExtensions.cs,AddGrainCallFilter,The length of the statement  "            throw new NotSupportedException($"{nameof(AddGrainCallFilter)} is no longer supported. Use ISiloHostBuilder.AddIncomingGrainCallFilter(...) instead."); " is 151.
Long Statement,Orleans.Hosting,ServiceProviderFactoryAdapter<TContainerBuilder>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Hosting\ServiceProviderFactoryAdapter.cs,ConfigureContainer,The length of the statement  "                var msg = $"Type of configuration delegate requires builder of type {typeof(TBuilder)} which does not match previously configured container builder type {typeof(TContainerBuilder)}."; " is 183.
Long Statement,Orleans.Hosting,ClientStreamExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\ClientStreamExtensions.cs,AddPersistentStreams,The length of the statement  "            //the constructor wire up DI with all default components of the streams ' so need to be called regardless of configureStream null or not " is 136.
Long Statement,Orleans.Hosting,ClientStreamExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\ClientStreamExtensions.cs,AddSimpleMessageStreamProvider,The length of the statement  "            //the constructor wire up DI with all default components of the streams ' so need to be called regardless of configureStream null or not " is 136.
Long Statement,Orleans.Hosting,ClientStreamExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\ClientStreamExtensions.cs,AddSimpleMessageStreamProvider,The length of the statement  "            var streamConfigurator = new SimpleMessageStreamConfigurator(name' configureDelegate => builder.ConfigureServices(configureDelegate)); " is 134.
Long Statement,Orleans.Configuration.Validators,ApplicationPartValidator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Validators\ApplicationPartValidator.cs,ValidateConfiguration,The length of the statement  "            var hasApplicationAssembly = this.applicationPartManager.ApplicationParts.OfType<AssemblyPart>().Any(part => !part.IsFrameworkAssembly); " is 136.
Long Statement,Orleans.Configuration.Validators,ApplicationPartValidator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Validators\ApplicationPartValidator.cs,ValidateConfiguration,The length of the statement  "                    $" Add assemblies using the {nameof(ApplicationPartManagerExtensions.AddApplicationPart)}({nameof(Assembly)}) extension method on the client builder."); " is 152.
Long Statement,Orleans.Configuration.Validators,ApplicationPartValidator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Validators\ApplicationPartValidator.cs,ValidateConfiguration,The length of the statement  "                        " Ensure that code generation has been executed for grain interface and grain class assemblies and that they have been added as application parts."); " is 149.
Long Statement,Orleans.Configuration.Validators,ApplicationPartValidator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Validators\ApplicationPartValidator.cs,ValidateConfiguration,The length of the statement  "                        " Ensure that code generation has been executed for grain interface and grain class assemblies and that they have been added as application parts."); " is 149.
Long Statement,Orleans.Configuration.Validators,LoadSheddingValidator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Validators\LoadSheddingValidator.cs,ValidateConfiguration,The length of the statement  "            // With a provided LoadSheddingOptions' ensure there is a valid (non default) registered implementation of IHostEnvironmentStatistics. " is 134.
Long Statement,Orleans.Streams,QueueId,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\IDs\QueueId.cs,ToString,The length of the statement  "            return String.Format("{0}-{1}"' (queueNamePrefix !=null ? queueNamePrefix.ToLower() : String.Empty)' queueId.ToString()); " is 121.
Long Statement,Orleans.Streams,StreamIdInternerKey,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\IDs\StreamId.cs,Equals,The length of the statement  "            return Guid.Equals(other.Guid) && Object.Equals(ProviderName' other.ProviderName) && Object.Equals(Namespace' other.Namespace); " is 127.
Long Statement,Orleans.Streams,StreamIdInternerKey,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\IDs\StreamId.cs,GetHashCode,The length of the statement  "            return Guid.GetHashCode() ^ (ProviderName != null ? ProviderName.GetHashCode() : 0) ^ (Namespace != null ? Namespace.GetHashCode() : 0); " is 136.
Long Statement,Orleans.Streams,StreamConsumer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumer.cs,SubscribeAsyncImpl,The length of the statement  "                throw new ArgumentException("On-behalf subscription via grain references is not supported. Only passing of object references is allowed."' nameof(observer)); " is 157.
Long Statement,Orleans.Streams,StreamConsumer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumer.cs,SubscribeAsyncImpl,The length of the statement  "                throw new ArgumentException("On-behalf subscription via grain references is not supported. Only passing of object references is allowed."' nameof(batchObserver)); " is 162.
Long Statement,Orleans.Streams,StreamConsumer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumer.cs,SubscribeAsyncImpl,The length of the statement  "            if (logger.IsEnabled(LogLevel.Debug)) logger.Debug("Subscribe - Connecting to Rendezvous {0} My GrainRef={1} Token={2}"' " is 120.
Long Statement,Orleans.Streams,StreamConsumer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumer.cs,SubscribeAsyncImpl,The length of the statement  "            // Basicaly' those 2 operations should be done as one atomic transaction - either both or none and isolated from concurrent reads. " is 130.
Long Statement,Orleans.Streams,StreamConsumer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumer.cs,SubscribeAsyncImpl,The length of the statement  "            // since this subscriptionId is unique (random Guid) and no one knows it anyway' unless successfully subscribed in the pubsub. " is 126.
Long Statement,Orleans.Streams,StreamConsumer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumer.cs,ResumeAsyncImpl,The length of the statement  "            StreamSubscriptionHandle<T> newHandle = myExtension.SetObserver(oldHandleImpl.SubscriptionId' stream' observer' batchObserver' token' null); " is 140.
Long Statement,Orleans.Streams,StreamConsumer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumer.cs,ResumeAsyncImpl,The length of the statement  "            // On failure caller should be able to retry using the original handle' so invalidate old handle only if everything succeeded.   " is 126.
Long Statement,Orleans.Streams,StreamConsumer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumer.cs,BindExtensionLazy,The length of the statement  "                        if (logger.IsEnabled(LogLevel.Debug)) logger.Debug("BindExtensionLazy - Binding local extension to stream runtime={0}"' providerRuntime); " is 137.
Long Statement,Orleans.Streams,StreamConsumer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumer.cs,BindExtensionLazy,The length of the statement  "                        if (logger.IsEnabled(LogLevel.Debug)) logger.Debug("BindExtensionLazy - Connected Extension={0} GrainRef={1}"' myExtension' myGrainReference);                         " is 142.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,SetObserver,The length of the statement  "                if (logger.IsEnabled(LogLevel.Debug)) logger.Debug("{0} AddObserver for stream {1}"' providerRuntime.ExecutingEntityIdentity()' stream.StreamId); " is 145.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,SetObserver,The length of the statement  "                // Note: The caller [StreamConsumer] already handles locking for Add/Remove operations' so we don't need to repeat here. " is 120.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,SetObserver,The length of the statement  "                    $"{providerRuntime.ExecutingEntityIdentity()} StreamConsumerExtension.AddObserver({stream.StreamId}) caugth exception."' exc); " is 126.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,DeliverMutable,The length of the statement  "                itemString = (itemString.Length > MAXIMUM_ITEM_STRING_LOG_LENGTH) ? itemString.Substring(0' MAXIMUM_ITEM_STRING_LOG_LENGTH) + "..." : itemString; " is 145.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,DeliverMutable,The length of the statement  "                    var subscriptionHandlerFactory = new StreamSubscriptionHandlerFactory(streamProvider' streamId' streamId.ProviderName' subscriptionId); " is 135.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,DeliverMutable,The length of the statement  "            logger.Warn((int)(ErrorCode.StreamProvider_NoStreamForItem)' "{0} got an item for subscription {1}' but I don't have any subscriber for that stream. Dropping on the floor."' " is 173.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,DeliverBatch,The length of the statement  "            if (logger.IsEnabled(LogLevel.Trace)) logger.Trace("DeliverBatch {0} for subscription {1}"' batch.Value' subscriptionId); " is 121.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,DeliverBatch,The length of the statement  "                    var subscriptionHandlerFactory = new StreamSubscriptionHandlerFactory(streamProvider' streamId' streamId.ProviderName' subscriptionId); " is 135.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,DeliverBatch,The length of the statement  "            logger.Warn((int)(ErrorCode.StreamProvider_NoStreamForBatch)' "{0} got an item for subscription {1}' but I don't have any subscriber for that stream. Dropping on the floor."' " is 174.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,CompleteStream,The length of the statement  "            logger.Warn((int)(ErrorCode.StreamProvider_NoStreamForItem)' "{0} got a Complete for subscription {1}' but I don't have any subscriber for that stream. Dropping on the floor."' " is 176.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,ErrorInStream,The length of the statement  "            logger.Warn((int)(ErrorCode.StreamProvider_NoStreamForItem)' "{0} got an Error for subscription {1}' but I don't have any subscriber for that stream. Dropping on the floor."' " is 174.
Long Statement,Orleans.Streams,StreamConsumerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamConsumerExtension.cs,GetSequenceToken,The length of the statement  "            return Task.FromResult(allStreamObservers.TryGetValue(subscriptionId' out observer) ? observer.GetSequenceToken() : null); " is 122.
Long Statement,Orleans.Streams,StreamDirectory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamDirectory.cs,GetOrAddStream,The length of the statement  "                throw new Runtime.OrleansException($"Stream type mismatch. A stream can only support a single type of data. The generic type of the stream requested ({typeof(T)}) does not match the previously requested type ({stream.GetType().GetGenericArguments().FirstOrDefault()})."); " is 271.
Long Statement,Orleans.Streams,StreamImpl<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamImpl.cs,GetStreamProvider,The length of the statement  "            return this.runtimeClient.ServiceProvider.GetRequiredServiceByName<IStreamProvider>(streamId.ProviderName) as IInternalStreamProvider; " is 134.
Long Statement,Orleans.Streams,StreamSubscriptionHandleImpl<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamSubscriptionHandleImpl.cs,UnsubscribeAsync,The length of the statement  "            if (!IsValid) throw new InvalidOperationException("Handle is no longer valid. It has been used to unsubscribe or resume."); " is 123.
Long Statement,Orleans.Streams,StreamSubscriptionHandleImpl<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamSubscriptionHandleImpl.cs,ResumeAsync,The length of the statement  "            if (!IsValid) throw new InvalidOperationException("Handle is no longer valid. It has been used to unsubscribe or resume."); " is 123.
Long Statement,Orleans.Streams,StreamSubscriptionHandleImpl<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamSubscriptionHandleImpl.cs,ResumeAsync,The length of the statement  "            if (!IsValid) throw new InvalidOperationException("Handle is no longer valid. It has been used to unsubscribe or resume."); " is 123.
Long Statement,Orleans.Streams,StreamSubscriptionHandleImpl<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamSubscriptionHandleImpl.cs,ToString,The length of the statement  "            return String.Format("StreamSubscriptionHandleImpl:Stream={0}'HandleId={1}"' IsValid ? streamImpl.StreamId.ToString() : "null"' HandleId); " is 138.
Long Statement,Orleans.Streams,PersistentStreamProducer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\PersistentStreamProducer.cs,OnNextAsync,The length of the statement  "            return this.queueAdapter.QueueMessageAsync(this.stream.StreamId.Guid' this.stream.StreamId.Namespace' item' token' RequestContextExtensions.Export(this.serializationManager)); " is 175.
Long Statement,Orleans.Streams,PersistentStreamProducer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\PersistentStreamProducer.cs,OnNextBatchAsync,The length of the statement  "            return this.queueAdapter.QueueMessageBatchAsync(this.stream.StreamId.Guid' this.stream.StreamId.Namespace' batch' token' RequestContextExtensions.Export(this.serializationManager)); " is 181.
Long Statement,Orleans.Streams,StreamConsumerData,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\QueueStreamDataStructures.cs,SafeDisposeCursor,The length of the statement  "                        () => String.Format("Cursor.Dispose on stream {0}' StreamConsumer {1} has thrown exception."' StreamId' StreamConsumer)); " is 121.
Long Statement,Orleans.Streams,ImplicitStreamPubSub,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\ImplicitStreamPubSub.cs,RegisterProducer,The length of the statement  "            if (!ImplicitStreamSubscriberTable.IsImplicitSubscribeEligibleNameSpace(streamId.Namespace)) return Task.FromResult(result); " is 124.
Long Statement,Orleans.Streams,ImplicitStreamPubSub,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\ImplicitStreamPubSub.cs,RegisterProducer,The length of the statement  "            IDictionary<Guid' IStreamConsumerExtension> implicitSubscriptions = implicitTable.GetImplicitSubscribers(streamId' this.grainFactory); " is 134.
Long Statement,Orleans.Streams,ImplicitStreamSubscriberTable,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\ImplicitStreamSubscriberTable.cs,GetImplicitSubscribers,The length of the statement  "                        $"Internal invariant violation: generated duplicate subscriber reference: {consumer}' subscriptionId: {subscriptionGuid}"); " is 123.
Long Statement,Orleans.Streams,StreamPubSubImpl,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\StreamPubSubImpl.cs,RegisterProducer,The length of the statement  "            ISet<PubSubSubscriptionState> explicitRes = await explicitPubSub.RegisterProducer(streamId' streamProvider' streamProducer); " is 124.
Long Statement,Orleans.Streams,StreamPubSubImpl,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\StreamPubSubImpl.cs,RegisterProducer,The length of the statement  "            ISet<PubSubSubscriptionState> implicitRes = await implicitPubSub.RegisterProducer(streamId' streamProvider' streamProducer); " is 124.
Long Statement,Orleans.Streams,BatchContainerBatch,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\QueueAdapters\BatchContainerBatch.cs,ShouldDeliver,The length of the statement  "            // ShouldDeliver is called on a per IBatchContainer basis for each IBatchContainer that composes this BatchContainerBatch. " is 122.
Long Statement,Orleans.LogConsistency,LogConsistentGrain<TView>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\LogConsistency\LogConsistentGrain.cs,OnSetupState,The length of the statement  "            Factory<Grain' IMultiClusterRegistrationStrategy' ILogConsistencyProtocolServices> protocolServicesFactory = this.ServiceProvider.GetRequiredService<Factory<Grain' IMultiClusterRegistrationStrategy' ILogConsistencyProtocolServices>>(); " is 235.
Long Statement,Orleans.LogConsistency,LogConsistentGrain<TView>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\LogConsistency\LogConsistentGrain.cs,OnSetupState,The length of the statement  "            IGrainStorage grainStorage = consistencyProvider.UsesStorageProvider ? this.GetGrainStorage(this.ServiceProvider) : null; " is 121.
Long Statement,Orleans.LogConsistency,LogConsistentGrain<TView>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\LogConsistency\LogConsistentGrain.cs,OnSetupState,The length of the statement  "            InstallLogViewAdaptor(activationContext.RegistrationStrategy' protocolServicesFactory' consistencyProvider' grainStorage); " is 122.
Long Statement,Orleans.LogConsistency,LogConsistentGrain<TView>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\LogConsistency\LogConsistentGrain.cs,SetupLogConsistencyProvider,The length of the statement  "                var errMsg = $"Cannot find consistency provider with Name={attr.ProviderName} for grain type {this.GetType().FullName}"; " is 120.
Long Statement,Orleans.Messaging,ClientMessageCenter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\ClientMessageCenter.cs,SendMessage,The length of the statement  "                this.logger.Error(ErrorCode.ProxyClient_MsgCtrNotRunning' $"Ignoring {msg} because the Client message center is not running"); " is 126.
Long Statement,Orleans.Messaging,ClientMessageCenter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\ClientMessageCenter.cs,GetGatewayConnection,The length of the statement  "            // For untargeted messages to system targets' and for unordered messages' pick a next connection in round robin fashion. " is 120.
Long Statement,Orleans.Messaging,ClientMessageCenter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\ClientMessageCenter.cs,GetGatewayConnection,The length of the statement  "                    logger.Warn(ErrorCode.ProxyClient_CannotSend' "Unable to send message {0}; gateway manager state is {1}"' msg' gatewayManager); " is 127.
Long Statement,Orleans.Messaging,ClientMessageCenter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\ClientMessageCenter.cs,GetGatewayConnection,The length of the statement  "                logger.Warn(ErrorCode.ProxyClient_CannotSend_NoGateway' "Unable to send message {0}; gateway manager state is {1}"' msg' gatewayManager); " is 137.
Long Statement,Orleans.Messaging,ClientMessageCenter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\ClientMessageCenter.cs,GetGatewayConnection,The length of the statement  "            if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(ErrorCode.ProxyClient_NewBucketIndex' "Starting new bucket index {0} for ordered messages to grain {1}"' index' msg.TargetGrain); " is 180.
Long Statement,Orleans.Messaging,ClientMessageCenter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\ClientMessageCenter.cs,RejectMessage,The length of the statement  "                if (logger.IsEnabled(LogLevel.Debug)) logger.Debug(ErrorCode.ProxyClient_DroppingMsg' "Dropping message: {0}. Reason = {1}"' msg' reason); " is 138.
Long Statement,Orleans.Messaging,ClientMessageCenter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\ClientMessageCenter.cs,RejectMessage,The length of the statement  "                if (logger.IsEnabled(LogLevel.Debug)) logger.Debug(ErrorCode.ProxyClient_RejectingMsg' "Rejecting message: {0}. Reason = {1}"' msg' reason); " is 140.
Long Statement,Orleans.Messaging,GatewayManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\GatewayManager.cs,GetLiveGateways,The length of the statement  "                            this.logger.LogWarning("All known gateways have been marked dead locally. Expediting gateway refresh and resetting all gateways to live status."); " is 146.
Long Statement,Orleans.Messaging,GatewayManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\GatewayManager.cs,GatewayListNotification,The length of the statement  "                logger.Error(ErrorCode.ProxyClient_GetGateways' "Exception occurred during GatewayListNotification -> UpdateLiveGatewaysSnapshot"' exc); " is 136.
Long Statement,Orleans.Messaging,GatewayManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\GatewayManager.cs,RefreshSnapshotLiveGateways_TimerCallback,The length of the statement  "                    logger.LogDebug("Discovered {GatewayCount} gateways: {Gateways}"' refreshedGateways.Count' Utils.EnumerableToString(refreshedGateways)); " is 136.
Long Statement,Orleans.Messaging,GatewayManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\GatewayManager.cs,RefreshSnapshotLiveGateways_TimerCallback,The length of the statement  "                logger.Error(ErrorCode.ProxyClient_GetGateways' "Exception occurred during RefreshSnapshotLiveGateways_TimerCallback -> listProvider.GetGateways()"' exc); " is 154.
Long Statement,Orleans.Messaging,GatewayManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\GatewayManager.cs,UpdateLiveGatewaysSnapshot,The length of the statement  "                    // The latter is to cover the case when the Gateway provider returns an outdated list that does not yet reflect the actually recently died Gateway. " is 147.
Long Statement,Orleans.Messaging,GatewayManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\GatewayManager.cs,UpdateLiveGatewaysSnapshot,The length of the statement  "                            "Refreshed the live Gateway list. Found {0} gateways from Gateway listProvider: {1}. Picked only known live out of them. Now has {2} live Gateways: {3}. Previous refresh time was = {4}"' " is 186.
Long Statement,Orleans.Runtime.Messaging,MessageSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\MessageSerializer.cs,Write,The length of the statement  "                this.bufferWriter = buffer = new PrefixingBufferWriter<byte' TBufferWriter>(FramingLength' MessageSizeHint' this.memoryPool); " is 125.
Long Statement,Orleans.Runtime.Messaging,MessageSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\MessageSerializer.cs,ThrowIfLengthsInvalid,The length of the statement  "                throw new OrleansException($"Invalid header size: {headerLength} (max configured value is {this.maxHeaderLength}' see {nameof(MessagingOptions.MaxMessageHeaderSize)})"); " is 169.
Long Statement,Orleans.Runtime.Messaging,MessageSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\MessageSerializer.cs,ThrowIfLengthsInvalid,The length of the statement  "                throw new OrleansException($"Invalid body size: {bodyLength} (max configured value is {this.maxBodyLength}' see {nameof(MessagingOptions.MaxMessageBodySize)})"); " is 161.
Long Statement,Orleans.Runtime.Messaging,OrleansSerializer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\MessageSerializer.cs,Deserialize,The length of the statement  "                    value = (T)SerializationManager.DeserializeInner(this.serializationManager' typeof(T)' this.deserializationContext' this.reader); " is 129.
Long Statement,Orleans.Runtime.Messaging,Sequence,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\PrefixingBufferWriter.cs,AdvanceTo,The length of the statement  "                void ThrowCurrentNull() => throw new ArgumentException("Position does not represent a valid position in this sequence."' nameof(position)); " is 139.
Long Statement,Orleans.Runtime.Messaging,Sequence,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\PrefixingBufferWriter.cs,AdvanceTo,The length of the statement  "                void ThrowEarlierPosition() => throw new ArgumentException("Position must not be earlier than current position."' nameof(position)); " is 132.
Long Statement,Orleans.Runtime.Messaging,ClientOutboundConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ClientOutboundConnection.cs,PrepareMessageForSend,The length of the statement  "                // Recycle the message we've dequeued. Note that this will recycle messages that were queued up to be sent when the gateway connection is declared dead " is 151.
Long Statement,Orleans.Runtime.Messaging,ClientOutboundConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ClientOutboundConnection.cs,FailMessage,The length of the statement  "                if (this.Log.IsEnabled(LogLevel.Debug)) this.Log.Debug(ErrorCode.MessagingSendingRejection' "Client is rejecting message: {Message}. Reason = {Reason}"' msg' reason); " is 166.
Long Statement,Orleans.Runtime.Messaging,ClientOutboundConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ClientOutboundConnection.cs,FailMessage,The length of the statement  "                this.Log.Info(ErrorCode.Messaging_OutgoingMS_DroppingMessage' "Client is dropping message: {<essage}. Reason = {Reason}"' msg' reason); " is 135.
Long Statement,Orleans.Runtime.Messaging,Connection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Connection.cs,CloseInternal,The length of the statement  "                    this.Log.LogWarning(innerException' "Exception closing connection with remote endpoint {EndPoint}: {Exception}"' this.RemoteEndPoint' innerException); " is 150.
Long Statement,Orleans.Runtime.Messaging,Connection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Connection.cs,ProcessIncoming,The length of the statement  "                                    MessagingStatisticsGroup.OnMessageReceive(this.MessageReceivedCounter' message' bodyLength + headerLength' headerLength' this.ConnectionDirection); " is 147.
Long Statement,Orleans.Runtime.Messaging,Connection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Connection.cs,ProcessOutgoing,The length of the statement  "                            MessagingStatisticsGroup.OnMessageSend(this.MessageSentCounter' message' headerLength + bodyLength' headerLength' this.ConnectionDirection); " is 140.
Long Statement,Orleans.Runtime.Messaging,Connection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Connection.cs,OnMessageSerializationFailure,The length of the statement  "            else if (message.Direction == Message.Directions.Response && message.RetryCount < MessagingOptions.DEFAULT_MAX_MESSAGE_SEND_RETRIES) " is 132.
Long Statement,Orleans.Runtime.Messaging,ConnectionEntry,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionManager.cs,ThrowIfRecentConnectionFailure,The length of the statement  "                    throw new ConnectionFailedException($"Unable to connect to {this.Endpoint}' will retry after {remainingDelay.TotalMilliseconds}ms"); " is 132.
Long Statement,Orleans.Runtime.Messaging,ConnectionPreamble,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionPreamble.cs,Write,The length of the statement  "                throw new InvalidOperationException($"Created preamble of length {length}' which is greater than maximum allowed size of {MaxPreambleLength}."); " is 144.
Long Statement,Orleans.Runtime.Messaging,ConnectionPreamble,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionPreamble.cs,Read,The length of the statement  "                throw new InvalidOperationException($"Remote connection sent preamble length of {length}' which is greater than maximum allowed size of {MaxPreambleLength}."); " is 159.
Long Statement,Orleans.Runtime.Messaging,ConnectionPreamble,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionPreamble.cs,Read,The length of the statement  "                        throw new NotSupportedException("Unexpected token while reading connection preamble. Expected SiloAddress' encountered " + token); " is 130.
Long Statement,Orleans.Networking.Shared,SocketConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketConnection.cs,Shutdown,The length of the statement  "                _shutdownReason = shutdownReason ?? new ConnectionAbortedException("The Socket transport's send loop completed gracefully."); " is 125.
Long Statement,Orleans.Serialization,BinaryFormatterISerializableSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryFormatterISerializableSerializer.cs,IsSupportedType,The length of the statement  "            return itemType.IsSerializable && SerializableType.IsAssignableFrom(itemType) && DotNetSerializableUtilities.HasSerializationConstructor(itemType); " is 147.
Long Statement,Orleans.Serialization,DynamicBinder,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryFormatterSerializer.cs,BindToType,The length of the statement  "                        // in some cases we have to explicitly load the assembly even though it seems to be already loaded but for some reason it's not listed in AppDomain.CurrentDomain.GetAssemblies() " is 177.
Long Statement,Orleans.Serialization,BinaryTokenStreamReader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,CheckLength,The length of the statement  "                            String.Format("Attempt to read past buffers.Count: currentSegmentIndex={0}' buffers.Count={1}."' currentSegmentIndex' buffers.Count)); " is 134.
Long Statement,Orleans.Serialization,BinaryTokenStreamReader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,Trace,The length of the statement  "                var path = String.Format("d:\\Trace-{0}.{1}.{2}.txt"' DateTime.UtcNow.Hour' DateTime.UtcNow.Minute' DateTime.UtcNow.Ticks); " is 123.
Long Statement,Orleans.Serialization,BinaryTokenStreamWriter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter.cs,Trace,The length of the statement  "                var path = String.Format("d:\\Trace-{0}.{1}.{2}.txt"' DateTime.UtcNow.Hour' DateTime.UtcNow.Minute' DateTime.UtcNow.Ticks); " is 123.
Long Statement,Orleans.Serialization,BinaryTokenStreamWriter2<TBufferWriter>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter2.cs,EnsureContiguous,The length of the statement  "            void ThrowTooLarge(int l) => throw new InvalidOperationException($"Requested buffer length {l} cannot be satisfied by the writer."); " is 132.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericReadOnlyCollection,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeReadOnlyCollection)' nameof(DeserializeReadOnlyCollection)' nameof(DeepCopyReadOnlyCollection)' generics); " is 199.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericReadOnlyCollection,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeReadOnlyCollection)' nameof(DeserializeReadOnlyCollection)' nameof(DeepCopyReadOnlyCollection)' generics); " is 206.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericReadOnlyCollection,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeReadOnlyCollection)' nameof(DeserializeReadOnlyCollection)' nameof(DeepCopyReadOnlyCollection)' generics); " is 199.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericList,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeList)' nameof(DeserializeList)' nameof(DeepCopyList)' generics); " is 157.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericList,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeList)' nameof(DeserializeList)' nameof(DeepCopyList)' generics); " is 164.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericList,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeList)' nameof(DeserializeList)' nameof(DeepCopyList)' generics); " is 157.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericLinkedList,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeLinkedList)' nameof(DeserializeLinkedList)' nameof(DeepCopyLinkedList)' generics); " is 175.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericLinkedList,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeLinkedList)' nameof(DeserializeLinkedList)' nameof(DeepCopyLinkedList)' generics); " is 182.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericLinkedList,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeLinkedList)' nameof(DeserializeLinkedList)' nameof(DeepCopyLinkedList)' generics); " is 175.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericHashSet,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeHashSet)' nameof(DeserializeHashSet)' nameof(DeepCopyHashSet)' generics); " is 166.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericHashSet,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeHashSet)' nameof(DeserializeHashSet)' nameof(DeepCopyHashSet)' generics); " is 173.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericHashSet,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeHashSet)' nameof(DeserializeHashSet)' nameof(DeepCopyHashSet)' generics); " is 166.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericSortedSet,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeSortedSet)' nameof(DeserializeSortedSet)' nameof(DeepCopySortedSet)' generics); " is 172.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericSortedSet,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeSortedSet)' nameof(DeserializeSortedSet)' nameof(DeepCopySortedSet)' generics); " is 179.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericSortedSet,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeSortedSet)' nameof(DeserializeSortedSet)' nameof(DeepCopySortedSet)' generics); " is 172.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericQueue,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeQueue)' nameof(DeserializeQueue)' nameof(DeepCopyQueue)' generics); " is 160.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericQueue,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeQueue)' nameof(DeserializeQueue)' nameof(DeepCopyQueue)' generics); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericQueue,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeQueue)' nameof(DeserializeQueue)' nameof(DeepCopyQueue)' generics); " is 160.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericStack,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeStack)' nameof(DeserializeStack)' nameof(DeepCopyStack)' generics); " is 160.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericStack,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeStack)' nameof(DeserializeStack)' nameof(DeepCopyStack)' generics); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericStack,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeStack)' nameof(DeserializeStack)' nameof(DeepCopyStack)' generics); " is 160.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeDictionary)' nameof(DeserializeDictionary)' nameof(CopyDictionary)); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeDictionary)' nameof(DeserializeDictionary)' nameof(CopyDictionary)); " is 174.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeDictionary)' nameof(DeserializeDictionary)' nameof(CopyDictionary)); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyDictionary,The length of the statement  "                result[(K)SerializationManager.DeepCopyInner(pair.Key' context)] = (V)SerializationManager.DeepCopyInner(pair.Value' context); " is 126.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericReadOnlyDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeReadOnlyDictionary)' nameof(DeserializeReadOnlyDictionary)' nameof(CopyReadOnlyDictionary)); " is 191.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericReadOnlyDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeReadOnlyDictionary)' nameof(DeserializeReadOnlyDictionary)' nameof(CopyReadOnlyDictionary)); " is 198.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericReadOnlyDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeReadOnlyDictionary)' nameof(DeserializeReadOnlyDictionary)' nameof(CopyReadOnlyDictionary)); " is 191.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyReadOnlyDictionary,The length of the statement  "                innerDict[(K)SerializationManager.DeepCopyInner(pair.Key' context)] = (V)SerializationManager.DeepCopyInner(pair.Value' context); " is 129.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeStringObjectDictionary,The length of the statement  "            var comparer = (IEqualityComparer<string>)SerializationManager.DeserializeInner(typeof(IEqualityComparer<string>)' context); " is 124.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericSortedDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeSortedDictionary)' nameof(DeserializeSortedDictionary)' nameof(CopySortedDictionary)); " is 185.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericSortedDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeSortedDictionary)' nameof(DeserializeSortedDictionary)' nameof(CopySortedDictionary)); " is 192.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericSortedDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeSortedDictionary)' nameof(DeserializeSortedDictionary)' nameof(CopySortedDictionary)); " is 185.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeSortedDictionary,The length of the statement  "            SerializationManager.SerializeInner(dict.Comparer.Equals(Comparer<K>.Default) ? null : dict.Comparer' context' typeof(IComparer<K>)); " is 133.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopySortedDictionary,The length of the statement  "                result[(K)SerializationManager.DeepCopyInner(pair.Key' context)] = (V)SerializationManager.DeepCopyInner(pair.Value' context); " is 126.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericSortedList,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeSortedList)' nameof(DeserializeSortedList)' nameof(CopySortedList)); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericSortedList,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeSortedList)' nameof(DeserializeSortedList)' nameof(CopySortedList)); " is 174.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericSortedList,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeSortedList)' nameof(DeserializeSortedList)' nameof(CopySortedList)); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeSortedList,The length of the statement  "            SerializationManager.SerializeInner(list.Comparer.Equals(Comparer<K>.Default) ? null : list.Comparer' context' typeof(IComparer<K>)); " is 133.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopySortedList,The length of the statement  "                result[(K)SerializationManager.DeepCopyInner(pair.Key' context)] = (V)SerializationManager.DeepCopyInner(pair.Value' context); " is 126.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericImmutableDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableDictionary)' nameof(DeserializeImmutableDictionary)' nameof(CopyImmutableDictionary)); " is 194.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeImmutableDictionary)' nameof(DeserializeImmutableDictionary)' nameof(CopyImmutableDictionary)); " is 201.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericImmutableDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableDictionary)' nameof(DeserializeImmutableDictionary)' nameof(CopyImmutableDictionary)); " is 194.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeImmutableDictionary,The length of the statement  "            SerializationManager.SerializeInner(dict.KeyComparer.Equals(EqualityComparer<K>.Default) ? null : dict.KeyComparer' context' typeof(IEqualityComparer<K>)); " is 155.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeImmutableDictionary,The length of the statement  "            SerializationManager.SerializeInner(dict.ValueComparer.Equals(EqualityComparer<V>.Default) ? null : dict.ValueComparer' context' typeof(IEqualityComparer<V>)); " is 159.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericImmutableList,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableList)' nameof(DeserializeImmutableList)' nameof(CopyImmutableList)); " is 176.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableList,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeImmutableList)' nameof(DeserializeImmutableList)' nameof(CopyImmutableList)); " is 183.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericImmutableList,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableList)' nameof(DeserializeImmutableList)' nameof(CopyImmutableList)); " is 176.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericImmutableHashSet,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableHashSet)' nameof(DeserializeImmutableHashSet)' nameof(CopyImmutableHashSet)); " is 185.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericImmutableHashSet,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableHashSet)' nameof(DeserializeImmutableHashSet)' nameof(CopyImmutableHashSet)); " is 185.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableHashSet,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeImmutableHashSet)' nameof(DeserializeImmutableHashSet)' nameof(CopyImmutableHashSet)); " is 192.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeImmutableHashSet,The length of the statement  "            SerializationManager.SerializeInner(dict.KeyComparer.Equals(EqualityComparer<K>.Default) ? null : dict.KeyComparer' context' typeof(IEqualityComparer<K>)); " is 155.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericImmutableSortedSet,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableSortedSet)' nameof(DeserializeImmutableSortedSet)' nameof(CopyImmutableSortedSet)); " is 191.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableSortedSet,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeImmutableSortedSet)' nameof(DeserializeImmutableSortedSet)' nameof(CopyImmutableSortedSet)); " is 198.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericImmutableSortedSet,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableSortedSet)' nameof(DeserializeImmutableSortedSet)' nameof(CopyImmutableSortedSet)); " is 191.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeImmutableSortedSet,The length of the statement  "            SerializationManager.SerializeInner(dict.KeyComparer.Equals(Comparer<K>.Default) ? null : dict.KeyComparer' context' typeof(IComparer<K>)); " is 139.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericImmutableSortedDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableSortedDictionary)' nameof(DeserializeImmutableSortedDictionary)' nameof(CopyImmutableSortedDictionary)); " is 212.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableSortedDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeImmutableSortedDictionary)' nameof(DeserializeImmutableSortedDictionary)' nameof(CopyImmutableSortedDictionary)); " is 219.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericImmutableSortedDictionary,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableSortedDictionary)' nameof(DeserializeImmutableSortedDictionary)' nameof(CopyImmutableSortedDictionary)); " is 212.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeImmutableSortedDictionary,The length of the statement  "            SerializationManager.SerializeInner(dict.KeyComparer.Equals(Comparer<K>.Default) ? null : dict.KeyComparer' context' typeof(IComparer<K>)); " is 139.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeImmutableSortedDictionary,The length of the statement  "            SerializationManager.SerializeInner(dict.ValueComparer.Equals(EqualityComparer<V>.Default) ? null : dict.ValueComparer' context' typeof(IEqualityComparer<V>)); " is 159.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericImmutableArray,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableArray)' nameof(DeserializeImmutableArray)' nameof(CopyImmutableArray)); " is 179.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableArray,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeImmutableArray)' nameof(DeserializeImmutableArray)' nameof(CopyImmutableArray)); " is 186.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericImmutableArray,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableArray)' nameof(DeserializeImmutableArray)' nameof(CopyImmutableArray)); " is 179.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericImmutableQueue,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableQueue)' nameof(DeserializeImmutableQueue)' nameof(CopyImmutableQueue)); " is 179.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableQueue,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeImmutableQueue)' nameof(DeserializeImmutableQueue)' nameof(CopyImmutableQueue)); " is 186.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericImmutableQueue,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutableQueue)' nameof(DeserializeImmutableQueue)' nameof(CopyImmutableQueue)); " is 179.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeTuple,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeTuple) + generics.Length' nameof(DeserializeTuple) + generics.Length' nameof(DeepCopyTuple) + generics.Length' generics); " is 214.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeTuple,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeTuple) + generics.Length' nameof(DeserializeTuple) + generics.Length' nameof(DeepCopyTuple) + generics.Length' generics); " is 214.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeepCopyTuple,The length of the statement  "            var concretes= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeTuple) + generics.Length' nameof(DeserializeTuple) + generics.Length' nameof(DeepCopyTuple) + generics.Length' generics); " is 214.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeepCopyTuple2,The length of the statement  "            var result = new Tuple<T1' T2>((T1)SerializationManager.DeepCopyInner(input.Item1' context)' (T2)SerializationManager.DeepCopyInner(input.Item2' context)); " is 155.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeepCopyTuple3,The length of the statement  "            var result = new Tuple<T1' T2' T3>((T1)SerializationManager.DeepCopyInner(input.Item1' context)' (T2)SerializationManager.DeepCopyInner(input.Item2' context)' " is 158.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeepCopyTuple4,The length of the statement  "            var result = new Tuple<T1' T2' T3' T4>((T1)SerializationManager.DeepCopyInner(input.Item1' context)' (T2)SerializationManager.DeepCopyInner(input.Item2' context)' " is 162.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeepCopyTuple5,The length of the statement  "            var result = new Tuple<T1' T2' T3' T4' T5>((T1)SerializationManager.DeepCopyInner(input.Item1' context)' (T2)SerializationManager.DeepCopyInner(input.Item2' context)' " is 166.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeepCopyTuple6,The length of the statement  "            var result = new Tuple<T1' T2' T3' T4' T5' T6>((T1)SerializationManager.DeepCopyInner(input.Item1' context)' (T2)SerializationManager.DeepCopyInner(input.Item2' context)' " is 170.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeepCopyTuple7,The length of the statement  "            var result = new Tuple<T1' T2' T3' T4' T5' T6' T7>((T1)SerializationManager.DeepCopyInner(input.Item1' context)' (T2)SerializationManager.DeepCopyInner(input.Item2' context)' " is 174.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeValueTuple,The length of the statement  "            var concretes = RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeValueTuple) + generics.Length' nameof(DeserializeValueTuple) + generics.Length' nameof(DeepCopyValueTuple) + generics.Length' generics); " is 230.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeValueTuple,The length of the statement  "            var concretes = RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeValueTuple) + generics.Length' nameof(DeserializeValueTuple) + generics.Length' nameof(DeepCopyValueTuple) + generics.Length' generics); " is 230.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeepCopyValueTuple,The length of the statement  "            var concretes = RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeValueTuple) + generics.Length' nameof(DeserializeValueTuple) + generics.Length' nameof(DeepCopyValueTuple) + generics.Length' generics); " is 230.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericKeyValuePair,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeKeyValuePair)' nameof(DeserializeKeyValuePair)' nameof(CopyKeyValuePair)); " is 173.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericKeyValuePair,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeKeyValuePair)' nameof(DeserializeKeyValuePair)' nameof(CopyKeyValuePair)); " is 180.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericKeyValuePair,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeKeyValuePair)' nameof(DeserializeKeyValuePair)' nameof(CopyKeyValuePair)); " is 173.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyKeyValuePair,The length of the statement  "            var result = new KeyValuePair<TK' TV>((TK)SerializationManager.DeepCopyInner(pair.Key' context)' (TV)SerializationManager.DeepCopyInner(pair.Value' context)); " is 158.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericNullable,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeNullable)' nameof(DeserializeNullable)' nameof(CopyNullable)); " is 161.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericNullable,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeNullable)' nameof(DeserializeNullable)' nameof(CopyNullable)); " is 168.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericNullable,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeNullable)' nameof(DeserializeNullable)' nameof(CopyNullable)); " is 161.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,SerializeGenericImmutable,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutable)' nameof(DeserializeImmutable)' nameof(CopyImmutable)); " is 164.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGenericImmutable,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' expected' nameof(SerializeImmutable)' nameof(DeserializeImmutable)' nameof(CopyImmutable)); " is 171.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,CopyGenericImmutable,The length of the statement  "            var concreteMethods= RegisterConcreteMethods(context.GetSerializationManager()' t' nameof(SerializeImmutable)' nameof(DeserializeImmutable)' nameof(CopyImmutable)); " is 164.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "            var genericCopier = typeof(BuiltInTypes).GetMethods(BindingFlags.Static | BindingFlags.NonPublic).First(m => m.Name == copierName); " is 131.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "            var genericSerializer = typeof(BuiltInTypes).GetMethods(BindingFlags.Static | BindingFlags.NonPublic).First(m => m.Name == serializerName); " is 139.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "            var genericDeserializer = typeof(BuiltInTypes).GetMethods(BindingFlags.Static | BindingFlags.NonPublic).First(m => m.Name == deserializerName); " is 143.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "            var genericCopier = definingType.GetMethods(BindingFlags.Static | BindingFlags.NonPublic).First(m => m.Name == copierName); " is 123.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "            var genericSerializer = definingType.GetMethods(BindingFlags.Static | BindingFlags.NonPublic).First(m => m.Name == serializerName); " is 131.
Long Statement,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "            var genericDeserializer = definingType.GetMethods(BindingFlags.Static | BindingFlags.NonPublic).First(m => m.Name == deserializerName); " is 135.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Tuple<>)' BuiltInTypes.DeepCopyTuple' BuiltInTypes.SerializeTuple' BuiltInTypes.DeserializeTuple); " is 136.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Tuple<'>)' BuiltInTypes.DeepCopyTuple' BuiltInTypes.SerializeTuple' BuiltInTypes.DeserializeTuple); " is 137.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Tuple<''>)' BuiltInTypes.DeepCopyTuple' BuiltInTypes.SerializeTuple' BuiltInTypes.DeserializeTuple); " is 138.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Tuple<'''>)' BuiltInTypes.DeepCopyTuple' BuiltInTypes.SerializeTuple' BuiltInTypes.DeserializeTuple); " is 139.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Tuple<''''>)' BuiltInTypes.DeepCopyTuple' BuiltInTypes.SerializeTuple' BuiltInTypes.DeserializeTuple); " is 140.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Tuple<'''''>)' BuiltInTypes.DeepCopyTuple' BuiltInTypes.SerializeTuple' BuiltInTypes.DeserializeTuple); " is 141.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Tuple<''''''>)' BuiltInTypes.DeepCopyTuple' BuiltInTypes.SerializeTuple' BuiltInTypes.DeserializeTuple); " is 142.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Tuple<'''''''>)' BuiltInTypes.DeepCopyTuple' BuiltInTypes.SerializeTuple' BuiltInTypes.DeserializeTuple); " is 143.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ValueTuple<>)' BuiltInTypes.DeepCopyValueTuple' BuiltInTypes.SerializeValueTuple' BuiltInTypes.DeserializeValueTuple); " is 156.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ValueTuple<'>)' BuiltInTypes.DeepCopyValueTuple' BuiltInTypes.SerializeValueTuple' BuiltInTypes.DeserializeValueTuple); " is 157.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ValueTuple<''>)' BuiltInTypes.DeepCopyValueTuple' BuiltInTypes.SerializeValueTuple' BuiltInTypes.DeserializeValueTuple); " is 158.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ValueTuple<'''>)' BuiltInTypes.DeepCopyValueTuple' BuiltInTypes.SerializeValueTuple' BuiltInTypes.DeserializeValueTuple); " is 159.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ValueTuple<''''>)' BuiltInTypes.DeepCopyValueTuple' BuiltInTypes.SerializeValueTuple' BuiltInTypes.DeserializeValueTuple); " is 160.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ValueTuple<'''''>)' BuiltInTypes.DeepCopyValueTuple' BuiltInTypes.SerializeValueTuple' BuiltInTypes.DeserializeValueTuple); " is 161.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ValueTuple<''''''>)' BuiltInTypes.DeepCopyValueTuple' BuiltInTypes.SerializeValueTuple' BuiltInTypes.DeserializeValueTuple); " is 162.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ValueTuple<'''''''>)' BuiltInTypes.DeepCopyValueTuple' BuiltInTypes.SerializeValueTuple' BuiltInTypes.DeserializeValueTuple); " is 163.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(List<>)' BuiltInTypes.CopyGenericList' BuiltInTypes.SerializeGenericList' BuiltInTypes.DeserializeGenericList); " is 149.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(LinkedList<>)' BuiltInTypes.CopyGenericLinkedList' BuiltInTypes.SerializeGenericLinkedList' BuiltInTypes.DeserializeGenericLinkedList); " is 173.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(HashSet<>)' BuiltInTypes.CopyGenericHashSet' BuiltInTypes.SerializeGenericHashSet' BuiltInTypes.DeserializeGenericHashSet); " is 161.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(SortedSet<>)' BuiltInTypes.CopyGenericSortedSet' BuiltInTypes.SerializeGenericSortedSet' BuiltInTypes.DeserializeGenericSortedSet); " is 169.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Stack<>)' BuiltInTypes.CopyGenericStack' BuiltInTypes.SerializeGenericStack' BuiltInTypes.DeserializeGenericStack); " is 153.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Queue<>)' BuiltInTypes.CopyGenericQueue' BuiltInTypes.SerializeGenericQueue' BuiltInTypes.DeserializeGenericQueue); " is 153.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Dictionary<'>)' BuiltInTypes.CopyGenericDictionary' BuiltInTypes.SerializeGenericDictionary' BuiltInTypes.DeserializeGenericDictionary); " is 174.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(SortedList<'>)' BuiltInTypes.CopyGenericSortedList' BuiltInTypes.SerializeGenericSortedList' BuiltInTypes.DeserializeGenericSortedList); " is 174.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(KeyValuePair<'>)' BuiltInTypes.CopyGenericKeyValuePair' BuiltInTypes.SerializeGenericKeyValuePair' BuiltInTypes.DeserializeGenericKeyValuePair); " is 182.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Nullable<>)' BuiltInTypes.CopyGenericNullable' BuiltInTypes.SerializeGenericNullable' BuiltInTypes.DeserializeGenericNullable); " is 165.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Immutable<>)' BuiltInTypes.CopyGenericImmutable' BuiltInTypes.SerializeGenericImmutable' BuiltInTypes.DeserializeGenericImmutable); " is 169.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ImmutableQueue<>)' BuiltInTypes.CopyGenericImmutableQueue' BuiltInTypes.SerializeGenericImmutableQueue' BuiltInTypes.DeserializeGenericImmutableQueue); " is 189.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ImmutableArray<>)' BuiltInTypes.CopyGenericImmutableArray' BuiltInTypes.SerializeGenericImmutableArray' BuiltInTypes.DeserializeGenericImmutableArray); " is 189.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ImmutableList<>)' BuiltInTypes.CopyGenericImmutableList' BuiltInTypes.SerializeGenericImmutableList' BuiltInTypes.DeserializeGenericImmutableList); " is 185.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(TimeSpan)' BuiltInTypes.CopyTimeSpan' BuiltInTypes.SerializeTimeSpan' BuiltInTypes.DeserializeTimeSpan); " is 142.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(DateTimeOffset)' BuiltInTypes.CopyDateTimeOffset' BuiltInTypes.SerializeDateTimeOffset' BuiltInTypes.DeserializeDateTimeOffset); " is 166.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Guid)' BuiltInTypes.CopyGuid' BuiltInTypes.SerializeGuid' BuiltInTypes.DeserializeGuid); " is 126.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(IPAddress)' BuiltInTypes.CopyIPAddress' BuiltInTypes.SerializeIPAddress' BuiltInTypes.DeserializeIPAddress); " is 146.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(IPEndPoint)' BuiltInTypes.CopyIPEndPoint' BuiltInTypes.SerializeIPEndPoint' BuiltInTypes.DeserializeIPEndPoint); " is 150.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(Uri)' BuiltInTypes.CopyUri' BuiltInTypes.SerializeUri' BuiltInTypes.DeserializeUri); " is 122.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(CultureInfo)' BuiltInTypes.CopyCultureInfo' BuiltInTypes.SerializeCultureInfo' BuiltInTypes.DeserializeCultureInfo); " is 154.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ActivationId)' BuiltInTypes.CopyActivationId' BuiltInTypes.SerializeActivationId' BuiltInTypes.DeserializeActivationId); " is 158.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(GrainId)' BuiltInTypes.CopyGrainId' BuiltInTypes.SerializeGrainId' BuiltInTypes.DeserializeGrainId); " is 138.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(ActivationAddress)' BuiltInTypes.CopyActivationAddress' BuiltInTypes.SerializeActivationAddress' BuiltInTypes.DeserializeActivationAddress); " is 178.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(CorrelationId)' BuiltInTypes.CopyCorrelationId' BuiltInTypes.SerializeCorrelationId' BuiltInTypes.DeserializeCorrelationId); " is 162.
Long Statement,Orleans.Serialization,BuiltInTypesSerializationFeaturePopulator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypesSerializationFeaturePopulator.cs,PopulateFeature,The length of the statement  "            feature.AddSerializerDelegates(typeof(SiloAddress)' BuiltInTypes.CopySiloAddress' BuiltInTypes.SerializeSiloAddress' BuiltInTypes.DeserializeSiloAddress); " is 154.
Long Statement,Orleans.Serialization,ILBasedExceptionSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ILBasedExceptionSerializer.cs,Serialize,The length of the statement  "            // Create a nested context which will be written to the outer context at an int-length offset from the current position. " is 120.
Long Statement,Orleans.Serialization,ILBasedExceptionSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ILBasedExceptionSerializer.cs,Serialize,The length of the statement  "            var innerContext = outerContext.CreateNestedContext(position: outerContext.CurrentOffset + sizeof(int)' writer: innerWriter); " is 125.
Long Statement,Orleans.Serialization,ILBasedExceptionSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ILBasedExceptionSerializer.cs,Deserialize,The length of the statement  "            var innerContext = outerContext.CreateNestedContext(position: position' reader: new BinaryTokenStreamReader(innerBytes)); " is 121.
Long Statement,Orleans.Serialization,ILBasedExceptionSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ILBasedExceptionSerializer.cs,Deserialize,The length of the statement  "                        $"Unable to deserialize exception of unavailable type {exception.OriginalTypeName} into expected type {expectedType}. " + " is 121.
Long Statement,Orleans.Serialization,ILBasedExceptionSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ILBasedExceptionSerializer.cs,ReserializeFallback,The length of the statement  "            // Create a nested context which will be written to the outer context at an int-length offset from the current position. " is 120.
Long Statement,Orleans.Serialization,ILSerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ILSerializerGenerator.cs,GenerateSerializer,The length of the statement  "                bool SerializationFieldFilter(FieldInfo field) => !field.IsNotSerialized() && (serializationFieldsFilter?.Invoke(field) ?? true); " is 129.
Long Statement,Orleans.Serialization,ILSerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ILSerializerGenerator.cs,GetConcreteMethod,The length of the statement  "                    $"Unable to find implementation of method {interfaceMethod.DeclaringType}.{interfaceMethod} on type {type} while generating serializer."); " is 138.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,RegisterSerializers,The length of the statement  "            this.Register(typeof(Type).GetType()' typeSerializer.CopyType' typeSerializer.SerializeType' typeSerializer.DeserializeType); " is 125.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,InitializeSerializer,The length of the statement  "            // If the type lacks a Serializer attribute then it's a self-serializing type and all serialization methods must be static " is 122.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,Register,The length of the statement  "            // Register any interfaces this type implements' in order to support passing values that are statically of the interface type " is 125.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,Register,The length of the statement  "            // Register any interfaces this type implements' in order to support passing values that are statically of the interface type " is 125.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,Register,The length of the statement  "                var msg = $"No serialization methods found on type {serializerType.GetParseableName(TypeFormattingOptions.LogFormat)}."; " is 120.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,Register,The length of the statement  "                    $"Inconsistency between serializer and deserializer methods on type {serializerType.GetParseableName(TypeFormattingOptions.LogFormat)}." " is 136.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,GetSerializationMethods,The length of the statement  "            foreach (var method in type.GetMethods(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)) " is 131.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,DeepCopierHelper,The length of the statement  "                            "Frequent allocations to the large object heap can result in frequent gen2 garbage collections and poor system performance. " + " is 127.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,DeepCopierHelper,The length of the statement  "                            $"Large {t.OrleansTypeName()} array of total byte size {Buffer.ByteLength(originalArray)} is being copied. This will result in an allocation on the large object heap. " + " is 170.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,DeepCopierHelper,The length of the statement  "                            "Frequent allocations to the large object heap can result in frequent gen2 garbage collections and poor system performance. " + " is 127.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,ResolveTypeName,The length of the statement  "            if (this.typeKeysToQualifiedNames.TryGetValue(typeName' out var fullyQualifiedName) && this.typeResolver.TryResolveType(fullyQualifiedName' out result)) " is 152.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,ResolveTypeName,The length of the statement  "                // The rank of the array will be the length of the string' minus the index of the [' minus 1; it's the number of commas between the [ and the ] " is 143.
Long Statement,Orleans.Serialization,SerializationManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializationManager.cs,RegisterSerializationProviders,The length of the statement  "                        logger.Error(ErrorCode.SerMgr_ErrorLoadingAssemblyTypes' "Failed to create instance of type: " + type.FullName' exception); " is 123.
Long Statement,Orleans.Serialization,SerializerFeatureExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializerFeatureExtensions.cs,AddKnownType,The length of the statement  "            serializerFeature.KnownTypes.Add(new SerializerKnownTypeMetadata(RuntimeTypeNameFormatter.Format(type)' type.OrleansTypeKeyString())); " is 134.
Long Statement,Orleans.Serialization,SerializerFeatureExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializerFeatureExtensions.cs,AddSerializerDelegates,The length of the statement  "            serializerFeature.SerializerDelegates.Add(new SerializerDelegateMetadata(type' copier' serializer' deserializer' overrideExisting: true)); " is 138.
Long Statement,Orleans.Serialization,SerializerFeatureExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\SerializerFeatureExtensions.cs,AddSerializerDelegates,The length of the statement  "            serializerFeature.SerializerDelegates.Add(new SerializerDelegateMetadata(type' copier' serializer' deserializer' overrideExisting)); " is 132.
Long Statement,Orleans.Serialization,TypeUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\TypeUtilities.cs,IsShallowCopyableInternal,The length of the statement  "                return Array.TrueForAll(t.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)' f => IsOrleansShallowCopyable(f.FieldType)); " is 151.
Long Statement,Orleans.Streams.Core,StreamSubscriptionManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Core\StreamSubscriptionManager.cs,RemoveSubscription,The length of the statement  "            await streamPubSub.UnregisterConsumer(GuidId.GetGuidId(subscriptionId)' StreamId.GetStreamId(streamId.Guid' streamProviderName' streamId.Namespace)' streamProviderName); " is 169.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\PersistentStreamProvider.cs,Init,The length of the statement  "                    .GetService<IStreamSubscriptionManagerAdmin>().GetStreamSubscriptionManager(StreamSubscriptionManagerType.ExplicitSubscribeOnly); " is 129.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\PersistentStreamProvider.cs,Start,The length of the statement  "                    this.pullingAgentManager = await siloRuntime.InitializePullingAgents(this.Name' this.adapterFactory' this.queueAdapter); " is 120.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\PersistentStreamProvider.cs,GetProducerInterface,The length of the statement  "            return new PersistentStreamProducer<T>((StreamImpl<T>)stream' this.runtime' queueAdapter' IsRewindable' this.serializationManager); " is 131.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\PersistentStreamProvider.cs,GetConsumerInterfaceImpl,The length of the statement  "            return new StreamConsumer<T>((StreamImpl<T>)stream' Name' this.runtime' this.runtime.PubSub(this.pubsubOptions.PubSubType)' this.logger' IsRewindable); " is 151.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\PersistentStreamProvider.cs,ExecuteCommand,The length of the statement  "            logger.Warn(0' $"Got command {(PersistentStreamProviderCommand)command} with arg {arg}' but PullingAgentManager is not initialized yet. Ignoring the command."); " is 160.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\PersistentStreamProvider.cs,Participate,The length of the statement  "            lifecycle.Subscribe(OptionFormattingUtilities.Name<PersistentStreamProvider>(this.Name)' this.lifeCycleOptions.InitStage' Init); " is 128.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PersistentStreams\PersistentStreamProvider.cs,Participate,The length of the statement  "            lifecycle.Subscribe(OptionFormattingUtilities.Name<PersistentStreamProvider>(this.Name)' this.lifeCycleOptions.StartStage' Start' Close); " is 137.
Long Statement,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The length of the statement  "            var grainRef = grainFactory.GetGrain<TGrainInterface>(primaryKey' keyExtension' grainClassNamePrefix) as GrainReference; " is 120.
Long Statement,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The length of the statement  "            var grainRef = grainFactory.GetGrain<TGrainInterface>(primaryKey' keyExtension' grainClassNamePrefix) as GrainReference; " is 120.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProducer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducer.cs,RegisterProducer,The length of the statement  "                () => new SimpleMessageStreamProducerExtension(providerRuntime' pubSub' this.loggerFactory' fireAndForgetDelivery' optimizeForImmutableData)); " is 142.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProducer<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducer.cs,OnNextBatchAsync,The length of the statement  "            if (token != null && !IsRewindable) throw new ArgumentNullException("token"' "Passing a non-null token to a non-rewindable IAsyncBatchObserver."); " is 146.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProducerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,AddSubscribers,The length of the statement  "                logger.Debug("{0} AddSubscribers {1} for stream {2}"' providerRuntime.ExecutingEntityIdentity()' Utils.EnumerableToString(newSubscribers)' streamId); " is 149.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProducerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,AddSubscriber,The length of the statement  "                logger.Debug("{0} AddSubscriber {1} for stream {2}"' providerRuntime.ExecutingEntityIdentity()' streamConsumer' streamId); " is 122.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,StreamConsumerExtensionCollection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,DeliverItem,The length of the statement  "                foreach (KeyValuePair<GuidId' Tuple<IStreamConsumerExtension' IStreamFilterPredicateWrapper>> subscriptionKvp in consumers) " is 123.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,StreamConsumerExtensionCollection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,DeliverItem,The length of the statement  "                    Task task = DeliverToRemote(remoteConsumer' streamId' subscriptionKvp.Key' item' optimizeForImmutableData' fireAndForgetDelivery); " is 130.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,StreamConsumerExtensionCollection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,DeliverToRemote,The length of the statement  "                    this.logger.LogWarning(ex' "Failed to deliver message to consumer on {SubscriptionId} for stream {StreamId}."' subscriptionId' streamId); " is 137.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,StreamConsumerExtensionCollection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,NotifyComplete,The length of the statement  "                    this.logger.LogWarning(ex' "Failed to notify consumer of stream completion on {SubscriptionId} for stream {StreamId}."' subscriptionId' streamId); " is 146.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,StreamConsumerExtensionCollection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,NotifyError,The length of the statement  "                    this.logger.LogWarning(ex' "Failed to notify consumer of stream error on {SubscriptionId} for stream {StreamId}. Error: {ErrorException}"' subscriptionId' streamId' exc); " is 170.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProvider,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\SimpleMessageStream\SimpleMessageStreamProvider.cs,GetProducerInterface,The length of the statement  "                this.options.FireAndForgetDelivery' this.options.OptimizeForImmutableData' providerRuntime.PubSub(this.options.PubSubType)' IsRewindable' " is 137.
Long Statement,Orleans.Threading,ThreadPoolThread,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolThread.cs,TrackExecutionStart,The length of the statement  "            CounterStatistic.FindOrCreate(new StatisticName(StatisticNames.RUNTIME_THREADS_ASYNC_AGENT_PERAGENTTYPE' Name)).Increment(); " is 124.
Long Statement,Orleans.Threading,ThreadPoolThread,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolThread.cs,TrackExecutionStop,The length of the statement  "            CounterStatistic.FindOrCreate(new StatisticName(StatisticNames.RUNTIME_THREADS_ASYNC_AGENT_PERAGENTTYPE' Name)).DecrementBy(1); " is 127.
Long Statement,Orleans.Threading,UnfairSemaphore,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolWorkQueue.cs,Release,The length of the statement  "                    short spinnersToRelease = Math.Max((short)0' Math.Min(remainingCount' (short)(currentState.Spinners - currentState.CountForSpinners))); " is 135.
Long Statement,Orleans.Threading,UnfairSemaphore,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolWorkQueue.cs,Release,The length of the statement  "                    short waitersToRelease = Math.Max((short)0' Math.Min(remainingCount' (short)(currentState.Waiters - currentState.CountForWaiters))); " is 132.
Long Statement,Orleans.Threading,UnfairSemaphore,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolWorkQueue.cs,TryUpdateState,The length of the statement  "                    Debug.Assert(newState.CountForSpinners + newState.CountForWaiters <= MaxWorker' "CountForSpinners + CountForWaiters is greater than MaxWorker"); " is 144.
Long Statement,Orleans.Transactions,TransactionalStatusExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Transactions\TransactionalStatus.cs,ConvertToUserException,The length of the statement  "                    return new OrleansTransactionTransientFailureException(TransactionId' $"transaction agent timed out waiting for read-only transaction participant responses ({status})"); " is 169.
Long Statement,Orleans.Transactions,TransactionalStatusExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Transactions\TransactionalStatus.cs,ConvertToUserException,The length of the statement  "                    return new OrleansTransactionInDoubtException(TransactionId' $"transaction agent timed out waiting for read-only transaction participant responses ({status})"); " is 160.
Long Statement,Orleans.Transactions,TransactionContext,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Transactions\TransactionContext.cs,GetRequiredTransactionInfo,The length of the statement  "                throw new OrleansTransactionException($"A transaction context is required for access. Did you forget a [Transaction] attribute?"); " is 130.
Long Statement,Orleans.Transactions,TransactionContext,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Transactions\TransactionContext.cs,GetRequiredTransactionInfo,The length of the statement  "                throw new OrleansTransactionException($"Configuration error: transaction agent is using a different protocol ({result.GetType().FullName}) than the participant expects ({typeof(T).FullName})."); " is 194.
Complex Conditional,Orleans.Runtime,MessageExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\MessageExtensions.cs,IsPing,The conditional expression  "requestContext != null &&                  requestContext.TryGetValue(RequestContext.PING_APPLICATION_HEADER' out var pingObj) &&                  pingObj is bool isPing                  && isPing"  is complex.
Complex Conditional,Orleans.Runtime,ByteArrayBuilder,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\ByteArrayBuilder.cs,Append,The conditional expression  "((arrLen != bufferSize) && (currentOffset > MINIMUM_BUFFER_SIZE) && (arrLen > MINIMUM_BUFFER_SIZE)) || (arrLen > bufferSize)"  is complex.
Complex Conditional,Orleans.CodeGeneration,GrainInterfaceUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\GrainInterfaceUtils.cs,IsGrainInterface,The conditional expression  "t == typeof(IGrain) || t == typeof(IGrainWithGuidKey) || t == typeof(IGrainWithIntegerKey)                  || t == typeof(IGrainWithGuidCompoundKey) || t == typeof(IGrainWithIntegerCompoundKey)"  is complex.
Complex Conditional,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,ParseLimitValues,The conditional expression  "grandchild.LocalName.Equals("Limit") && grandchild.HasAttribute("Name")                      && (grandchild.HasAttribute("SoftLimit") || grandchild.HasAttribute("HardLimit"))"  is complex.
Complex Conditional,Orleans.Providers,ProviderTypeLoader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Providers\ProviderTypeLoader.cs,ProcessType,The conditional expression  "this.alreadyProcessed.Contains(type) || type.IsInterface || type.IsAbstract || !this.condition(type)"  is complex.
Complex Conditional,Orleans.Serialization,TypeUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\TypeUtilities.cs,IsShallowCopyableInternal,The conditional expression  "def == typeof(Nullable<>)                      || def == typeof(Tuple<>)                      || def == typeof(Tuple<'>)                      || def == typeof(Tuple<''>)                      || def == typeof(Tuple<'''>)                      || def == typeof(Tuple<''''>)                      || def == typeof(Tuple<'''''>)                      || def == typeof(Tuple<''''''>)                      || def == typeof(Tuple<'''''''>)"  is complex.
Empty Catch Block,Orleans,ApplicationPartManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\ApplicationParts\ApplicationPartManagerExtensions.cs,WithReferences,The method has an empty catch block.
Empty Catch Block,Orleans,ApplicationPartManagerExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\ApplicationParts\ApplicationPartManagerExtensions.cs,AddFromDependencyContext,The method has an empty catch block.
Empty Catch Block,Orleans,LockReleaser,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\AsyncLock.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Orleans,LifecycleSubject,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Lifecycle\LifecycleSubject.cs,GetStageNames,The method has an empty catch block.
Empty Catch Block,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,ConstructorReset,The method has an empty catch block.
Empty Catch Block,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,ConstructorReset,The method has an empty catch block.
Empty Catch Block,Orleans,OutsideRuntimeClient,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\OutsideRuntimeClient.cs,CurrentDomain_DomainUnload,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,ConsoleText,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Logging\ConsoleText.cs,WriteLine,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,ConsoleText,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Logging\ConsoleText.cs,WriteLine,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,ConsoleText,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Logging\ConsoleText.cs,WriteLine,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,CounterStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\CounterStatistic.cs,GetValueString,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,CounterStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\CounterStatistic.cs,GetDeltaString,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,CounterStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\CounterStatistic.cs,GetDisplayString,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,CounterStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\CounterStatistic.cs,GetDisplayString,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,FloatValueStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\FloatValueStatistic.cs,GetCurrentValue,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,FloatValueStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\FloatValueStatistic.cs,GetCurrentValue,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,SafeExecute,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,SafeExecute,The method has an empty catch block.
Empty Catch Block,Orleans.Internal,OrleansTaskExtentions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Async\TaskExtensions.cs,ExecuteAndIgnoreException,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime.Messaging,Connection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Connection.cs,ProcessIncoming,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime.Messaging,ConnectionManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionManager.cs,Abort,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime.Messaging,ConnectionManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionManager.cs,Close,The method has an empty catch block.
Empty Catch Block,Orleans.Networking.Shared,SocketConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketConnection.cs,Shutdown,The method has an empty catch block.
Empty Catch Block,Orleans.Networking.Shared,SocketExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketExtensions.cs,EnableFastPath,The method has an empty catch block.
Empty Catch Block,Orleans.Networking.Shared,SocketExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketExtensions.cs,EnableFastPath,The method has an empty catch block.
Empty Catch Block,Orleans.Timers.Internal,ExpiredTimers,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\TimerManager.cs,FireTimers,The method has an empty catch block.
Magic Number,Orleans.Runtime,TypeFormattingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.IncludeTypeParameters.GetHashCode();
Magic Number,Orleans.Runtime,TypeFormattingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.IncludeGenericTypeParameters.GetHashCode();
Magic Number,Orleans.Runtime,TypeFormattingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.NestedTypeSeparator.GetHashCode();
Magic Number,Orleans.Runtime,TypeFormattingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (this.NameSuffix != null ? this.NameSuffix.GetHashCode() : 0);
Magic Number,Orleans.Runtime,TypeFormattingOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.IncludeGlobal.GetHashCode();
Magic Number,Orleans.Runtime,TypeUtils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\TypeUtils.cs,GetInnerTypes,The following statement contains a magic number: results.Add(input.Substring(startPos' endPos - startPos + 2));
Magic Number,Orleans.Runtime,OrleansCallBackDataEvent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\DistributedTracing\EventSourceEvents.cs,OnTargetSiloFail,The following statement contains a magic number: WriteEvent(2);
Magic Number,Orleans.Runtime,OrleansCallBackDataEvent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\DistributedTracing\EventSourceEvents.cs,DoCallback,The following statement contains a magic number: WriteEvent(3);
Magic Number,Orleans.Runtime,OrleansOutsideRuntimeClientEvent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\DistributedTracing\EventSourceEvents.cs,ReceiveResponse,The following statement contains a magic number: WriteEvent(2);
Magic Number,Orleans.Runtime,OrleansOutsideRuntimeClientEvent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\DistributedTracing\EventSourceEvents.cs,SendResponse,The following statement contains a magic number: WriteEvent(3);
Magic Number,Orleans.Runtime,AsynchAgent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\AsynchAgent.cs,AsynchAgent,The following statement contains a magic number: type = type.Substring(8);
Magic Number,Orleans.Runtime,GrainClassData,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\GrainClassData.cs,GetTypeCode,The following statement contains a magic number: return (((long)(hash & 0x00FFFFFF)) << 32) + GrainTypeCode;
Magic Number,Orleans.Runtime,SingleRange,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\RingRange.cs,RangePercentage,The following statement contains a magic number: return ((double)RangeSize() / (double)RangeFactory.RING_SIZE) * ((double)100.0);
Magic Number,Orleans.Runtime,TaskSchedulerAgent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Runtime\TaskSchedulerAgent.cs,TaskSchedulerAgent,The following statement contains a magic number: type = type.Substring(8);
Magic Number,Orleans.Runtime,ExponentialHistogramValueStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\HistogramValueStatistic.cs,BucketStart,The following statement contains a magic number: return Math.Pow(2' i);
Magic Number,Orleans.Runtime,ExponentialHistogramValueStatistic,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\HistogramValueStatistic.cs,BucketEnd,The following statement contains a magic number: return Math.Pow(2' i + 1) - 1;
Magic Number,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The following statement contains a magic number: imaEnqueuedByContext = new CounterStatistic[3];
Magic Number,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The following statement contains a magic number: imaEnqueuedByContext[2] = CounterStatistic.FindOrCreate(StatisticNames.MESSAGING_IMA_ENQUEUED_TO_ACTIVATION);
Magic Number,Orleans.Runtime,MessagingProcessingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The following statement contains a magic number: dispatcherReceivedByContext = new CounterStatistic[2];
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: Array.Resize(ref turnsExecutedPerWorkerThreadApplicationTurns' 2 * turnsExecutedPerWorkerThreadApplicationTurns.Length);
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: Array.Resize(ref turnsExecutedPerWorkerThreadSystemTurns' 2 * turnsExecutedPerWorkerThreadSystemTurns.Length);
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: Array.Resize(ref turnsExecutedPerWorkerThreadNull' 2 * turnsExecutedPerWorkerThreadNull.Length);
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The following statement contains a magic number: Array.Resize(ref turnsExecutedPerWorkItemGroup' 2 * turnsExecutedPerWorkItemGroup.Length);
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The following statement contains a magic number: Array.Resize(ref workItemGroupStatuses' 2 * workItemGroupStatuses.Length);
Magic Number,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisStatisticsGroup,The following statement contains a magic number: stableReadyTimeProportion = 0.3;
Magic Number,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The following statement contains a magic number: s.Add(stage' 1000.0 / (cpuPerRequest[stage] + waitTimes[stage]));
Magic Number,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The following statement contains a magic number: lambda.Add(stage' 1000.0 * numberOfRequests[stage] / elapsedWallClock);
Magic Number,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,StageAnalysisInfo,The following statement contains a magic number: double zeta =  Math.Pow(sum3 / (cores - sum1)' 2) / lambda[firstStage];
Magic Number,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,GetMaxWallClock,The following statement contains a magic number: maxTime -= 60 * 1000;
Magic Number,Orleans.Runtime,StageAnalysisStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\StageAnalysisStatisticsGroup.cs,GetMaxWallClock,The following statement contains a magic number: maxTime -= 60 * 1000;
Magic Number,Orleans.Runtime,TimeIntervalThreadCycleCounterBased,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\ThreadCycleStopWatch.cs,TimeIntervalThreadCycleCounterBased,The following statement contains a magic number: cyclesPerSecond = (double)(1024.0 * (double)cyclesPerMillisecond);
Magic Number,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,CheckTimerDelay,The following statement contains a magic number: exceptedTimeWithSlack = exceptedTimeToNexTick + TimeSpan.FromSeconds(3);
Magic Number,Orleans.Runtime,SafeTimerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\SafeTimerBase.cs,CheckTimerDelay,The following statement contains a magic number: exceptedTimeToNexTick >= TimeSpan.FromSeconds(6)
Magic Number,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: int tmp = (result[i] << 24) | (result[i + 1] << 16) | (result[i + 2] << 8) | (result[i + 3]);
Magic Number,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: int tmp = (result[i] << 24) | (result[i + 1] << 16) | (result[i + 2] << 8) | (result[i + 3]);
Magic Number,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: int tmp = (result[i] << 24) | (result[i + 1] << 16) | (result[i + 2] << 8) | (result[i + 3]);
Magic Number,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: int tmp = (result[i] << 24) | (result[i + 1] << 16) | (result[i + 2] << 8) | (result[i + 3]);
Magic Number,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: int tmp = (result[i] << 24) | (result[i + 1] << 16) | (result[i + 2] << 8) | (result[i + 3]);
Magic Number,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,CalculateGuidHash,The following statement contains a magic number: byte[] hash = new byte[16];
Magic Number,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,CalculateGuidHash,The following statement contains a magic number: byte tmp =  (byte)(hash[i % 16] ^ result[i]);
Magic Number,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,CalculateGuidHash,The following statement contains a magic number: hash[i%16] = tmp;
Magic Number,Orleans.Internal,SafeRandom,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\SafeRandom.cs,GetRandom,The following statement contains a magic number: byte[] buffer = new byte[4];
Magic Number,Orleans.CodeGeneration,GenericMethodInvoker,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\CodeGeneration\GenericMethodInvoker.cs,GetHashCode,The following statement contains a magic number: result = (result * 367) ^ type.GetHashCode();
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 10000;
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: numberInput = trimmedInput.Remove(trimmedInput.Length - 2).Trim();
Magic Number,Orleans.Configuration.Validators,LoadSheddingValidator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Configuration\Validators\LoadSheddingValidator.cs,ValidateConfiguration,The following statement contains a magic number: loadSheddingOptions.LoadSheddingLimit > 100
Magic Number,Orleans.Streams,StreamHandshakeToken,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\Internal\StreamHandshakeToken.cs,GetHashCode,The following statement contains a magic number: return (GetType().GetHashCode() * 397) ^ (Token != null ? Token.GetHashCode() : 0);
Magic Number,Orleans.Streams,ImplicitStreamSubscriberTable,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\ImplicitStreamSubscriberTable.cs,MakeSubscriptionGuid,The following statement contains a magic number: short s2 = BitConverter.ToInt16(namespaceHashByes' 2);
Magic Number,Orleans.Streams,PubSubPublisherState,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Streams\PubSub\PubSubPublisherState.cs,GetHashCode,The following statement contains a magic number: return ((Stream != null ? Stream.GetHashCode() : 0) * 397) ^ (Producer != null ? Producer.GetHashCode() : 0);
Magic Number,Orleans.Runtime.Messaging,MessageSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\MessageSerializer.cs,TryRead,The following statement contains a magic number: var bodyLength = BinaryPrimitives.ReadInt32LittleEndian(lengthBytes.Slice(4));
Magic Number,Orleans.Runtime.Messaging,MessageSerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Messaging\MessageSerializer.cs,Write,The following statement contains a magic number: BinaryPrimitives.WriteInt32LittleEndian(lengthFields.Slice(4)' bodyLength);
Magic Number,Orleans.Runtime.Messaging,Connection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Connection.cs,RerouteMessages,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(2));
Magic Number,Orleans.Runtime.Messaging,ConnectionManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionManager.cs,Close,The following statement contains a magic number: await Task.Delay(10);
Magic Number,Orleans.Runtime.Messaging,ConnectionManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionManager.cs,Close,The following statement contains a magic number: ++cycles > 100 && cycles % 500 == 0 && this.ConnectionCount > 0
Magic Number,Orleans.Runtime.Messaging,ConnectionManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionManager.cs,Close,The following statement contains a magic number: ++cycles > 100 && cycles % 500 == 0 && this.ConnectionCount > 0
Magic Number,Orleans.Runtime.Messaging,ConnectionPreamble,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionPreamble.cs,Write,The following statement contains a magic number: var outputWriter = new PrefixingBufferWriter<byte' PipeWriter>(sizeof(int)' 1024' MemoryPool<byte>.Shared);
Magic Number,Orleans.Runtime.Messaging,ConnectionPreamble,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionPreamble.cs,WriteLength,The following statement contains a magic number: Span<byte> lengthSpan = stackalloc byte[4];
Magic Number,Orleans.Runtime.Messaging,ConnectionPreamble,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionPreamble.cs,Read,The following statement contains a magic number: buffer.Length < 4
Magic Number,Orleans.Runtime.Messaging,ConnectionPreamble,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionPreamble.cs,Read,The following statement contains a magic number: Span<byte> lengthBytes = stackalloc byte[4];
Magic Number,Orleans.Runtime.Messaging,ConnectionPreamble,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionPreamble.cs,Read,The following statement contains a magic number: b.Slice(0' 4).CopyTo(lengthBytes);
Magic Number,Orleans.Runtime.Messaging,ConnectionPreamble,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\ConnectionPreamble.cs,Read,The following statement contains a magic number: b = b.Slice(4);
Magic Number,Orleans.MultiCluster,MultiClusterConfiguration,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\MultiCluster\MultiClusterConfiguration.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (this.Clusters != null ? this.Clusters.GetHashCode() : 0);
Magic Number,Orleans.MultiCluster,MultiClusterConfiguration,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\MultiCluster\MultiClusterConfiguration.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (this.Comment != null ? this.Comment.GetHashCode() : 0);
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: var buffer = new char[13];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[12] = encode32Chars[id & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[12] = encode32Chars[id & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[11] = encode32Chars[(id >> 5) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[11] = encode32Chars[(id >> 5) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[11] = encode32Chars[(id >> 5) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[10] = encode32Chars[(id >> 10) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[10] = encode32Chars[(id >> 10) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[10] = encode32Chars[(id >> 10) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[9] = encode32Chars[(id >> 15) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[9] = encode32Chars[(id >> 15) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[9] = encode32Chars[(id >> 15) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[8] = encode32Chars[(id >> 20) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[8] = encode32Chars[(id >> 20) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[8] = encode32Chars[(id >> 20) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[7] = encode32Chars[(id >> 25) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[7] = encode32Chars[(id >> 25) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[7] = encode32Chars[(id >> 25) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[6] = encode32Chars[(id >> 30) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[6] = encode32Chars[(id >> 30) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[6] = encode32Chars[(id >> 30) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[5] = encode32Chars[(id >> 35) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[5] = encode32Chars[(id >> 35) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[5] = encode32Chars[(id >> 35) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[4] = encode32Chars[(id >> 40) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[4] = encode32Chars[(id >> 40) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[4] = encode32Chars[(id >> 40) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[3] = encode32Chars[(id >> 45) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[3] = encode32Chars[(id >> 45) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[3] = encode32Chars[(id >> 45) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[2] = encode32Chars[(id >> 50) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[2] = encode32Chars[(id >> 50) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[2] = encode32Chars[(id >> 50) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[1] = encode32Chars[(id >> 55) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[1] = encode32Chars[(id >> 55) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[0] = encode32Chars[(id >> 60) & 31];
Magic Number,Orleans.Networking.Shared,CorrelationIdGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\CorrelationIdGenerator.cs,GenerateId,The following statement contains a magic number: buffer[0] = encode32Chars[(id >> 60) & 31];
Magic Number,Orleans.Networking.Shared,SocketConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketConnection.cs,SocketConnection,The following statement contains a magic number: var inputOptions = new PipeOptions(MemoryPool' PipeScheduler.ThreadPool' scheduler' maxReadBufferSize.Value' maxReadBufferSize.Value / 2' useSynchronizationContext: false);
Magic Number,Orleans.Networking.Shared,SocketConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketConnection.cs,SocketConnection,The following statement contains a magic number: var outputOptions = new PipeOptions(MemoryPool' scheduler' PipeScheduler.ThreadPool' maxWriteBufferSize.Value' maxWriteBufferSize.Value / 2' useSynchronizationContext: false);
Magic Number,Orleans.Networking.Shared,SocketConnectionListener,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketConnectionListener.cs,Bind,The following statement contains a magic number: listenSocket.Listen(512);
Magic Number,Orleans.Networking.Shared,SocketExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketExtensions.cs,EnableFastPath,The following statement contains a magic number: osVersion.Major > 6 || osVersion.Major == 6 && osVersion.Minor >= 2
Magic Number,Orleans.Networking.Shared,SocketExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketExtensions.cs,EnableFastPath,The following statement contains a magic number: osVersion.Major > 6 || osVersion.Major == 6 && osVersion.Minor >= 2
Magic Number,Orleans.Networking.Shared,SocketExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\SocketExtensions.cs,EnableFastPath,The following statement contains a magic number: osVersion.Major > 6 || osVersion.Major == 6 && osVersion.Minor >= 2
Magic Number,Orleans.Networking.Shared,TransportConnection,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Networking\Shared\TransportConnection.cs,ExtraFeatureSet,The following statement contains a magic number: MaybeExtra = new List<KeyValuePair<Type' object>>(2);
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,TryReadSimpleType,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.True:                      result = true;                      break;                  case SerializationTokenType.False:                      result = false;                      break;                  case SerializationTokenType.Null:                      result = null;                      break;                  case SerializationTokenType.Object:                      result = new object();                      break;                  case SerializationTokenType.Int:                      result = @this.ReadInt();                      break;                  case SerializationTokenType.Uint:                      result = @this.ReadUInt();                      break;                  case SerializationTokenType.Short:                      result = @this.ReadShort();                      break;                  case SerializationTokenType.Ushort:                      result = @this.ReadUShort();                      break;                  case SerializationTokenType.Long:                      result = @this.ReadLong();                      break;                  case SerializationTokenType.Ulong:                      result = @this.ReadULong();                      break;                  case SerializationTokenType.Byte:                      result = @this.ReadByte();                      break;                  case SerializationTokenType.Sbyte:                      result = @this.ReadSByte();                      break;                  case SerializationTokenType.Float:                      result = @this.ReadFloat();                      break;                  case SerializationTokenType.Double:                      result = @this.ReadDouble();                      break;                  case SerializationTokenType.Decimal:                      result = @this.ReadDecimal();                      break;                  case SerializationTokenType.String:                      result = @this.ReadString();                      break;                  case SerializationTokenType.Character:                      result = @this.ReadChar();                      break;                  case SerializationTokenType.Guid:  #if NETSTANDARD2_1                      if (@this is BinaryTokenStreamReader2 reader)                      {                          Span<byte> bytes = stackalloc byte[16];                          reader.ReadBytes(in bytes);                          result = new Guid(bytes);                      }                      else                      {                          var bytes = @this.ReadBytes(16);                          result = new Guid(bytes);                      }  #else                      var bytes = @this.ReadBytes(16);                      result = new Guid(bytes);  #endif                      break;                  case SerializationTokenType.Date:                      result = DateTime.FromBinary(@this.ReadLong());                      break;                  case SerializationTokenType.TimeSpan:                      result = new TimeSpan(@this.ReadLong());                      break;                  case SerializationTokenType.GrainId:                      result = @this.ReadGrainId();                      break;                  case SerializationTokenType.ActivationId:                      result = @this.ReadActivationId();                      break;                  case SerializationTokenType.SiloAddress:                      result = @this.ReadSiloAddress();                      break;                  case SerializationTokenType.ActivationAddress:                      result = @this.ReadActivationAddress();                      break;                  case SerializationTokenType.IpAddress:                      result = @this.ReadIPAddress();                      break;                  case SerializationTokenType.IpEndPoint:                      result = @this.ReadIPEndPoint();                      break;                  case SerializationTokenType.CorrelationId:                      result = new CorrelationId(@this.ReadLong());                      break;                  default:                      result = null;                      return false;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReaderExtensinons,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token)              {                  case SerializationTokenType.Boolean:                      return typeof(bool);                  case SerializationTokenType.Int:                      return typeof(int);                  case SerializationTokenType.Short:                      return typeof(short);                  case SerializationTokenType.Long:                      return typeof(long);                  case SerializationTokenType.Sbyte:                      return typeof(sbyte);                  case SerializationTokenType.Uint:                      return typeof(uint);                  case SerializationTokenType.Ushort:                      return typeof(ushort);                  case SerializationTokenType.Ulong:                      return typeof(ulong);                  case SerializationTokenType.Byte:                      return typeof(byte);                  case SerializationTokenType.Float:                      return typeof(float);                  case SerializationTokenType.Double:                      return typeof(double);                  case SerializationTokenType.Decimal:                      return typeof(decimal);                  case SerializationTokenType.String:                      return typeof(string);                  case SerializationTokenType.Character:                      return typeof(char);                  case SerializationTokenType.Guid:                      return typeof(Guid);                  case SerializationTokenType.Date:                      return typeof(DateTime);                  case SerializationTokenType.TimeSpan:                      return typeof(TimeSpan);                  case SerializationTokenType.IpAddress:                      return typeof(IPAddress);                  case SerializationTokenType.IpEndPoint:                      return typeof(IPEndPoint);                  case SerializationTokenType.GrainId:                      return typeof(GrainId);                  case SerializationTokenType.ActivationId:                      return typeof(ActivationId);                  case SerializationTokenType.SiloAddress:                      return typeof(SiloAddress);                  case SerializationTokenType.ActivationAddress:                      return typeof(ActivationAddress);                  case SerializationTokenType.CorrelationId:                      return typeof(CorrelationId);                  case SerializationTokenType.Request:                      return typeof(InvokeMethodRequest);                  case SerializationTokenType.Response:                      return typeof(Response);                  case SerializationTokenType.StringObjDict:                      return typeof(Dictionary<string' object>);                  case SerializationTokenType.Object:                      return typeof(Object);                  case SerializationTokenType.Tuple + 1:                      return typeof(Tuple<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Tuple + 2:                      return typeof(Tuple<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Tuple + 3:                      return typeof(Tuple<''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 3));                  case SerializationTokenType.Tuple + 4:                      return typeof(Tuple<'''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 4));                  case SerializationTokenType.Tuple + 5:                      return typeof(Tuple<''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 5));                  case SerializationTokenType.Tuple + 6:                      return typeof(Tuple<'''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 6));                  case SerializationTokenType.Tuple + 7:                      return typeof(Tuple<''''''>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 7));                  case SerializationTokenType.Array + 1:                      var et1 = @this.ReadFullTypeHeader(serializationManager);                      return et1.MakeArrayType();                  case SerializationTokenType.Array + 2:                      var et2 = @this.ReadFullTypeHeader(serializationManager);                      return et2.MakeArrayType(2);                  case SerializationTokenType.Array + 3:                      var et3 = @this.ReadFullTypeHeader(serializationManager);                      return et3.MakeArrayType(3);                  case SerializationTokenType.Array + 4:                      var et4 = @this.ReadFullTypeHeader(serializationManager);                      return et4.MakeArrayType(4);                  case SerializationTokenType.Array + 5:                      var et5 = @this.ReadFullTypeHeader(serializationManager);                      return et5.MakeArrayType(5);                  case SerializationTokenType.Array + 6:                      var et6 = @this.ReadFullTypeHeader(serializationManager);                      return et6.MakeArrayType(6);                  case SerializationTokenType.Array + 7:                      var et7 = @this.ReadFullTypeHeader(serializationManager);                      return et7.MakeArrayType(7);                  case SerializationTokenType.Array + 8:                      var et8 = @this.ReadFullTypeHeader(serializationManager);                      return et8.MakeArrayType(8);                  case SerializationTokenType.List:                      return typeof(List<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Dictionary:                      return typeof(Dictionary<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.KeyValuePair:                      return typeof(KeyValuePair<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.Set:                      return typeof(HashSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.SortedList:                      return typeof(SortedList<'>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 2));                  case SerializationTokenType.SortedSet:                      return typeof(SortedSet<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Stack:                      return typeof(Stack<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Queue:                      return typeof(Queue<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.LinkedList:                      return typeof(LinkedList<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.Nullable:                      return typeof(Nullable<>).MakeGenericType(@this.ReadGenericArguments(serializationManager' 1));                  case SerializationTokenType.ByteArray:                      return typeof(byte[]);                  case SerializationTokenType.ShortArray:                      return typeof(short[]);                  case SerializationTokenType.IntArray:                      return typeof(int[]);                  case SerializationTokenType.LongArray:                      return typeof(long[]);                  case SerializationTokenType.UShortArray:                      return typeof(ushort[]);                  case SerializationTokenType.UIntArray:                      return typeof(uint[]);                  case SerializationTokenType.ULongArray:                      return typeof(ulong[]);                  case SerializationTokenType.FloatArray:                      return typeof(float[]);                  case SerializationTokenType.DoubleArray:                      return typeof(double[]);                  case SerializationTokenType.CharArray:                      return typeof(char[]);                  case SerializationTokenType.BoolArray:                      return typeof(bool[]);                  case SerializationTokenType.SByteArray:                      return typeof(sbyte[]);                  case SerializationTokenType.NamedType:                      var typeName = @this.ReadString();                      try                      {                          var type = serializationManager.ResolveTypeName(typeName);                          return type;                      }                      catch (TypeAccessException ex)                      {                          throw new TypeAccessException("Named type \"" + typeName + "\" is invalid: " + ex.Message);                      }                  default:                      break;              }
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadDecimal,The following statement contains a magic number: var buff = CheckLength(4 * sizeof(int)' out offset);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadDecimal,The following statement contains a magic number: var raw = new int[4];
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadDecimal,The following statement contains a magic number: i < 4
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: var buff = CheckLength(16' out offset);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: i < 12
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: var v4Bytes = new byte[4];
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: v4Bytes[i] = buff[offset + 12 + i];
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: i < 4
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader.cs,ReadGuid,The following statement contains a magic number: byte[] bytes = ReadBytes(16);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt16,The following statement contains a magic number: const int width = 2;
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt16,The following statement contains a magic number: return (ushort)(b1 | (b2 << 8));
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt32,The following statement contains a magic number: const int width = 4;
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt32,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt32,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt32,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt64,The following statement contains a magic number: const int width = 8;
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24)                         | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24)                         | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24)                         | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24)                         | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24)                         | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24)                         | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadUInt64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24)                         | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadIPAddress,The following statement contains a magic number: Span<byte> buff = stackalloc byte[16];
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadIPAddress,The following statement contains a magic number: i < 12
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadIPAddress,The following statement contains a magic number: var v4Bytes = new byte[4];
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadIPAddress,The following statement contains a magic number: v4Bytes[i] = buff[12 + i];
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadIPAddress,The following statement contains a magic number: i < 4
Magic Number,Orleans.Serialization,BinaryTokenStreamReader2,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamReader2.cs,ReadGuid,The following statement contains a magic number: byte[] bytes = ReadBytes(16);
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens[typeof(Tuple<'>).TypeHandle] = SerializationTokenType.Tuple + 2;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens[typeof(Tuple<''>).TypeHandle] = SerializationTokenType.Tuple + 3;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens[typeof(Tuple<'''>).TypeHandle] = SerializationTokenType.Tuple + 4;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens[typeof(Tuple<''''>).TypeHandle] = SerializationTokenType.Tuple + 5;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens[typeof(Tuple<'''''>).TypeHandle] = SerializationTokenType.Tuple + 6;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens[typeof(Tuple<''''''>).TypeHandle] = SerializationTokenType.Tuple + 7;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter.cs,Write,The following statement contains a magic number: i < 12
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter2<TBufferWriter>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter2.cs,BinaryTokenStreamWriter2,The following statement contains a magic number: typeTokens[typeof(Tuple<'>)] = SerializationTokenType.Tuple + 2;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter2<TBufferWriter>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter2.cs,BinaryTokenStreamWriter2,The following statement contains a magic number: typeTokens[typeof(Tuple<''>)] = SerializationTokenType.Tuple + 3;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter2<TBufferWriter>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter2.cs,BinaryTokenStreamWriter2,The following statement contains a magic number: typeTokens[typeof(Tuple<'''>)] = SerializationTokenType.Tuple + 4;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter2<TBufferWriter>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter2.cs,BinaryTokenStreamWriter2,The following statement contains a magic number: typeTokens[typeof(Tuple<''''>)] = SerializationTokenType.Tuple + 5;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter2<TBufferWriter>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter2.cs,BinaryTokenStreamWriter2,The following statement contains a magic number: typeTokens[typeof(Tuple<'''''>)] = SerializationTokenType.Tuple + 6;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter2<TBufferWriter>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter2.cs,BinaryTokenStreamWriter2,The following statement contains a magic number: typeTokens[typeof(Tuple<''''''>)] = SerializationTokenType.Tuple + 7;
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter2<TBufferWriter>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BinaryTokenStreamWriter2.cs,Write,The following statement contains a magic number: i < 12
Magic Number,Orleans.Serialization,BuiltInTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\BuiltInTypes.cs,DeserializeGuid,The following statement contains a magic number: var bytes = context.StreamReader.ReadBytes(16);
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadArgument,The following statement contains a magic number: switch (index)              {                  case 0:                      this.il.Emit(OpCodes.Ldarg_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Ldarg_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Ldarg_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Ldarg_3);                      break;                  default:                      if (index < 0xFF)                      {                          this.il.Emit(OpCodes.Ldarg_S' (byte)index);                      }                      else                      {                          this.il.Emit(OpCodes.Ldarg' index);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadArgument,The following statement contains a magic number: switch (index)              {                  case 0:                      this.il.Emit(OpCodes.Ldarg_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Ldarg_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Ldarg_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Ldarg_3);                      break;                  default:                      if (index < 0xFF)                      {                          this.il.Emit(OpCodes.Ldarg_S' (byte)index);                      }                      else                      {                          this.il.Emit(OpCodes.Ldarg' index);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      this.il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      this.il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      this.il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      this.il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      this.il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      this.il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value < 0xFF)                      {                          this.il.Emit(OpCodes.Ldc_I4_S' (byte) value);                      }                      else                      {                          this.il.Emit(OpCodes.Ldc_I4' value);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      this.il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      this.il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      this.il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      this.il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      this.il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      this.il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value < 0xFF)                      {                          this.il.Emit(OpCodes.Ldc_I4_S' (byte) value);                      }                      else                      {                          this.il.Emit(OpCodes.Ldc_I4' value);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      this.il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      this.il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      this.il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      this.il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      this.il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      this.il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value < 0xFF)                      {                          this.il.Emit(OpCodes.Ldc_I4_S' (byte) value);                      }                      else                      {                          this.il.Emit(OpCodes.Ldc_I4' value);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      this.il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      this.il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      this.il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      this.il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      this.il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      this.il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value < 0xFF)                      {                          this.il.Emit(OpCodes.Ldc_I4_S' (byte) value);                      }                      else                      {                          this.il.Emit(OpCodes.Ldc_I4' value);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      this.il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      this.il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      this.il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      this.il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      this.il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      this.il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value < 0xFF)                      {                          this.il.Emit(OpCodes.Ldc_I4_S' (byte) value);                      }                      else                      {                          this.il.Emit(OpCodes.Ldc_I4' value);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      this.il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      this.il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      this.il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      this.il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      this.il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      this.il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value < 0xFF)                      {                          this.il.Emit(OpCodes.Ldc_I4_S' (byte) value);                      }                      else                      {                          this.il.Emit(OpCodes.Ldc_I4' value);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      this.il.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      this.il.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      this.il.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      this.il.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      this.il.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      this.il.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      if (value < 0xFF)                      {                          this.il.Emit(OpCodes.Ldc_I4_S' (byte) value);                      }                      else                      {                          this.il.Emit(OpCodes.Ldc_I4' value);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,StoreLocal,The following statement contains a magic number: switch (index)              {                  case 0:                      this.il.Emit(OpCodes.Stloc_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Stloc_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Stloc_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Stloc_3);                      break;                  default:                      if (index < 0xFF)                      {                          this.il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          this.il.Emit(OpCodes.Stloc' loc);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,StoreLocal,The following statement contains a magic number: switch (index)              {                  case 0:                      this.il.Emit(OpCodes.Stloc_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Stloc_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Stloc_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Stloc_3);                      break;                  default:                      if (index < 0xFF)                      {                          this.il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          this.il.Emit(OpCodes.Stloc' loc);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadLocal,The following statement contains a magic number: switch (index)              {                  case 0:                      this.il.Emit(OpCodes.Ldloc_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Ldloc_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Ldloc_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Ldloc_3);                      break;                  default:                      if (index < 0xFF)                      {                          this.il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          this.il.Emit(OpCodes.Ldloc' loc);                      }                        break;              }
Magic Number,Orleans.Serialization,ILDelegateBuilder<TDelegate>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Serialization\IlDelegateBuilder.cs,LoadLocal,The following statement contains a magic number: switch (index)              {                  case 0:                      this.il.Emit(OpCodes.Ldloc_0);                      break;                  case 1:                      this.il.Emit(OpCodes.Ldloc_1);                      break;                  case 2:                      this.il.Emit(OpCodes.Ldloc_2);                      break;                  case 3:                      this.il.Emit(OpCodes.Ldloc_3);                      break;                  default:                      if (index < 0xFF)                      {                          this.il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          this.il.Emit(OpCodes.Ldloc' loc);                      }                        break;              }
Magic Number,Orleans.Threading,ExecutingWorkItemsTracker,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolExecutor.cs,GetThreadSlot,The following statement contains a magic number: const int cacheLineSize = 64;
Magic Number,Orleans.Threading,UnfairSemaphore,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolWorkQueue.cs,Wait,The following statement contains a magic number: const int spinLimitPerProcessor = 50;
Magic Number,Orleans.Threading,FastRandom,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolWorkQueue.cs,FastRandom,The following statement contains a magic number: _w = 88675123;
Magic Number,Orleans.Threading,FastRandom,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolWorkQueue.cs,FastRandom,The following statement contains a magic number: _y = 362436069;
Magic Number,Orleans.Threading,FastRandom,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolWorkQueue.cs,FastRandom,The following statement contains a magic number: _z = 521288629;
Magic Number,Orleans.Threading,FastRandom,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolWorkQueue.cs,Next,The following statement contains a magic number: uint t = _x ^ (_x << 11);
Magic Number,Orleans.Threading,FastRandom,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolWorkQueue.cs,Next,The following statement contains a magic number: _w = _w ^ (_w >> 19) ^ (t ^ (t >> 8));
Magic Number,Orleans.Threading,FastRandom,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Threading\ThreadPoolWorkQueue.cs,Next,The following statement contains a magic number: _w = _w ^ (_w >> 19) ^ (t ^ (t >> 8));
Magic Number,Orleans.Timers.Internal,TimerManager<T>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Timers\TimerManager.cs,EnsureCurrentThreadHasQueue,The following statement contains a magic number: var newQueues = new ThreadLocalQueue[queues.Length * 2];
Missing Default,Orleans.Runtime,MessagingStatisticsGroup,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Statistics\MessagingStatisticsGroup.cs,OnMessageExpired,The following switch statement is missing a default case: switch (phase)              {                  case Phase.Send:                      expiredAtSendCounter.Increment();                      break;                  case Phase.Receive:                      expiredAtReceiveCounter.Increment();                      break;                  case Phase.Dispatch:                      expiredAtDispatchCounter.Increment();                      break;                  case Phase.Invoke:                      expiredAtInvokeCounter.Increment();                      break;                  case Phase.Respond:                      expiredAtRespondCounter.Increment();                      break;              }
Missing Default,Orleans.Runtime,TraceTelemetryConsumer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Telemetry\Consumers\TraceTelemetryConsumer.cs,TrackTrace,The following switch statement is missing a default case: switch (severity)              {                  case Severity.Error:                      Trace.TraceError(message);                      break;                  case Severity.Info:                      Trace.TraceInformation(message);                      break;                  case Severity.Verbose:                  case Severity.Verbose2:                  case Severity.Verbose3:                      Trace.WriteLine(message);                      break;                  case Severity.Warning:                      Trace.TraceWarning(message);                      break;                  case Severity.Off:                      return;              }
Missing Default,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,ToIPEndPoint,The following switch statement is missing a default case: switch (uri.Scheme)              {                  case "gwy.tcp":                      return new System.Net.IPEndPoint(System.Net.IPAddress.Parse(uri.Host)' uri.Port);              }
Missing Default,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,ToSiloAddress,The following switch statement is missing a default case: switch (uri.Scheme)              {                  case "gwy.tcp":                      return SiloAddress.New(uri.ToIPEndPoint()' uri.Segments.Length > 1 ? int.Parse(uri.Segments[1]) : 0);              }
Missing Default,Orleans.Runtime,Utils,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Utils\Utils.cs,ToGatewayAddress,The following switch statement is missing a default case: switch (uri.Scheme)              {                  case "gwy.tcp":                      return SiloAddress.New(uri.ToIPEndPoint()' 0);              }
Missing Default,Orleans.Providers,ProviderStateManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Providers\ProviderStateManager.cs,PresetState,The following switch statement is missing a default case: switch (state)              {                  case ProviderState.None:                      throw new ProviderStateException("Provider state can not be set to none.");                    case ProviderState.Initialized:                      switch(State)                      {                          case ProviderState.None:                              return true;                      }                      break;                    case ProviderState.Started:                      switch(State)                      {                          case ProviderState.None:                              throw new ProviderStateException("Trying to start a provider that hasn't been initialized.");                          case ProviderState.Initialized:                              return true;                          case ProviderState.Closed:                              throw new ProviderStateException("Trying to start a provider that has been closed.");                      }                      break;                    case ProviderState.Closed:                      switch (State)                      {                          case ProviderState.None:                              throw new ProviderStateException("Trying to close a provider that hasn't been initialized.");                          case ProviderState.Initialized:                          case ProviderState.Started:                              return true;                      }                      return true;              }
Missing Default,Orleans.Providers,ProviderStateManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Providers\ProviderStateManager.cs,PresetState,The following switch statement is missing a default case: switch(State)                      {                          case ProviderState.None:                              return true;                      }
Missing Default,Orleans.Providers,ProviderStateManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Providers\ProviderStateManager.cs,PresetState,The following switch statement is missing a default case: switch(State)                      {                          case ProviderState.None:                              throw new ProviderStateException("Trying to start a provider that hasn't been initialized.");                          case ProviderState.Initialized:                              return true;                          case ProviderState.Closed:                              throw new ProviderStateException("Trying to start a provider that has been closed.");                      }
Missing Default,Orleans.Providers,ProviderStateManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Core\Providers\ProviderStateManager.cs,PresetState,The following switch statement is missing a default case: switch (State)                      {                          case ProviderState.None:                              throw new ProviderStateException("Trying to close a provider that hasn't been initialized.");                          case ProviderState.Initialized:                          case ProviderState.Started:                              return true;                      }
