Implementation smell,Namespace,Class,File,Method,Description
Long Method,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The method has 128 lines of code.
Long Method,Orleans.CodeGenerator,WellKnownTypes,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\WellKnownTypes.cs,FromCompilation,The method has 131 lines of code.
Long Method,Orleans.CodeGenerator.Generators,GrainReferenceGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainReferenceGenerator.cs,GenerateInvokeMethods,The method has 136 lines of code.
Long Method,Orleans.CodeGenerator.Utilities,Identifier,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\Identifier.cs,IsCSharpKeyword,The method has 110 lines of code.
Complex Method,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,IsSerializable,Cyclomatic complexity of the method is 22
Complex Method,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,InspectGrainInterface,Cyclomatic complexity of the method is 8
Complex Method,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,ExpandAssembliesWithGeneratedCode,Cyclomatic complexity of the method is 12
Complex Method,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,Cyclomatic complexity of the method is 33
Complex Method,Orleans.CodeGenerator.Compatibility,OrleansLegacyCompat,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\OrleansLegacyCompat.cs,OrleansTypeKeyString,Cyclomatic complexity of the method is 8
Complex Method,Orleans.CodeGenerator.Compatibility,RoslynTypeNameFormatter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\RoslynTypeNameFormatter.cs,Format,Cyclomatic complexity of the method is 10
Complex Method,Orleans.CodeGenerator.Generators,GrainReferenceGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainReferenceGenerator.cs,GenerateInvokeMethods,Cyclomatic complexity of the method is 14
Complex Method,Orleans.CodeGenerator.Generators,GrainReferenceGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainReferenceGenerator.cs,GetInvokeOptions,Cyclomatic complexity of the method is 14
Complex Method,Orleans.CodeGenerator.Generators,SerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\SerializerGenerator.cs,GetFields,Cyclomatic complexity of the method is 12
Complex Method,Orleans.CodeGenerator.Generators,SerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\SerializerGenerator.cs,ShouldSerializeField,Cyclomatic complexity of the method is 8
Complex Method,Orleans.CodeGenerator.Generators,SerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\SerializerGenerator.cs,IsOrleansShallowCopyable,Cyclomatic complexity of the method is 8
Complex Method,Orleans.CodeGenerator.Utilities,SymbolSyntaxExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\SymbolSyntaxExtensions.cs,ToSyntaxKind,Cyclomatic complexity of the method is 17
Long Parameter List,Orleans.CodeGenerator.Compatibility,RoslynTypeNameFormatter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\RoslynTypeNameFormatter.cs,Format,The method has 5 parameters. Parameters: builder' type' isElementType' style' depth
Long Parameter List,Orleans.CodeGenerator.Generators,GrainInterfaceCommon,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainInterfaceCommon.cs,GenerateGrainInterfaceAndMethodSwitch,The method has 5 parameters. Parameters: types' grainType' methodIdArgument' generateMethodHandler' composeInterfaceBlock
Long Parameter List,Orleans.CodeGenerator.Generators,GrainMethodInvokerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainMethodInvokerGenerator.cs,GenerateInvokeForMethod,The method has 5 parameters. Parameters: wellKnownTypes' castGrain' method' arguments' genericInvokerFields
Long Parameter List,Orleans.CodeGenerator.Generators,FieldInfoMember,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\SerializerGenerator.cs,FieldInfoMember,The method has 5 parameters. Parameters: generator' model' targetType' field' ordinal
Long Identifier,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,,The length of the parameter considerForCodeGenerationAttribute is 34.
Long Identifier,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,,The length of the parameter assembliesWithForcedSerializability is 35.
Long Identifier,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,,The length of the parameter AssembliesExcludedFromCodeGeneration is 36.
Long Identifier,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,,The length of the parameter AssembliesExcludedFromMetadataGeneration is 40.
Long Identifier,Orleans.CodeGenerator.Generators,GrainMethodInvokerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainMethodInvokerGenerator.cs,GenerateInvokeMethod,The length of the parameter callThrowInterfaceNotImplemented is 32.
Long Identifier,Orleans.CodeGenerator.Generators,GrainReferenceGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainReferenceGenerator.cs,GenerateGetMethodNameMethod,The length of the parameter callThrowInterfaceNotImplemented is 32.
Long Identifier,Orleans.CodeGenerator.Generators,FieldInfoMember,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\SerializerGenerator.cs,GetGetter,The length of the parameter serializationContextExpression is 30.
Long Statement,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,IsSerializable,The length of the statement  "                if (log.IsEnabled(LogLevel.Debug)) log.LogTrace($"Type {type} is declared in an assembly in which all types are considered serializable"); " is 138.
Long Statement,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,IsSerializable,The length of the statement  "                if (log.IsEnabled(LogLevel.Debug)) log.LogTrace($"Type {type} was discovered on a grain method signature or in another serializable type"); " is 139.
Long Statement,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,Analyze,The length of the statement  "                        throw new ArgumentException($"Unrecognized argument type in attribute [{attr.AttributeClass.Name}({param.ToCSharpString()})]"); " is 127.
Long Statement,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,Analyze,The length of the statement  "                    var prop = attr.NamedArguments.Where(a => a.Key.Equals("TreatTypesAsSerializable")).Select(a => a.Value).FirstOrDefault(); " is 122.
Long Statement,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,Analyze,The length of the statement  "                            throw new ArgumentException($"Unrecognized argument type in attribute [{attr.AttributeClass.Name}({typeParam.ToCSharpString()})]"); " is 131.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,AddAssemblyMetadata,The length of the statement  "                    this.log.LogDebug($"Skipping adding known types for assembly {asm.Identity.Name} since a referenced assembly already includes its types."); " is 139.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ValidateModel,The length of the statement  "                        $"Found {this.wellKnownTypes.ConsiderForCodeGenerationAttribute} with ThrowOnFailure set for type {required}' but a serializer" + " is 129.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,GenerateSyntax,The length of the statement  "                (generated' serializerType.SerializerTypeSyntax) = this.serializerGenerator.GenerateClass(this.semanticModelForAccessibility' serializerType' this.log); " is 152.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,GenerateSyntax,The length of the statement  "            // Group the generated code by namespace since serialized types' such as the generated GrainReference classes must have a stable namespace. " is 139.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,GenerateSyntax,The length of the statement  "            List<MemberDeclarationSyntax> GetNamespace(Dictionary<INamespaceSymbol' List<MemberDeclarationSyntax>> namespaces' INamespaceSymbol ns) " is 135.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessGrainInterface,The length of the statement  "                this.log.LogDebug($"Found grain interface {type.ToDisplayString()}{(accessible ? string.Empty : "' but it is inaccessible")}"); " is 127.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessGrainInterface,The length of the statement  "                                      " Support for generic methods requires the project to reference Microsoft.Orleans.Core' but this project does not reference it."; " is 129.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessGrainClass,The length of the statement  "                this.log.LogDebug($"Found grain class {type.ToDisplayString()}{(accessible ? string.Empty : "' but it is inaccessible")}"); " is 123.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The length of the statement  "                if (this.log.IsEnabled(LogLevel.Trace)) this.log.LogTrace($"{nameof(ProcessSerializableType)} skipping abstract type {type}"); " is 126.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The length of the statement  "                if (this.log.IsEnabled(LogLevel.Trace)) this.log.LogTrace($"{nameof(ProcessSerializableType)} skipping abstract type {type}"); " is 126.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The length of the statement  "                if (this.log.IsEnabled(LogLevel.Trace)) this.log.LogTrace($"{nameof(ProcessSerializableType)} skipping inaccessible type {type}"); " is 130.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The length of the statement  "                if (this.log.IsEnabled(LogLevel.Trace)) this.log.LogTrace($"{nameof(ProcessSerializableType)} skipping Exception type {type}"); " is 127.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The length of the statement  "                if (this.log.IsEnabled(LogLevel.Trace)) this.log.LogTrace($"{nameof(ProcessSerializableType)} skipping Delegate type {type}"); " is 126.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The length of the statement  "                if (this.log.IsEnabled(LogLevel.Trace)) this.log.LogTrace($"{nameof(ProcessSerializableType)} skipping IAddressable type {type}"); " is 130.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The length of the statement  "                if (this.log.IsEnabled(LogLevel.Trace)) this.log.LogTrace($"{nameof(ProcessSerializableType)} skipping serializer generation for self-serializing type {type}"); " is 160.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The length of the statement  "                    this.log.LogTrace($"{nameof(ProcessSerializableType)} type {type} is a generated type and no serializer will be generated for it"); " is 131.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The length of the statement  "                    this.log.LogTrace($"{nameof(ProcessSerializableType)} type {type} is a static type and no serializer will be generated for it"); " is 128.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The length of the statement  "                if (this.log.IsEnabled(LogLevel.Trace)) this.log.LogTrace($"{nameof(ProcessSerializableType)} skipping type with Delegate parameter constraint' {type}"); " is 153.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ProcessSerializableType,The length of the statement  "                            this.log.LogTrace($"{nameof(ProcessSerializableType)} skipping type {type} with inaccessible field type {field.Type} (field: {field})"); " is 136.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,AddKnownType,The length of the statement  "            // Many types which will never have a serializer generated are still added to known types so that they can be used to identify the type " is 135.
Long Statement,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,AddKnownType,The length of the statement  "            // in a serialized payload. For example' when serializing List<SomeAbstractType>' SomeAbstractType must be known. The same applies to " is 133.
Long Statement,Orleans.CodeGenerator.Compatibility,OrleansLegacyCompat,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\OrleansLegacyCompat.cs,GetSimpleTypeName,The length of the statement  "            if (named == null || named.IsGenericType) return GetSimpleTypeName(fullName != null && fullName(type) ? GetFullName(type) : type.Name); " is 135.
Long Statement,Orleans.CodeGenerator.Compatibility,OrleansLegacyCompat,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\OrleansLegacyCompat.cs,GetFullName,The length of the statement  "            return RoslynTypeNameFormatter.Format(t' RoslynTypeNameFormatter.Style.FullName); // ?? (t is ITypeParameterSymbol) ? t.Name : t.GetNamespaceName() + "." + t.Name; " is 163.
Long Statement,Orleans.CodeGenerator.Compatibility,RoslynTypeNameFormatter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\RoslynTypeNameFormatter.cs,Format,The length of the statement  "                    throw new NotSupportedException($"Type symbol {type} of type {type.GetType()} (interfaces: {string.Join("' "' type.AllInterfaces.Select(i => i.ToString()))}) is not supported"); " is 177.
Long Statement,Orleans.CodeGenerator.Generators,FeaturePopulatorGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\FeaturePopulatorGenerator.cs,GenerateSyntax,The length of the statement  "                .AddAttributeLists(AttributeList(SingletonSeparatedList(GeneratedCodeAttributeGenerator.GetGeneratedCodeAttributeSyntax(wellKnownTypes)))); " is 139.
Long Statement,Orleans.CodeGenerator.Generators,FeaturePopulatorGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\FeaturePopulatorGenerator.cs,GeneratePopulateMethod,The length of the statement  "            var interfaceMethod = wellKnownTypes.IFeaturePopulator_1.Construct(wellKnownTypes.GrainInterfaceFeature).Method("Populate"); " is 124.
Long Statement,Orleans.CodeGenerator.Generators,FeaturePopulatorGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\FeaturePopulatorGenerator.cs,GeneratePopulateMethod,The length of the statement  "            var interfaceMethod = wellKnownTypes.IFeaturePopulator_1.Construct(wellKnownTypes.GrainClassFeature).Method("Populate"); " is 120.
Long Statement,Orleans.CodeGenerator.Generators,FeaturePopulatorGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\FeaturePopulatorGenerator.cs,GeneratePopulateMethod,The length of the statement  "            var interfaceMethod = wellKnownTypes.IFeaturePopulator_1.Construct(wellKnownTypes.SerializerFeature).Method("Populate"); " is 120.
Long Statement,Orleans.CodeGenerator.Generators,FeaturePopulatorGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\FeaturePopulatorGenerator.cs,GeneratePopulateMethod,The length of the statement  "                var overrideExisting = serializerType.OverrideExistingSerializer ? SyntaxKind.TrueLiteralExpression : SyntaxKind.FalseLiteralExpression; " is 136.
Long Statement,Orleans.CodeGenerator.Generators,FeaturePopulatorGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\FeaturePopulatorGenerator.cs,GeneratePopulateMethod,The length of the statement  "                                Argument(RoslynTypeNameFormatter.Format(knownType.Type' RoslynTypeNameFormatter.Style.RuntimeTypeNameFormatter).ToLiteralExpression())' " is 135.
Long Statement,Orleans.CodeGenerator.Generators,GrainInterfaceCommon,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainInterfaceCommon.cs,GenerateGrainInterfaceAndMethodSwitch,The length of the statement  "                var methodSwitchStatements = composeInterfaceBlock(type' SwitchStatement(methodIdArgument).AddSections(methodCases.ToArray())); " is 127.
Long Statement,Orleans.CodeGenerator.Generators,GrainInterfaceCommon,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainInterfaceCommon.cs,GenerateMethodNotImplementedFunction,The length of the statement  "            var formatAsHexadecimal = InterpolationFormatClause(Token(SyntaxKind.ColonToken)' Token(TriviaList()' SyntaxKind.InterpolatedStringTextToken' "X"' "X"' TriviaList())); " is 167.
Long Statement,Orleans.CodeGenerator.Generators,GrainInterfaceCommon,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainInterfaceCommon.cs,GenerateMethodNotImplementedFunction,The length of the statement  "                    InterpolatedStringText().WithTextToken(Token(TriviaList()' SyntaxKind.InterpolatedStringTextToken' interfaceIdText' interfaceIdText' TriviaList()))' " is 148.
Long Statement,Orleans.CodeGenerator.Generators,GrainInterfaceCommon,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainInterfaceCommon.cs,GenerateMethodNotImplementedFunction,The length of the statement  "            var throwInterfaceNotImplemented = LocalFunctionStatement(PredefinedType(Token(SyntaxKind.VoidKeyword))' Identifier(functionName)) " is 130.
Long Statement,Orleans.CodeGenerator.Generators,GrainInterfaceCommon,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainInterfaceCommon.cs,GenerateMethodNotImplementedFunction,The length of the statement  "                .WithParameterList(ParameterList(SingletonSeparatedList(Parameter(Identifier(interfaceIdVariableName)).WithType(PredefinedType(Token(SyntaxKind.IntKeyword)))))) " is 160.
Long Statement,Orleans.CodeGenerator.Generators,GrainInterfaceCommon,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainInterfaceCommon.cs,GenerateInterfaceNotImplementedFunction,The length of the statement  "            var formatAsHexadecimal = InterpolationFormatClause(Token(SyntaxKind.ColonToken)' Token(TriviaList()' SyntaxKind.InterpolatedStringTextToken' "X"' "X"' TriviaList())); " is 167.
Long Statement,Orleans.CodeGenerator.Generators,GrainInterfaceCommon,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainInterfaceCommon.cs,GenerateInterfaceNotImplementedFunction,The length of the statement  "                    InterpolatedStringText().WithTextToken(Token(TriviaList()' SyntaxKind.InterpolatedStringTextToken' interfaceIdText' interfaceIdText' TriviaList()))' " is 148.
Long Statement,Orleans.CodeGenerator.Generators,GrainInterfaceCommon,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainInterfaceCommon.cs,GenerateInterfaceNotImplementedFunction,The length of the statement  "                    InterpolatedStringText().WithTextToken(Token(TriviaList()' SyntaxKind.InterpolatedStringTextToken' methodIdText' methodIdText' TriviaList()))' " is 142.
Long Statement,Orleans.CodeGenerator.Generators,GrainInterfaceCommon,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainInterfaceCommon.cs,GenerateInterfaceNotImplementedFunction,The length of the statement  "            var throwInterfaceNotImplemented = LocalFunctionStatement(PredefinedType(Token(SyntaxKind.VoidKeyword))' Identifier(functionName)) " is 130.
Long Statement,Orleans.CodeGenerator.Generators,GrainMethodInvokerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainMethodInvokerGenerator.cs,GenerateInvokeMethod,The length of the statement  "            var invokeMethod = wellKnownTypes.IGrainMethodInvoker.Method("Invoke"' wellKnownTypes.IAddressable' wellKnownTypes.InvokeMethodRequest); " is 136.
Long Statement,Orleans.CodeGenerator.Generators,GrainMethodInvokerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainMethodInvokerGenerator.cs,GenerateExtensionInvokeMethod,The length of the statement  "            var invokeMethod = wellKnownTypes.IGrainExtensionMethodInvoker.Method("Invoke"' wellKnownTypes.IGrainExtension' wellKnownTypes.InvokeMethodRequest); " is 148.
Long Statement,Orleans.CodeGenerator.Generators,GrainMethodInvokerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainMethodInvokerGenerator.cs,GenerateInvokeMethod,The length of the statement  "                                .WithInitializer(EqualsValueClause(ParenthesizedExpression(CastExpression(interfaceType.ToTypeSyntax()' grainArgument)))))); " is 124.
Long Statement,Orleans.CodeGenerator.Generators,GrainMethodInvokerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainMethodInvokerGenerator.cs,GenerateInvokeMethod,The length of the statement  "                methodType => GenerateInvokeForMethod(wellKnownTypes' IdentifierName("casted")' methodType' argumentsVariable' genericInvokerFields)' " is 133.
Long Statement,Orleans.CodeGenerator.Generators,GrainMethodInvokerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainMethodInvokerGenerator.cs,GenerateGenericInvokerFields,The length of the statement  "            if (!(wellKnownTypes.GenericMethodInvoker is WellKnownTypes.Some genericMethodInvoker)) return new Dictionary<IMethodSymbol' GenericInvokerField>(); " is 148.
Long Statement,Orleans.CodeGenerator.Generators,GrainReferenceGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainReferenceGenerator.cs,GenerateClass,The length of the statement  "                        GrainInterfaceCommon.GenerateInterfaceIdProperty(this.wellKnownTypes' description).AddModifiers(Token(SyntaxKind.OverrideKeyword))' " is 131.
Long Statement,Orleans.CodeGenerator.Generators,GrainReferenceGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainReferenceGenerator.cs,GenerateClass,The length of the statement  "                        GrainInterfaceCommon.GenerateInterfaceVersionProperty(this.wellKnownTypes' description).AddModifiers(Token(SyntaxKind.OverrideKeyword))' " is 136.
Long Statement,Orleans.CodeGenerator.Generators,GrainReferenceGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainReferenceGenerator.cs,GenerateInvokeMethods,The length of the statement  "                var parameters = method.Parameters.Select((p' i) => (p' GetSanitizedName(p' i))).ToList<(IParameterSymbol Symbol' string Name)>(); " is 130.
Long Statement,Orleans.CodeGenerator.Generators,GrainReferenceGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainReferenceGenerator.cs,GenerateInvokeMethods,The length of the statement  "                                InvocationExpression(wellKnownTypes.GrainFactoryBase.ToDisplayString().ToIdentifierName().Member("CheckGrainObserverParamInternal")) " is 132.
Long Statement,Orleans.CodeGenerator.Generators,GrainReferenceGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainReferenceGenerator.cs,GenerateInvokeMethods,The length of the statement  "                    // If the method doesn't return a Task type (eg' it returns ValueTask<T>)' then we must make an async method and await the invocation result. " is 141.
Long Statement,Orleans.CodeGenerator.Generators,GrainReferenceGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainReferenceGenerator.cs,GenerateInvokeMethods,The length of the statement  "                var paramDeclaration = method.Parameters.Select((p' i) => Parameter(GetSanitizedName(p' i).ToIdentifier()).WithType(p.Type.ToTypeSyntax())); " is 140.
Long Statement,Orleans.CodeGenerator.Generators,GrainReferenceGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\GrainReferenceGenerator.cs,GenerateInvokeMethods,The length of the statement  "                            InvocationExpression(identifier.Member("AsReference".ToGenericName().AddTypeArgumentListArguments(arg.Type.ToTypeSyntax())))' " is 125.
Long Statement,Orleans.CodeGenerator.Generators,SerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\SerializerGenerator.cs,GenerateConstructor,The length of the statement  "                            AssignmentExpression(SyntaxKind.SimpleAssignmentExpression' IdentifierName(field.SetterFieldName)' getValueSetterInvoke))); " is 123.
Long Statement,Orleans.CodeGenerator.Generators,SerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\SerializerGenerator.cs,GenerateConstructor,The length of the statement  "                            AssignmentExpression(SyntaxKind.SimpleAssignmentExpression' IdentifierName(field.SetterFieldName)' getReferenceSetterInvoke))); " is 127.
Long Statement,Orleans.CodeGenerator.Generators,SerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\SerializerGenerator.cs,GenerateDeserializerMethod,The length of the statement  "                var typedResult = ParenthesizedExpression(CastExpression(wellKnownTypes.IOnDeserialized.ToTypeSyntax()' resultVariable)); " is 121.
Long Statement,Orleans.CodeGenerator.Generators,SerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\SerializerGenerator.cs,GetEmptyConstructor,The length of the statement  "                .FirstOrDefault(method => method.MethodKind == MethodKind.Constructor && method.Parameters.Length == 0 && model.IsAccessible(0' method)); " is 137.
Long Statement,Orleans.CodeGenerator.Utilities,SymbolExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\SymbolExtensions.cs,GetAttribute,The length of the statement  "            if (attributes.Length > 1) throw new InvalidOperationException($"Symbol {symbol} has {attributes.Length} attributes of type {attributeType}."); " is 143.
Long Statement,Orleans.CodeGenerator.Utilities,SymbolExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\SymbolExtensions.cs,Member,The length of the statement  "                    $"Type {type} does not have a member of kind {typeof(TSymbol)} named {name}{(predicate == null ? String.Empty : " matching the specified predicate.")}"); " is 153.
Long Statement,Orleans.CodeGenerator.Utilities,SymbolExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\SymbolExtensions.cs,Member,The length of the statement  "                    $"Type {type} has multiple members of kind {typeof(TSymbol)} named {name}{(predicate == null ? String.Empty : " matching the specified predicate.")}"); " is 151.
Long Statement,Orleans.CodeGenerator.Utilities,SymbolSyntaxExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\SymbolSyntaxExtensions.cs,GetDeclarationSyntax,The length of the statement  "            if (!(method.ReturnType is INamedTypeSymbol returnType)) throw new InvalidOperationException($"Return type \"{method.ReturnType?.GetType()}\" for method {method} is not a named type."); " is 185.
Long Statement,Orleans.CodeGenerator.Utilities,SymbolSyntaxExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\SymbolSyntaxExtensions.cs,GetDeclarationSyntax,The length of the statement  "                    .WithParameterList(ParameterList().AddParameters(method.Parameters.Select(p => Parameter(p.Name.ToIdentifier()).WithType(p.Type.ToTypeSyntax())).ToArray())); " is 157.
Long Statement,Orleans.CodeGenerator.Utilities,SymbolSyntaxExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\SymbolSyntaxExtensions.cs,GetArrayTypeSyntax,The length of the statement  "            return ArrayType(type' SingletonList(ArrayRankSpecifier(SingletonSeparatedList<ExpressionSyntax>(OmittedArraySizeExpression())))); " is 130.
Complex Conditional,Orleans.CodeGenerator.Generators,SerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\SerializerGenerator.cs,IsOrleansShallowCopyable,The conditional expression  "wellKnownTypes.TimeSpan.Equals(type)                  || wellKnownTypes.IPAddress.Equals(type)                  || wellKnownTypes.IPEndPoint.Equals(type)                  || wellKnownTypes.SiloAddress.Equals(type)                  || wellKnownTypes.GrainId.Equals(type)                  || wellKnownTypes.ActivationId.Equals(type)                  || wellKnownTypes.ActivationAddress.Equals(type)                  || wellKnownTypes.CorrelationId is WellKnownTypes.Some correlationIdType && correlationIdType.Value.Equals(type)                  || wellKnownTypes.CancellationToken.Equals(type)"  is complex.
Magic Number,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,ExpandAssembliesWithGeneratedCode,The following statement contains a magic number: attr.ConstructorArguments.Length >= 2 && attr.ConstructorArguments[1].Value is bool val
Magic Number,Orleans.CodeGenerator.Compatibility,OrleansLegacyCompat,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\OrleansLegacyCompat.cs,CalculateIdHash,The following statement contains a magic number: var tmp = (result[i] << 24) | (result[i + 1] << 16) | (result[i + 2] << 8) | result[i + 3];
Magic Number,Orleans.CodeGenerator.Compatibility,OrleansLegacyCompat,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\OrleansLegacyCompat.cs,CalculateIdHash,The following statement contains a magic number: var tmp = (result[i] << 24) | (result[i + 1] << 16) | (result[i + 2] << 8) | result[i + 3];
Magic Number,Orleans.CodeGenerator.Compatibility,OrleansLegacyCompat,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\OrleansLegacyCompat.cs,CalculateIdHash,The following statement contains a magic number: var tmp = (result[i] << 24) | (result[i + 1] << 16) | (result[i + 2] << 8) | result[i + 3];
Magic Number,Orleans.CodeGenerator.Compatibility,OrleansLegacyCompat,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\OrleansLegacyCompat.cs,CalculateIdHash,The following statement contains a magic number: var tmp = (result[i] << 24) | (result[i + 1] << 16) | (result[i + 2] << 8) | result[i + 3];
Magic Number,Orleans.CodeGenerator.Compatibility,OrleansLegacyCompat,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\OrleansLegacyCompat.cs,CalculateIdHash,The following statement contains a magic number: var tmp = (result[i] << 24) | (result[i + 1] << 16) | (result[i + 2] << 8) | result[i + 3];
Magic Number,Orleans.CodeGenerator.Generators,FeaturePopulatorGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\FeaturePopulatorGenerator.cs,GenerateSyntax,The following statement contains a magic number: var className = CodeGenerator.ToolName + Guid.NewGuid().ToString("N").Substring(0' 10) + ClassSuffix;
Magic Number,Orleans.CodeGenerator.Model,TypeTypeKeyEqualityComparer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Model\SerializationTypeDescriptions.cs,GetHashCode,The following statement contains a magic number: return ((obj.Type != null ? obj.Type.GetHashCode() : 0) * 397);
Magic Number,Orleans.CodeGenerator.Utilities,SymbolSyntaxExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\SymbolSyntaxExtensions.cs,GetBindingFlagsParenthesizedExpressionSyntax,The following statement contains a magic number: bindingFlags.Length < 2
Missing Default,Orleans.CodeGenerator.Analysis,CompilationAnalyzer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Analysis\CompilationAnalyzer.cs,ExpandType,The following switch statement is missing a default case: switch (s)                  {                      case IArrayTypeSymbol array:                          foreach (var t in ExpandTypeInternal(array.ElementType' emitted)) yield return t;                          break;                      case INamedTypeSymbol named:                          foreach (var p in named.TypeArguments)                              foreach (var t in ExpandTypeInternal(p' emitted))                                  yield return t;                          break;                  }
Missing Default,Orleans.CodeGenerator,CodeGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\CodeGenerator.cs,ValidForKnownTypes,The following switch statement is missing a default case: switch (type.TypeKind)              {                  case TypeKind.Unknown:                  case TypeKind.Array:                  case TypeKind.Delegate:                  case TypeKind.Dynamic:                  case TypeKind.Error:                  case TypeKind.Module:                  case TypeKind.Pointer:                  case TypeKind.TypeParameter:                  case TypeKind.Submission:                  {                      return false;                  }              }
Missing Default,Orleans.CodeGenerator.Compatibility,RoslynTypeNameFormatter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Compatibility\RoslynTypeNameFormatter.cs,AddAssembly,The following switch statement is missing a default case: switch (style)                      {                          case Style.FullName:                              builder.Append("' ");                              builder.Append(assembly.Identity.GetDisplayName());                              break;                          case Style.RuntimeTypeNameFormatter:                              var isSystemAssembly = type.ContainingAssembly.GetTypeByMetadataName("System.Int32") != null;                              if (isSystemAssembly) return;                              builder.Append("'");                              builder.Append(assembly.Identity.Name);                              break;                      }
Missing Default,Orleans.CodeGenerator.Generators,SerializerGenerator,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Generators\SerializerGenerator.cs,IsOrleansShallowCopyable,The following switch statement is missing a default case: switch (type.SpecialType)              {                  case SpecialType.System_Boolean:                  case SpecialType.System_Char:                  case SpecialType.System_SByte:                  case SpecialType.System_Byte:                  case SpecialType.System_Int16:                  case SpecialType.System_UInt16:                  case SpecialType.System_Int32:                  case SpecialType.System_UInt32:                  case SpecialType.System_Int64:                  case SpecialType.System_UInt64:                  case SpecialType.System_Decimal:                  case SpecialType.System_Single:                  case SpecialType.System_Double:                  case SpecialType.System_String:                  case SpecialType.System_DateTime:                      return true;              }
Missing Default,Orleans.CodeGenerator.Utilities,SymbolExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\SymbolExtensions.cs,GetDeclaredTypes,The following switch statement is missing a default case: switch (member)                      {                          case INamespaceSymbol nestedNamespace:                              foreach (var nested in GetDeclaredTypes(nestedNamespace)) yield return nested;                              break;                          case ITypeSymbol type:                              if (type is INamedTypeSymbol namedType) yield return namedType;                              foreach (var nested in GetDeclaredTypes(type)) yield return nested;                              break;                      }
Missing Default,Orleans.CodeGenerator.Utilities,SymbolSyntaxExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\SymbolSyntaxExtensions.cs,AddAccessibilityModifiers,The following switch statement is missing a default case: switch (accessibility)              {                  case Accessibility.Public:                      syntax = With(syntax' SyntaxKind.PublicKeyword);                      break;                  case Accessibility.Private:                      syntax = With(syntax' SyntaxKind.PrivateKeyword);                      break;                  case Accessibility.Internal:                      syntax = With(syntax' SyntaxKind.InternalKeyword);                      break;                  case Accessibility.Protected:                      syntax = With(syntax' SyntaxKind.ProtectedKeyword);                      break;                  case Accessibility.ProtectedOrInternal:                      syntax = With(With(syntax' SyntaxKind.ProtectedKeyword)' SyntaxKind.InternalKeyword);                      break;                  case Accessibility.ProtectedAndInternal:                      syntax = With(With(syntax' SyntaxKind.PrivateKeyword)' SyntaxKind.ProtectedKeyword);                      break;              }
Missing Default,Orleans.CodeGenerator.Utilities,SymbolSyntaxExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.CodeGenerator\Utilities\SymbolSyntaxExtensions.cs,Member,The following switch statement is missing a default case: switch (member.Body)              {                  case MethodCallExpression methodCall:                      if (genericTypes != null && genericTypes.Length > 0)                      {                          return instance.Member(methodCall.Method.Name' genericTypes);                      }                        return instance.Member(methodCall.Method.Name.ToIdentifierName());                  case MemberExpression memberAccess:                      if (genericTypes != null && genericTypes.Length > 0)                      {                          return instance.Member(memberAccess.Member.Name' genericTypes);                      }                        return instance.Member(memberAccess.Member.Name.ToIdentifierName());              }
