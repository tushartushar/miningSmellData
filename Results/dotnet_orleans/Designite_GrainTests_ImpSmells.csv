Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,GrainTests.util,LimitedConcurrencyLevelTaskScheduler,D:\research\architectureSmells\repos\dotnet_orleans\Samples\1.x\UnitTesting.Minimal\GrainTests\util\LimitedConcurrencyTaskScheduler.cs,,The length of the parameter _currentThreadIsProcessingItems is 31.
Long Statement,GrainTests,TestCollector,D:\research\architectureSmells\repos\dotnet_orleans\Samples\1.x\UnitTesting.Minimal\GrainTests\TestCollector.cs,mockResultShouldBe10,The length of the statement  "            collectorMock.Setup(coll => coll.GrainFactory.GetGrain<IWorker>(It.IsAny<long>()' It.IsAny<string>())).Returns(workerMock.Object); " is 130.
Long Statement,GrainTests,TestCollector,D:\research\architectureSmells\repos\dotnet_orleans\Samples\1.x\UnitTesting.Minimal\GrainTests\TestCollector.cs,mockResultShouldBe10,The length of the statement  "            var mockStream = Mock.Of<IAsyncStream<long>>(str => str.OnNextAsync(It.IsAny<long>()' null) == Task.Delay(10) && str.OnCompletedAsync() == Task.Delay(10)); " is 155.
Long Statement,GrainTests,TestCollector,D:\research\architectureSmells\repos\dotnet_orleans\Samples\1.x\UnitTesting.Minimal\GrainTests\TestCollector.cs,mockResultShouldBe10,The length of the statement  "            collectorMock.Protected().Setup<IStreamProvider>("GetStreamProvider"' ItExpr.IsAny<string>()).Returns(Mock.Of<IStreamProvider>(sp => sp.GetStream<long>(It.IsAny<Guid>()' It.IsAny<string>()) == mockStream)); " is 206.
Long Statement,GrainTests,TestCollector,D:\research\architectureSmells\repos\dotnet_orleans\Samples\1.x\UnitTesting.Minimal\GrainTests\TestCollector.cs,mockResultShouldBe10,The length of the statement  "            await testTask; //need to await the testTask to ensure that all the sub tasks have run and that errors are propagated to the test framework " is 139.
Magic Number,GrainTests,TestCollector,D:\research\architectureSmells\repos\dotnet_orleans\Samples\1.x\UnitTesting.Minimal\GrainTests\TestCollector.cs,mockResultShouldBe10,The following statement contains a magic number: workerMock.Setup(wor => wor.GetAnswer()).Returns(async delegate              {                  await Task.Delay(1000);                  return 1; //Return a 1 from all workers fro testing              });
Magic Number,GrainTests,TestCollector,D:\research\architectureSmells\repos\dotnet_orleans\Samples\1.x\UnitTesting.Minimal\GrainTests\TestCollector.cs,mockResultShouldBe10,The following statement contains a magic number: var mockStream = Mock.Of<IAsyncStream<long>>(str => str.OnNextAsync(It.IsAny<long>()' null) == Task.Delay(10) && str.OnCompletedAsync() == Task.Delay(10));
Magic Number,GrainTests,TestCollector,D:\research\architectureSmells\repos\dotnet_orleans\Samples\1.x\UnitTesting.Minimal\GrainTests\TestCollector.cs,mockResultShouldBe10,The following statement contains a magic number: var mockStream = Mock.Of<IAsyncStream<long>>(str => str.OnNextAsync(It.IsAny<long>()' null) == Task.Delay(10) && str.OnCompletedAsync() == Task.Delay(10));
Magic Number,GrainTests,TestCollector,D:\research\architectureSmells\repos\dotnet_orleans\Samples\1.x\UnitTesting.Minimal\GrainTests\TestCollector.cs,mockResultShouldBe10,The following statement contains a magic number: var testTask = await Task.Factory.StartNew(async delegate              {                  // run the tests and make assertions                  var result = await collector.GetSum();                  Assert.Equal(10' result);                    Mock.Get(mockStream).Verify(str => str.OnNextAsync(It.IsAny<long>()' null)' Times.Exactly(10));                }' CancellationToken.None'      TaskCreationOptions.None'      scheduler);
Magic Number,GrainTests,TestCollector,D:\research\architectureSmells\repos\dotnet_orleans\Samples\1.x\UnitTesting.Minimal\GrainTests\TestCollector.cs,mockResultShouldBe10,The following statement contains a magic number: var testTask = await Task.Factory.StartNew(async delegate              {                  // run the tests and make assertions                  var result = await collector.GetSum();                  Assert.Equal(10' result);                    Mock.Get(mockStream).Verify(str => str.OnNextAsync(It.IsAny<long>()' null)' Times.Exactly(10));                }' CancellationToken.None'      TaskCreationOptions.None'      scheduler);
