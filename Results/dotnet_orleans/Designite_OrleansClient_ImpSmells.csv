Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,OrleansClient,Program,C:\repos\dotnet_orleans\Samples\AccountTransfer.NetCore\src\OrleansClient\Program.cs,StartClientWithRetries,The length of the parameter initializeAttemptsBeforeFailing is 31.
Long Statement,OrleansClient,Program,C:\repos\dotnet_orleans\Samples\AccountTransfer.NetCore\src\OrleansClient\Program.cs,DoClientWork,The length of the statement  "            Console.WriteLine($"\n\nWe transfered 100 credits from {from} to {to}.\n{from} balance: {fromBalance}\n{to} balance: {toBalance}\n\n"); " is 135.
Magic Number,OrleansClient,Program,C:\repos\dotnet_orleans\Samples\AccountTransfer.NetCore\src\OrleansClient\Program.cs,StartClientWithRetries,The following statement contains a magic number: while (true)              {                  try                  {                      var config = ClientConfiguration.LocalhostSilo();                      client = new ClientBuilder()                          .UseConfiguration(config)                          .AddApplicationPartsFromReferences(typeof(IATMGrain).Assembly)                          // this is a bug Microsoft.Orleans.Transactions should not be necessary on the client.                          .AddApplicationPartsFromReferences(typeof(ITransactionalStateConfiguration).Assembly)                          .ConfigureLogging(logging => logging.AddConsole())                          .Build();                        await client.Connect();                      Console.WriteLine("Client successfully connect to silo host");                      break;                  }                  catch (SiloUnavailableException)                  {                      attempt++;                      Console.WriteLine($"Attempt {attempt} of {initializeAttemptsBeforeFailing} failed to initialize the Orleans client.");                      if (attempt > initializeAttemptsBeforeFailing)                      {                          throw;                      }                      await Task.Delay(TimeSpan.FromSeconds(4));                  }              }
Magic Number,OrleansClient,Program,C:\repos\dotnet_orleans\Samples\AccountTransfer.NetCore\src\OrleansClient\Program.cs,DoClientWork,The following statement contains a magic number: await atm.Transfer(from' to' 100);
