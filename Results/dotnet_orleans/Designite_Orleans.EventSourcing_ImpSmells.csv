Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Orleans.EventSourcing.CustomStorage,LogConsistencyProvider,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\CustomStorage\LogConsistencyProvider.cs,MakeLogViewAdaptor,The method has 5 parameters. Parameters: hostgrain' initialstate' graintypename' storageProvider' services
Long Parameter List,Orleans.EventSourcing,JournaledGrain<TGrainState;TEventBase>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\JournaledGrain.cs,InstallAdaptor,The method has 5 parameters. Parameters: factory' initialState' graintypename' storageProvider' services
Long Parameter List,Orleans.EventSourcing.LogStorage,DefaultAdaptorFactory,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\LogStorage\DefaultAdaptorFactory.cs,MakeLogViewAdaptor,The method has 5 parameters. Parameters: hostgrain' initialstate' graintypename' storageProvider' services
Long Parameter List,Orleans.EventSourcing.LogStorage,LogConsistencyProvider,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\LogStorage\LogConsistencyProvider.cs,MakeLogViewAdaptor,The method has 5 parameters. Parameters: hostGrain' initialState' grainTypeName' storageProvider' services
Long Parameter List,Orleans.EventSourcing.LogStorage,LogViewAdaptor<TLogView;TLogEntry>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\LogStorage\LogViewAdaptor.cs,LogViewAdaptor,The method has 5 parameters. Parameters: host' initialState' globalStorageProvider' grainTypeName' services
Long Parameter List,Orleans.EventSourcing.StateStorage,DefaultAdaptorFactory,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\StateStorage\DefaultAdaptorFactory.cs,MakeLogViewAdaptor,The method has 5 parameters. Parameters: hostgrain' initialstate' graintypename' storageProvider' services
Long Parameter List,Orleans.EventSourcing.StateStorage,LogConsistencyProvider,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\StateStorage\LogConsistencyProvider.cs,MakeLogViewAdaptor,The method has 5 parameters. Parameters: hostGrain' initialState' grainTypeName' storageProvider' services
Long Parameter List,Orleans.EventSourcing.StateStorage,LogViewAdaptor<TLogView;TLogEntry>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\StateStorage\LogViewAdaptor.cs,LogViewAdaptor,The method has 5 parameters. Parameters: host' initialState' globalStorageProvider' grainTypeName' services
Long Statement,Orleans.EventSourcing.Common,PrimaryBasedLogViewAdaptor<TLogView;TLogEntry;TSubmissionEntry>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\PrimaryBasedLogViewAdaptor.cs,OnNotificationReceived,The length of the statement  "            throw new ProtocolTransportException(string.Format("message type {0} not handled by OnNotificationReceived"' payload.GetType().FullName)); " is 138.
Long Statement,Orleans.EventSourcing.Common,PrimaryBasedLogViewAdaptor<TLogView;TLogEntry;TSubmissionEntry>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\PrimaryBasedLogViewAdaptor.cs,OnMultiClusterConfigurationChange,The length of the statement  "                var remoteInstances = Services.RegistrationStrategy.GetRemoteInstances(newConfig.Clusters' Services.MyClusterId).ToList(); " is 122.
Long Statement,Orleans.EventSourcing.CustomStorage,CustomStorageAdaptor<TLogView;TLogEntry>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\CustomStorage\LogViewAdaptor.cs,OnMessageReceived,The length of the statement  "                throw new ProtocolTransportException("message destined for primary cluster ended up elsewhere (inconsistent configurations?)"); " is 127.
Long Statement,Orleans.EventSourcing,JournaledGrain<TGrainState;TEventBase>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\JournaledGrain.cs,InstallAdaptor,The length of the statement  "            LogViewAdaptor = factory.MakeLogViewAdaptor<TGrainState' TEventBase>(this' (TGrainState)initialState' graintypename' storageProvider' services); " is 144.
Long Statement,Orleans.Runtime.Configuration,LogConsistencyConfigurationExtensions,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\LogConsistencyConfigurationExtensions.cs,AddCustomStorageInterfaceBasedLogConsistencyProvider,The length of the statement  "            config.Globals.RegisterLogConsistencyProvider<EventSourcing.CustomStorage.LogConsistencyProvider>(providerName' properties); " is 124.
Long Statement,Orleans.EventSourcing.LogStorage,LogStateWithMetaDataAndETag<TEntry>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\LogStorage\LogStateWithMetaData.cs,ToString,The length of the statement  "            return string.Format("v{0} Flags={1} ETag={2} Data={3}"' StateAndMetaData.GlobalVersion' StateAndMetaData.WriteVector' ETag' StateAndMetaData.Log); " is 147.
Long Statement,Orleans.EventSourcing.StateStorage,GrainStateWithMetaDataAndETag<TView>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\StateStorage\GrainStateWithMetaData.cs,ToString,The length of the statement  "            return string.Format("v{0} Flags={1} ETag={2} Data={3}"' StateAndMetaData.GlobalVersion' StateAndMetaData.WriteVector' ETag' StateAndMetaData.State); " is 149.
Long Statement,Orleans.EventSourcing.StateStorage,LogViewAdaptor<TLogView;TLogEntry>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\StateStorage\LogViewAdaptor.cs,ProcessNotifications,The length of the statement  "                Services.Log(LogLevel.Debug' "notification success ({0} updates) {1}"' updateNotification.Updates.Count' GlobalStateCache); " is 123.
Complex Conditional,Orleans.EventSourcing.LogStorage,LogViewAdaptor<TLogView;TLogEntry>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\LogStorage\LogViewAdaptor.cs,Merge,The conditional expression  "earlier != null                  && later != null                  && earlier.Origin == later.Origin                  && earlier.Version + later.Updates.Count == later.Version                  && earlier.Updates.Count + later.Updates.Count < maxEntriesInNotifications"  is complex.
Complex Conditional,Orleans.EventSourcing.StateStorage,LogViewAdaptor<TLogView;TLogEntry>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\StateStorage\LogViewAdaptor.cs,Merge,The conditional expression  "earlier != null                  && later != null                  && earlier.Origin == later.Origin                  && earlier.Version + later.Updates.Count == later.Version                  && earlier.Updates.Count + later.Updates.Count < maxEntriesInNotifications"  is complex.
Magic Number,Orleans.EventSourcing.Common,NotificationFailed,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\ConnectionIssues.cs,ComputeRetryDelay,The following statement contains a magic number: if (NumberOfConsecutiveFailures < 3) return TimeSpan.FromMilliseconds(1);              else if (NumberOfConsecutiveFailures < 1000) return TimeSpan.FromSeconds(30);              else return TimeSpan.FromMinutes(1);
Magic Number,Orleans.EventSourcing.Common,NotificationFailed,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\ConnectionIssues.cs,ComputeRetryDelay,The following statement contains a magic number: if (NumberOfConsecutiveFailures < 3) return TimeSpan.FromMilliseconds(1);              else if (NumberOfConsecutiveFailures < 1000) return TimeSpan.FromSeconds(30);              else return TimeSpan.FromMinutes(1);
Magic Number,Orleans.EventSourcing.Common,NotificationFailed,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\ConnectionIssues.cs,ComputeRetryDelay,The following statement contains a magic number: if (NumberOfConsecutiveFailures < 3) return TimeSpan.FromMilliseconds(1);              else if (NumberOfConsecutiveFailures < 1000) return TimeSpan.FromSeconds(30);              else return TimeSpan.FromMinutes(1);
Magic Number,Orleans.EventSourcing.Common,PrimaryOperationFailed,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\ConnectionIssues.cs,ComputeRetryDelay,The following statement contains a magic number: if (previous.Value.TotalMilliseconds < slowpollinterval)                  backoff = (int)((backoff + random.Next(5' 15)) * 1.5);
Magic Number,Orleans.EventSourcing.Common,PrimaryOperationFailed,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\ConnectionIssues.cs,ComputeRetryDelay,The following statement contains a magic number: if (previous.Value.TotalMilliseconds < slowpollinterval)                  backoff = (int)((backoff + random.Next(5' 15)) * 1.5);
Magic Number,Orleans.EventSourcing.Common,PrimaryOperationFailed,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\ConnectionIssues.cs,ComputeRetryDelay,The following statement contains a magic number: if (previous.Value.TotalMilliseconds < slowpollinterval)                  backoff = (int)((backoff + random.Next(5' 15)) * 1.5);
Magic Number,Orleans.EventSourcing.Common,PrimaryOperationFailed,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\ConnectionIssues.cs,ComputeRetryDelay,The following statement contains a magic number: if (backoff > slowpollinterval)                  backoff = slowpollinterval + random.Next(1' 200);
Magic Number,Orleans.EventSourcing.Common,PrimaryBasedLogViewAdaptor<TLogView;TLogEntry;TSubmissionEntry>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\PrimaryBasedLogViewAdaptor.cs,EnsureClusterJoinedAsync,The following statement contains a magic number: while (!IsMyClusterJoined())              {                  Services.Log(LogLevel.Debug' "Waiting for join");                  await Task.Delay(5000);              }
Magic Number,Orleans.EventSourcing.Common,PrimaryBasedLogViewAdaptor<TLogView;TLogEntry;TSubmissionEntry>,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\PrimaryBasedLogViewAdaptor.cs,GetCaughtUpWithConfigurationAsync,The following statement contains a magic number: while (Configuration == null || Configuration.AdminTimestamp < adminTimestamp)              {                  Services.Log(LogLevel.Debug' "Waiting for config {0}"' adminTimestamp);                    await Task.Delay(5000);              }
Missing Default,Orleans.EventSourcing.Common,NotificationWorker,C:\repos\dotnet_orleans\src\Orleans.EventSourcing\Common\NotificationTracker.cs,Enqueue,The following switch statement is missing a default case: switch (QueueState)                  {                      case (NotificationQueueState.Empty):                          {                              QueuedMessage = msg;                              QueueState = NotificationQueueState.Single;                              break;                          }                      case (NotificationQueueState.Single):                          {                              var m = new List<INotificationMessage>();                              m.Add(QueuedMessage);                              m.Add(msg);                              QueuedMessage = new BatchedNotificationMessage() { Notifications = m };                              QueueState = NotificationQueueState.Batch;                              break;                          }                      case (NotificationQueueState.Batch):                          {                              var batchmsg = (BatchedNotificationMessage)QueuedMessage;                              if (batchmsg.Notifications.Count < tracker.maxNotificationBatchSize)                              {                                  batchmsg.Notifications.Add(msg);                                  break;                              }                              else                              {                                  // keep only a version notification                                  QueuedMessage = new VersionNotificationMessage() { Version = msg.Version };                                  QueueState = NotificationQueueState.VersionOnly;                                  break;                              }                          }                      case (NotificationQueueState.VersionOnly):                          {                              ((VersionNotificationMessage)QueuedMessage).Version = msg.Version;                              QueueState = NotificationQueueState.VersionOnly;                              break;                          }                  }
