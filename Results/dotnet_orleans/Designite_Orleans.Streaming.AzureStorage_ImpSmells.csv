Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapterFactory<TDataAdapter>,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapterFactory.cs,Init,Cyclomatic complexity of the method is 9
Long Parameter List,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProvider,The method has 8 parameters. Parameters: config' providerName' connectionString' numberOfQueues' clusterId' cacheSize' startupState' persistentStreamProviderConfig
Long Parameter List,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProviderV2,The method has 8 parameters. Parameters: config' providerName' connectionString' numberOfQueues' clusterId' cacheSize' startupState' persistentStreamProviderConfig
Long Parameter List,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProvider,The method has 8 parameters. Parameters: config' providerName' connectionString' numberOfQueues' clusterId' cacheSize' startupState' persistentStreamProviderConfig
Long Parameter List,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProviderV2,The method has 8 parameters. Parameters: config' providerName' connectionString' numberOfQueues' clusterId' cacheSize' startupState' persistentStreamProviderConfig
Long Parameter List,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,GetAzureQueueStreamProviderProperties,The method has 7 parameters. Parameters: providerName' connectionString' numberOfQueues' deploymentId' cacheSize' startupState' persistentStreamProviderConfig
Long Parameter List,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapter<TDataAdapter>,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapter.cs,AzureQueueAdapter,The method has 8 parameters. Parameters: dataAdapter' serializationManager' streamQueueMapper' loggerFactory' dataConnectionString' deploymentId' providerName' messageVisibilityTimeout
Long Parameter List,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapter<TDataAdapter>,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapter.cs,QueueMessageBatchAsync,The method has 5 parameters. Parameters: streamGuid' streamNamespace' events' token' requestContext
Long Parameter List,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapterReceiver,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapterReceiver.cs,Create,The method has 7 parameters. Parameters: serializationManager' loggerFactory' queueId' dataConnectionString' deploymentId' dataAdapter' messageVisibilityTimeout
Long Parameter List,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapterReceiver,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapterReceiver.cs,AzureQueueAdapterReceiver,The method has 5 parameters. Parameters: serializationManager' loggerFactory' queueId' queue' dataAdapter
Long Parameter List,Orleans.Providers.Streams.AzureQueue,AzureQueueBatchContainer,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueBatchContainer.cs,AzureQueueBatchContainer,The method has 5 parameters. Parameters: streamGuid' streamNamespace' events' requestContext' sequenceToken
Long Parameter List,Orleans.Providers.Streams.AzureQueue,AzureQueueBatchContainerV2,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueBatchContainerV2.cs,AzureQueueBatchContainerV2,The method has 5 parameters. Parameters: streamGuid' streamNamespace' events' requestContext' sequenceToken
Long Parameter List,Orleans.Providers.Streams.AzureQueue,SimpleAzureQueueAdapter,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\SimpleAzureQueueAdapter.cs,QueueMessageBatchAsync,The method has 5 parameters. Parameters: streamGuid' streamNamespace' events' token' requestContext
Long Parameter List,Orleans.Providers.Streams.PersistentStreams,AzureTableStorageStreamFailureHandler<TEntity>,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\PersistentStreams\AzureTableStorageStreamFailureHandler.cs,AzureTableStorageStreamFailureHandler,The method has 7 parameters. Parameters: serializationManager' loggerFactory' faultOnFailure' clusterId' tableName' storageConnectionString' createEntity
Long Parameter List,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,AzureQueueDataManager,The method has 5 parameters. Parameters: loggerFactory' queueName' deploymentId' storageConnectionString' visibilityTimeout
Long Identifier,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProvider,The length of the parameter persistentStreamProviderConfig is 30.
Long Identifier,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProviderV2,The length of the parameter persistentStreamProviderConfig is 30.
Long Identifier,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProvider,The length of the parameter persistentStreamProviderConfig is 30.
Long Identifier,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProviderV2,The length of the parameter persistentStreamProviderConfig is 30.
Long Identifier,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,GetAzureQueueStreamProviderProperties,The length of the parameter persistentStreamProviderConfig is 30.
Long Identifier,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapterConstants,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapterConstants.cs,,The length of the parameter DataConnectionStringPropertyName is 32.
Long Identifier,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapterConstants,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapterConstants.cs,,The length of the parameter MessageVisibilityTimeoutPropertyName is 36.
Long Identifier,Orleans.AzureUtils,AzureQueueDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,,The length of the parameter PauseBetweenQueueOperationRetries is 33.
Long Identifier,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,ReadTableEntriesAndEtagsAsync,The length of the parameter executeQueryHandleContinuations is 31.
Long Statement,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProvider,The length of the statement  "            var properties = GetAzureQueueStreamProviderProperties(providerName' connectionString' numberOfQueues' clusterId' cacheSize' startupState' persistentStreamProviderConfig); " is 171.
Long Statement,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProviderV2,The length of the statement  "            var properties = GetAzureQueueStreamProviderProperties(providerName' connectionString' numberOfQueues' clusterId' cacheSize' startupState' persistentStreamProviderConfig); " is 171.
Long Statement,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProvider,The length of the statement  "            var properties = GetAzureQueueStreamProviderProperties(providerName' connectionString' numberOfQueues' clusterId' cacheSize' startupState' persistentStreamProviderConfig); " is 171.
Long Statement,Orleans.Runtime.Configuration,AzureConfigurationExtensions,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\AzureConfigurationExtensions.cs,AddAzureQueueStreamProviderV2,The length of the statement  "            var properties = GetAzureQueueStreamProviderProperties(providerName' connectionString' numberOfQueues' clusterId' cacheSize' startupState' persistentStreamProviderConfig); " is 171.
Long Statement,Orleans.LeaseProviders,AzureBlobLeaseProvider,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Lease\AzureBlobLeaseProvider.cs,Acquire,The length of the statement  "                return new AcquireLeaseResult(new AcquiredLease(leaseRequest.ResourceKey' leaseRequest.Duration' leaseId' DateTime.UtcNow)' ResponseCode.OK' null); " is 147.
Long Statement,Orleans.LeaseProviders,AzureBlobLeaseProvider,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Lease\AzureBlobLeaseProvider.cs,Acquire,The length of the statement  "                //This mapping is based on references : https://docs.microsoft.com/en-us/rest/api/storageservices/blob-service-error-codes " is 122.
Long Statement,Orleans.LeaseProviders,AzureBlobLeaseProvider,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Lease\AzureBlobLeaseProvider.cs,Renew,The length of the statement  "                return new AcquireLeaseResult(new AcquiredLease(acquiredLease.ResourceKey' acquiredLease.Duration' acquiredLease.Token' DateTime.UtcNow)' " is 137.
Long Statement,Orleans.LeaseProviders,AzureBlobLeaseProvider,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Lease\AzureBlobLeaseProvider.cs,Renew,The length of the statement  "                //This mapping is based on references : https://docs.microsoft.com/en-us/rest/api/storageservices/blob-service-error-codes " is 122.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapter<TDataAdapter>,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapter.cs,CreateReceiver,The length of the statement  "            return AzureQueueAdapterReceiver.Create(this.serializationManager' this.loggerFactory' queueId' DataConnectionString' DeploymentId' this.dataAdapter' MessageVisibilityTimeout); " is 176.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapter<TDataAdapter>,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapter.cs,QueueMessageBatchAsync,The length of the statement  "            if(token != null) throw new ArgumentException("AzureQueue stream provider currently does not support non-null StreamSequenceToken."' nameof(token)); " is 148.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapter<TDataAdapter>,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapter.cs,QueueMessageBatchAsync,The length of the statement  "                var tmpQueue = new AzureQueueDataManager(this.loggerFactory' queueId.ToString()' DeploymentId' DataConnectionString' MessageVisibilityTimeout); " is 143.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapterFactory<TDataAdapter>,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapterFactory.cs,Init,The length of the statement  "            if (!config.Properties.TryGetValue(AzureQueueAdapterConstants.DataConnectionStringPropertyName' out dataConnectionString)) " is 122.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapterFactory<TDataAdapter>,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapterFactory.cs,Init,The length of the statement  "            if (config.Properties.TryGetValue(AzureQueueAdapterConstants.MessageVisibilityTimeoutPropertyName' out messageVisibilityTimeoutRaw)) " is 132.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapterFactory<TDataAdapter>,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapterFactory.cs,Init,The length of the statement  "                        $"Failed to parse {AzureQueueAdapterConstants.MessageVisibilityTimeoutPropertyName} value '{messageVisibilityTimeoutRaw}' as a TimeSpan"); " is 138.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapterFactory<TDataAdapter>,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapterFactory.cs,CreateAdapter,The length of the statement  "            var adapter = new AzureQueueAdapter<TDataAdapter>(this.adaptorFactory()' this.SerializationManager' streamQueueMapper' this.loggerFactory' dataConnectionString' deploymentId' providerName' messageVisibilityTimeout); " is 215.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapterReceiver,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapterReceiver.cs,Create,The length of the statement  "            var queue = new AzureQueueDataManager(loggerFactory' queueId.ToString()' deploymentId' dataConnectionString' messageVisibilityTimeout); " is 135.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueAdapterReceiver,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueAdapterReceiver.cs,Shutdown,The length of the statement  "                // await the last storage operation' so after we shutdown and stop this receiver we don't get async operation completions from pending storage operations. " is 154.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueBatchContainer,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueBatchContainer.cs,GetEvents,The length of the statement  "            return events.OfType<T>().Select((e' i) => Tuple.Create<T' StreamSequenceToken>(e' sequenceToken.CreateSequenceTokenForEvent(i))); " is 130.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueBatchContainer,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueBatchContainer.cs,ToString,The length of the statement  "            //return string.Format("[AzureBatch:#Items={0}'Items{1}]"' events.Count' Utils.EnumerableToString(events.Select((e' i) => String.Format("{0}-{1}"' e' sequenceToken.CreateSequenceTokenForEvent(i))))); " is 199.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueBatchContainerV2,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\AzureQueueBatchContainerV2.cs,GetEvents,The length of the statement  "            return events.OfType<T>().Select((e' i) => Tuple.Create<T' StreamSequenceToken>(e' sequenceToken.CreateSequenceTokenForEvent(i))); " is 130.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueDataAdapterV1,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\IAzureQueueDataAdapter.cs,ToCloudQueueMessage,The length of the statement  "            var azureQueueBatchMessage = new AzureQueueBatchContainer(streamGuid' streamNamespace' events.Cast<object>().ToList()' requestContext); " is 135.
Long Statement,Orleans.Providers.Streams.AzureQueue,AzureQueueDataAdapterV2,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\IAzureQueueDataAdapter.cs,ToCloudQueueMessage,The length of the statement  "            var azureQueueBatchMessage = new AzureQueueBatchContainerV2(streamGuid' streamNamespace' events.Cast<object>().ToList()' requestContext); " is 137.
Long Statement,Orleans.Providers.Streams.AzureQueue,SimpleAzureQueueAdapter,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\SimpleAzureQueueAdapter.cs,CreateReceiver,The length of the statement  "            throw new OrleansException("SimpleAzureQueueAdapter is a write-only adapter' it does not support reading from the queue."); " is 123.
Long Statement,Orleans.Providers.Streams.AzureQueue,SimpleAzureQueueAdapter,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\SimpleAzureQueueAdapter.cs,QueueMessageBatchAsync,The length of the statement  "            //                               "SimpleAzureQueueAdapter does not support batching. Instead' you can batch in your application code."); " is 136.
Long Statement,Orleans.Providers.Streams.AzureQueue,SimpleAzureQueueAdapterFactory,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\SimpleAzureQueueAdapterFactory.cs,Init,The length of the statement  "            if (!config.Properties.TryGetValue(AzureQueueAdapterConstants.DataConnectionStringPropertyName' out dataConnectionString)) " is 122.
Long Statement,Orleans.Providers.Streams.AzureQueue,SimpleAzureQueueAdapterFactory,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\SimpleAzureQueueAdapterFactory.cs,Init,The length of the statement  "                throw new ArgumentException(String.Format("{0} property not set"' AzureQueueAdapterConstants.DataConnectionStringPropertyName)); " is 128.
Long Statement,Orleans.Providers.Streams.AzureQueue,SimpleAzureQueueAdapterFactory,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Streams\AzureQueue\SimpleAzureQueueAdapterFactory.cs,GetQueueAdapterCache,The length of the statement  "            throw new OrleansException("SimpleAzureQueueAdapter is a write-only adapter' it does not support reading from the queue and thus does not need cache."); " is 152.
Long Statement,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,InitQueueAsync,The length of the statement  "                // Not sure if this is a blocking call or not. Did not find an alternative async API. Should probably use BeginListQueuesSegmented. " is 131.
Long Statement,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,InitQueueAsync,The length of the statement  "                logger.Info((int)AzureQueueErrorCode.AzureQueue_01' "{0} Azure storage queue {1}"' (didCreate ? "Created" : "Attached to")' QueueName); " is 135.
Long Statement,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,CheckAlertSlowAccess,The length of the statement  "                logger.Warn((int)AzureQueueErrorCode.AzureQueue_13' "Slow access to Azure queue {0} for {1}' which took {2}."' QueueName' operation' timeSpan); " is 143.
Long Statement,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,GetCloudQueueClient,The length of the statement  "                logger.Error((int)AzureQueueErrorCode.AzureQueue_14' String.Format("Error creating GetCloudQueueOperationsClient.")' exc); " is 122.
Long Statement,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,ValidateQueueName,The length of the statement  "                throw new ArgumentException(String.Format("A queue name must be from 3 through 63 characters long' while your queueName length is {0}' queueName is {1}."' queueName.Length' queueName)' queueName); " is 196.
Long Statement,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,ValidateQueueName,The length of the statement  "                throw new ArgumentException(String.Format("A queue name must start with a letter or number' while your queueName is {0}."' queueName)' queueName); " is 146.
Long Statement,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,ValidateQueueName,The length of the statement  "                // The first and last letters in the queue name must be alphanumeric. The dash (-) character cannot be the first or last character. " is 131.
Long Statement,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,ValidateQueueName,The length of the statement  "                throw new ArgumentException(String.Format("The last letter in the queue name must be alphanumeric' while your queueName is {0}."' queueName)' queueName); " is 153.
Long Statement,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,ValidateQueueName,The length of the statement  "                throw new ArgumentException(String.Format("A queue name can only contain letters' numbers' and the dash (-) character' while your queueName is {0}."' queueName)' queueName); " is 173.
Long Statement,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,ValidateQueueName,The length of the statement  "                throw new ArgumentException(String.Format("Consecutive dash characters are not permitted in the queue name' while your queueName is {0}."' queueName)' queueName); " is 162.
Long Statement,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,ValidateQueueName,The length of the statement  "                throw new ArgumentException(String.Format("All letters in a queue name must be lowercase' while your queueName is {0}."' queueName)' queueName); " is 144.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,IsContentionError,The length of the statement  "            if (httpStatusCode == HttpStatusCode.Conflict) return true;     //Primary key violation. The app is trying to insert an entity' but there’s an entity on the table with the same values for PartitionKey and RowKey properties on the entity being inserted. " is 252.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,IsContentionError,The length of the statement  "            if (httpStatusCode == HttpStatusCode.NotImplemented) return true; // New table: Azure table schema not yet initialized' so need to do first create " is 146.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,IsNotFoundError,The length of the statement  "            if (httpStatusCode == HttpStatusCode.NotImplemented) return true; // New table: Azure table schema not yet initialized' so need to do first create " is 146.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,ValidateTableName,The length of the statement  "                throw new ArgumentException(String.Format("A table name must be from 3 through 63 characters long' while your tableName length is {0}' tableName is {1}."' tableName.Length' tableName)' tableName); " is 196.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,ValidateTableName,The length of the statement  "                throw new ArgumentException(String.Format("A table name cannot begin with a numeric character' while your tableName is {0}."' tableName)' tableName); " is 149.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,ValidateTableName,The length of the statement  "                throw new ArgumentException(String.Format("A table name can only contain alphanumeric characters' while your tableName is {0}."' tableName)' tableName); " is 152.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,SanitizeTableProperty,The length of the statement  "            // http://www.jamestharpe.com/web-development/azure-table-service-character-combinations-disallowed-in-partitionkey-rowkey/ " is 123.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,SanitizeTableProperty,The length of the statement  "                throw new ArgumentException(string.Format("Key length {0} is too long to be an Azure table key. Key={1}"' key.Length' key)); " is 124.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,AnalyzeReadException,The length of the statement  "                    $"Intermediate issue reading Azure storage table {tableName}: HTTP status code={statusCode} Exception Type={exc.GetType().FullName} Message='{exc.Message}'"' " is 157.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,AnalyzeReadException,The length of the statement  "                            $"Intermediate issue reading Azure storage table {tableName}:{(iteration == 0 ? "" : (" Repeat=" + iteration))} IsRetriable={isLastErrorRetriable} HTTP status code={httpStatusCode} REST status code={restStatus} Exception Type={exc.GetType().FullName} Message='{exc.Message}'"' " is 276.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,AnalyzeReadException,The length of the statement  "                        $"Unexpected issue reading Azure storage table {tableName}: Exception Type={exc.GetType().FullName} Message='{exc.Message}'"' " is 125.
Long Statement,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,PrintStorageException,The length of the statement  "                            String.Format("' ExtendedErrorInformation.AdditionalDetails = {0}"' Utils.DictionaryToString(extendedError.AdditionalDetails)) : String.Empty); " is 143.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,InitTableAsync,The length of the statement  "                Logger.Info((int)Utilities.ErrorCode.AzureTable_01' "{0} Azure storage table {1}"' (didCreate ? "Created" : "Attached to")' TableName); " is 135.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,InitTableAsync,The length of the statement  "                Logger.Error((int)Utilities.ErrorCode.AzureTable_02' $"Could not initialize connection to storage table {TableName}"' exc); " is 123.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,ReadSingleTableEntryAsync,The length of the statement  "            if (Logger.IsEnabled(LogLevel.Trace)) Logger.Trace("{0} table {1} partitionKey {2} rowKey = {3}"' operation' TableName' partitionKey' rowKey); " is 142.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,ReadSingleTableEntryAsync,The length of the statement  "                if (Logger.IsEnabled(LogLevel.Debug)) Logger.Debug("Could not find table entry for PartitionKey={0} RowKey={1}"' partitionKey' rowKey); " is 135.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,ReadAllTableEntriesForPartitionAsync,The length of the statement  "            string query = TableQuery.GenerateFilterCondition(nameof(ITableEntity.PartitionKey)' QueryComparisons.Equal' partitionKey); " is 123.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,DeleteTableEntriesAsync,The length of the statement  "            if (Logger.IsEnabled(LogLevel.Trace)) Logger.Trace("Deleting {0} table entries: {1}"' TableName' Utils.EnumerableToString(collection)); " is 135.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,BulkInsertTableEntries,The length of the statement  "            if (Logger.IsEnabled(LogLevel.Trace)) Logger.Trace("Bulk inserting {0} entries to {1} table"' collection.Count' TableName); " is 123.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,InsertTwoTableEntriesConditionallyAsync,The length of the statement  "            if (Logger.IsEnabled(LogLevel.Trace)) Logger.Trace("{0} into table {1} data1 {2} data2 {3}"' operation' TableName' data1' data2Str); " is 132.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,InsertTwoTableEntriesConditionallyAsync,The length of the statement  "                    // Only AddObject' do NOT AttachTo. If we did both UpdateObject and AttachTo' it would have been equivalent to InsertOrReplace. " is 127.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,InsertTwoTableEntriesConditionallyAsync,The length of the statement  "                    //see reference at https://msdn.microsoft.com/en-us/library/microsoft.windowsazure.storage.table.cloudtable.executebatch.aspx. " is 126.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,UpdateTwoTableEntriesConditionallyAsync,The length of the statement  "            if (Logger.IsEnabled(LogLevel.Trace)) Logger.Trace("{0} table {1} data1 {2} data2 {3}"' operation' TableName' data1' data2Str); " is 127.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,UpdateTwoTableEntriesConditionallyAsync,The length of the statement  "                    // Only AddObject' do NOT AttachTo. If we did both UpdateObject and AttachTo' it would have been equivalent to InsertOrReplace. " is 127.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,UpdateTwoTableEntriesConditionallyAsync,The length of the statement  "                    //see reference at https://msdn.microsoft.com/en-us/library/microsoft.windowsazure.storage.table.cloudtable.executebatch.aspx. " is 126.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,CheckAlertWriteError,The length of the statement  "            if(AzureStorageUtils.EvaluateException(exc' out httpStatusCode' out restStatus) && AzureStorageUtils.IsContentionError(httpStatusCode)) " is 135.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,CheckAlertWriteError,The length of the statement  "                    $"Intermediate Azure table write error {operation} to table {TableName} data1 {(data1 ?? "null")} data2 {(data2 ?? "null")}"' exc); " is 131.
Long Statement,Orleans.Streaming.AzureStorage,AzureTableDataManager<T>,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDataManager.cs,CheckAlertSlowAccess,The length of the statement  "                Logger.Warn((int)Utilities.ErrorCode.AzureTable_15' "Slow access to Azure Table {0} for {1}' which took {2}."' TableName' operation' timeSpan); " is 143.
Magic Number,Orleans.LeaseProviders,AzureBlobLeaseProvider,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Lease\AzureBlobLeaseProvider.cs,Acquire,The following statement contains a magic number: try              {                  var blob = this.container.GetBlockBlobReference(GetBlobName(category' leaseRequest.ResourceKey));                  blob.Properties.ContentType = "application/json";                  //create this blob                  await blob.UploadTextAsync("blob");                  var leaseId = await blob.AcquireLeaseAsync(leaseRequest.Duration);                  return new AcquireLeaseResult(new AcquiredLease(leaseRequest.ResourceKey' leaseRequest.Duration' leaseId' DateTime.UtcNow)' ResponseCode.OK' null);              }              catch (StorageException e)              {                  ResponseCode statusCode;                  //This mapping is based on references : https://docs.microsoft.com/en-us/rest/api/storageservices/blob-service-error-codes                  // https://docs.microsoft.com/en-us/rest/api/storageservices/Lease-Blob?redirectedfrom=MSDN                  switch (e.RequestInformation.HttpStatusCode)                  {                      case 404:                      case 409:                       case 412: statusCode = ResponseCode.LeaseNotAvailable; break;                      default: statusCode = ResponseCode.TransientFailure; break;                  }                  return new AcquireLeaseResult(null' statusCode' e);              }
Magic Number,Orleans.LeaseProviders,AzureBlobLeaseProvider,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Lease\AzureBlobLeaseProvider.cs,Acquire,The following statement contains a magic number: try              {                  var blob = this.container.GetBlockBlobReference(GetBlobName(category' leaseRequest.ResourceKey));                  blob.Properties.ContentType = "application/json";                  //create this blob                  await blob.UploadTextAsync("blob");                  var leaseId = await blob.AcquireLeaseAsync(leaseRequest.Duration);                  return new AcquireLeaseResult(new AcquiredLease(leaseRequest.ResourceKey' leaseRequest.Duration' leaseId' DateTime.UtcNow)' ResponseCode.OK' null);              }              catch (StorageException e)              {                  ResponseCode statusCode;                  //This mapping is based on references : https://docs.microsoft.com/en-us/rest/api/storageservices/blob-service-error-codes                  // https://docs.microsoft.com/en-us/rest/api/storageservices/Lease-Blob?redirectedfrom=MSDN                  switch (e.RequestInformation.HttpStatusCode)                  {                      case 404:                      case 409:                       case 412: statusCode = ResponseCode.LeaseNotAvailable; break;                      default: statusCode = ResponseCode.TransientFailure; break;                  }                  return new AcquireLeaseResult(null' statusCode' e);              }
Magic Number,Orleans.LeaseProviders,AzureBlobLeaseProvider,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Lease\AzureBlobLeaseProvider.cs,Acquire,The following statement contains a magic number: try              {                  var blob = this.container.GetBlockBlobReference(GetBlobName(category' leaseRequest.ResourceKey));                  blob.Properties.ContentType = "application/json";                  //create this blob                  await blob.UploadTextAsync("blob");                  var leaseId = await blob.AcquireLeaseAsync(leaseRequest.Duration);                  return new AcquireLeaseResult(new AcquiredLease(leaseRequest.ResourceKey' leaseRequest.Duration' leaseId' DateTime.UtcNow)' ResponseCode.OK' null);              }              catch (StorageException e)              {                  ResponseCode statusCode;                  //This mapping is based on references : https://docs.microsoft.com/en-us/rest/api/storageservices/blob-service-error-codes                  // https://docs.microsoft.com/en-us/rest/api/storageservices/Lease-Blob?redirectedfrom=MSDN                  switch (e.RequestInformation.HttpStatusCode)                  {                      case 404:                      case 409:                       case 412: statusCode = ResponseCode.LeaseNotAvailable; break;                      default: statusCode = ResponseCode.TransientFailure; break;                  }                  return new AcquireLeaseResult(null' statusCode' e);              }
Magic Number,Orleans.LeaseProviders,AzureBlobLeaseProvider,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Lease\AzureBlobLeaseProvider.cs,Renew,The following statement contains a magic number: try              {                  await blob.RenewLeaseAsync(AccessCondition.GenerateLeaseCondition(acquiredLease.Token));                  return new AcquireLeaseResult(new AcquiredLease(acquiredLease.ResourceKey' acquiredLease.Duration' acquiredLease.Token' DateTime.UtcNow)'                      ResponseCode.OK' null);              }              catch (StorageException e)              {                  ResponseCode statusCode;                  //This mapping is based on references : https://docs.microsoft.com/en-us/rest/api/storageservices/blob-service-error-codes                  // https://docs.microsoft.com/en-us/rest/api/storageservices/Lease-Blob?redirectedfrom=MSDN                  switch (e.RequestInformation.HttpStatusCode)                  {                      case 404:                      case 409:                      case 412: statusCode = ResponseCode.InvalidToken; break;                      default: statusCode = ResponseCode.TransientFailure; break;                  }                  return new AcquireLeaseResult(null' statusCode' e);              }
Magic Number,Orleans.LeaseProviders,AzureBlobLeaseProvider,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Lease\AzureBlobLeaseProvider.cs,Renew,The following statement contains a magic number: try              {                  await blob.RenewLeaseAsync(AccessCondition.GenerateLeaseCondition(acquiredLease.Token));                  return new AcquireLeaseResult(new AcquiredLease(acquiredLease.ResourceKey' acquiredLease.Duration' acquiredLease.Token' DateTime.UtcNow)'                      ResponseCode.OK' null);              }              catch (StorageException e)              {                  ResponseCode statusCode;                  //This mapping is based on references : https://docs.microsoft.com/en-us/rest/api/storageservices/blob-service-error-codes                  // https://docs.microsoft.com/en-us/rest/api/storageservices/Lease-Blob?redirectedfrom=MSDN                  switch (e.RequestInformation.HttpStatusCode)                  {                      case 404:                      case 409:                      case 412: statusCode = ResponseCode.InvalidToken; break;                      default: statusCode = ResponseCode.TransientFailure; break;                  }                  return new AcquireLeaseResult(null' statusCode' e);              }
Magic Number,Orleans.LeaseProviders,AzureBlobLeaseProvider,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Providers\Lease\AzureBlobLeaseProvider.cs,Renew,The following statement contains a magic number: try              {                  await blob.RenewLeaseAsync(AccessCondition.GenerateLeaseCondition(acquiredLease.Token));                  return new AcquireLeaseResult(new AcquiredLease(acquiredLease.ResourceKey' acquiredLease.Duration' acquiredLease.Token' DateTime.UtcNow)'                      ResponseCode.OK' null);              }              catch (StorageException e)              {                  ResponseCode statusCode;                  //This mapping is based on references : https://docs.microsoft.com/en-us/rest/api/storageservices/blob-service-error-codes                  // https://docs.microsoft.com/en-us/rest/api/storageservices/Lease-Blob?redirectedfrom=MSDN                  switch (e.RequestInformation.HttpStatusCode)                  {                      case 404:                      case 409:                      case 412: statusCode = ResponseCode.InvalidToken; break;                      default: statusCode = ResponseCode.TransientFailure; break;                  }                  return new AcquireLeaseResult(null' statusCode' e);              }
Magic Number,Orleans.AzureUtils,AzureQueueDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,AzureQueueDefaultPolicies,The following statement contains a magic number: MaxQueueOperationRetries = 5;
Magic Number,Orleans.AzureUtils,AzureQueueDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,AzureQueueDefaultPolicies,The following statement contains a magic number: PauseBetweenQueueOperationRetries = TimeSpan.FromMilliseconds(100);
Magic Number,Orleans.AzureUtils,AzureQueueDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,AzureQueueDefaultPolicies,The following statement contains a magic number: QueueOperationTimeout = PauseBetweenQueueOperationRetries.Multiply(MaxQueueOperationRetries).Multiply(6);
Magic Number,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,ValidateQueueName,The following statement contains a magic number: if (!(queueName.Length >= 3 && queueName.Length <= 63))              {                  // A queue name must be from 3 through 63 characters long.                  throw new ArgumentException(String.Format("A queue name must be from 3 through 63 characters long' while your queueName length is {0}' queueName is {1}."' queueName.Length' queueName)' queueName);              }
Magic Number,Orleans.AzureUtils,AzureQueueDataManager,C:\repos\dotnet_orleans\src\Azure\Orleans.Streaming.AzureStorage\Storage\AzureQueueDataManager.cs,ValidateQueueName,The following statement contains a magic number: if (!(queueName.Length >= 3 && queueName.Length <= 63))              {                  // A queue name must be from 3 through 63 characters long.                  throw new ArgumentException(String.Format("A queue name must be from 3 through 63 characters long' while your queueName length is {0}' queueName is {1}."' queueName.Length' queueName)' queueName);              }
Magic Number,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,ValidateTableName,The following statement contains a magic number: if (!(tableName.Length >= 3 && tableName.Length <= 63))              {                  // Table names must be from 3 to 63 characters long.                  throw new ArgumentException(String.Format("A table name must be from 3 through 63 characters long' while your tableName length is {0}' tableName is {1}."' tableName.Length' tableName)' tableName);              }
Magic Number,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,ValidateTableName,The following statement contains a magic number: if (!(tableName.Length >= 3 && tableName.Length <= 63))              {                  // Table names must be from 3 to 63 characters long.                  throw new ArgumentException(String.Format("A table name must be from 3 through 63 characters long' while your tableName length is {0}' tableName is {1}."' tableName.Length' tableName)' tableName);              }
Magic Number,Orleans.Streaming.AzureStorage,AzureStorageUtils,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureStorageUtils.cs,SanitizeTableProperty,The following statement contains a magic number: if (key.Length >= 1024)                  throw new ArgumentException(string.Format("Key length {0} is too long to be an Azure table key. Key={1}"' key.Length' key));
Magic Number,Orleans.Streaming.AzureStorage,AzureTableDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDefaultPolicies.cs,AzureTableDefaultPolicies,The following statement contains a magic number: MaxTableCreationRetries = 60;
Magic Number,Orleans.Streaming.AzureStorage,AzureTableDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDefaultPolicies.cs,AzureTableDefaultPolicies,The following statement contains a magic number: MaxTableOperationRetries = 5;
Magic Number,Orleans.Streaming.AzureStorage,AzureTableDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDefaultPolicies.cs,AzureTableDefaultPolicies,The following statement contains a magic number: PauseBetweenTableOperationRetries = TimeSpan.FromMilliseconds(100);
Magic Number,Orleans.Streaming.AzureStorage,AzureTableDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDefaultPolicies.cs,AzureTableDefaultPolicies,The following statement contains a magic number: MaxBusyRetries = 120;
Magic Number,Orleans.Streaming.AzureStorage,AzureTableDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDefaultPolicies.cs,AzureTableDefaultPolicies,The following statement contains a magic number: PauseBetweenBusyRetries = TimeSpan.FromMilliseconds(500);
Magic Number,Orleans.Streaming.AzureStorage,AzureTableDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDefaultPolicies.cs,AzureTableDefaultPolicies,The following statement contains a magic number: if (Debugger.IsAttached)              {                  PauseBetweenTableCreationRetries = PauseBetweenTableCreationRetries.Multiply(100);                  PauseBetweenTableOperationRetries = PauseBetweenTableOperationRetries.Multiply(100);                  PauseBetweenBusyRetries = PauseBetweenBusyRetries.Multiply(10);              }
Magic Number,Orleans.Streaming.AzureStorage,AzureTableDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDefaultPolicies.cs,AzureTableDefaultPolicies,The following statement contains a magic number: if (Debugger.IsAttached)              {                  PauseBetweenTableCreationRetries = PauseBetweenTableCreationRetries.Multiply(100);                  PauseBetweenTableOperationRetries = PauseBetweenTableOperationRetries.Multiply(100);                  PauseBetweenBusyRetries = PauseBetweenBusyRetries.Multiply(10);              }
Magic Number,Orleans.Streaming.AzureStorage,AzureTableDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDefaultPolicies.cs,AzureTableDefaultPolicies,The following statement contains a magic number: if (Debugger.IsAttached)              {                  PauseBetweenTableCreationRetries = PauseBetweenTableCreationRetries.Multiply(100);                  PauseBetweenTableOperationRetries = PauseBetweenTableOperationRetries.Multiply(100);                  PauseBetweenBusyRetries = PauseBetweenBusyRetries.Multiply(10);              }
Magic Number,Orleans.Streaming.AzureStorage,AzureTableDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDefaultPolicies.cs,AzureTableDefaultPolicies,The following statement contains a magic number: TableCreationTimeout = PauseBetweenTableCreationRetries.Multiply(MaxTableCreationRetries).Multiply(3);
Magic Number,Orleans.Streaming.AzureStorage,AzureTableDefaultPolicies,C:\repos\dotnet_orleans\src\Azure\Shared\Storage\AzureTableDefaultPolicies.cs,AzureTableDefaultPolicies,The following statement contains a magic number: TableOperationTimeout = PauseBetweenTableOperationRetries.Multiply(MaxTableOperationRetries).Multiply(6);
