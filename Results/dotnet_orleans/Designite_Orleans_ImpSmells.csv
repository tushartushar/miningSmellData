Implementation smell,Namespace,Class,File,Method,Description
Long Method,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The method has 122 lines of code.
Long Method,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The method has 245 lines of code.
Long Method,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The method has 160 lines of code.
Long Method,Orleans.Serialization,BinaryTokenStreamWriter,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The method has 141 lines of code.
Long Method,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,SerializeArray,The method has 118 lines of code.
Long Method,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeserializeArray,The method has 101 lines of code.
Complex Method,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,WriteLogMessage,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,MessageFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\MessageFactory.cs,CreateResponseMessage,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,EquallyDividedMultiRange,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\RingRange.cs,EquallyDividedMultiRange,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,EnumerateApprovedAssemblies,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,IsCompatibleWithCurrentProcess,Cyclomatic complexity of the method is 12
Complex Method,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,ConsoleTelemetryConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Telemetry\Consumers\ConsoleTelemetryConsumer.cs,TrackTrace,Cyclomatic complexity of the method is 18
Complex Method,Orleans.Runtime,TraceTelemetryConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Telemetry\Consumers\TraceTelemetryConsumer.cs,TrackTrace,Cyclomatic complexity of the method is 15
Complex Method,Orleans.Runtime,GrainInterfaceMap,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,AddMap,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,GrainInterfaceMap,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,TryGetGrainClassData,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,ClientStatisticsManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ClientStatisticsManager.cs,Start,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,Start,Cyclomatic complexity of the method is 12
Complex Method,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnMessageExpired,Cyclomatic complexity of the method is 15
Complex Method,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,Cyclomatic complexity of the method is 25
Complex Method,Orleans.Runtime,Message,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\Message.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetInnerTypes,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetParseableName,Cyclomatic complexity of the method is 12
Complex Method,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetTypes,Cyclomatic complexity of the method is 11
Complex Method,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,EscapeIdentifier,Cyclomatic complexity of the method is 78
Complex Method,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,GrainReference,Cyclomatic complexity of the method is 10
Complex Method,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,ResponseCallback,Cyclomatic complexity of the method is 13
Complex Method,Orleans,AsyncExecutorWithRetries,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetriesHelper,Cyclomatic complexity of the method is 10
Complex Method,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,Cyclomatic complexity of the method is 13
Complex Method,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ConsumeServices,Cyclomatic complexity of the method is 9
Complex Method,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,RunClientMessagePump,Cyclomatic complexity of the method is 14
Complex Method,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,LocalObjectMessagePumpAsync,Cyclomatic complexity of the method is 8
Complex Method,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,SendRequestMessage,Cyclomatic complexity of the method is 9
Complex Method,Orleans,Interner,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\Interner.cs,InternCacheCleanupTimerCallback,Cyclomatic complexity of the method is 9
Complex Method,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,ComputeMethodId,Cyclomatic complexity of the method is 9
Complex Method,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,ValidateInterfaceMethods,Cyclomatic complexity of the method is 9
Complex Method,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,GetMethodsImpl,Cyclomatic complexity of the method is 9
Complex Method,Orleans.Runtime.Configuration,GrainServiceConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GrainServiceConfiguration.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,Cyclomatic complexity of the method is 20
Complex Method,Orleans.Runtime.Configuration,ProviderConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ProviderConfiguration.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime.Configuration,GrainTypeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ApplicationConfiguration.cs,Load,Cyclomatic complexity of the method is 11
Complex Method,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,LoadFromXml,Cyclomatic complexity of the method is 56
Complex Method,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,CheckGatewayProviderSettings,Cyclomatic complexity of the method is 22
Complex Method,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTelemetry,Cyclomatic complexity of the method is 9
Complex Method,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTracing,Cyclomatic complexity of the method is 15
Complex Method,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseBool,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,Cyclomatic complexity of the method is 147
Complex Method,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,Cyclomatic complexity of the method is 59
Complex Method,Orleans.Runtime.Configuration,ClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClusterConfiguration.cs,LoadFromXml,Cyclomatic complexity of the method is 17
Complex Method,Orleans.Runtime.Configuration,ClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClusterConfiguration.cs,CalculateOverrides,Cyclomatic complexity of the method is 11
Complex Method,Orleans.Runtime.Configuration,ClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClusterConfiguration.cs,ResolveIPAddress,Cyclomatic complexity of the method is 9
Complex Method,Orleans.Providers,ProviderStateManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\ProviderStateManager.cs,PresetState,Cyclomatic complexity of the method is 10
Complex Method,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadArgument,Cyclomatic complexity of the method is 16
Complex Method,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadConstant,Cyclomatic complexity of the method is 31
Complex Method,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,StoreLocal,Cyclomatic complexity of the method is 16
Complex Method,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadLocal,Cyclomatic complexity of the method is 16
Complex Method,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,TryReadSimpleType,Cyclomatic complexity of the method is 84
Complex Method,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,CheckSpecialTypeCode,Cyclomatic complexity of the method is 26
Complex Method,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,Cyclomatic complexity of the method is 86
Complex Method,Orleans.Serialization,TypeUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\TypeUtilities.cs,IsAccessibleFromAssembly,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,FindSerializationInfo,Cyclomatic complexity of the method is 22
Complex Method,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeepCopierHelper,Cyclomatic complexity of the method is 21
Complex Method,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,SerializeInner,Cyclomatic complexity of the method is 11
Complex Method,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,SerializeArray,Cyclomatic complexity of the method is 27
Complex Method,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeserializeInner,Cyclomatic complexity of the method is 12
Complex Method,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeserializeArray,Cyclomatic complexity of the method is 25
Complex Method,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,ResolveTypeName,Cyclomatic complexity of the method is 10
Complex Method,Orleans.Messaging,OutgoingMessageSender,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\OutgoingMessageSender.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,Orleans.Messaging,GatewayProviderFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayProviderFactory.cs,CreateGatewayListProvider,Cyclomatic complexity of the method is 17
Complex Method,Orleans.Streams,PersistentStreamProviderConfig,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Providers\IStreamProviderRuntime.cs,PersistentStreamProviderConfig,Cyclomatic complexity of the method is 8
Long Parameter List,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,Log,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,WriteLogMessage,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,TrackDependency,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,TrackRequest,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,TypeFormattingOptions,The method has 6 parameters.
Long Parameter List,Orleans.Runtime,IncomingMessageBuffer,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\IncomingMessageBuffer.cs,IncomingMessageBuffer,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,NewKey,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,IDependencyTelemetryConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Telemetry\IDependencyTelemetryConsumer.cs,TrackDependency,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,IRequestTelemetryConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Telemetry\IRequestTelemetryConsumer.cs,TrackRequest,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,TraceParserUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Telemetry\TraceParserUtils.cs,FormatLogMessage,The method has 7 parameters.
Long Parameter List,Orleans.Runtime,TraceParserUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Telemetry\TraceParserUtils.cs,FormatLogMessage,The method has 8 parameters.
Long Parameter List,Orleans.Runtime,TraceParserUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Telemetry\TraceParserUtils.cs,FormatLogMessage_Impl,The method has 9 parameters.
Long Parameter List,Orleans.Runtime,IRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\IRuntimeClient.cs,SendRequest,The method has 7 parameters.
Long Parameter List,Orleans.Runtime,GrainInterfaceMap,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,AddEntry,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,GrainInterfaceMap,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,TryGetTypeInfo,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,GrainClassData,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,GrainClassData,The method has 6 parameters.
Long Parameter List,Orleans.Runtime,IGrainInfo,F:\newReposMay17\dotnet_orleans\src\Orleans\SystemTargetInterfaces\IRemoteGrainDirectory.cs,RemoveActivation,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnMessageSend,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnMessageBatchSend,The method has 6 parameters.
Long Parameter List,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnMessageSend_Impl,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,ISiloMetricsDataPublisher,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\IPerformanceMetrics.cs,Init,The method has 6 parameters.
Long Parameter List,Orleans.Runtime,IConfigurableSiloMetricsDataPublisher,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\IPerformanceMetrics.cs,AddConfiguration,The method has 6 parameters.
Long Parameter List,Orleans.Runtime,IStatisticsPublisher,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\IPerformanceMetrics.cs,Init,The method has 6 parameters.
Long Parameter List,Orleans.Runtime,IConfigurableStatisticsPublisher,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\IPerformanceMetrics.cs,AddConfiguration,The method has 6 parameters.
Long Parameter List,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,Init,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,CheckTimerDelay,The method has 8 parameters.
Long Parameter List,Orleans.Runtime,CallbackData,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\CallbackData.cs,CallbackData,The method has 6 parameters.
Long Parameter List,Orleans.Runtime,ILogConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\ILogConsumer.cs,Log,The method has 7 parameters.
Long Parameter List,Orleans.Runtime,Logger,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\Logger.cs,Log,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,Logger,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\Logger.cs,TrackDependency,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,Logger,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\Logger.cs,TrackRequest,The method has 5 parameters.
Long Parameter List,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,GrainReference,The method has 5 parameters.
Long Parameter List,Orleans,AsyncExecutorWithRetries,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetries,The method has 5 parameters.
Long Parameter List,Orleans,AsyncExecutorWithRetries,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetries,The method has 5 parameters.
Long Parameter List,Orleans,AsyncExecutorWithRetries,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetries,The method has 8 parameters.
Long Parameter List,Orleans,AsyncExecutorWithRetries,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetriesHelper,The method has 10 parameters.
Long Parameter List,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,SendRequest,The method has 7 parameters.
Long Parameter List,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,SendRequestMessage,The method has 7 parameters.
Long Parameter List,Orleans.Runtime.Configuration,ConfigurationExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigurationExtensions.cs,AddSimpleMessageStreamProvider,The method has 5 parameters.
Long Parameter List,Orleans.Runtime.Configuration,ConfigurationExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigurationExtensions.cs,AddSimpleMessageStreamProvider,The method has 5 parameters.
Long Parameter List,Orleans.Runtime.Configuration,ProviderConfigurationUtility,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ProviderConfiguration.cs,RegisterProvider,The method has 5 parameters.
Long Parameter List,Orleans.LogConsistency,ILogConsistentGrain,F:\newReposMay17\dotnet_orleans\src\Orleans\LogConsistency\ILogConsistentGrain.cs,InstallAdaptor,The method has 5 parameters.
Long Parameter List,Orleans.LogConsistency,ILogViewAdaptorFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\LogConsistency\ILogConsistencyProvider.cs,MakeLogViewAdaptor,The method has 5 parameters.
Long Parameter List,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The method has 6 parameters.
Long Parameter List,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The method has 7 parameters.
Long Parameter List,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,Register,The method has 5 parameters.
Long Parameter List,Orleans.Messaging,ProxiedMessageCenter,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ProxiedMessageCenter.cs,ProxiedMessageCenter,The method has 9 parameters.
Long Parameter List,Orleans.Streams,ImplicitStreamPubSub,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\ImplicitStreamPubSub.cs,RegisterConsumer,The method has 5 parameters.
Long Parameter List,Orleans.Streams,StreamPubSubImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamPubSubImpl.cs,RegisterConsumer,The method has 5 parameters.
Long Parameter List,Orleans.Streams,AsyncObservableExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Core\AsyncObservableExtensions.cs,SubscribeAsync,The method has 7 parameters.
Long Parameter List,Orleans.Streams,AsyncObservableExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Core\AsyncObservableExtensions.cs,SubscribeAsync,The method has 6 parameters.
Long Parameter List,Orleans.Streams,AsyncObservableExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Core\AsyncObservableExtensions.cs,SubscribeAsync,The method has 6 parameters.
Long Parameter List,Orleans.Streams,AsyncObservableExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Core\AsyncObservableExtensions.cs,SubscribeAsync,The method has 5 parameters.
Long Parameter List,Orleans.Streams,StreamSubscriptionHandleExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Core\StreamSubscriptionHandleExtensions.cs,ResumeAsync,The method has 5 parameters.
Long Parameter List,Orleans.Streams,StreamSubscriptionHandleImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamSubscriptionHandleImpl.cs,StreamSubscriptionHandleImpl,The method has 5 parameters.
Long Parameter List,Orleans.Streams,IStreamPubSub,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Providers\IStreamProviderRuntime.cs,RegisterConsumer,The method has 5 parameters.
Long Parameter List,Orleans.Streams,GrainBasedPubSubRuntime,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\GrainBasedPubSubRuntime.cs,RegisterConsumer,The method has 5 parameters.
Long Parameter List,Orleans.Streams,IQueueAdapter,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\QueueAdapters\IQueueAdapter.cs,QueueMessageBatchAsync,The method has 5 parameters.
Long Parameter List,Orleans.Streams,QueueAdapterExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\QueueAdapters\IQueueAdapter.cs,QueueMessageAsync,The method has 6 parameters.
Long Parameter List,Orleans.Streams,StreamConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumer.cs,StreamConsumer,The method has 5 parameters.
Long Parameter List,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,SetObserver,The method has 5 parameters.
Long Parameter List,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,DeliverImmutable,The method has 5 parameters.
Long Parameter List,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,DeliverMutable,The method has 5 parameters.
Long Parameter List,Orleans.Streams,PersistentStreamProducer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProducer.cs,PersistentStreamProducer,The method has 5 parameters.
Long Parameter List,Orleans.Streams,IStreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\IStreamGrainExtensions.cs,DeliverImmutable,The method has 5 parameters.
Long Parameter List,Orleans.Streams,IStreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\IStreamGrainExtensions.cs,DeliverMutable,The method has 5 parameters.
Long Parameter List,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The method has 6 parameters.
Long Parameter List,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The method has 6 parameters.
Long Parameter List,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The method has 6 parameters.
Long Parameter List,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The method has 7 parameters.
Long Parameter List,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The method has 7 parameters.
Long Parameter List,Orleans.Timers,ITimerRegistry,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\ITimerRegistry.cs,RegisterTimer,The method has 5 parameters.
Long Parameter List,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProducer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProducer.cs,SimpleMessageStreamProducer,The method has 7 parameters.
Long Identifier,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the parameter latencyPenalizedThreadAllocationConst is 37.
Long Identifier,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the parameter latencyPenalizedThreadAllocationCoef is 36.
Long Identifier,Orleans.Runtime,ThreadTrackingStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ThreadTrackingStatistic.cs,TrackContextSwitches,The length of the parameter allThreadsWithPerformanceCounters is 33.
Long Identifier,Orleans.Runtime,ThreadTrackingStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ThreadTrackingStatistic.cs,TrackContextSwitches,The length of the parameter performanceCountersForThisThread is 32.
Long Identifier,Orleans.Runtime,ClientStatisticsManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ClientStatisticsManager.cs,Start,The length of the parameter configurableMetricsDataPublisher is 32.
Long Identifier,Orleans,OrleansTaskExtentions,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\TaskExtensions.cs,WithTimeout,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Orleans,OrleansTaskExtentions,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\TaskExtensions.cs,WithTimeout,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,ToString,The length of the parameter remindersConnectionStringForLog is 31.
Long Identifier,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,StreamConsumerExtension,The length of the parameter streamSubscriptionChangeHandler is 31.
Long Identifier,Orleans.Streams.Core,StreamSubscriptionManagerAdmin,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Core\StreamSubscriptionManagerAdmin.cs,StreamSubscriptionManagerAdmin,The length of the parameter explicitStreamSubscriptionManager is 33.
Long Statement,Orleans.Runtime,TypeMetadataCache,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\TypeMetadataCache.cs,GetGrainReferenceType,The length of the statement  "	var genericInterfaceType = interfaceType.IsConstructedGenericType ? typeInfo.GetGenericTypeDefinition () : interfaceType; " is 121.
Long Statement,Orleans.Runtime,TypeMetadataCache,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\TypeMetadataCache.cs,GetGrainMethodInvokerType,The length of the statement  "	var genericInterfaceType = interfaceType.IsConstructedGenericType ? typeInfo.GetGenericTypeDefinition () : interfaceType; " is 121.
Long Statement,Orleans.Runtime,AssemblyProcessor,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyProcessor.cs,ProcessAssembly,The length of the statement  "			this.logger.Error (ErrorCode.SerMgr_TypeRegistrationFailure' "Failed to load type " + typeInfo.FullName + " in assembly " + assembly.FullName + "."' exception); " is 160.
Long Statement,Orleans.Runtime,AsyncPipeline,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncPipeline.cs,Add,The length of the statement  "	// whitebox testing results-- we initialize pipeSz with an inconsistent copy of Count because it's better than nothing and will reflect that the pipeline size was in a valid state during some portion of this method' even if it isn't at a properly synchronized moment. " is 267.
Long Statement,Orleans.Runtime,AsyncPipeline,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncPipeline.cs,Add,The length of the statement  "	// we should be using a try...finally to execute the whitebox testing logic here but it apparently adds too much latency to be palatable for AsyncPipelineSimpleTest()' which is sensitive to latency. " is 198.
Long Statement,Orleans.Runtime,LoggerExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerExtensions.cs,Fail,The length of the statement  "	logger.Error (errorCode' "INTERNAL FAILURE! About to crash! Fail message is: " + message + Environment.NewLine + Environment.StackTrace); " is 137.
Long Statement,Orleans.Runtime,LoggerExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerExtensions.cs,Fail,The length of the statement  "	logger.Error (ErrorCode.Logger_MiniDumpCreated' "INTERNAL FAILURE! Application mini-dump written to file " + dumpFile.FullName); " is 128.
Long Statement,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,MatchesPrefix,The length of the statement  "	return Name.StartsWith (prefix' StringComparison.Ordinal) || (loggerType + "." + Name).StartsWith (prefix' StringComparison.Ordinal); " is 133.
Long Statement,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,CheckBulkMessageLimits,The length of the statement  "	bool isExcluded = LogManager.excludedBulkLogCodes.Contains (logCode) || (sev == Severity.Verbose || sev == Severity.Verbose2 || sev == Severity.Verbose3); " is 154.
Long Statement,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,CheckBulkMessageLimits,The length of the statement  "				WriteLogMessage (ec + LogManager.BulkMessageSummaryOffset' Severity.Info' "Log code {0} occurred {1} additional time{2} in the previous {3}"' args' null); " is 154.
Long Statement,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,WriteLogMessage,The length of the statement  "				consumer.Log (Severity.Warning' loggerType' Name' "Previous log message was truncated - Max size = " + LogManager.MAX_LOG_MESSAGE_SIZE' LogManager.MyIPEndPoint' exception' (int)ErrorCode.Logger_LogMessageTruncated); " is 215.
Long Statement,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,WriteLogMessage,The length of the statement  "			Console.WriteLine ("Exception while passing a log message to log consumer. Logger type:{0}' name:{1}' severity:{2}' message:{3}' error code:{4}' message exception:{5}' log consumer exception:{6}"' consumer.GetType ().FullName' Name' sev' message' errorCode' exception' exc); " is 274.
Long Statement,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,WriteLogMessage,The length of the statement  "	var formatedTraceMessage = TraceParserUtils.FormatLogMessage (sev' loggerType' Name' message' LogManager.MyIPEndPoint' exception' errorCode); " is 141.
Long Statement,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,WriteLogMessage,The length of the statement  "		formatedTraceMessage = TraceParserUtils.FormatLogMessage (Severity.Warning' loggerType' Name' "Previous log message was truncated - Max size = " + LogManager.MAX_LOG_MESSAGE_SIZE' LogManager.MyIPEndPoint' exception' (int)ErrorCode.Logger_LogMessageTruncated); " is 259.
Long Statement,Orleans.Runtime,LogManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LogManager.cs,Initialize,The length of the statement  "		loggerStoreInternCache = new Interner<string' LoggerImpl> (LOGGER_INTERN_CACHE_INITIAL_SIZE' loggerInternCacheCleanupInterval); " is 127.
Long Statement,Orleans.Runtime,LogManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LogManager.cs,Initialize,The length of the statement  "                 * The issue appears to be related to the closing of the trace listeners' commenting out the following lines appears to "fix" the issue" is 134.
Long Statement,Orleans.Runtime,LogManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LogManager.cs,Initialize,The length of the statement  "				Trace.TraceError ("Error opening trace file {0} -- Using DefaultTraceListener instead -- Exception={1}"' config.TraceFileName' exc); " is 132.
Long Statement,Orleans.Runtime,LogManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LogManager.cs,GetLogger,The length of the statement  "	return loggerStoreInternCache != null ? loggerStoreInternCache.FindOrCreate (loggerName' name => new LoggerImpl (name' logType)) : new LoggerImpl (loggerName' logType); " is 168.
Long Statement,Orleans.Runtime,LogManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LogManager.cs,CreateMiniDump,The length of the statement  "		NativeMethods.MiniDumpWriteDump (handle' process.Id' stream.SafeFileHandle.DangerousGetHandle ()' dumpType' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero); " is 147.
Long Statement,Orleans.Runtime,MessageFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\MessageFactory.cs,CreateRejectionResponse,The length of the statement  "		this.logger.Verbose ("Creating {0} rejection with info '{1}' for {2} at:" + Environment.NewLine + "{3}"' type' info' this' Utils.GetStackTrace ()); " is 147.
Long Statement,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,Equals,The length of the statement  "	return this.IncludeNamespace == other.IncludeNamespace && this.IncludeTypeParameters == other.IncludeTypeParameters && this.IncludeGenericTypeParameters == other.IncludeGenericTypeParameters && this.NestedTypeSeparator == other.NestedTypeSeparator && string.Equals (this.NameSuffix' other.NameSuffix) && this.IncludeGlobal == other.IncludeGlobal; " is 346.
Long Statement,Orleans.Runtime,SingleRange,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\RingRange.cs,ToString,The length of the statement  "	return String.Format ("<(x{0'8:X8} x{1'8:X8}]' Size=x{2'8:X8}' %Ring={3:0.000}%>"' begin' end' RangeSize ()' RangePercentage ()); " is 129.
Long Statement,Orleans.Runtime,GeneralMultiRange,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\RingRange.cs,ToFullString,The length of the statement  "	return String.Format ("<MultiRange: Size=x{0'8:X8}' %Ring={1:0.000}%' {2} Ranges: {3}>"' RangeSize ()' RangePercentage ()' ranges.Count' Utils.EnumerableToString (ranges' r => r.ToFullString ())); " is 196.
Long Statement,Orleans.Runtime,EquallyDividedMultiRange,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\RingRange.cs,ToFullString,The length of the statement  "	return String.Format ("<EquallyDevidedMultiRange: Size=x{0'8:X8}' %Ring={1:0.000}%' {2} Ranges: {3}>"' rangeSize' rangePercentage' multiRanges.Count' Utils.DictionaryToString (multiRanges' r => r.ToFullString ())); " is 214.
Long Statement,Orleans.Runtime,IncomingMessageBuffer,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\IncomingMessageBuffer.cs,TryDecodeMessage,The length of the statement  "		List<ArraySegment<byte>> lenghts = ByteArrayBuilder.BuildSegmentListWithLengthLimit (readBuffer' decodeOffset' Message.LENGTH_HEADER_SIZE); " is 139.
Long Statement,Orleans.Runtime,IncomingMessageBuffer,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\IncomingMessageBuffer.cs,TryDecodeMessage,The length of the statement  "	List<ArraySegment<byte>> header = ByteArrayBuilder.BuildSegmentListWithLengthLimit (readBuffer' headerOffset' headerLength); " is 124.
Long Statement,Orleans.Runtime,IncomingMessageBuffer,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\IncomingMessageBuffer.cs,TryDecodeMessage,The length of the statement  "			Log.Info (ErrorCode.Messaging_LargeMsg_Incoming' "Receiving large message Size={0} HeaderLength={1} BodyLength={2}. Msg={3}"' headerLength + bodyLength' headerLength' bodyLength' msg.ToString ()); " is 196.
Long Statement,Orleans.Runtime,IncomingMessageBuffer,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\IncomingMessageBuffer.cs,GrowBuffer,The length of the statement  "	//TODO: Review networking layer and add max size checks to all dictionaries' arrays' or other variable sized containers. " is 120.
Long Statement,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,TryLoadAndCreateInstance,The length of the statement  "		var foundType = TypeUtils.GetTypes (assembly' type => typeof(T).IsAssignableFrom (type) && !type.GetTypeInfo ().IsInterface' logger).FirstOrDefault (); " is 151.
Long Statement,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,NewAssemblyLoader,The length of the statement  "	HashSet<AssemblyLoaderPathNameCriterion> pathNameCriteriaSet = null == pathNameCriteria ? new HashSet<AssemblyLoaderPathNameCriterion> () : new HashSet<AssemblyLoaderPathNameCriterion> (pathNameCriteria.Distinct ()); " is 216.
Long Statement,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,DiscoverAssemblies,The length of the statement  "			throw new InvalidOperationException ("Please specify a directory to search using the AddDirectory or AddRoot methods."); " is 120.
Long Statement,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,DiscoverAssemblies,The length of the statement  "		AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += CachedReflectionOnlyTypeResolver.OnReflectionOnlyAssemblyResolve; " is 122.
Long Statement,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,DiscoverAssemblies,The length of the statement  "		AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve -= CachedReflectionOnlyTypeResolver.OnReflectionOnlyAssemblyResolve; " is 122.
Long Statement,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,EnumerateApprovedAssemblies,The length of the statement  "		logger.Info (searchOption == SearchOption.TopDirectoryOnly ? "Searching for assemblies in {0}..." : "Recursively searching for assemblies in {0}..."' pathName); " is 160.
Long Statement,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,EnumerateApprovedAssemblies,The length of the statement  "		var candidates = Directory.EnumerateFiles (pathName' "*.dll"' searchOption).Select (Path.GetFullPath).Distinct ().ToArray (); " is 125.
Long Statement,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,MatchWithLoadedAssembly,The length of the statement  "	return MatchWithLoadedAssembly (searchFor' appDomain.GetAssemblies ()) ?? MatchWithLoadedAssembly (searchFor' appDomain.ReflectionOnlyGetAssemblies ()); " is 152.
Long Statement,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,IsCompatibleWithCurrentProcess,The length of the statement  "				var isLoadable = (isPureIL && processorArchitecture == ProcessorArchitecture.MSIL) || (Environment.Is64BitProcess && processorArchitecture == ProcessorArchitecture.Amd64) || (!Environment.Is64BitProcess && processorArchitecture == ProcessorArchitecture.X86); " is 258.
Long Statement,Orleans.Runtime,AssemblyLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoader.cs,IsCompatibleWithCurrentProcess,The length of the statement  "			"MissingMethodException occured. Please try to add a BindingRedirect for System.Collections.ImmutableCollections to the App.config file to correct this error." " is 159.
Long Statement,Orleans.Runtime,CachedReflectionOnlyTypeResolver,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\CachedReflectionOnlyTypeResolver.cs,OnReflectionOnlyAssemblyResolve,The length of the statement  "			logger.Verbose2 ("failed to find assembly {0} in {1}; searching for {2} instead."' assemblyName.FullName' dirName' pathName); " is 125.
Long Statement,Orleans.Runtime,CachedReflectionOnlyTypeResolver,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\CachedReflectionOnlyTypeResolver.cs,FormatReflectionOnlyAssemblyResolveFailureMessage,The length of the statement  "		return string.Format ("failed to resolve assembly in reflection-only context: args.Name={0}' args.RequestingAssembly.FullName={1}' args.RequestingAssembly.Location={2}"' args.Name ?? unavailable' reqAsmName' reqAsmLoc); " is 219.
Long Statement,Orleans.Runtime,CachedReflectionOnlyTypeResolver,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\CachedReflectionOnlyTypeResolver.cs,FormatReflectionOnlyAssemblyResolveFailureMessage,The length of the statement  "	return string.Format ("failed to resolve assembly in reflection-only context: args.Name={0}' args.RequestingAssembly.FullName={1}' args.RequestingAssembly.Location={2}"' args.Name ?? unavailable' reqAsmName' reqAsmLoc); " is 219.
Long Statement,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ThrowIfIsSystemTargetKey,The length of the statement  "		throw new ArgumentException ("This overload of NewKey cannot be used to construct an instance of UniqueKey containing a SystemTarget id."); " is 139.
Long Statement,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ThrowIfHasKeyExt,The length of the statement  "		throw new InvalidOperationException (string.Format ("This overload of {0} cannot be used if the grain uses the primary key extension feature."' methodName)); " is 157.
Long Statement,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,Equals,The length of the statement  "	return N0 == other.N0 && N1 == other.N1 && TypeCodeData == other.TypeCodeData && (!HasKeyExt || KeyExt == other.KeyExt); " is 120.
Long Statement,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,CompareTo,The length of the statement  "	return TypeCodeData < other.TypeCodeData ? -1 : TypeCodeData > other.TypeCodeData ? 1 : N0 < other.N0 ? -1 : N0 > other.N0 ? 1 : N1 < other.N1 ? -1 : N1 > other.N1 ? 1 : !HasKeyExt || KeyExt == null ? 0 : String.Compare (KeyExt' other.KeyExt' StringComparison.Ordinal); " is 269.
Long Statement,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,GetUniformHashCode,The length of the statement  "	// Disabling this ReSharper warning; hashCache is a logically read-only variable' so accessing them in GetHashCode is safe. " is 123.
Long Statement,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ConvertToGuid,The length of the statement  "	return new Guid ((UInt32)(N0 & 0xffffffff)' (UInt16)(N0 >> 32)' (UInt16)(N0 >> 48)' (byte)N1' (byte)(N1 >> 8)' (byte)(N1 >> 16)' (byte)(N1 >> 24)' (byte)(N1 >> 32)' (byte)(N1 >> 40)' (byte)(N1 >> 48)' (byte)(N1 >> 56)); " is 219.
Long Statement,Orleans.Runtime,TraceParserUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Telemetry\TraceParserUtils.cs,FormatLogMessage,The length of the statement  "	return FormatLogMessage_Impl (timestamp' severity' loggerType' caller' message' myIPEndPoint' exception' errorCode' true); " is 122.
Long Statement,Orleans.Runtime,TraceParserUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Telemetry\TraceParserUtils.cs,FormatLogMessage_Impl,The length of the statement  "	string exc = includeStackTrace ? LogFormatter.PrintException (exception) : LogFormatter.PrintExceptionWithoutStackTrace (exception); " is 132.
Long Statement,Orleans.Runtime,TraceParserUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Telemetry\TraceParserUtils.cs,FormatLogMessage_Impl,The length of the statement  "	string msg = String.Format ("[{0} {1'5}\t{2}\t{3}\t{4}\t{5}]\t{6}\t{7}"' LogManager.ShowDate ? LogFormatter.PrintDate (timestamp) : LogFormatter.PrintTime (timestamp)' //0 " is 171.
Long Statement,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the statement  "			// Wait time estimation - implementation of strategy 2 from the "local-throughput.pdf" "Coping with Practical Measurements".  " is 124.
Long Statement,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the statement  "				waitTimes.Add (stage' waitingStages.Contains (stage) ? Math.Max (wallClockPerRequest [stage] - avgRatio * cpuPerRequest [stage] - cpuPerRequest [stage]' 0) : 0); " is 161.
Long Statement,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the statement  "			// Final equation thread allocation - implementation of theorem 2 from the "local-throughput.pdf" "Incorporating Ready Time".  " is 125.
Long Statement,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the statement  "				throughputThreadAllocation.Add (stage' cores * numberOfRequests [stage] * (cpuPerRequest [stage] * (1 + stableReadyTimeProportion) + waitTimes [stage]) / cpuSum); " is 162.
Long Statement,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the statement  "				latencyThreadAllocation.Add (stage' lambda [stage] / s [stage] + Math.Sqrt (lambda [stage]) * (cores - sum1) / (Math.Sqrt (s [stage] * beta [stage]) * sum2)); " is 158.
Long Statement,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the statement  "				sb.AppendLine ("  lambda:                                  " + lambda [stage].ToString ("F3") + " arrival rate requests/sec"); " is 126.
Long Statement,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the statement  "				sb.AppendLine ("  s:                                       " + s [stage].ToString ("F3") + " per thread service rate requests/sec"); " is 132.
Long Statement,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the statement  "				sb.AppendLine ("  Throughput thread allocation:            " + Math.Ceiling (throughputThreadAllocation [stage]) + " threads  (rounded up from " + throughputThreadAllocation [stage].ToString ("F3") + ")"); " is 205.
Long Statement,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the statement  "				sb.AppendLine ("  Latency thread allocation:               " + Math.Ceiling (latencyThreadAllocation [stage]) + " threads  (rounded up from " + latencyThreadAllocation [stage].ToString ("F3") + ")"); " is 199.
Long Statement,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The length of the statement  "				sb.AppendLine ("  Regularlized latency thread allocation:  " + latencyPenalizedThreadAllocationConst [stage].ToString ("F3") + " + " + latencyPenalizedThreadAllocationCoef [stage].ToString ("F3") + " / sqrt(eta) threads  (rounded this value up)"); " is 247.
Long Statement,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,GetWallClockPerStagePerRequest,The length of the statement  "			// We need to add the pure Take time' since in the GetCpuPerStagePerRequest we includes both processingCPUCycleTime and the Take time.  " is 134.
Long Statement,Orleans.Runtime,HashRing,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\HashRing.cs,AddElement,The length of the statement  "		// Find the last element with hash smaller than the new element' and insert the latter after (this is why we have +1 here) the former. " is 134.
Long Statement,Orleans.Runtime,HashRing,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\HashRing.cs,ToString,The length of the statement  "		return String.Format ("All {0}:" + Environment.NewLine + "{1}"' typeof(T).Name' Utils.EnumerableToString (sortedRingList' elem => String.Format ("{0}/x{1'8:X8}"' elem' elem.GetUniformHashCode ())' Environment.NewLine' false)); " is 226.
Long Statement,Orleans.Runtime,AssemblyLoaderReflectionCriterion,F:\newReposMay17\dotnet_orleans\src\Orleans\AssemblyLoader\AssemblyLoaderReflectionCriterion.cs,InterceptReflectionTypeLoadException,The length of the statement  "	complaints = badFiles.Select ((fileName' msg) => String.Format ("An assembly dependency {0} could not be loaded: {1}"' fileName' msg)).ToArray (); " is 146.
Long Statement,Orleans.Runtime,TimeIntervalThreadCycleCounterBased,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ThreadCycleStopWatch.cs,Stop,The length of the statement  "		// Some threadpool threads seem to be reset' this is normal with .NET threadpool threads as its assumed they are restart out of our control " is 139.
Long Statement,Orleans.Runtime,ServiceCollectionExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\ServiceCollectionExtensions.cs,AddFromExisting,The length of the statement  "		var newRegistration = new ServiceDescriptor (typeof(TService)' sp => sp.GetRequiredService<TImplementation> ()' registration.Lifetime); " is 135.
Long Statement,Orleans.Runtime,ApplicationRequestsStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ApplicationRequestsStatisticsGroup.cs,Init,The length of the statement  "	appRequestsLatencyHistogram = ExponentialHistogramValueStatistic.Create_ExponentialHistogram_ForTiming (StatisticNames.APP_REQUESTS_LATENCY_HISTOGRAM' NUM_APP_REQUESTS_EXP_LATENCY_HISTOGRAM_CATEGORIES); " is 202.
Long Statement,Orleans.Runtime,ApplicationRequestsStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ApplicationRequestsStatisticsGroup.cs,Init,The length of the statement  "	appRequestsTotalLatency = CounterStatistic.FindOrCreate (StatisticNames.APP_REQUESTS_LATENCY_TOTAL' false' storage' true); " is 122.
Long Statement,Orleans.Runtime,ThreadTrackingStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ThreadTrackingStatistic.cs,OnStartProcessing,The length of the statement  "	// As this function is called constantly' we perform two additional tasks in this function which require calls from the thread being tracked (the constructor is not called from the tracked thread) " is 196.
Long Statement,Orleans.Runtime,ThreadTrackingStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ThreadTrackingStatistic.cs,OnStartProcessing,The length of the statement  "		// If this is the first function call where client has connected' we ensure execution timers are started and context switches are tracked " is 137.
Long Statement,Orleans.Runtime,ThreadTrackingStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ThreadTrackingStatistic.cs,OnStartProcessing,The length of the statement  "		// Must toggle this counter as its "Elapsed" value contains the value when it was last stopped' this is a limitation of our techniques for CPU tracking of threads " is 162.
Long Statement,Orleans.Runtime,ThreadTrackingStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ThreadTrackingStatistic.cs,TrackContextSwitches,The length of the statement  "	// In the case that the performance was not obtained correctly (this condition is null)' we simply will not have stats for context switches " is 139.
Long Statement,Orleans.Runtime,ThreadTrackingStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ThreadTrackingStatistic.cs,TrackContextSwitches,The length of the statement  "			FloatValueStatistic.FindOrCreate (new StatisticName (StatisticNames.THREADS_CONTEXT_SWITCHES' Name)' () => (float)performanceCounter.RawValue' CounterStorage.LogOnly); " is 167.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "		dispatcherMessagesProcessedOkPerDirection [(int)direction] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.MESSAGING_DISPATCHER_PROCESSED_OK_PER_DIRECTION' Enum.GetName (typeof(Message.Directions)' direction))); " is 230.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "	dispatcherMessagesProcessedErrorsPerDirection = new CounterStatistic[Enum.GetValues (typeof(Message.Directions)).Length]; " is 121.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "		dispatcherMessagesProcessedErrorsPerDirection [(int)direction] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.MESSAGING_DISPATCHER_PROCESSED_ERRORS_PER_DIRECTION' Enum.GetName (typeof(Message.Directions)' direction))); " is 238.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "	dispatcherMessagesProcessedReRoutePerDirection = new CounterStatistic[Enum.GetValues (typeof(Message.Directions)).Length]; " is 122.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "		dispatcherMessagesProcessedReRoutePerDirection [(int)direction] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.MESSAGING_DISPATCHER_PROCESSED_REROUTE_PER_DIRECTION' Enum.GetName (typeof(Message.Directions)' direction))); " is 240.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "	dispatcherMessagesProcessingReceivedPerDirection = new CounterStatistic[Enum.GetValues (typeof(Message.Directions)).Length]; " is 124.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "		dispatcherMessagesProcessingReceivedPerDirection [(int)direction] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.MESSAGING_DISPATCHER_RECEIVED_PER_DIRECTION' Enum.GetName (typeof(Message.Directions)' direction))); " is 233.
Long Statement,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The length of the statement  "	dispatcherReceivedByContext [1] = CounterStatistic.FindOrCreate (StatisticNames.MESSAGING_DISPATCHER_RECEIVED_ON_ACTIVATION); " is 125.
Long Statement,Orleans.Runtime,GrainInterfaceMap,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,AddEntry,The length of the statement  "		var implementation = new GrainClassData (grainTypeCode' grainName' isGenericGrainClass' grainInterfaceData' placement' registrationStrategy); " is 141.
Long Statement,Orleans.Runtime,GrainInterfaceMap,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,TryGetGrainClassData,The length of the statement  "	if (this.typeToInterfaceData.TryGetValue (GetTypeKey (interfaceType' false)' out interfaceData) && TryGetGrainClassData (interfaceData' out implementation' grainClassNamePrefix)) { " is 180.
Long Statement,Orleans.Runtime,GrainInterfaceMap,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,TryGetGrainClassData,The length of the statement  "	if (typeInfo.IsGenericType && this.typeToInterfaceData.TryGetValue (GetTypeKey (interfaceType' true)' out interfaceData) && TryGetGrainClassData (interfaceData' out implementation' grainClassNamePrefix)) { " is 205.
Long Statement,Orleans.Runtime,GrainInterfaceMap,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,GetTypeKey,The length of the statement  "		return TypeUtils.GetTemplatedName (TypeUtils.GetFullName (interfaceType)' interfaceType' interfaceType.GetGenericArguments ()' t => false); " is 139.
Long Statement,Orleans.Runtime,GrainInterfaceMap,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,TryGetGrainClassData,The length of the statement  "		throw new OrleansException (String.Format ("Cannot resolve grain interface ID={0} to a grain class because of multiple implementations of it: {1}"' interfaceData.InterfaceId' Utils.EnumerableToString (implementations' d => d.GrainClass' "'"' false))); " is 251.
Long Statement,Orleans.Runtime,GrainInterfaceMap,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,TryGetGrainClassData,The length of the statement  "		matches = implementations.Where (impl => impl.GrainClass.StartsWith (grainClassNamePrefix' StringComparison.Ordinal)).ToArray (); " is 129.
Long Statement,Orleans.Runtime,GrainInterfaceMap,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,TryGetGrainClassData,The length of the statement  "	throw new OrleansException (String.Format ("Cannot resolve grain interface ID={0}' grainClassNamePrefix={1} to a grain class because of multiple implementations of it: {2}"' interfaceData.InterfaceId' grainClassNamePrefix' Utils.EnumerableToString (matches' d => d.GrainClass' "'"' false))); " is 291.
Long Statement,Orleans.Runtime,ClientStatisticsManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ClientStatisticsManager.cs,Start,The length of the statement  "			configurableMetricsDataPublisher.AddConfiguration (config.DeploymentId' config.DNSHostName' clientId.ToString ()' transport.MyAddress.Endpoint.Address); " is 152.
Long Statement,Orleans.Runtime,ClientStatisticsManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ClientStatisticsManager.cs,Start,The length of the statement  "		var publisher = AssemblyLoader.LoadAndCreateInstance<IClientMetricsDataPublisher> (Constants.ORLEANS_AZURE_UTILS_DLL' logger' this.serviceProvider); " is 148.
Long Statement,Orleans.Runtime,ClientStatisticsManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ClientStatisticsManager.cs,Start,The length of the statement  "			var statsDataPublisher = AssemblyLoader.LoadAndCreateInstance<IStatisticsPublisher> (Constants.ORLEANS_AZURE_UTILS_DLL' logger' this.serviceProvider); " is 150.
Long Statement,Orleans.Runtime,ClientStatisticsManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ClientStatisticsManager.cs,Start,The length of the statement  "			await statsDataPublisher.Init (false' config.DataConnectionString' config.DeploymentId' transport.MyAddress.Endpoint.ToString ()' clientId.ToParsableString ()' config.DNSHostName); " is 180.
Long Statement,Orleans.Runtime,HistogramValueStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\HistogramValueStatistic.cs,PrintHistogramImpl,The length of the statement  "				sb.Append (String.Format (CultureInfo.InvariantCulture' "[{0}:{1}]={2}' "' TimeSpan.FromTicks ((long)start).TotalMilliseconds' one' bucket)); " is 141.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,Init,The length of the statement  "		turnsExecutedByAllWorkerThreadsTotalApplicationTurns = CounterStatistic.FindOrCreate (StatisticNames.SCHEDULER_TURNSEXECUTED_APPLICATION_BYALLWORKERTHREADS); " is 157.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,Init,The length of the statement  "		turnsExecutedByAllWorkerThreadsTotalSystemTurns = CounterStatistic.FindOrCreate (StatisticNames.SCHEDULER_TURNSEXECUTED_SYSTEM_BYALLWORKERTHREADS); " is 147.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,Init,The length of the statement  "		turnsExecutedByAllWorkerThreadsTotalNullTurns = CounterStatistic.FindOrCreate (StatisticNames.SCHEDULER_TURNSEXECUTED_NULL_BYALLWORKERTHREADS); " is 143.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,Init,The length of the statement  "		turnsExecutedByAllWorkItemGroupsTotalApplicationTurns = CounterStatistic.FindOrCreate (StatisticNames.SCHEDULER_TURNSEXECUTED_APPLICATION_BYALLWORKITEMGROUPS); " is 159.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,Init,The length of the statement  "		turnsExecutedByAllWorkItemGroupsTotalSystem = CounterStatistic.FindOrCreate (StatisticNames.SCHEDULER_TURNSEXECUTED_SYSTEM_BYALLWORKITEMGROUPS); " is 144.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,Init,The length of the statement  "		turnLengthHistogram = ExponentialHistogramValueStatistic.Create_ExponentialHistogram_ForTiming (StatisticNames.SCHEDULER_TURN_LENGTH_HISTOGRAM' TURN_LENGTH_HISTOGRAM_SIZE); " is 172.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The length of the statement  "			Array.Resize (ref turnsExecutedPerWorkerThreadApplicationTurns' 2 * turnsExecutedPerWorkerThreadApplicationTurns.Length); " is 121.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The length of the statement  "		turnsExecutedPerWorkerThreadApplicationTurns [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_APPLICATION_PERTHREAD' threadName)); " is 176.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The length of the statement  "		turnsExecutedPerWorkerThreadSystemTurns [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_SYSTEM_PERTHREAD' threadName)); " is 166.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The length of the statement  "		turnsExecutedPerWorkerThreadNull [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_NULL_PERTHREAD' threadName)); " is 157.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The length of the statement  "		CounterStorage storage = StatisticsCollector.ReportPerWorkItemStats (context) ? CounterStorage.LogAndTable : CounterStorage.DontStore; " is 134.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The length of the statement  "		turnsExecutedPerWorkItemGroup [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_ACTIVATION_TURNSEXECUTED_PERACTIVATION' workItemGroupName)' storage); " is 180.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The length of the statement  "		workItemGroupStatuses [i] = StringValueStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_ACTIVATION_STATUS_PERACTIVATION' workItemGroupName)' statusGetter' storage); " is 183.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,UnRegisterWorkItemGroup,The length of the statement  "	Utils.SafeExecute (() => CounterStatistic.Delete (turnsExecutedPerWorkItemGroup [workItemGroup].Name)' logger' () => String.Format ("SchedulerStatisticsGroup.UnRegisterWorkItemGroup({0})"' turnsExecutedPerWorkItemGroup [workItemGroup].Name)); " is 242.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,UnRegisterWorkItemGroup,The length of the statement  "	Utils.SafeExecute (() => StringValueStatistic.Delete (workItemGroupStatuses [workItemGroup].Name)' logger' () => String.Format ("SchedulerStatisticsGroup.UnRegisterWorkItemGroup({0})"' workItemGroupStatuses [workItemGroup].Name)); " is 230.
Long Statement,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,OnTurnExecutionStartsByWorkGroup,The length of the statement  "		throw new ArgumentException (String.Format ("Cannot execute null context work item on work item group {0}."' workItemGroup)); " is 125.
Long Statement,Orleans.Runtime,NetworkingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\NetworkingStatisticsGroup.cs,Init,The length of the statement  "		closedGatewayToClientDuplexSockets = CounterStatistic.FindOrCreate (StatisticNames.NETWORKING_SOCKETS_GATEWAYTOCLIENT_DUPLEX_CLOSED); " is 133.
Long Statement,Orleans.Runtime,NetworkingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\NetworkingStatisticsGroup.cs,Init,The length of the statement  "		openedGatewayToClientDuplexSockets = CounterStatistic.FindOrCreate (StatisticNames.NETWORKING_SOCKETS_GATEWAYTOCLIENT_DUPLEX_OPENED); " is 133.
Long Statement,Orleans.Runtime,NetworkingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\NetworkingStatisticsGroup.cs,Init,The length of the statement  "		closedClientToGatewayDuplexSockets = CounterStatistic.FindOrCreate (StatisticNames.NETWORKING_SOCKETS_CLIENTTOGATEWAY_DUPLEX_CLOSED); " is 133.
Long Statement,Orleans.Runtime,NetworkingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\NetworkingStatisticsGroup.cs,Init,The length of the statement  "		openedClientToGatewayDuplexSockets = CounterStatistic.FindOrCreate (StatisticNames.NETWORKING_SOCKETS_CLIENTTOGATEWAY_DUPLEX_OPENED); " is 133.
Long Statement,Orleans.Runtime,LogStatistics,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\LogStatistics.cs,DumpCounters,The length of the statement  "	foreach (ICounter stat in allCounters.Where (cs => cs.Storage != CounterStorage.DontStore).Union (additionalCounters).Where (cs => cs.IsValueDelta)) { " is 150.
Long Statement,Orleans.Runtime,LogStatistics,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "		var numHeadersPerMsg = FloatValueStatistic.CreateDoNotRegister ("AutoGenerated.Serialization.Header.Serialization.NumHeadersPerMsg"' () => numHeaders / numMessages); " is 165.
Long Statement,Orleans.Runtime,LogStatistics,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "		var numHeaderBytesPerMsg = FloatValueStatistic.CreateDoNotRegister ("AutoGenerated.Serialization.Header.Serialization.NumHeaderBytesPerMsg"' () => headerBytes / numMessages); " is 174.
Long Statement,Orleans.Runtime,LogStatistics,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "		var numBodyBytesPerMsg = FloatValueStatistic.CreateDoNotRegister ("AutoGenerated.Serialization.Body.Serialization.NumBodyBytesPerMsg"' () => (totalBytes - headerBytes) / numMessages); " is 183.
Long Statement,Orleans.Runtime,LogStatistics,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "		var headerSerMillisPerMessage = FloatValueStatistic.CreateDoNotRegister ("AutoGenerated.Serialization.Header.Serialization.MillisPerMessage"' () => headerSerializationMillis / numMessages); " is 189.
Long Statement,Orleans.Runtime,LogStatistics,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "		var headerDeserMillisPerMessage = FloatValueStatistic.CreateDoNotRegister ("AutoGenerated.Serialization.Header.Deserialization.MillisPerMessage"' () => headerDeserializationMillis / numMessages); " is 195.
Long Statement,Orleans.Runtime,LogStatistics,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "		var bodySerMillisPerMessage = FloatValueStatistic.CreateDoNotRegister ("AutoGenerated.Serialization.Body.Serialization.MillisPerMessage"' () => bodySerializationMillis / numMessages); " is 183.
Long Statement,Orleans.Runtime,LogStatistics,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "		var bodyDeserMillisPerMessage = FloatValueStatistic.CreateDoNotRegister ("AutoGenerated.Serialization.Body.Deserialization.MillisPerMessage"' () => bodyDeserializationMillis / numMessages); " is 189.
Long Statement,Orleans.Runtime,LogStatistics,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\LogStatistics.cs,GenerateAdditionalCounters,The length of the statement  "		var bodyCopyMillisPerMessage = FloatValueStatistic.CreateDoNotRegister ("AutoGenerated.Serialization.Body.DeepCopy.MillisPerMessage"' () => bodyCopyMillis / numMessages); " is 170.
Long Statement,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,InitCpuMemoryCounters,The length of the statement  "		promotedFinalizationMemoryFromGen0PF = new PerformanceCounter (".NET CLR Memory"' "Promoted Finalization-Memory from Gen 0"' thisProcess' true); " is 144.
Long Statement,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,InitCpuMemoryCounters,The length of the statement  "		logger.Warn (ErrorCode.PerfCounterConnectError' "Error initializing CPU & Memory perf counters - you need to repair Windows perf counter config on this machine with 'lodctr /r' command"); " is 187.
Long Statement,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,Start,The length of the statement  "		logger.Warn (ErrorCode.PerfCounterNotRegistered' "CPU & Memory perf counters did not initialize correctly - try repairing Windows perf counter config on this machine with 'lodctr /r' command"); " is 193.
Long Statement,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,Start,The length of the statement  "		FloatValueStatistic.FindOrCreate (StatisticNames.RUNTIME_GC_ALLOCATEDBYTESINKBPERSEC' () => allocatedBytesPerSecPF.NextValue () / KB); " is 134.
Long Statement,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,Start,The length of the statement  "		FloatValueStatistic.FindOrCreate (StatisticNames.RUNTIME_GC_PROMOTEDMEMORYFROMGEN1KB' () => promotedMemoryFromGen1PF.NextValue () / KB); " is 136.
Long Statement,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,Start,The length of the statement  "		FloatValueStatistic.FindOrCreate (StatisticNames.RUNTIME_GC_LARGEOBJECTHEAPSIZEKB' () => largeObjectHeapSizePF.NextValue () / KB); " is 130.
Long Statement,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,Start,The length of the statement  "		FloatValueStatistic.FindOrCreate (StatisticNames.RUNTIME_GC_PROMOTEDMEMORYFROMGEN0KB' () => promotedFinalizationMemoryFromGen0PF.NextValue () / KB); " is 148.
Long Statement,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,Start,The length of the statement  "		FloatValueStatistic.FindOrCreate (StatisticNames.RUNTIME_GC_NUMBEROFINDUCEDGCS' () => numberOfInducedGCsPF.NextValue ()); " is 121.
Long Statement,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,Start,The length of the statement  "	IntValueStatistic.FindOrCreate (StatisticNames.RUNTIME_MEMORY_TOTALPHYSICALMEMORYMB' () => (long)((TotalPhysicalMemory / KB) / KB)); " is 132.
Long Statement,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,Start,The length of the statement  "		IntValueStatistic.FindOrCreate (StatisticNames.RUNTIME_MEMORY_AVAILABLEMEMORYMB' () => (long)((AvailableMemory / KB) / KB)); " is 124.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "		MessagesSentPerDirection [(int)direction] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.MESSAGING_SENT_MESSAGES_PER_DIRECTION' Enum.GetName (typeof(Message.Directions)' direction))); " is 203.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "		MessagesReceivedPerDirection [(int)direction] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.MESSAGING_RECEIVED_MESSAGES_PER_DIRECTION' Enum.GetName (typeof(Message.Directions)' direction))); " is 211.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "		ReroutedMessages [(int)direction] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.MESSAGING_REROUTED_PER_DIRECTION' Enum.GetName (typeof(Message.Directions)' direction))); " is 190.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "	sentMsgSizeHistogram = ExponentialHistogramValueStatistic.Create_ExponentialHistogram (StatisticNames.MESSAGING_SENT_MESSAGESIZEHISTOGRAM' NUM_MSG_SIZE_HISTOGRAM_CATEGORIES); " is 174.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "	receiveMsgSizeHistogram = ExponentialHistogramValueStatistic.Create_ExponentialHistogram (StatisticNames.MESSAGING_RECEIVED_MESSAGESIZEHISTOGRAM' NUM_MSG_SIZE_HISTOGRAM_CATEGORIES); " is 181.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "		perSocketDirectionStatsSend [(int)SocketDirection.SiloToSilo] = new PerSocketDirectionStats (true' SocketDirection.SiloToSilo); " is 127.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "		perSocketDirectionStatsSend [(int)SocketDirection.GatewayToClient] = new PerSocketDirectionStats (true' SocketDirection.GatewayToClient); " is 137.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "		perSocketDirectionStatsReceive [(int)SocketDirection.SiloToSilo] = new PerSocketDirectionStats (false' SocketDirection.SiloToSilo); " is 131.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "		perSocketDirectionStatsReceive [(int)SocketDirection.GatewayToClient] = new PerSocketDirectionStats (false' SocketDirection.GatewayToClient); " is 141.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "		perSocketDirectionStatsSend [(int)SocketDirection.ClientToGateway] = new PerSocketDirectionStats (true' SocketDirection.ClientToGateway); " is 137.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,Init,The length of the statement  "		perSocketDirectionStatsReceive [(int)SocketDirection.ClientToGateway] = new PerSocketDirectionStats (false' SocketDirection.ClientToGateway); " is 141.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnMessageSend_Impl,The length of the statement  "	FindCounter (perSiloSendCounters' new StatisticName (StatisticNames.MESSAGING_SENT_MESSAGES_PER_SILO' (targetSilo != null ? targetSilo.ToString () : "Null"))' CounterStorage.LogOnly).IncrementBy (numMsgsInBatch); " is 212.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnMessageReceive,The length of the statement  "	FindCounter (perSiloReceiveCounters' new StatisticName (StatisticNames.MESSAGING_RECEIVED_MESSAGES_PER_SILO' (addr != null ? addr.ToString () : "Null"))' CounterStorage.LogOnly).Increment (); " is 191.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnPingSend,The length of the statement  "	FindCounter (perSiloPingSendCounters' new StatisticName (StatisticNames.MESSAGING_PINGS_SENT_PER_SILO' destination.ToString ())' CounterStorage.LogOnly).Increment (); " is 166.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnPingReceive,The length of the statement  "	FindCounter (perSiloPingReceiveCounters' new StatisticName (StatisticNames.MESSAGING_PINGS_RECEIVED_PER_SILO' destination.ToString ())' CounterStorage.LogOnly).Increment (); " is 173.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnPingReplyReceived,The length of the statement  "	FindCounter (perSiloPingReplyReceivedCounters' new StatisticName (StatisticNames.MESSAGING_PINGS_REPLYRECEIVED_PER_SILO' replier.ToString ())' CounterStorage.LogOnly).Increment (); " is 180.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnPingReplyMissed,The length of the statement  "	FindCounter (perSiloPingReplyMissedCounters' new StatisticName (StatisticNames.MESSAGING_PINGS_REPLYMISSED_PER_SILO' replier.ToString ())' CounterStorage.LogOnly).Increment (); " is 176.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnFailedSentMessage,The length of the statement  "		FailedSentMessages [direction] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.MESSAGING_SENT_FAILED_PER_DIRECTION' Enum.GetName (typeof(Message.Directions)' direction))); " is 190.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnDroppedSentMessage,The length of the statement  "		DroppedSentMessages [direction] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.MESSAGING_SENT_DROPPED_PER_DIRECTION' Enum.GetName (typeof(Message.Directions)' direction))); " is 192.
Long Statement,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnRejectedMessage,The length of the statement  "		RejectedMessages [direction] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.MESSAGING_REJECTED_PER_DIRECTION' Enum.GetName (typeof(Message.Directions)' direction))); " is 185.
Long Statement,Orleans.Runtime,BufferPool,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\BufferPool.cs,InitGlobalBufferPool,The length of the statement  "	GlobalPool = new BufferPool (config.BufferPoolBufferSize' config.BufferPoolMaxSize' config.BufferPoolPreallocationSize' "Global"); " is 130.
Long Statement,Orleans.Runtime,SiloRuntimeStatistics,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\IPerformanceMetrics.cs,ToString,The length of the statement  "	return String.Format ("SiloRuntimeStatistics: ActivationCount={0} RecentlyUsedActivationCount={11} RequestQueueLength={1} SendQueueLength={2} " + "ReceiveQueueLength={3} CpuUsage={4} AvailableMemory={5} MemoryUsage={6} IsOverloaded={7} " + "ClientCount={8} TotalPhysicalMemory={9} DateTime={10}"' ActivationCount' RequestQueueLength' SendQueueLength' ReceiveQueueLength' CpuUsage' AvailableMemory' MemoryUsage' IsOverloaded' ClientCount' TotalPhysicalMemory' DateTime' RecentlyUsedActivationCount); " is 498.
Long Statement,Orleans.Runtime,GrainStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\IPerformanceMetrics.cs,ToString,The length of the statement  "	return string.Format ("GrainStatistic: GrainType={0} NumSilos={1} NumGrains={2} NumActivations={3} "' GrainType' SiloCount' GrainCount' ActivationCount); " is 153.
Long Statement,Orleans.Runtime,SimpleGrainStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\IPerformanceMetrics.cs,ToString,The length of the statement  "	return string.Format ("SimpleGrainStatistic: GrainType={0} Silo={1} NumActivations={2} "' GrainType' SiloAddress' ActivationCount); " is 131.
Long Statement,Orleans.Runtime,DetailedGrainReport,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\IPerformanceMetrics.cs,ToString,The length of the statement  "	return string.Format (Environment.NewLine + "**DetailedGrainReport for grain {0} from silo {1} SiloAddress={2}" + Environment.NewLine + "   LocalCacheActivationAddresses={3}" + Environment.NewLine + "   LocalDirectoryActivationAddresses={4}" + Environment.NewLine + "   PrimaryForGrain={5}" + Environment.NewLine + "   GrainClassTypeName={6}" + Environment.NewLine + "   LocalActivations:" + Environment.NewLine + "{7}." + Environment.NewLine' Grain.ToDetailedString ()' // {0} " is 477.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,Start,The length of the statement  "		throw new InvalidOperationException (String.Format ("Calling start on timer {0} is not allowed' since it was already created in a started mode with specified due."' GetFullName ())); " is 182.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,Init,The length of the statement  "		logger.Verbose (ErrorCode.TimerChanging' "Creating timer {0} with dueTime={1} period={2}"' GetFullName ()' due' period); " is 120.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,CheckTimerFreeze,The length of the statement  "	return CheckTimerDelay (previousTickTime' totalNumTicks' dueTime' timerFrequency' logger' () => String.Format ("{0}.{1}"' GetFullName ()' callerName ())' ErrorCode.Timer_SafeTimerIsNotTicking' true); " is 199.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,CheckTimerDelay,The length of the statement  "	var errMsg = String.Format ("{0}{1} did not fire on time. Last fired at {2}' {3} since previous fire' should have fired after {4}."' freezeCheck ? "Watchdog Freeze Alert: " : "-"' // 0 " is 184.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,Change,The length of the statement  "		throw new ArgumentOutOfRangeException ("period"' period' string.Format ("Cannot use TimeSpan.Zero for timer {0} period"' GetFullName ())); " is 138.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,Change,The length of the statement  "		logger.Verbose (ErrorCode.TimerChanging' "Changing timer {0} to dueTime={1} period={2}"' GetFullName ()' newDueTime' period); " is 125.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,Change,The length of the statement  "		logger.Warn (ErrorCode.TimerChangeError' string.Format ("Error changing timer period - timer {0} not changed"' GetFullName ())' exc); " is 133.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,HandleSyncTimerCallback,The length of the statement  "		logger.Warn (ErrorCode.TimerCallbackError' string.Format ("Ignored exception {0} during sync timer callback {1}"' exc.Message' GetFullName ())' exc); " is 149.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "	// It may happen than the asyncCallbackFunc will resolve some promises on which the higher level application code is depends upon " is 129.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "	// In the unit test case this may lead to the situation where unit test has finished' but p1 or p2 or p3 have not been observed yet. " is 132.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "	// To properly fix this we may use a mutex/monitor to delay execution of asyncCallbackFunc until all CWs and Finally in the code below were scheduled  " is 149.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "	// This however will relay on scheduler executing these in separate threads to prevent deadlock' so needs to be done carefully.  " is 127.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "	// In particular' need to make sure we execute asyncCallbackFunc in another thread (so use StartNew instead of ExecuteWithSafeTryCatch). " is 136.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "			logger.Verbose3 (ErrorCode.TimerBeforeCallback' "About to make async task timer callback for timer {0}"' GetFullName ()); " is 121.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,HandleAsyncTaskTimerCallback,The length of the statement  "		logger.Warn (ErrorCode.TimerCallbackError' string.Format ("Ignored exception {0} during async task timer callback {1}"' exc.Message' GetFullName ())' exc); " is 155.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,QueueNextTimerTick,The length of the statement  "		logger.Warn (ErrorCode.TimerDisposeError' string.Format ("Timer {0} already disposed - will not queue next timer tick"' GetFullName ())' ode); " is 142.
Long Statement,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,QueueNextTimerTick,The length of the statement  "		logger.Error (ErrorCode.TimerQueueTickError' string.Format ("Error queueing next timer tick - WARNING: timer {0} is now stopped"' GetFullName ())' exc); " is 152.
Long Statement,Orleans.Runtime,StandardExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\StandardExtensions.cs,NextTimeSpan,The length of the statement  "		throw new ArgumentOutOfRangeException ("timeSpan"' timeSpan' "SafeRandom.NextTimeSpan timeSpan must be a positive number."); " is 124.
Long Statement,Orleans.Runtime,StandardExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\StandardExtensions.cs,NextTimeSpan,The length of the statement  "		throw new ArgumentOutOfRangeException ("minValue"' minValue' "SafeRandom.NextTimeSpan minValue must be a positive number."); " is 124.
Long Statement,Orleans.Runtime,StandardExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\StandardExtensions.cs,NextTimeSpan,The length of the statement  "		throw new ArgumentOutOfRangeException ("minValue"' minValue' "SafeRandom.NextTimeSpan minValue must be greater than maxValue."); " is 128.
Long Statement,Orleans.Runtime,GrainReferenceCache,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReferenceCache.cs,Get,The length of the statement  "			KeyValuePair<TKey' TimestampedValue> entryToFree = cache.FirstOrDefault (kvp => kvp.Value.Generation == generationToDelete); " is 124.
Long Statement,Orleans.Runtime,RequestContext,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\RequestContext.cs,Export,The length of the statement  "			if (values == null || !values.TryGetValue (E2_E_TRACING_ACTIVITY_ID_HEADER' out existingActivityId) || activityIdOverride != (Guid)existingActivityId) { " is 152.
Long Statement,Orleans.Runtime,RequestContext,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\RequestContext.cs,Export,The length of the statement  "	return (values != null && values.Count > 0) ? (Dictionary<string' object>)serializationManager.DeepCopy (values) : null; " is 120.
Long Statement,Orleans.Runtime,SchedulingUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\ISchedulingContext.cs,IsSystemPriorityContext,The length of the statement  "	// System Priorit Context are either associated with the (null) context' system target or regular (non low priority) system thread. " is 131.
Long Statement,Orleans.Runtime,SchedulingUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\ISchedulingContext.cs,IsSystemPriorityContext,The length of the statement  "	// Both System targets' system thread and normal grains have OrleansContext instances' of the appropriate type (based on SchedulingContext.ContextType). " is 152.
Long Statement,Orleans.Runtime,SchedulingUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\ISchedulingContext.cs,IsSystemContext,The length of the statement  "	// System Context are either associated with the (null) context' system target or any (low and high priority) system thread. " is 124.
Long Statement,Orleans.Runtime,SchedulingUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\ISchedulingContext.cs,IsSystemContext,The length of the statement  "	// Both System targets' system thread and normal grains have OrleansContext instances' of the appropriate type (based on SchedulingContext.ContextType). " is 152.
Long Statement,Orleans.Runtime,SchedulingUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\ISchedulingContext.cs,IsSystemContext,The length of the statement  "	return context == null || context.ContextType == SchedulingContextType.SystemTarget || context.ContextType == SchedulingContextType.SystemThread; " is 145.
Long Statement,Orleans.Runtime,SocketManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\SocketManager.cs,WriteConnectionPreamble,The length of the statement  "		// From MSDN: If you are using a connection-oriented protocol' Send will block until all of the bytes in the buffer are sent'  " is 125.
Long Statement,Orleans.Runtime,ActivationAddress,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\ActivationAddress.cs,Equals,The length of the statement  "	return other != null && Equals (Silo' other.Silo) && Equals (Grain' other.Grain) && Equals (Activation' other.Activation); " is 122.
Long Statement,Orleans.Runtime,ActivationAddress,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\ActivationAddress.cs,GetHashCode,The length of the statement  "	return (Silo != null ? Silo.GetHashCode () : 0) ^ (Grain != null ? Grain.GetHashCode () : 0) ^ (Activation != null ? Activation.GetHashCode () : 0); " is 148.
Long Statement,Orleans.Runtime,ActivationId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\ActivationId.cs,GetClientGWActivation,The length of the statement  "	string stringToHash = grain.ToParsableString () + location.Endpoint + location.Generation.ToString (System.Globalization.CultureInfo.InvariantCulture); " is 151.
Long Statement,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AgentThreadProc,The length of the statement  "		LogStatus (agent.Log' "Starting AsyncAgent {0} on managed thread {1}"' agent.Name' Thread.CurrentThread.ManagedThreadId); " is 121.
Long Statement,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AgentThreadProc,The length of the statement  "		CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.RUNTIME_THREADS_ASYNC_AGENT_PERAGENTTYPE' agent.type)).Increment (); " is 133.
Long Statement,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AgentThreadProc,The length of the statement  "				Console.WriteLine ("The {0} agent has thrown an unhandled exception' {1}. The process will be terminated."' agent.Name' exc); " is 125.
Long Statement,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AgentThreadProc,The length of the statement  "				log.Error (ErrorCode.Runtime_Error_100023' "AsynchAgent Run method has thrown an unhandled exception. The process will be terminated."' exc); " is 141.
Long Statement,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AgentThreadProc,The length of the statement  "				log.Fail (ErrorCode.Runtime_Error_100024' "Terminating process because of an unhandled exception caught in AsynchAgent.Run."); " is 126.
Long Statement,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AgentThreadProc,The length of the statement  "				log.Error (ErrorCode.Runtime_Error_100025' "AsynchAgent Run method has thrown an unhandled exception. The agent will exit."' exc); " is 130.
Long Statement,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AgentThreadProc,The length of the statement  "				log.Error (ErrorCode.Runtime_Error_100026' "AsynchAgent Run method has thrown an unhandled exception. The agent will be restarted."' exc); " is 138.
Long Statement,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AgentThreadProc,The length of the statement  "		CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.RUNTIME_THREADS_ASYNC_AGENT_PERAGENTTYPE' agent.type)).DecrementBy (1); " is 136.
Long Statement,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AgentThreadProc,The length of the statement  "		agent.Log.Info (ErrorCode.Runtime_Error_100328' "Stopping AsyncAgent {0} that runs on managed thread {1}"' agent.Name' Thread.CurrentThread.ManagedThreadId); " is 157.
Long Statement,Orleans.Runtime,ByteArrayBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ByteArrayBuilder.cs,Append,The length of the statement  "	// 2) Make sure to ALWAYS copy arrays which size is EXACTLY bufferSize' otherwise if the data was passed as an Immutable arg'  " is 125.
Long Statement,Orleans.Runtime,ByteArrayBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ByteArrayBuilder.cs,Append,The length of the statement  "	// 3) If we already have MINIMUM_BUFFER_SIZE in the current buffer and passed enough data' also skip the copy and append it as its own buffer.  " is 142.
Long Statement,Orleans.Runtime,ByteArrayBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ByteArrayBuilder.cs,Append,The length of the statement  "	if (((arrLen != bufferSize) && (currentOffset > MINIMUM_BUFFER_SIZE) && (arrLen > MINIMUM_BUFFER_SIZE)) || (arrLen > bufferSize)) { " is 131.
Long Statement,Orleans.Runtime,ByteArrayBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ByteArrayBuilder.cs,BuildSegmentListWithLengthLimit,The length of the statement  "			result.Add (new ArraySegment<byte> (segment.Array' bytesStillToSkip' Math.Min (length - countSoFar' segment.Count - bytesStillToSkip))); " is 136.
Long Statement,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,NewClientId,The length of the statement  "	return FindOrCreateGrainId (UniqueKey.NewKey (id' clusterId == null ? UniqueKey.Category.Client : UniqueKey.Category.GeoClient' 0' clusterId)); " is 143.
Long Statement,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,GetGrainId,The length of the statement  "	return FindOrCreateGrainId (UniqueKey.NewKey (primaryKey' keyExt == null ? UniqueKey.Category.Grain : UniqueKey.Category.KeyExtGrain' typeCode' keyExt)); " is 153.
Long Statement,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,GetGrainId,The length of the statement  "	return FindOrCreateGrainId (UniqueKey.NewKey (primaryKey' keyExt == null ? UniqueKey.Category.Grain : UniqueKey.Category.KeyExtGrain' typeCode' keyExt)); " is 153.
Long Statement,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToFullString,The length of the statement  "	string pks = Key.IsLongKey ? GetPrimaryKeyLong (out kx).ToString (CultureInfo.InvariantCulture) : GetPrimaryKey (out kx).ToString (); " is 133.
Long Statement,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToFullString,The length of the statement  "	return String.Format ("[GrainId: {0}' IdCategory: {1}' BaseTypeCode: {2} (x{3})' PrimaryKey: {4} (x{5})' UniformHashCode: {6} (0x{7' 8:X8}){8}]"' ToDetailedString ()' Category' TypeCode' TypeCode.ToString ("X")' pks' pksHex' GetUniformHashCode ()' GetUniformHashCode ()' Key.HasKeyExt ? String.Format ("' KeyExtension: {0}"' kx) : ""); " is 335.
Long Statement,Orleans.Runtime,LRU,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\LRU.cs,AdjustSize,The length of the statement  "		KeyValuePair<TKey' TimestampedValue> entryToFree = cache.FirstOrDefault (kvp => kvp.Value.Generation == generationToDelete); " is 124.
Long Statement,Orleans.Runtime,Message,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\Message.cs,ToString,The length of the statement  "	return String.Format ("{0}{1}{2}{3}{4} {5}->{6} #{7}{8}{9}: {10}"' IsReadOnly ? "ReadOnly " : ""' IsAlwaysInterleave ? "IsAlwaysInterleave " : ""' IsNewPlacement ? "NewPlacement " : ""' response' Direction' String.Format ("{0}{1}{2}"' SendingSilo' SendingGrain' SendingActivation)' String.Format ("{0}{1}{2}{3}"' TargetSilo' TargetGrain' TargetActivation' TargetObserverId)' Id' ResendCount > 0 ? "[ResendCount=" + ResendCount + "]" : ""' ForwardCount > 0 ? "[ForwardCount=" + ForwardCount + "]" : ""' DebugContext); " is 516.
Long Statement,Orleans.Runtime,SiloAddress,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\SiloAddress.cs,Matches,The length of the statement  "	return other != null && Endpoint.Address.Equals (other.Endpoint.Address) && (Endpoint.Port == other.Endpoint.Port) && ((Generation == other.Generation) || (Generation == 0) || (other.Generation == 0)); " is 201.
Long Statement,Orleans.Runtime,SiloAddress,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\SiloAddress.cs,Equals,The length of the statement  "	return other != null && Endpoint.Address.Equals (other.Endpoint.Address) && (Endpoint.Port == other.Endpoint.Port) && ((Generation == other.Generation)); " is 153.
Long Statement,Orleans.Runtime,SiloAddress,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\SiloAddress.cs,CompareTo,The length of the statement  "	// and is also semantically meaningfull - older silos (with smaller Generation) will appear first in the comparison order. " is 122.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetSimpleTypeName,The length of the statement  "			return GetTemplatedName (GetUntemplatedTypeName (typeInfo.DeclaringType.Name)' typeInfo.DeclaringType' typeInfo.GetGenericArguments ()' _ => true) + "." + GetUntemplatedTypeName (typeInfo.Name); " is 194.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetParameterizedTemplateName,The length of the statement  "			s += genericParameter.FullName == null || !fullName (genericParameter) ? genericParameter.Name : genericParameter.FullName; " is 123.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetAllFields,The length of the statement  "	const BindingFlags AllFields = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly; " is 128.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,IsInNamespace,The length of the statement  "		if (type.Namespace.StartsWith (ns' StringComparison.Ordinal) && (type.Namespace.Length == ns.Length || type.Namespace [ns.Length] == '.')) { " is 140.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetTypes,The length of the statement  "	return assembly.IsDynamic ? Enumerable.Empty<Type> () : GetDefinedTypes (assembly' logger).Select (t => t.AsType ()).Where (type => !type.GetTypeInfo ().IsNestedPrivate && whereFunc (type)); " is 190.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetDefinedTypes,The length of the statement  "			return typeLoadException.Types.Where (type => type != null).Select (type => type.GetTypeInfo ()) ?? Enumerable.Empty<TypeInfo> (); " is 130.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetTypes,The length of the statement  "	foreach (var assembly in currentAssemblies.Where (loaded => !loaded.IsDynamic && assemblies.Contains (loaded.Location))) { " is 122.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,IsGrainMethod,The length of the statement  "	return methodInfo.DeclaringType.GetTypeInfo ().IsInterface && typeof(IAddressable).IsAssignableFrom (methodInfo.DeclaringType); " is 127.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,TypeHasAttribute,The length of the statement  "		return CustomAttributeData.GetCustomAttributes (type).Any (attrib => attribType.IsAssignableFrom (attrib.AttributeType)); " is 121.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetParseableName,The length of the statement  "		GetParseableName (type' builder' new Queue<Type> (typeInfo.IsGenericTypeDefinition ? typeInfo.GetGenericArguments () : typeInfo.GenericTypeArguments)' options); " is 160.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetParseableName,The length of the statement  "		builder.AppendFormat ("{0}[{1}]"' typeInfo.GetElementType ().GetParseableName (options)' string.Concat (Enumerable.Range (0' type.GetArrayRank () - 1).Select (_ => '''))); " is 171.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetParseableName,The length of the statement  "		var generics = Enumerable.Range (0' Math.Min (typeInfo.GetGenericArguments ().Count ()' typeArguments.Count)).Select (_ => typeArguments.Dequeue ()).ToList (); " is 159.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetParseableName,The length of the statement  "		var generics = Enumerable.Range (0' Math.Min (type.GetGenericArguments ().Count ()' typeArguments.Count)).Select (_ => typeArguments.Dequeue ()).ToList (); " is 155.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetParseableName,The length of the statement  "			var genericParameters = string.Join ("'"' generics.Select (_ => options.IncludeGenericTypeParameters ? _.ToString () : string.Empty)); " is 134.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetConstructorThatMatches,The length of the statement  "	            var candidates = type.GetTypeInfo().GetConstructors(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);" is 122.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetConstructorThatMatches,The length of the statement  "	var constructorInfo = type.GetConstructor (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' constructorArguments' null); " is 147.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,IsOrleansOrReferencesOrleans,The length of the statement  "	return DoReferencesContain (assembly.GetReferencedAssemblies ()' OrleansCoreAssembly) || string.Equals (assembly.GetName ().FullName' OrleansCoreAssembly.FullName' StringComparison.Ordinal); " is 190.
Long Statement,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetTypes,The length of the statement  "		foreach (var genericTypeArgument in type.GetGenericArguments ().SelectMany (_ => GetTypes (_' false' exclude: exclude))) { " is 122.
Long Statement,Orleans.Runtime,RuntimeContext,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\RuntimeContext.cs,InitializeThread,The length of the statement  "	// E.g. if InitializeThread() is mistakenly called on a wrong thread' would that thread be considered a worker pool thread from that point on?  " is 142.
Long Statement,Orleans.Runtime,RuntimeContext,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\RuntimeContext.cs,ToString,The length of the statement  "	return String.Format ("RuntimeContext: ActivationContext={0}' Scheduler={1}"' ActivationContext != null ? ActivationContext.ToString () : "null"' Scheduler != null ? Scheduler.ToString () : "null"); " is 198.
Long Statement,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,InvokeMethod_Impl,The length of the statement  "			debugContext = GetDebugContext (this.InterfaceName' GetMethodName (this.InterfaceId' request.MethodId)' request.Arguments); " is 123.
Long Statement,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,InvokeMethod_Impl,The length of the statement  "				debugContext = GetDebugContext (this.InterfaceName' GetMethodName (this.InterfaceId' request.MethodId)' request.Arguments); " is 123.
Long Statement,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,InvokeMethod_Impl,The length of the statement  "	this.RuntimeClient.SendRequest (this' request' resolver' this.responseCallbackDelegate' debugContext' options' genericArguments); " is 129.
Long Statement,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,CallClientInvokeCallback,The length of the statement  "		logger.Warn (ErrorCode.ProxyClient_ClientInvokeCallback_Error' "Error while invoking ClientInvokeCallback function " + this.runtimeClient.ClientInvokeCallback' exc); " is 165.
Long Statement,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,GetUnordered,The length of the statement  "	return this.runtimeClient.GrainTypeResolver != null && this.runtimeClient.GrainTypeResolver.IsUnordered (GrainId.TypeCode); " is 123.
Long Statement,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,CheckForGrainArguments,The length of the statement  "			throw new ArgumentException (String.Format ("Cannot pass a grain object {0} as an argument to a method. Pass this.AsReference<GrainInterface>() instead."' argument.GetType ().FullName)); " is 186.
Long Statement,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,ToString,The length of the statement  "	return String.Format ("{0}:{1}{2}"' GRAIN_REFERENCE_STR' GrainId' !HasGenericArgument ? String.Empty : String.Format ("<{0}>"' genericArguments)); " is 146.
Long Statement,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,ToDetailedString,The length of the statement  "	return String.Format ("{0}:{1}{2}"' GRAIN_REFERENCE_STR' GrainId.ToDetailedString ()' !HasGenericArgument ? String.Empty : String.Format ("<{0}>"' genericArguments)); " is 166.
Long Statement,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,ToKeyString,The length of the statement  "		return String.Format ("{0}={1} {2}={3}"' GRAIN_REFERENCE_STR' GrainId.ToParsableString ()' OBSERVER_ID_STR' observerId.ToParsableString ()); " is 140.
Long Statement,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,ToKeyString,The length of the statement  "		return String.Format ("{0}={1} {2}={3}"' GRAIN_REFERENCE_STR' GrainId.ToParsableString ()' SYSTEM_TARGET_STR' SystemTargetSilo.ToParsableString ()); " is 148.
Long Statement,Orleans.Runtime,GrainReference,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainReference.cs,ToKeyString,The length of the statement  "		return String.Format ("{0}={1} {2}={3}"' GRAIN_REFERENCE_STR' GrainId.ToParsableString ()' GENERIC_ARGUMENTS_STR' genericArguments); " is 132.
Long Statement,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,TimeSpanToString,The length of the statement  "	return String.Format ("{0}h:{1}m:{2}s.{3}ms"' timeSpan.Hours' timeSpan.Minutes' timeSpan.Seconds' timeSpan.Milliseconds); " is 121.
Long Statement,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,ToGatewayUri,The length of the statement  "	return new Uri (string.Format ("gwy.tcp://{0}:{1}/{2}"' address.Endpoint.Address' address.Endpoint.Port' address.Generation)); " is 126.
Long Statement,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,Flatten,The length of the statement  "	throw new AggregateException ("A ReflectionTypeLoadException has been thrown. The original exception and the contents of the LoaderExceptions property have been aggregated for your convenience."' all); " is 201.
Long Statement,Orleans,AsyncBatchedContinuationQueue,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncBatchedContinuationQueue.cs,Queue,The length of the statement  "				if (readyQueue.Count > aggregateBatchSize || timeSinceLastContinuation >= aggregateContinuationMaxTime || numPendingTasks == 0) { " is 129.
Long Statement,Orleans,MultiTaskCompletionSource,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\MultiTaskCompletionSource.cs,SetOneResult,The length of the statement  "			throw new InvalidOperationException ("SetOneResult was called more times than initialy specified by the count argument."); " is 122.
Long Statement,Orleans,AsyncExecutorWithRetries,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetries,The length of the statement  "	return ExecuteWithRetriesHelper<bool> (function' 0' 0' maxNumErrorTries' maxExecutionTime' DateTime.UtcNow' null' retryExceptionFilter' null' onErrorBackOff); " is 158.
Long Statement,Orleans,AsyncExecutorWithRetries,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetries,The length of the statement  "	return ExecuteWithRetries<T> (function' 0' maxNumErrorTries' null' retryExceptionFilter' maxExecutionTime' null' onErrorBackOff); " is 129.
Long Statement,Orleans,AsyncExecutorWithRetries,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncExecutorWithRetries.cs,ExecuteWithRetries,The length of the statement  "	return ExecuteWithRetriesHelper<T> (function' 0' maxNumSuccessTries' maxNumErrorTries' maxExecutionTime' DateTime.UtcNow' retryValueFilter' retryExceptionFilter' onSuccessBackOff' onErrorBackOff); " is 196.
Long Statement,Orleans,AsyncLock,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\AsyncLock.cs,LockAsync,The length of the statement  "		return wait.ContinueWith (_ => (IDisposable)new LockReleaser (this)' CancellationToken.None' TaskContinuationOptions.ExecuteSynchronously' TaskScheduler.Default); " is 162.
Long Statement,Orleans,GrainCancellationToken,F:\newReposMay17\dotnet_orleans\src\Orleans\Cancellation\GrainCancellationToken.cs,Cancel,The length of the statement  "	var cancellationTasks = _targetGrainReferences.Select (pair => pair.Value.AsReference<ICancellationSourcesExtension> ().CancelRemoteToken (this)).ToList (); " is 156.
Long Statement,Orleans,UnobservedExceptionsHandlerClass,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\UnobservedExceptionsHandlerClass.cs,InternalUnobservedTaskExceptionHandler,The length of the statement  "			logger.Info (ErrorCode.Runtime_Error_100311' "UnobservedExceptionsHandlerClass caught an UnobservedTaskException which was successfully observed and recovered from. BaseException = {0}. Exception = {1}"' baseException.Message' LogFormatter.PrintException (aggrException)); " is 272.
Long Statement,Orleans,UnobservedExceptionsHandlerClass,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\UnobservedExceptionsHandlerClass.cs,InternalUnobservedTaskExceptionHandler,The length of the statement  "			var errorStr = String.Format ("UnobservedExceptionsHandlerClass Caught an UnobservedTaskException event sent by {0}. Exception = {1}"' OrleansTaskExtentions.ToString ((Task)sender)' LogFormatter.PrintException (aggrException)); " is 227.
Long Statement,Orleans,UnobservedExceptionsHandlerClass,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\UnobservedExceptionsHandlerClass.cs,InternalUnobservedTaskExceptionHandler,The length of the statement  "			logger.Error (ErrorCode.Runtime_Error_100006' "Exception remained UnObserved!!! The subsequent behavior depends on the ThrowUnobservedTaskExceptions setting in app config and .NET version."); " is 191.
Long Statement,Orleans,PublicOrleansTaskExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\TaskExtensions.cs,Ignore,The length of the statement  "		}' CancellationToken.None' TaskContinuationOptions.OnlyOnFaulted | TaskContinuationOptions.ExecuteSynchronously' TaskScheduler.Default); " is 136.
Long Statement,Orleans,ClientBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\ClientBuilder.cs,AddBasicServices,The length of the statement  "	services.AddSingleton<IGatewayListProvider> (sp => ActivatorUtilities.CreateInstance<GatewayProviderFactory> (sp).CreateGatewayListProvider ()); " is 144.
Long Statement,Orleans,GrainFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\GrainFactory.cs,MakeGrainReferenceFromType,The length of the statement  "	return GrainReference.FromGrainId (grainId' this.runtimeClient' typeInfo.IsGenericType ? TypeUtils.GenericTypeArgsString (typeInfo.UnderlyingSystemType.FullName) : null); " is 170.
Long Statement,Orleans,GrainFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\GrainFactory.cs,GetGrainClassData,The length of the statement  "		var assembliesString = string.IsNullOrEmpty (loadedAssemblies) ? string.Empty : " Loaded grain assemblies: " + loadedAssemblies; " is 128.
Long Statement,Orleans,GrainFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\GrainFactory.cs,GetGrainClassData,The length of the statement  "		var grainClassPrefixString = string.IsNullOrEmpty (grainClassNamePrefix) ? string.Empty : "' grainClassNamePrefix: " + grainClassNamePrefix; " is 140.
Long Statement,Orleans,GrainFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\GrainFactory.cs,GetGrainClassData,The length of the statement  "		throw new ArgumentException ( + "Make sure the grain assembly was correctly deployed and loaded in the silo." + assembliesString); " is 130.
Long Statement,Orleans,GrainExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\GrainExtensions.cs,GetGrainId,The length of the statement  "	throw new ArgumentException (String.Format ("GetGrainId has been called on an unexpected type: {0}."' grain.GetType ().FullName)' "grain"); " is 139.
Long Statement,Orleans,GrainExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\GrainExtensions.cs,GetGrainIdentity,The length of the statement  "	throw new ArgumentException (String.Format ("GetGrainIdentity has been called on an unexpected type: {0}."' grain.GetType ().FullName)' "grain"); " is 145.
Long Statement,Orleans,SetExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\SetExtensions.cs,ToStrings,The length of the statement  "	//Do NOT use Aggregate for string concatenation. It is very inefficient' will reallocate and copy lots of intermediate strings. " is 127.
Long Statement,Orleans,MembershipTableData,F:\newReposMay17\dotnet_orleans\src\Orleans\SystemTargetInterfaces\IMembershipTable.cs,ToString,The length of the statement  "	string otherCounts = String.Format ("{0}{1}{2}{3}"' created > 0 ? ("' " + created + " are Created") : ""' joining > 0 ? ("' " + joining + " are Joining") : ""' shuttingDown > 0 ? ("' " + shuttingDown + " are ShuttingDown") : ""' stopping > 0 ? ("' " + stopping + " are Stopping") : ""); " is 286.
Long Statement,Orleans,MembershipTableData,F:\newReposMay17\dotnet_orleans\src\Orleans\SystemTargetInterfaces\IMembershipTable.cs,ToString,The length of the statement  "	return string.Format ("{0} silos' {1} are Active' {2} are Dead{3}' Version={4}. All silos: {5}"' Members.Count' active' dead' otherCounts' Version' Utils.EnumerableToString (Members' tuple => tuple.Item1.ToFullString ())); " is 222.
Long Statement,Orleans,MembershipEntry,F:\newReposMay17\dotnet_orleans\src\Orleans\SystemTargetInterfaces\IMembershipTable.cs,ToFullString,The length of the statement  "	return string.Format ("[SiloAddress={0} SiloName={1} Status={2} HostName={3} ProxyPort={4} " + "RoleName={5} UpdateZone={6} FaultZone={7} StartTime = {8} IAmAliveTime = {9} {10} {11}]"' SiloAddress.ToLongString ()' SiloName' Status' HostName' ProxyPort' RoleName' UpdateZone' FaultZone' LogFormatter.PrintDate (StartTime)' LogFormatter.PrintDate (IAmAliveTime)' suspecters == null ? "" : "Suspecters = " + Utils.EnumerableToString (suspecters' sa => sa.ToLongString ())' timestamps == null ? "" : "SuspectTimes = " + Utils.EnumerableToString (timestamps' LogFormatter.PrintDate)); " is 580.
Long Statement,Orleans,ReminderTableData,F:\newReposMay17\dotnet_orleans\src\Orleans\SystemTargetInterfaces\IReminderTable.cs,ToString,The length of the statement  "	return string.Format ("[{0} reminders: {1}."' Reminders.Count' Utils.EnumerableToString (Reminders' e => e.ToString ())); " is 121.
Long Statement,Orleans,ReminderData,F:\newReposMay17\dotnet_orleans\src\Orleans\SystemTargetInterfaces\IReminderTable.cs,ToString,The length of the statement  "	return string.Format ("<IOrleansReminder: GrainRef={0} ReminderName={1} ETag={2}>"' GrainRef.ToDetailedString ()' ReminderName' ETag); " is 134.
Long Statement,Orleans,GrainClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\GrainClient.cs,Initialize,The length of the statement  "		throw new ArgumentException (string.Format ("Error loading client configuration file {0}:"' configFile.FullName)' nameof (configFile)); " is 135.
Long Statement,Orleans,GrainClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\GrainClient.cs,CheckInitialized,The length of the statement  "		throw new InvalidOperationException ("Runtime is not initialized. Call Client.Initialize method to initialize the runtime."); " is 125.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ConsumeServices,The length of the statement  "		var statsProviderName = statisticsProviderManager.LoadProvider (config.ProviderConfigurations).WaitForResultWithThrow (initTimeout); " is 132.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ConsumeServices,The length of the statement  "		logger.Info (ErrorCode.ClientInitializing' string.Format ("{0} Initializing OutsideRuntimeClient on {1} at {2} Client Id = {3} {0}"' BARS' config.DNSHostName' localAddress' handshakeClientId)); " is 193.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ConsumeServices,The length of the statement  "		string startMsg = string.Format ("{0} Starting OutsideRuntimeClient with runtime Version='{1}' in AppDomain={2}"' BARS' RuntimeVersion.Current' PrintAppDomainDetails ()); " is 170.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,UnhandledException,The length of the statement  "	logger.Error (ErrorCode.Runtime_Error_100007' String.Format ("OutsideRuntimeClient caught an UnobservedException.")' exception); " is 128.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,UnhandledException,The length of the statement  "	logger.Assert (ErrorCode.Runtime_Error_100008' context == null' "context should be not null only inside OrleansRuntime and not on the client."); " is 144.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,Start,The length of the statement  "	// Deliberately avoid capturing the current synchronization context during startup and execute on the default scheduler. " is 120.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,Start,The length of the statement  "	// This helps to avoid any issues (such as deadlocks) caused by executing with the client's synchronization context/scheduler. " is 126.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,Start,The length of the statement  "	logger.Info (ErrorCode.ProxyClient_StartDone' "{0} Started OutsideRuntimeClient with Global Client ID: {1}"' BARS' CurrentActivationAddress.ToString () + "' client GUID ID: " + handshakeClientId); " is 196.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,StartInternal,The length of the statement  "	await this.gatewayListProvider.InitializeGatewayListProvider (config' LogManager.GetLogger (gatewayListProvider.GetType ().Name)).WithTimeout (initTimeout); " is 156.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,StartInternal,The length of the statement  "	transport = ActivatorUtilities.CreateInstance<ProxiedMessageCenter> (this.ServiceProvider' localAddress' generation' handshakeClientId); " is 136.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,RunClientMessagePump,The length of the statement  "				CurrentActivationAddress = ActivationAddress.GetAddress (transport.MyAddress' clientId' CurrentActivationAddress.Activation); " is 125.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,DispatchToLocalObject,The length of the statement  "		logger.Error (ErrorCode.ProxyClient_OGC_TargetNotFound_2' String.Format ("Did not find TargetObserverId header in the message = {0}. A request message to a client is expected to have an observerId."' message)); " is 210.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,DispatchToLocalObject,The length of the statement  "		logger.Error (ErrorCode.ProxyClient_OGC_TargetNotFound' String.Format ("Unexpected target grain in request: {0}. Message={1}"' message.TargetGrain' message)); " is 158.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,InvokeLocalObjectAsync,The length of the statement  "		//// Remove from the dictionary record for the garbage collected object? But now we won't be able to detect invalid dispatch IDs anymore. " is 137.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,InvokeLocalObjectAsync,The length of the statement  "		logger.Warn (ErrorCode.Runtime_Error_100162' String.Format ("Object associated with Observer ID {0} has been garbage collected. Deleting object reference and unregistering it. Message = {1}"' objectData.ObserverId' message)); " is 225.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,InvokeLocalObjectAsync,The length of the statement  "		// http://stackoverflow.com/questions/12245935/is-task-factory-startnew-guaranteed-to-use-another-thread-than-the-calling-thr " is 125.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ReportException,The length of the statement  "		logger.Error (ErrorCode.ProxyClient_OGC_UnhandledExceptionInOneWayInvoke' String.Format ("Exception during invocation of notification method {0}' interface {1}. Ignoring exception because this is a one way request."' request.MethodId' request.InterfaceId)' exception); " is 268.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ReportException,The length of the statement  "			logger.Warn (ErrorCode.ProxyClient_OGC_SendExceptionResponseFailed' "Exception trying to send an exception response"' ex2); " is 123.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ReceiveResponse,The length of the statement  "	if (response.Result == Message.ResponseTypes.Rejection && response.RejectionType == Message.RejectionTypes.DuplicateRequest) " is 124.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ReceiveResponse,The length of the statement  "		// Unfortunately' it is not enough' since CallContext.LogicalGetData will not flow "up" from task completion source into the resolved task. " is 139.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,CurrentDomain_DomainUnload,The length of the statement  "		logger.Warn (ErrorCode.ProxyClient_AppDomain_Unload' String.Format ("Current AppDomain={0} is unloading."' PrintAppDomainDetails ())); " is 134.
Long Statement,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,PrintAppDomainDetails,The length of the statement  "	return string.Format ("<AppDomain.Id={0}' AppDomain.FriendlyName={1}>"' AppDomain.CurrentDomain.Id' AppDomain.CurrentDomain.FriendlyName); " is 138.
Long Statement,Orleans,ObserverSubscriptionManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\ObserverSubscriptionManager.cs,Notify,The length of the statement  "		throw new OrleansException (String.Format ("Failed to notify the following observers: {0}"' Utils.EnumerableToString (failed))); " is 128.
Long Statement,Orleans,Interner,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\Interner.cs,InternCacheCleanupTimerCallback,The length of the statement  "			logger.Verbose (ErrorCode.Runtime_Error_100296' "Removed {0} / {1} unused {2} entries in {3}"' numRemoved' numEntries' internCacheName' clock.Elapsed); " is 151.
Long Statement,Orleans,Interner,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\Interner.cs,InternCacheCleanupTimerCallback,The length of the statement  "			logger.Verbose2 (ErrorCode.Runtime_Error_100296' "Removed {0} / {1} unused {2} entries in {3}"' numRemoved' numEntries' internCacheName' clock.Elapsed); " is 152.
Long Statement,Orleans,Grain,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\Grain.cs,RegisterOrUpdateReminder,The length of the statement  "		throw new InvalidOperationException (string.Format ("Grain {0} is not 'IRemindable'. A grain should implement IRemindable to use the persistent reminder service"' IdentityString)); " is 180.
Long Statement,Orleans,Grain,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\Grain.cs,EnsureRuntime,The length of the statement  "		throw new InvalidOperationException ("Grain was created outside of the Orleans creation process and no runtime was specified."); " is 128.
Long Statement,Orleans.CodeGeneration,CodeGeneratorManager,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\CodeGeneratorManager.cs,AddGeneratedAssembly,The length of the statement  "		Log.Warn (ErrorCode.CodeGenDllMissing' "CodeGenerationManager.AddCachedAssembly called but no code generator has been loaded."); " is 128.
Long Statement,Orleans.CodeGeneration,CodeGeneratorManager,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\CodeGeneratorManager.cs,LoadCodeGenerator,The length of the statement  "	IRuntimeCodeGenerator result = AssemblyLoader.TryLoadAndCreateInstance<IRuntimeCodeGenerator> (CodeGenAssemblyName' Log' this.serviceProvider); " is 143.
Long Statement,Orleans.CodeGeneration,GrainFactoryBase,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainFactoryBase.cs,CheckGrainObserverParamInternal,The length of the statement  "		string errMsg = string.Format ("IGrainObserver parameters must be GrainReference or Grain and cannot be type {0}. Did you forget to CreateObjectReference?"' grainObserver.GetType ()); " is 183.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,IsGrainInterface,The length of the statement  "	if (t == typeof(IGrain) || t == typeof(IGrainWithGuidKey) || t == typeof(IGrainWithIntegerKey) || t == typeof(IGrainWithGuidCompoundKey) || t == typeof(IGrainWithIntegerCompoundKey)) " is 182.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,IsTaskType,The length of the statement  "	return t == typeof(Task) || (typeInfo.IsGenericType && typeInfo.GetGenericTypeDefinition ().FullName == "System.Threading.Tasks.Task`1"); " is 137.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,IsUnordered,The length of the statement  "	return declaringTypeInfo.GetCustomAttributes (typeof(UnorderedAttribute)' true).Any () || (declaringTypeInfo.GetInterfaces ().Any (i => i.GetTypeInfo ().GetCustomAttributes (typeof(UnorderedAttribute)' true).Any () && declaringTypeInfo.GetRuntimeInterfaceMap (i).TargetMethods.Contains (methodInfo))) || IsStatelessWorker (methodInfo); " is 335.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,IsStatelessWorker,The length of the statement  "	return grainTypeInfo.GetCustomAttributes (typeof(StatelessWorkerAttribute)' true).Any () || grainTypeInfo.GetInterfaces ().Any (i => i.GetTypeInfo ().GetCustomAttributes (typeof(StatelessWorkerAttribute)' true).Any ()); " is 219.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,IsStatelessWorker,The length of the statement  "	return declaringTypeInfo.GetCustomAttributes (typeof(StatelessWorkerAttribute)' true).Any () || (declaringTypeInfo.GetInterfaces ().Any (i => i.GetTypeInfo ().GetCustomAttributes (typeof(StatelessWorkerAttribute)' true).Any () && declaringTypeInfo.GetRuntimeInterfaceMap (i).TargetMethods.Contains (methodInfo))); " is 313.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,IsTaskBasedInterface,The length of the statement  "	// An interface is task-based if it has at least one method that returns a Task or at least one parent that's task-based. " is 121.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,ValidateInterfaceRules,The length of the statement  "		throw new RulesViolationException (string.Format ("{0} does not conform to the grain interface rules."' type.FullName)' violations); " is 132.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,ValidateInterfaceMethods,The length of the statement  "				violations.Add (String.Format ("Method {0}.{1} must return void because it is defined within an observer interface."' type.FullName' method.Name)); " is 147.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,ValidateInterfaceMethods,The length of the statement  "			violations.Add (String.Format ("Method {0}.{1} must return Task or Task<T> because it is defined within a grain interface."' type.FullName' method.Name)); " is 154.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,ValidateInterfaceMethods,The length of the statement  "				violations.Add (String.Format ("Argument {0} of method {1}.{2} is an output parameter. Output parameters are not allowed in grain interfaces."' GetParameterName (parameter)' type.FullName' method.Name)); " is 203.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,ValidateInterfaceMethods,The length of the statement  "				violations.Add (String.Format ("Argument {0} of method {1}.{2} is an a reference parameter. Reference parameters are not allowed."' GetParameterName (parameter)' type.FullName' method.Name)); " is 191.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,ValidateInterfaceProperties,The length of the statement  "		violations.Add (String.Format ("Properties are not allowed on grain interfaces:  {0}.{1}."' type.FullName' property.Name)); " is 123.
Long Statement,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,GetTypeCode,The length of the statement  "	var fullName = TypeUtils.GetTemplatedName (TypeUtils.GetFullName (grainInterfaceOrClass)' grainInterfaceOrClass' grainInterfaceOrClass.GetGenericArguments ()' t => false); " is 171.
Long Statement,Orleans.Runtime.Configuration,GrainServiceConfigurations,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GrainServiceConfiguration.cs,Load,The length of the statement  "	GrainServiceConfiguration.LoadProviderConfigurations (child' nsManager' container.GrainServices' c => container.GrainServices.Add (c.Name' c)); " is 143.
Long Statement,Orleans.Runtime.Configuration,GrainServiceConfigurationsUtility,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GrainServiceConfiguration.cs,RegisterGrainService,The length of the statement  "		throw new InvalidOperationException (string.Format ("Grain service of with name '{0}' has been already registered"' serviceName)); " is 130.
Long Statement,Orleans.Runtime.Configuration,ConfigurationExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigurationExtensions.cs,AddSimpleMessageStreamProvider,The length of the statement  "	var properties = GetSimpleMessageStreamProviderConfiguration (providerName' fireAndForgetDelivery' optimizeForImmutableData' pubSubType); " is 137.
Long Statement,Orleans.Runtime.Configuration,ConfigurationExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigurationExtensions.cs,AddSimpleMessageStreamProvider,The length of the statement  "	var properties = GetSimpleMessageStreamProviderConfiguration (providerName' fireAndForgetDelivery' optimizeForImmutableData' pubSubType); " is 137.
Long Statement,Orleans.Runtime.Configuration,LimitValue,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\LimitValue.cs,ToString,The length of the statement  "	return string.Format ("Limit:{0}'SoftLimitThreshold={1}'HardLimitThreshold={2}"' Name' SoftLimitThreshold' HardLimitThreshold); " is 127.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,ToString,The length of the statement  "	SerializationProviders.ForEach (sp => sb.AppendFormat ("       Serialization provider: {0}"' sp.FullName).AppendLine ()); " is 121.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "	ResponseTimeout = child.HasAttribute ("ResponseTimeout") ? ConfigUtilities.ParseTimeSpan (child.GetAttribute ("ResponseTimeout")' "Invalid ResponseTimeout") : Constants.DEFAULT_RESPONSE_TIMEOUT; " is 194.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "		MaxResendCount = ConfigUtilities.ParseInt (child.GetAttribute ("MaxResendCount")' "Invalid integer value for the MaxResendCount attribute on the Messaging element"); " is 165.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "		ResendOnTimeout = ConfigUtilities.ParseBool (child.GetAttribute ("ResendOnTimeout")' "Invalid Boolean value for the ResendOnTimeout attribute on the Messaging element"); " is 169.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "		MaxSocketAge = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("MaxSocketAge")' "Invalid time span set for the MaxSocketAge attribute on the Messaging element"); " is 164.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "		DropExpiredMessages = ConfigUtilities.ParseBool (child.GetAttribute ("DropExpiredMessages")' "Invalid integer value for the DropExpiredMessages attribute on the Messaging element"); " is 181.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "			SiloSenderQueues = ConfigUtilities.ParseInt (child.GetAttribute ("SiloSenderQueues")' "Invalid integer value for the SiloSenderQueues attribute on the Messaging element"); " is 171.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "			GatewaySenderQueues = ConfigUtilities.ParseInt (child.GetAttribute ("GatewaySenderQueues")' "Invalid integer value for the GatewaySenderQueues attribute on the Messaging element"); " is 180.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "		ClientDropTimeout = child.HasAttribute ("ClientDropTimeout") ? ConfigUtilities.ParseTimeSpan (child.GetAttribute ("ClientDropTimeout")' "Invalid ClientDropTimeout") : Constants.DEFAULT_CLIENT_DROP_TIMEOUT; " is 205.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "			ClientSenderBuckets = ConfigUtilities.ParseInt (child.GetAttribute ("ClientSenderBuckets")' "Invalid integer value for the ClientSenderBuckets attribute on the Messaging element"); " is 180.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "		BufferPoolBufferSize = ConfigUtilities.ParseInt (child.GetAttribute ("BufferPoolBufferSize")' "Invalid integer value for the BufferPoolBufferSize attribute on the Messaging element"); " is 183.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "		BufferPoolMaxSize = ConfigUtilities.ParseInt (child.GetAttribute ("BufferPoolMaxSize")' "Invalid integer value for the BufferPoolMaxSize attribute on the Messaging element"); " is 174.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "		BufferPoolPreallocationSize = ConfigUtilities.ParseInt (child.GetAttribute ("BufferPoolPreallocationSize")' "Invalid integer value for the BufferPoolPreallocationSize attribute on the Messaging element"); " is 204.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "			MaxForwardCount = ConfigUtilities.ParseInt (child.GetAttribute ("MaxForwardCount")' "Invalid integer value for the MaxForwardCount attribute on the Messaging element"); " is 168.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "			var typeNames = serializerNode.ChildNodes.OfType<XmlElement> ().Where (n => n.Name == "Provider").Select (e => e.Attributes ["type"]).Where (a => a != null).Select (a => a.Value); " is 179.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "		var fallbackSerializerNode = child.ChildNodes.OfType<XmlElement> ().FirstOrDefault (n => n.Name == "FallbackSerializationProvider"); " is 132.
Long Statement,Orleans.Runtime.Configuration,MessagingConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\MessagingConfiguration.cs,Load,The length of the statement  "				var msg = "The FallbackSerializationProvider element requires a 'type' attribute specifying the fully-qualified type name of the serializer."; " is 142.
Long Statement,Orleans.Runtime.Configuration,ProviderCategoryConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ProviderConfiguration.cs,Load,The length of the statement  "	ProviderConfiguration.LoadProviderConfigurations (child' nsManager' category.Providers' c => category.Providers.Add (c.Name' c)); " is 129.
Long Statement,Orleans.Runtime.Configuration,ProviderConfigurationUtility,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ProviderConfiguration.cs,RegisterProvider,The length of the statement  "		throw new InvalidOperationException (string.Format ("{0} provider of type {1} with name '{2}' has been already registered"' providerCategory' providerTypeFullName' providerName)); " is 179.
Long Statement,Orleans.Runtime.Configuration,ProviderConfigurationUtility,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ProviderConfiguration.cs,RegisterProvider,The length of the statement  "	var config = new ProviderConfiguration (properties ?? new Dictionary<string' string> ()' providerTypeFullName' providerName); " is 125.
Long Statement,Orleans.Runtime.Configuration,ApplicationConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ApplicationConfiguration.cs,GetCollectionAgeLimit,The length of the statement  "	return classSpecific.TryGetValue (grainTypeFullName' out config) && config.CollectionAgeLimit.HasValue ? config.CollectionAgeLimit.Value : DefaultCollectionAgeLimit; " is 165.
Long Statement,Orleans.Runtime.Configuration,ApplicationConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ApplicationConfiguration.cs,ToString,The length of the statement  "		result.AppendFormat ("         Deactivate if idle for: {0} seconds"' (long)config.CollectionAgeLimit.Value.TotalSeconds).AppendLine (); " is 135.
Long Statement,Orleans.Runtime.Configuration,GrainTypeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ApplicationConfiguration.cs,Load,The length of the statement  "	throw new InvalidOperationException (string.Format ("empty GrainTypeConfiguration for {0}"' fullTypeName == null ? "defaults" : fullTypeName)); " is 143.
Long Statement,Orleans.Runtime.Configuration,GrainTypeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ApplicationConfiguration.cs,ValidateConfiguration,The length of the statement  "		string errStr = String.Format ("Unable to find grain class type {0} specified in configuration; Failing silo startup."' FullTypeName); " is 134.
Long Statement,Orleans.Runtime.Configuration,GrainTypeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ApplicationConfiguration.cs,ValidateConfiguration,The length of the statement  "		string errStr = String.Format ("Unable to find grain class type {0} specified in configuration; Failing silo startup."' FullTypeName); " is 134.
Long Statement,Orleans.Runtime.Configuration,GrainTypeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ApplicationConfiguration.cs,ValidateConfiguration,The length of the statement  "		string errStr = String.Format ("Type {0} must implement IGrain to be used Application configuration context."' type.FullName); " is 126.
Long Statement,Orleans.Runtime.Configuration,GrainTypeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ApplicationConfiguration.cs,ValidateConfiguration,The length of the statement  "		string errStr = String.Format ("Type {0} must either be an interface or class used Application configuration context."' type.FullName); " is 135.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,LoadFromXml,The length of the statement  "					PreferredFamily = ConfigUtilities.ParseEnum<AddressFamily> (child.GetAttribute ("PreferredFamily")' "Invalid address family for the PreferredFamily attribute on the LocalAddress element"); " is 188.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,LoadFromXml,The length of the statement  "					Port = ConfigUtilities.ParseInt (child.GetAttribute ("Port")' "Invalid integer value for the Port attribute on the LocalAddress element"); " is 138.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,RegisterStreamProvider,The length of the statement  "	if (providerTypeInfo.IsAbstract || providerTypeInfo.IsGenericType || !typeof(Orleans.Streams.IStreamProvider).IsAssignableFrom (typeof(T))) " is 139.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,RegisterStreamProvider,The length of the statement  "		throw new ArgumentException ("Expected non-generic' non-abstract type which implements IStreamProvider interface"' "typeof(T)"); " is 128.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,RegisterStreamProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.STREAM_PROVIDER_CATEGORY_NAME' providerTypeInfo.FullName' providerName' properties); " is 185.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,RegisterStreamProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.STREAM_PROVIDER_CATEGORY_NAME' providerTypeFullName' providerName' properties); " is 180.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,RegisterStatisticsProvider,The length of the statement  "	if (providerTypeInfo.IsAbstract || providerTypeInfo.IsGenericType || providerTypeInfo.IsGenericType || !(typeof(IStatisticsPublisher).IsAssignableFrom (typeof(T)) && typeof(IClientMetricsDataPublisher).IsAssignableFrom (typeof(T)))) " is 232.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,RegisterStatisticsProvider,The length of the statement  "		throw new ArgumentException ("Expected non-generic' non-abstract type which implements IStatisticsPublisher' IClientMetricsDataPublisher interface"' "typeof(T)"); " is 162.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,RegisterStatisticsProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.STATISTICS_PROVIDER_CATEGORY_NAME' providerTypeInfo.FullName' providerName' properties); " is 189.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,RegisterStatisticsProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.STATISTICS_PROVIDER_CATEGORY_NAME' providerTypeFullName' providerName' properties); " is 184.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,TryGetProviderConfiguration,The length of the statement  "	return ProviderConfigurationUtility.TryGetProviderConfiguration (ProviderConfigurations' providerTypeFullName' providerName' out config); " is 137.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,ToString,The length of the statement  "	sb.Append ("   Config File Name: ").AppendLine (string.IsNullOrEmpty (SourceFile) ? "" : Path.GetFullPath (SourceFile)); " is 120.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,ToString,The length of the statement  "	sb.AppendFormat ("       .NET thread pool sizes - Min: Worker Threads={0} Completion Port Threads={1}"' workerThreads' completionPortThreads).AppendLine (); " is 156.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,ToString,The length of the statement  "	sb.AppendFormat ("       .NET thread pool sizes - Max: Worker Threads={0} Completion Port Threads={1}"' workerThreads' completionPortThreads).AppendLine (); " is 156.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,CheckGatewayProviderSettings,The length of the statement  "			throw new ArgumentException ("Config specifies Azure based GatewayProviderType' but Azure element is not specified or not complete."' "GatewayProvider"); " is 153.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,CheckGatewayProviderSettings,The length of the statement  "			throw new ArgumentException ("Config specifies Config based GatewayProviderType' but Gateway element(s) is/are not specified."' "GatewayProvider"); " is 147.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,CheckGatewayProviderSettings,The length of the statement  "			throw new ArgumentException ("Config specifies Custom GatewayProviderType' but CustomGatewayProviderAssemblyName attribute is not specified"' "GatewayProvider"); " is 161.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,CheckGatewayProviderSettings,The length of the statement  "			throw new ArgumentException ("Config does not specify GatewayProviderType' and also does not have the adequate defaults: no Azure and or Gateway element(s) are specified."' "GatewayProvider"); " is 192.
Long Statement,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,CheckGatewayProviderSettings,The length of the statement  "			throw new ArgumentException ("Config specifies SqlServer based GatewayProviderType' but DeploymentId or DataConnectionString are not specified or not complete."' "GatewayProvider"); " is 181.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseAdditionalAssemblyDirectories,The length of the statement  "				directories [grandchild.Attributes ["Path"].Value] = recursive ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly; " is 125.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTelemetry,The length of the statement  "				var args = grandchild.Attributes.Cast<XmlAttribute> ().Where (a => a.LocalName != "Type" && a.LocalName != "Assembly").ToArray (); " is 130.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTelemetry,The length of the statement  "					throw new InvalidCastException ("TelemetryConsumer class " + className + " must implement one of Orleans.Runtime.ITelemetryConsumer based interfaces"); " is 151.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTelemetry,The length of the statement  "				throw new TypeLoadException ("Cannot load TelemetryConsumer class " + className + " from assembly " + assembly + " - Error=" + exc); " is 132.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTracing,The length of the statement  "		config.DefaultTraceLevel = ParseSeverity (root.GetAttribute ("DefaultTraceLevel")' "Invalid trace level DefaultTraceLevel attribute value on Tracing element for " + nodeName); " is 175.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTracing,The length of the statement  "		config.TraceToConsole = ParseBool (root.GetAttribute ("TraceToConsole")' "Invalid boolean value for TraceToConsole attribute on Tracing element for " + nodeName); " is 162.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTracing,The length of the statement  "		config.LargeMessageWarningThreshold = ParseInt (root.GetAttribute ("LargeMessageWarningThreshold")' "Invalid boolean value for LargeMessageWarningThresholdattribute on Tracing element for " + nodeName); " is 202.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTracing,The length of the statement  "		config.PropagateActivityId = ParseBool (root.GetAttribute ("PropagateActivityId")' "Invalid boolean value for PropagateActivityId attribute on Tracing element for " + nodeName); " is 177.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTracing,The length of the statement  "		config.BulkMessageLimit = ParseInt (root.GetAttribute ("BulkMessageLimit")' "Invalid int value for BulkMessageLimit attribute on Tracing element for " + nodeName); " is 163.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTracing,The length of the statement  "		if (grandchild.LocalName.Equals ("TraceLevelOverride") && grandchild.HasAttribute ("TraceLevel") && grandchild.HasAttribute ("LogPrefix")) { " is 140.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTracing,The length of the statement  "			config.TraceLevelOverrides.Add (new Tuple<string' Severity> (grandchild.GetAttribute ("LogPrefix")' ParseSeverity (grandchild.GetAttribute ("TraceLevel")' "Invalid trace level TraceLevel attribute value on TraceLevelOverride element for " + nodeName + " prefix " + grandchild.GetAttribute ("LogPrefix")))); " is 306.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTracing,The length of the statement  "				throw new TypeLoadException ("Cannot load LogConsumer class " + className + " from assembly " + assembly + " - Error=" + exc); " is 126.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseStatistics,The length of the statement  "		config.StatisticsMetricsTableWriteInterval = ParseTimeSpan (root.GetAttribute ("MetricsTableWriteInterval")' "Invalid TimeSpan value for Statistics.MetricsTableWriteInterval attribute on Statistics element for " + nodeName); " is 224.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseStatistics,The length of the statement  "		config.StatisticsPerfCountersWriteInterval = ParseTimeSpan (root.GetAttribute ("PerfCounterWriteInterval")' "Invalid TimeSpan value for Statistics.PerfCounterWriteInterval attribute on Statistics element for " + nodeName); " is 222.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseStatistics,The length of the statement  "		config.StatisticsLogWriteInterval = ParseTimeSpan (root.GetAttribute ("LogWriteInterval")' "Invalid TimeSpan value for Statistics.LogWriteInterval attribute on Statistics element for " + nodeName); " is 197.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseStatistics,The length of the statement  "		config.StatisticsWriteLogStatisticsToTable = ParseBool (root.GetAttribute ("WriteLogStatisticsToTable")' "Invalid bool value for Statistics.WriteLogStatisticsToTable attribute on Statistics element for " + nodeName); " is 216.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseStatistics,The length of the statement  "		config.StatisticsCollectionLevel = ConfigUtilities.ParseEnum<StatisticsLevel> (root.GetAttribute ("StatisticsCollectionLevel")' "Invalid value of for Statistics.StatisticsCollectionLevel attribute on Statistics element for " + nodeName); " is 237.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseLimitValues,The length of the statement  "		if (grandchild.LocalName.Equals ("Limit") && grandchild.HasAttribute ("Name") && (grandchild.HasAttribute ("SoftLimit") || grandchild.HasAttribute ("HardLimit"))) { " is 164.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseLimitValues,The length of the statement  "				SoftLimitThreshold = ParseInt (grandchild.GetAttribute ("SoftLimit")' "Invalid integer value for the SoftLimit attribute on the Limit element")' " is 144.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseLimitValues,The length of the statement  "				HardLimitThreshold = grandchild.HasAttribute ("HardLimit") ? ParseInt (grandchild.GetAttribute ("HardLimit")' "Invalid integer value for the HardLimit attribute on the Limit element") : 0' " is 188.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,SetTraceFileName,The length of the statement  "	if (config.TraceFilePattern == null || string.IsNullOrWhiteSpace (config.TraceFilePattern) || config.TraceFilePattern.Equals ("false"' StringComparison.OrdinalIgnoreCase) || config.TraceFilePattern.Equals ("none"' StringComparison.OrdinalIgnoreCase)) { " is 252.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,SetTraceFileName,The length of the statement  "		config.TraceFileName = String.Format (config.TraceFilePattern' nodeName' timestamp.ToUniversalTime ().ToString (dateFormat)' Dns.GetHostName ()); " is 145.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ValidateSerializationProvider,The length of the statement  "		throw new FormatException (string.Format ("The serialization provider type {0} is generic and has a missing type parameter specification"' type.FullName)); " is 155.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ValidateSerializationProvider,The length of the statement  "		throw new FormatException (string.Format ("The serialization provider type {0} does not have a parameterless constructor"' type.FullName)); " is 139.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ValidateSerializationProvider,The length of the statement  "		throw new FormatException (string.Format ("The serialization provider type {0} has a non-public parameterless constructor"' type.FullName)); " is 140.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseSubnet,The length of the statement  "	return string.IsNullOrEmpty (input) ? null : input.Split ('.').Select (s => (byte)ParseInt (s' errorMessage)).ToArray (); " is 121.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseIPEndPoint,The length of the statement  "		family = ParseEnum<AddressFamily> (root.GetAttribute ("PreferredFamily")' "Invalid preferred addressing family for " + root.LocalName + " element"); " is 148.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,TraceConfigurationToString,The length of the statement  "	sb.Append ("     Trace File Name: ").Append (string.IsNullOrWhiteSpace (config.TraceFileName) ? "" : Path.GetFullPath (config.TraceFileName)).AppendLine (); " is 156.
Long Statement,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,RuntimeVersionInfo,The length of the statement  "	sb.AppendFormat ("   GC Type={0} GCLatencyMode={1}"' GCSettings.IsServerGC ? "Server" : "Client"' Enum.GetName (typeof(GCLatencyMode)' GCSettings.LatencyMode)).AppendLine (); " is 174.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,SetReminderServiceType,The length of the statement  "		throw new ArgumentException ("Cannot set ReminderServiceType to " + ReminderServiceProviderType.NotSpecified' "ReminderServiceType"); " is 133.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,ToString,The length of the statement  "	sb.Append ("   Subnet: ").Append (Subnet == null ? "" : Subnet.ToStrings (x => x.ToString (CultureInfo.InvariantCulture)' ".")).AppendLine (); " is 142.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,ToString,The length of the statement  "		sb.AppendFormat ("      DefaultMultiCluster: {0}"' DefaultMultiCluster != null ? string.Join ("'"' DefaultMultiCluster) : "null").AppendLine (); " is 144.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,ToString,The length of the statement  "		sb.AppendFormat ("      GossipChannels: {0}"' string.Join ("'"' GossipChannels.Select (conf => conf.ChannelType.ToString () + ":" + conf.ConnectionString))).AppendLine (); " is 171.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,ToString,The length of the statement  "	sb.Append ("      ").Append ("   Deployment Load Publisher Refresh Time: ").Append (DeploymentLoadPublisherRefreshTime).AppendLine (); " is 134.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,ToString,The length of the statement  "	sb.Append ("      ").Append ("   Activation CountBased Placement Choose Out Of: ").Append (ActivationCountBasedPlacementChooseOutOf).AppendLine (); " is 147.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "			Subnet = child.HasAttribute ("Subnet") ? ConfigUtilities.ParseSubnet (child.GetAttribute ("Subnet")' "Invalid Subnet") : null; " is 126.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				LivenessEnabled = ConfigUtilities.ParseBool (child.GetAttribute ("LivenessEnabled")' "Invalid boolean value for the LivenessEnabled attribute on the Liveness element"); " is 168.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				ProbeTimeout = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("ProbeTimeout")' "Invalid time value for the ProbeTimeout attribute on the Liveness element"); " is 160.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				TableRefreshTimeout = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("TableRefreshTimeout")' "Invalid time value for the TableRefreshTimeout attribute on the Liveness element"); " is 181.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				DeathVoteExpirationTimeout = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("DeathVoteExpirationTimeout")' "Invalid time value for the DeathVoteExpirationTimeout attribute on the Liveness element"); " is 202.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				NumMissedProbesLimit = ConfigUtilities.ParseInt (child.GetAttribute ("NumMissedProbesLimit")' "Invalid integer value for the NumMissedIAmAlive attribute on the Liveness element"); " is 179.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				NumProbedSilos = ConfigUtilities.ParseInt (child.GetAttribute ("NumProbedSilos")' "Invalid integer value for the NumProbedSilos attribute on the Liveness element"); " is 164.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				NumVotesForDeathDeclaration = ConfigUtilities.ParseInt (child.GetAttribute ("NumVotesForDeathDeclaration")' "Invalid integer value for the NumVotesForDeathDeclaration attribute on the Liveness element"); " is 203.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				UseLivenessGossip = ConfigUtilities.ParseBool (child.GetAttribute ("UseLivenessGossip")' "Invalid boolean value for the UseLivenessGossip attribute on the Liveness element"); " is 174.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				ValidateInitialConnectivity = ConfigUtilities.ParseBool (child.GetAttribute ("ValidateInitialConnectivity")' "Invalid boolean value for the ValidateInitialConnectivity attribute on the Liveness element"); " is 204.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				IAmAliveTablePublishTimeout = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("IAmAliveTablePublishTimeout")' "Invalid time value for the IAmAliveTablePublishTimeout attribute on the Liveness element"); " is 205.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				NumMissedTableIAmAliveLimit = ConfigUtilities.ParseInt (child.GetAttribute ("NumMissedTableIAmAliveLimit")' "Invalid integer value for the NumMissedTableIAmAliveLimit attribute on the Liveness element"); " is 203.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				MaxJoinAttemptTime = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("MaxJoinAttemptTime")' "Invalid time value for the MaxJoinAttemptTime attribute on the Liveness element"); " is 178.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				int expectedClusterSize = ConfigUtilities.ParseInt (child.GetAttribute ("ExpectedClusterSize")' "Invalid integer value for the ExpectedClusterSize attribute on the Liveness element"); " is 183.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				logger.Warn (ErrorCode.SiloConfigDeprecated' "The Azure element has been deprecated -- use SystemStore element instead."); " is 122.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "						reminderServiceProviderType = Enum.TryParse (sst' out reminderServiceProviderType) ? reminderServiceProviderType : ReminderServiceProviderType.Disabled; " is 152.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				logger.Info ("No ReminderTableAssembly specified with SystemStoreType set to Custom: ReminderService will be disabled"); " is 120.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				ServiceId = ConfigUtilities.ParseGuid (child.GetAttribute ("ServiceId")' "Invalid Guid value for the ServiceId attribute on the Azure element"); " is 144.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				MaxStorageBusyRetries = ConfigUtilities.ParseInt (child.GetAttribute ("MaxStorageBusyRetries")' "Invalid integer value for the MaxStorageBusyRetries attribute on the SystemStore element"); " is 188.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				MockReminderTableTimeout = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("UseMockReminderTable")' "Invalid timeout value"); " is 128.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				BackgroundGossipInterval = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("BackgroundGossipInterval")' "Invalid time value for the BackgroundGossipInterval attribute on the MultiClusterNetwork element"); " is 207.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				UseGlobalSingleInstanceByDefault = ConfigUtilities.ParseBool (child.GetAttribute ("UseGlobalSingleInstanceByDefault")' "Invalid boolean for the UseGlobalSingleInstanceByDefault attribute on the MultiClusterNetwork element"); " is 224.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				GlobalSingleInstanceRetryInterval = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("GlobalSingleInstanceRetryInterval")' "Invalid time value for the GlobalSingleInstanceRetryInterval attribute on the MultiClusterNetwork element"); " is 234.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				GlobalSingleInstanceNumberRetries = ConfigUtilities.ParseInt (child.GetAttribute ("GlobalSingleInstanceNumberRetries")' "Invalid value for the GlobalSingleInstanceRetryInterval attribute on the MultiClusterNetwork element"); " is 224.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				MaxMultiClusterGateways = ConfigUtilities.ParseInt (child.GetAttribute ("MaxMultiClusterGateways")' "Invalid value for the MaxMultiClusterGateways attribute on the MultiClusterNetwork element"); " is 194.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "					ChannelType = (GlobalConfiguration.GossipChannelType)Enum.Parse (typeof(GlobalConfiguration.GossipChannelType)' channelspec.GetAttribute ("Type"))' " is 147.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				DeploymentLoadPublisherRefreshTime = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("DeploymentLoadPublisherRefreshTime")' "Invalid time span value for PlacementStrategy.DeploymentLoadPublisherRefreshTime"); " is 211.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				ActivationCountBasedPlacementChooseOutOf = ConfigUtilities.ParseInt (child.GetAttribute ("ActivationCountBasedPlacementChooseOutOf")' "Invalid ActivationCountBasedPlacementChooseOutOf setting"); " is 194.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				InitialCacheTTL = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("InitialTTL")' "Invalid time value for Caching.InitialTTL"); " is 129.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				MaximumCacheTTL = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("MaximumTTL")' "Invalid time value for Caching.MaximumTTL"); " is 129.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				CacheTTLExtensionFactor = ConfigUtilities.ParseDouble (child.GetAttribute ("TTLExtensionFactor")' "Invalid double value for Caching.TTLExtensionFactor"); " is 153.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				DirectoryCachingStrategy = ConfigUtilities.ParseEnum<DirectoryCachingStrategyType> (child.GetAttribute ("DirectoryCachingStrategy")' "Invalid value for Caching.Strategy"); " is 171.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				DirectoryLazyDeregistrationDelay = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("DirectoryLazyDeregistrationDelay")' "Invalid time span value for Directory.DirectoryLazyDeregistrationDelay"); " is 197.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,Load,The length of the statement  "				ClientRegistrationRefresh = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("ClientRegistrationRefresh")' "Invalid time span value for Directory.ClientRegistrationRefresh"); " is 176.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterBootstrapProvider,The length of the statement  "	if (providerTypeInfo.IsAbstract || providerTypeInfo.IsGenericType || !typeof(IBootstrapProvider).IsAssignableFrom (providerType)) " is 129.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterBootstrapProvider,The length of the statement  "		throw new ArgumentException ("Expected non-generic' non-abstract type which implements IBootstrapProvider interface"' "typeof(T)"); " is 131.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterBootstrapProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.BOOTSTRAP_PROVIDER_CATEGORY_NAME' providerTypeInfo.FullName' providerName' properties); " is 188.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterBootstrapProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.BOOTSTRAP_PROVIDER_CATEGORY_NAME' providerTypeFullName' providerName' properties); " is 183.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStreamProvider,The length of the statement  "	if (providerTypeInfo.IsAbstract || providerTypeInfo.IsGenericType || !typeof(Orleans.Streams.IStreamProvider).IsAssignableFrom (providerType)) " is 142.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStreamProvider,The length of the statement  "		throw new ArgumentException ("Expected non-generic' non-abstract type which implements IStreamProvider interface"' "typeof(T)"); " is 128.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStreamProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.STREAM_PROVIDER_CATEGORY_NAME' providerType.FullName' providerName' properties); " is 181.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStreamProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.STREAM_PROVIDER_CATEGORY_NAME' providerTypeFullName' providerName' properties); " is 180.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStorageProvider,The length of the statement  "	if (providerTypeInfo.IsAbstract || providerTypeInfo.IsGenericType || !typeof(IStorageProvider).IsAssignableFrom (providerType)) " is 127.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStorageProvider,The length of the statement  "		throw new ArgumentException ("Expected non-generic' non-abstract type which implements IStorageProvider interface"' "typeof(T)"); " is 129.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStorageProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.STORAGE_PROVIDER_CATEGORY_NAME' providerTypeInfo.FullName' providerName' properties); " is 186.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStorageProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.STORAGE_PROVIDER_CATEGORY_NAME' providerTypeFullName' providerName' properties); " is 181.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStatisticsProvider,The length of the statement  "	if (providerTypeInfo.IsAbstract || providerTypeInfo.IsGenericType || !(typeof(IStatisticsPublisher).IsAssignableFrom (providerType) && typeof(ISiloMetricsDataPublisher).IsAssignableFrom (providerType))) " is 202.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStatisticsProvider,The length of the statement  "		throw new ArgumentException ("Expected non-generic' non-abstract type which implements IStatisticsPublisher' ISiloMetricsDataPublisher interface"' "typeof(T)"); " is 160.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStatisticsProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.STATISTICS_PROVIDER_CATEGORY_NAME' providerTypeInfo.FullName' providerName' properties); " is 189.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStatisticsProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.STATISTICS_PROVIDER_CATEGORY_NAME' providerTypeFullName' providerName' properties); " is 184.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterLogConsistencyProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.LOG_CONSISTENCY_PROVIDER_CATEGORY_NAME' providerTypeFullName' providerName' properties); " is 189.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterLogConsistencyProvider,The length of the statement  "	if (providerTypeInfo.IsAbstract || providerTypeInfo.IsGenericType || !typeof(ILogConsistencyProvider).IsAssignableFrom (providerType)) " is 134.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterLogConsistencyProvider,The length of the statement  "		throw new ArgumentException ("Expected non-generic' non-abstract type which implements ILogConsistencyProvider interface"' "typeof(T)"); " is 136.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterLogConsistencyProvider,The length of the statement  "	ProviderConfigurationUtility.RegisterProvider (ProviderConfigurations' ProviderCategoryConfiguration.LOG_CONSISTENCY_PROVIDER_CATEGORY_NAME' providerType.FullName' providerName' properties); " is 190.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,TryGetProviderConfiguration,The length of the statement  "	return ProviderConfigurationUtility.TryGetProviderConfiguration (ProviderConfigurations' providerTypeFullName' providerName' out config); " is 137.
Long Statement,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterGrainService,The length of the statement  "	GrainServiceConfigurationsUtility.RegisterGrainService (GrainServiceConfigurations' serviceName' serviceType' properties); " is 122.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,ToString,The length of the statement  "	sb.Append ("      ").AppendFormat ("   .NET thread pool sizes - Min: Worker Threads={0} Completion Port Threads={1}"' workerThreads' completionPortThreads).AppendLine (); " is 170.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,ToString,The length of the statement  "	sb.Append ("      ").AppendFormat ("   .NET thread pool sizes - Max: Worker Threads={0} Completion Port Threads={1}"' workerThreads' completionPortThreads).AppendLine (); " is 170.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,ToString,The length of the statement  "	sb.Append ("      ").AppendFormat ("   .NET ServicePointManager - DefaultConnectionLimit={0} Expect100Continue={1} UseNagleAlgorithm={2}"' DefaultConnectionLimit' Expect100Continue' UseNagleAlgorithm).AppendLine (); " is 215.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				Port = ConfigUtilities.ParseInt (child.GetAttribute ("Port")' "Non-numeric Port attribute value on Networking element for " + SiloName); " is 136.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				AddressType = ConfigUtilities.ParseEnum<AddressFamily> (child.GetAttribute ("PreferredFamily")' "Invalid preferred address family on Networking node. Valid choices are 'InterNetwork' and 'InterNetworkV6'"); " is 206.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				MaxActiveThreads = ConfigUtilities.ParseInt (child.GetAttribute ("MaxActiveThreads")' "Non-numeric MaxActiveThreads attribute value on Scheduler element for " + SiloName); " is 171.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				DelayWarningThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("DelayWarningThreshold")' "Non-numeric DelayWarningThreshold attribute value on Scheduler element for " + SiloName); " is 191.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				ActivationSchedulingQuantum = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("ActivationSchedulingQuantum")' "Non-numeric ActivationSchedulingQuantum attribute value on Scheduler element for " + SiloName); " is 209.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				TurnWarningLengthThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("TurnWarningLengthThreshold")' "Non-numeric TurnWarningLengthThreshold attribute value on Scheduler element for " + SiloName); " is 206.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				MinDotNetThreadPoolSize = ConfigUtilities.ParseInt (child.GetAttribute ("MinDotNetThreadPoolSize")' "Invalid ParseInt MinDotNetThreadPoolSize value on Scheduler element for " + SiloName); " is 187.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				Expect100Continue = ConfigUtilities.ParseBool (child.GetAttribute ("Expect100Continue")' "Invalid ParseBool Expect100Continue value on Scheduler element for " + SiloName); " is 171.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				DefaultConnectionLimit = ConfigUtilities.ParseInt (child.GetAttribute ("DefaultConnectionLimit")' "Invalid ParseInt DefaultConnectionLimit value on Scheduler element for " + SiloName); " is 184.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				UseNagleAlgorithm = ConfigUtilities.ParseBool (child.GetAttribute ("UseNagleAlgorithm ")' "Invalid ParseBool UseNagleAlgorithm value on Scheduler element for " + SiloName); " is 172.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				LoadSheddingEnabled = ConfigUtilities.ParseBool (child.GetAttribute ("Enabled")' "Invalid boolean value for Enabled attribute on LoadShedding attribute for " + SiloName); " is 170.
Long Statement,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The length of the statement  "				LoadSheddingLimit = ConfigUtilities.ParseInt (child.GetAttribute ("LoadLimit")' "Invalid integer value for LoadLimit attribute on LoadShedding attribute for " + SiloName); " is 171.
Long Statement,Orleans.Runtime.Configuration,ClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClusterConfiguration.cs,ResolveIPAddress,The length of the statement  "	if (addrOrHost.Equals ("loopback"' StringComparison.OrdinalIgnoreCase) || addrOrHost.Equals ("localhost"' StringComparison.OrdinalIgnoreCase) || addrOrHost.Equals ("127.0.0.1"' StringComparison.OrdinalIgnoreCase)) { " is 215.
Long Statement,Orleans.Runtime.Configuration,ClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClusterConfiguration.cs,ResolveIPAddress,The length of the statement  "		throw new ArgumentException ("Hostname '" + addrOrHost + "' with subnet " + subnetStr + " and family " + family + " is not a valid IP address or DNS name"); " is 156.
Long Statement,Orleans.Runtime.Configuration,ClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClusterConfiguration.cs,GetLocalIPAddress,The length of the statement  "		if (!string.IsNullOrWhiteSpace (interfaceName) && !netInterface.Name.StartsWith (interfaceName' StringComparison.Ordinal)) " is 122.
Long Statement,Orleans.Runtime.Configuration,ClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClusterConfiguration.cs,GetLocalIPAddress,The length of the statement  "			if (ip.Address.AddressFamily == family)// Picking the first address of the requested family for now. Will need to revisit later " is 127.
Long Statement,Orleans.GrainDirectory,MultiClusterRegistrationStrategyManager,F:\newReposMay17\dotnet_orleans\src\Orleans\GrainDirectory\MultiClusterRegistrationStrategy.cs,GetMultiClusterRegistrationStrategy,The length of the statement  "		throw new InvalidOperationException (string.Format ("More than one {0} cannot be specified for grain interface {1}"' typeof(MultiClusterRegistrationStrategy).Name' grainClass.Name)); " is 182.
Long Statement,Orleans.Providers,StatisticsProviderManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\StatisticsProviderManager.cs,LoadProvider,The length of the statement  "		throw new ArgumentOutOfRangeException (providerKind + "Providers"' string.Format ("Only a single {0} provider is supported."' providerKind)); " is 141.
Long Statement,Orleans.Providers,ProviderLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\ProviderLoader.cs,ValidateProviders,The length of the statement  "			logger.Verbose (ErrorCode.Provider_ProviderLoadedOk' "Provider of type {0} name {1} located ok."' fullConfig.Type' fullConfig.Name); " is 132.
Long Statement,Orleans.Providers,ProviderLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\ProviderLoader.cs,ValidateProviders,The length of the statement  "		string msg = string.Format ("Provider of type {0} name {1} was not loaded." + "Please check that you deployed the assembly in which the provider class is defined to the execution folder."' fullConfig.Type' fullConfig.Name); " is 223.
Long Statement,Orleans.Providers,ProviderLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\ProviderLoader.cs,GetProvider,The length of the statement  "		throw new KeyNotFoundException (string.Format ("Cannot find provider of type {0} with Name={1}"' typeof(TProvider).FullName' name)); " is 132.
Long Statement,Orleans.Providers,ProviderLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\ProviderLoader.cs,RegisterProviderType,The length of the statement  "			logger.Warn (ErrorCode.Provider_InstanceConstructionError1' "Error constructing an instance of a " + typeName + " provider using type " + t.Name + " for provider with name " + fullConfig.Name' ex); " is 197.
Long Statement,Orleans.Providers,ProviderTypeLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\ProviderTypeLoader.cs,ProcessAssemblyLocally,The length of the statement  "		logger.Warn (ErrorCode.Provider_AssemblyLoadError' "Error searching for providers in assembly {0} -- ignoring this assembly. Error = {1}"' assembly.FullName' exc); " is 163.
Long Statement,Orleans.Serialization,ILBasedExceptionSerializer,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILBasedExceptionSerializer.cs,Serialize,The length of the statement  "	// Create a nested context which will be written to the outer context at an int-length offset from the current position. " is 120.
Long Statement,Orleans.Serialization,ILBasedExceptionSerializer,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILBasedExceptionSerializer.cs,Serialize,The length of the statement  "	var innerContext = outerContext.CreateNestedContext (position: outerContext.CurrentOffset + sizeof(int)' writer: new BinaryTokenStreamWriter ()); " is 145.
Long Statement,Orleans.Serialization,ILBasedExceptionSerializer,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILBasedExceptionSerializer.cs,Deserialize,The length of the statement  "	var innerContext = outerContext.CreateNestedContext (position: position' reader: new BinaryTokenStreamReader (innerBytes)); " is 123.
Long Statement,Orleans.Serialization,ILBasedExceptionSerializer,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILBasedExceptionSerializer.cs,Deserialize,The length of the statement  "		var exception = (RemoteNonDeserializableException)this.fallbackBaseExceptionSerializer.Deserialize (null' innerContext); " is 120.
Long Statement,Orleans.Serialization,ILBasedExceptionSerializer,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILBasedExceptionSerializer.cs,ReserializeFallback,The length of the statement  "	// Create a nested context which will be written to the outer context at an int-length offset from the current position. " is 120.
Long Statement,Orleans.Serialization,ILBasedExceptionSerializer,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILBasedExceptionSerializer.cs,GetSerializerMethods,The length of the statement  "		methods = this.generator.GenerateSerializer (actualType' this.exceptionFieldFilter' fieldComparer: ExceptionFieldInfoComparer.Instance); " is 136.
Long Statement,Orleans.Serialization,ILFieldBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILFieldBuilder.cs,CreateField,The length of the statement  "	var typeBuilder = ModuleBuilder.DefineType (fieldType.Name + Guid.NewGuid ().ToString ("N")' TypeAttributes.NotPublic | TypeAttributes.Class | TypeAttributes.Sealed); " is 166.
Long Statement,Orleans.Serialization,ILFieldBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILFieldBuilder.cs,CreateField,The length of the statement  "	var field = typeBuilder.DefineField (FieldName' fieldType' FieldAttributes.Static | FieldAttributes.InitOnly | FieldAttributes.Public); " is 135.
Long Statement,Orleans.Serialization,ILFieldBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILFieldBuilder.cs,CreateField,The length of the statement  "	var initMethod = typeBuilder.DefineMethod (MethodName' MethodAttributes.Static | MethodAttributes.Private' CallingConventions.Standard' typeof(void)' new[] { " is 157.
Long Statement,Orleans.Serialization,ILSerializerGenerator,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILSerializerGenerator.cs,GenerateSerializer,The length of the statement  "		return new SerializationManager.SerializerMethods (copier' serializer.CreateDelegate ()' deserializer.CreateDelegate ()); " is 121.
Long Statement,Orleans.Serialization,ILSerializerGenerator,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILSerializerGenerator.cs,EmitCopier,The length of the statement  "	var il = new ILDelegateBuilder<SerializationManager.DeepCopier> (FieldBuilder' type.Name + "DeepCopier"' SerializationMethodInfos.DeepCopierDelegate); " is 150.
Long Statement,Orleans.Serialization,ILSerializerGenerator,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILSerializerGenerator.cs,EmitSerializer,The length of the statement  "	var il = new ILDelegateBuilder<SerializationManager.Serializer> (FieldBuilder' type.Name + "Serializer"' SerializationMethodInfos.SerializerDelegate); " is 150.
Long Statement,Orleans.Serialization,ILSerializerGenerator,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILSerializerGenerator.cs,EmitDeserializer,The length of the statement  "	var il = new ILDelegateBuilder<SerializationManager.Deserializer> (FieldBuilder' type.Name + "Deserializer"' SerializationMethodInfos.DeserializerDelegate); " is 156.
Long Statement,Orleans.Serialization,ILSerializerGenerator,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILSerializerGenerator.cs,GetFields,The length of the statement  "	var result = type.GetAllFields ().Where (field => !field.IsNotSerialized () && !field.IsStatic && IsSupportedFieldType (field.FieldType.GetTypeInfo ()) && (fieldFilter == null || fieldFilter (field))).ToList (); " is 211.
Long Statement,Orleans.Serialization,OrleansJsonSerializer,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\OrleansJsonSerializer.cs,UpdateSerializerSettings,The length of the statement  "		if (bool.TryParse (config.Properties [UseFullAssemblyNamesProperty]' out useFullAssemblyNames) && useFullAssemblyNames) { " is 121.
Long Statement,Orleans.Serialization,RemoteNonDeserializableException,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\RemoteNonDeserializableException.cs,ToString,The length of the statement  "		builder.Append (" ---> ").AppendLine (this.InnerException.ToString ()).Append ("   --- End of inner exception stack trace ---"); " is 128.
Long Statement,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,CheckLength,The length of the statement  "		throw new SerializationException (String.Format ("Attempt to read past the end of the input stream: CurrentPosition={0}' n={1}' totalLength={2}"' CurrentPosition' n' totalLength)); " is 180.
Long Statement,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,CheckLength,The length of the statement  "				throw new SerializationException (String.Format ("Attempt to read past buffers.Count: currentSegmentIndex={0}' buffers.Count={1}."' currentSegmentIndex' buffers.Count)); " is 169.
Long Statement,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,Trace,The length of the statement  "		var path = String.Format ("d:\\Trace-{0}.{1}.{2}.txt"' DateTime.UtcNow.Hour' DateTime.UtcNow.Minute' DateTime.UtcNow.Ticks); " is 124.
Long Statement,Orleans.Serialization,BinaryTokenStreamWriter,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamWriter.cs,Trace,The length of the statement  "		var path = String.Format ("d:\\Trace-{0}.{1}.{2}.txt"' DateTime.UtcNow.Hour' DateTime.UtcNow.Minute' DateTime.UtcNow.Ticks); " is 124.
Long Statement,Orleans.Serialization,TypeUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\TypeUtilities.cs,IsOrleansPrimitive,The length of the statement  "	return typeInfo.IsPrimitive || typeInfo.IsEnum || t == typeof(string) || t == typeof(DateTime) || t == typeof(Decimal) || (typeInfo.IsArray && typeInfo.GetElementType ().GetTypeInfo ().IsOrleansPrimitive ()); " is 208.
Long Statement,Orleans.Serialization,TypeUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\TypeUtilities.cs,GetBaseTypeKey,The length of the statement  "	if ((typeInfo.Namespace != null) && !typeInfo.Namespace.StartsWith ("System.") && !typeInfo.Namespace.Equals ("System")) { " is 122.
Long Statement,Orleans.Serialization,TypeUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\TypeUtilities.cs,IsSpecialClass,The length of the statement  "	return type == typeof(object) || type == typeof(Array) || type == typeof(Delegate) || type == typeof(Enum) || type == typeof(ValueType); " is 136.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericReadOnlyCollection,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeReadOnlyCollection)' nameof (DeserializeReadOnlyCollection)' nameof (DeepCopyReadOnlyCollection)' generics); " is 199.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericReadOnlyCollection,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeReadOnlyCollection)' nameof (DeserializeReadOnlyCollection)' nameof (DeepCopyReadOnlyCollection)' generics); " is 206.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericReadOnlyCollection,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeReadOnlyCollection)' nameof (DeserializeReadOnlyCollection)' nameof (DeepCopyReadOnlyCollection)' generics); " is 199.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericList,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeList)' nameof (DeserializeList)' nameof (DeepCopyList)' generics); " is 157.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericList,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeList)' nameof (DeserializeList)' nameof (DeepCopyList)' generics); " is 164.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericList,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeList)' nameof (DeserializeList)' nameof (DeepCopyList)' generics); " is 157.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericLinkedList,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeLinkedList)' nameof (DeserializeLinkedList)' nameof (DeepCopyLinkedList)' generics); " is 175.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericLinkedList,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeLinkedList)' nameof (DeserializeLinkedList)' nameof (DeepCopyLinkedList)' generics); " is 182.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericLinkedList,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeLinkedList)' nameof (DeserializeLinkedList)' nameof (DeepCopyLinkedList)' generics); " is 175.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericHashSet,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeHashSet)' nameof (DeserializeHashSet)' nameof (DeepCopyHashSet)' generics); " is 166.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericHashSet,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeHashSet)' nameof (DeserializeHashSet)' nameof (DeepCopyHashSet)' generics); " is 173.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericHashSet,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeHashSet)' nameof (DeserializeHashSet)' nameof (DeepCopyHashSet)' generics); " is 166.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeHashSet,The length of the statement  "	SerializationManager.SerializeInner (set.Comparer.Equals (EqualityComparer<T>.Default) ? null : set.Comparer' context' typeof(IEqualityComparer<T>)); " is 149.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericSortedSet,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeSortedSet)' nameof (DeserializeSortedSet)' nameof (DeepCopySortedSet)' generics); " is 172.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericSortedSet,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeSortedSet)' nameof (DeserializeSortedSet)' nameof (DeepCopySortedSet)' generics); " is 179.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericSortedSet,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeSortedSet)' nameof (DeserializeSortedSet)' nameof (DeepCopySortedSet)' generics); " is 172.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeSortedSet,The length of the statement  "	SerializationManager.SerializeInner (set.Comparer.Equals (Comparer<T>.Default) ? null : set.Comparer' context' typeof(IComparer<T>)); " is 133.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericQueue,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeQueue)' nameof (DeserializeQueue)' nameof (DeepCopyQueue)' generics); " is 160.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericQueue,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeQueue)' nameof (DeserializeQueue)' nameof (DeepCopyQueue)' generics); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericQueue,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeQueue)' nameof (DeserializeQueue)' nameof (DeepCopyQueue)' generics); " is 160.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericStack,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeStack)' nameof (DeserializeStack)' nameof (DeepCopyStack)' generics); " is 160.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericStack,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeStack)' nameof (DeserializeStack)' nameof (DeepCopyStack)' generics); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericStack,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeStack)' nameof (DeserializeStack)' nameof (DeepCopyStack)' generics); " is 160.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeDictionary)' nameof (DeserializeDictionary)' nameof (CopyDictionary)); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeDictionary)' nameof (DeserializeDictionary)' nameof (CopyDictionary)); " is 174.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeDictionary)' nameof (DeserializeDictionary)' nameof (CopyDictionary)); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeDictionary,The length of the statement  "	SerializationManager.SerializeInner (dict.Comparer.Equals (EqualityComparer<K>.Default) ? null : dict.Comparer' context' typeof(IEqualityComparer<K>)); " is 151.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyDictionary,The length of the statement  "		result [(K)SerializationManager.DeepCopyInner (pair.Key' context)] = (V)SerializationManager.DeepCopyInner (pair.Value' context); " is 129.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericReadOnlyDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeReadOnlyDictionary)' nameof (DeserializeReadOnlyDictionary)' nameof (CopyReadOnlyDictionary)); " is 191.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericReadOnlyDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeReadOnlyDictionary)' nameof (DeserializeReadOnlyDictionary)' nameof (CopyReadOnlyDictionary)); " is 198.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericReadOnlyDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeReadOnlyDictionary)' nameof (DeserializeReadOnlyDictionary)' nameof (CopyReadOnlyDictionary)); " is 191.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyReadOnlyDictionary,The length of the statement  "		innerDict [(K)SerializationManager.DeepCopyInner (pair.Key' context)] = (V)SerializationManager.DeepCopyInner (pair.Value' context); " is 132.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeStringObjectDictionary,The length of the statement  "	SerializationManager.SerializeInner (dict.Comparer.Equals (EqualityComparer<string>.Default) ? null : dict.Comparer' context' typeof(IEqualityComparer<string>)); " is 161.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeStringObjectDictionary,The length of the statement  "	var comparer = (IEqualityComparer<string>)SerializationManager.DeserializeInner (typeof(IEqualityComparer<string>)' context); " is 125.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericSortedDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeSortedDictionary)' nameof (DeserializeSortedDictionary)' nameof (CopySortedDictionary)); " is 185.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericSortedDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeSortedDictionary)' nameof (DeserializeSortedDictionary)' nameof (CopySortedDictionary)); " is 192.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericSortedDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeSortedDictionary)' nameof (DeserializeSortedDictionary)' nameof (CopySortedDictionary)); " is 185.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeSortedDictionary,The length of the statement  "	SerializationManager.SerializeInner (dict.Comparer.Equals (Comparer<K>.Default) ? null : dict.Comparer' context' typeof(IComparer<K>)); " is 135.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopySortedDictionary,The length of the statement  "		result [(K)SerializationManager.DeepCopyInner (pair.Key' context)] = (V)SerializationManager.DeepCopyInner (pair.Value' context); " is 129.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericSortedList,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeSortedList)' nameof (DeserializeSortedList)' nameof (CopySortedList)); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericSortedList,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeSortedList)' nameof (DeserializeSortedList)' nameof (CopySortedList)); " is 174.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericSortedList,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeSortedList)' nameof (DeserializeSortedList)' nameof (CopySortedList)); " is 167.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeSortedList,The length of the statement  "	SerializationManager.SerializeInner (list.Comparer.Equals (Comparer<K>.Default) ? null : list.Comparer' context' typeof(IComparer<K>)); " is 135.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopySortedList,The length of the statement  "		result [(K)SerializationManager.DeepCopyInner (pair.Key' context)] = (V)SerializationManager.DeepCopyInner (pair.Value' context); " is 129.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericImmutableDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableDictionary)' nameof (DeserializeImmutableDictionary)' nameof (CopyImmutableDictionary)); " is 194.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeImmutableDictionary)' nameof (DeserializeImmutableDictionary)' nameof (CopyImmutableDictionary)); " is 201.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericImmutableDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableDictionary)' nameof (DeserializeImmutableDictionary)' nameof (CopyImmutableDictionary)); " is 194.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeImmutableDictionary,The length of the statement  "	SerializationManager.SerializeInner (dict.KeyComparer.Equals (EqualityComparer<K>.Default) ? null : dict.KeyComparer' context' typeof(IEqualityComparer<K>)); " is 157.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeImmutableDictionary,The length of the statement  "	SerializationManager.SerializeInner (dict.ValueComparer.Equals (EqualityComparer<V>.Default) ? null : dict.ValueComparer' context' typeof(IEqualityComparer<V>)); " is 161.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericImmutableList,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableList)' nameof (DeserializeImmutableList)' nameof (CopyImmutableList)); " is 176.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableList,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeImmutableList)' nameof (DeserializeImmutableList)' nameof (CopyImmutableList)); " is 183.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericImmutableList,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableList)' nameof (DeserializeImmutableList)' nameof (CopyImmutableList)); " is 176.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericImmutableHashSet,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableHashSet)' nameof (DeserializeImmutableHashSet)' nameof (CopyImmutableHashSet)); " is 185.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericImmutableHashSet,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableHashSet)' nameof (DeserializeImmutableHashSet)' nameof (CopyImmutableHashSet)); " is 185.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableHashSet,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeImmutableHashSet)' nameof (DeserializeImmutableHashSet)' nameof (CopyImmutableHashSet)); " is 192.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeImmutableHashSet,The length of the statement  "	SerializationManager.SerializeInner (dict.KeyComparer.Equals (EqualityComparer<K>.Default) ? null : dict.KeyComparer' context' typeof(IEqualityComparer<K>)); " is 157.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericImmutableSortedSet,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableSortedSet)' nameof (DeserializeImmutableSortedSet)' nameof (CopyImmutableSortedSet)); " is 191.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableSortedSet,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeImmutableSortedSet)' nameof (DeserializeImmutableSortedSet)' nameof (CopyImmutableSortedSet)); " is 198.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericImmutableSortedSet,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableSortedSet)' nameof (DeserializeImmutableSortedSet)' nameof (CopyImmutableSortedSet)); " is 191.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeImmutableSortedSet,The length of the statement  "	SerializationManager.SerializeInner (dict.KeyComparer.Equals (Comparer<K>.Default) ? null : dict.KeyComparer' context' typeof(IComparer<K>)); " is 141.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericImmutableSortedDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableSortedDictionary)' nameof (DeserializeImmutableSortedDictionary)' nameof (CopyImmutableSortedDictionary)); " is 212.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableSortedDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeImmutableSortedDictionary)' nameof (DeserializeImmutableSortedDictionary)' nameof (CopyImmutableSortedDictionary)); " is 219.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericImmutableSortedDictionary,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableSortedDictionary)' nameof (DeserializeImmutableSortedDictionary)' nameof (CopyImmutableSortedDictionary)); " is 212.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeImmutableSortedDictionary,The length of the statement  "	SerializationManager.SerializeInner (dict.KeyComparer.Equals (Comparer<K>.Default) ? null : dict.KeyComparer' context' typeof(IComparer<K>)); " is 141.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeImmutableSortedDictionary,The length of the statement  "	SerializationManager.SerializeInner (dict.ValueComparer.Equals (EqualityComparer<V>.Default) ? null : dict.ValueComparer' context' typeof(IEqualityComparer<V>)); " is 161.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericImmutableArray,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableArray)' nameof (DeserializeImmutableArray)' nameof (CopyImmutableArray)); " is 179.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableArray,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeImmutableArray)' nameof (DeserializeImmutableArray)' nameof (CopyImmutableArray)); " is 186.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericImmutableArray,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableArray)' nameof (DeserializeImmutableArray)' nameof (CopyImmutableArray)); " is 179.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericImmutableQueue,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableQueue)' nameof (DeserializeImmutableQueue)' nameof (CopyImmutableQueue)); " is 179.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericImmutableQueue,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeImmutableQueue)' nameof (DeserializeImmutableQueue)' nameof (CopyImmutableQueue)); " is 186.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericImmutableQueue,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutableQueue)' nameof (DeserializeImmutableQueue)' nameof (CopyImmutableQueue)); " is 179.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeTuple,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeTuple) + generics.Length' nameof (DeserializeTuple) + generics.Length' nameof (DeepCopyTuple) + generics.Length' generics); " is 214.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeTuple,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeTuple) + generics.Length' nameof (DeserializeTuple) + generics.Length' nameof (DeepCopyTuple) + generics.Length' generics); " is 214.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeepCopyTuple,The length of the statement  "	var concretes = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeTuple) + generics.Length' nameof (DeserializeTuple) + generics.Length' nameof (DeepCopyTuple) + generics.Length' generics); " is 214.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeepCopyTuple2,The length of the statement  "	var result = new Tuple<T1' T2> ((T1)SerializationManager.DeepCopyInner (input.Item1' context)' (T2)SerializationManager.DeepCopyInner (input.Item2' context)); " is 158.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeepCopyTuple3,The length of the statement  "	var result = new Tuple<T1' T2' T3> ((T1)SerializationManager.DeepCopyInner (input.Item1' context)' (T2)SerializationManager.DeepCopyInner (input.Item2' context)' (T3)SerializationManager.DeepCopyInner (input.Item3' context)); " is 225.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeepCopyTuple4,The length of the statement  "	var result = new Tuple<T1' T2' T3' T4> ((T1)SerializationManager.DeepCopyInner (input.Item1' context)' (T2)SerializationManager.DeepCopyInner (input.Item2' context)' (T3)SerializationManager.DeepCopyInner (input.Item3' context)' (T4)SerializationManager.DeepCopyInner (input.Item4' context)); " is 292.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeepCopyTuple5,The length of the statement  "	var result = new Tuple<T1' T2' T3' T4' T5> ((T1)SerializationManager.DeepCopyInner (input.Item1' context)' (T2)SerializationManager.DeepCopyInner (input.Item2' context)' (T3)SerializationManager.DeepCopyInner (input.Item3' context)' (T4)SerializationManager.DeepCopyInner (input.Item4' context)' (T5)SerializationManager.DeepCopyInner (input.Item5' context)); " is 359.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeepCopyTuple6,The length of the statement  "	var result = new Tuple<T1' T2' T3' T4' T5' T6> ((T1)SerializationManager.DeepCopyInner (input.Item1' context)' (T2)SerializationManager.DeepCopyInner (input.Item2' context)' (T3)SerializationManager.DeepCopyInner (input.Item3' context)' (T4)SerializationManager.DeepCopyInner (input.Item4' context)' (T5)SerializationManager.DeepCopyInner (input.Item5' context)' (T6)SerializationManager.DeepCopyInner (input.Item6' context)); " is 426.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeepCopyTuple7,The length of the statement  "	var result = new Tuple<T1' T2' T3' T4' T5' T6' T7> ((T1)SerializationManager.DeepCopyInner (input.Item1' context)' (T2)SerializationManager.DeepCopyInner (input.Item2' context)' (T3)SerializationManager.DeepCopyInner (input.Item3' context)' (T4)SerializationManager.DeepCopyInner (input.Item4' context)' (T5)SerializationManager.DeepCopyInner (input.Item5' context)' (T6)SerializationManager.DeepCopyInner (input.Item6' context)' (T7)SerializationManager.DeepCopyInner (input.Item7' context)); " is 493.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericKeyValuePair,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeKeyValuePair)' nameof (DeserializeKeyValuePair)' nameof (CopyKeyValuePair)); " is 173.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericKeyValuePair,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeKeyValuePair)' nameof (DeserializeKeyValuePair)' nameof (CopyKeyValuePair)); " is 180.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericKeyValuePair,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeKeyValuePair)' nameof (DeserializeKeyValuePair)' nameof (CopyKeyValuePair)); " is 173.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyKeyValuePair,The length of the statement  "	var result = new KeyValuePair<TK' TV> ((TK)SerializationManager.DeepCopyInner (pair.Key' context)' (TV)SerializationManager.DeepCopyInner (pair.Value' context)); " is 161.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericNullable,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeNullable)' nameof (DeserializeNullable)' nameof (CopyNullable)); " is 161.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericNullable,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeNullable)' nameof (DeserializeNullable)' nameof (CopyNullable)); " is 168.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericNullable,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeNullable)' nameof (DeserializeNullable)' nameof (CopyNullable)); " is 161.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,SerializeGenericImmutable,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutable)' nameof (DeserializeImmutable)' nameof (CopyImmutable)); " is 164.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,DeserializeGenericImmutable,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' expected' nameof (SerializeImmutable)' nameof (DeserializeImmutable)' nameof (CopyImmutable)); " is 171.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,CopyGenericImmutable,The length of the statement  "	var concreteMethods = RegisterConcreteMethods (context.SerializationManager' t' nameof (SerializeImmutable)' nameof (DeserializeImmutable)' nameof (CopyImmutable)); " is 164.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	var genericCopier = typeof(BuiltInTypes).GetMethods (BindingFlags.Static | BindingFlags.NonPublic).First (m => m.Name == copierName); " is 133.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	var genericSerializer = typeof(BuiltInTypes).GetMethods (BindingFlags.Static | BindingFlags.NonPublic).First (m => m.Name == serializerName); " is 141.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	var serializer = (SerializationManager.Serializer)concreteSerializer.CreateDelegate (typeof(SerializationManager.Serializer)); " is 126.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	var genericDeserializer = typeof(BuiltInTypes).GetMethods (BindingFlags.Static | BindingFlags.NonPublic).First (m => m.Name == deserializerName); " is 145.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	var deserializer = (SerializationManager.Deserializer)concreteDeserializer.CreateDelegate (typeof(SerializationManager.Deserializer)); " is 134.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	return new Tuple<SerializationManager.Serializer' SerializationManager.Deserializer' SerializationManager.DeepCopier> (serializer' deserializer' copier); " is 153.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	var genericCopier = definingType.GetMethods (BindingFlags.Static | BindingFlags.NonPublic).First (m => m.Name == copierName); " is 125.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	var genericSerializer = definingType.GetMethods (BindingFlags.Static | BindingFlags.NonPublic).First (m => m.Name == serializerName); " is 133.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	var serializer = (SerializationManager.Serializer)concreteSerializer.CreateDelegate (typeof(SerializationManager.Serializer)); " is 126.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	var genericDeserializer = definingType.GetMethods (BindingFlags.Static | BindingFlags.NonPublic).First (m => m.Name == deserializerName); " is 137.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	var deserializer = (SerializationManager.Deserializer)concreteDeserializer.CreateDelegate (typeof(SerializationManager.Deserializer)); " is 134.
Long Statement,Orleans.Serialization,BuiltInTypes,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BuiltInTypes.cs,RegisterConcreteMethods,The length of the statement  "	return new Tuple<SerializationManager.Serializer' SerializationManager.Deserializer' SerializationManager.DeepCopier> (serializer' deserializer' copier); " is 153.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(Tuple<' ' ' >)' BuiltInTypes.DeepCopyTuple' BuiltInTypes.SerializeTuple' BuiltInTypes.DeserializeTuple); " is 121.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(Tuple<' ' ' ' >)' BuiltInTypes.DeepCopyTuple' BuiltInTypes.SerializeTuple' BuiltInTypes.DeserializeTuple); " is 123.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(Tuple<' ' ' ' ' >)' BuiltInTypes.DeepCopyTuple' BuiltInTypes.SerializeTuple' BuiltInTypes.DeserializeTuple); " is 125.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(List<>)' BuiltInTypes.CopyGenericList' BuiltInTypes.SerializeGenericList' BuiltInTypes.DeserializeGenericList); " is 128.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(ReadOnlyCollection<>)' BuiltInTypes.CopyGenericReadOnlyCollection' BuiltInTypes.SerializeGenericReadOnlyCollection' BuiltInTypes.DeserializeGenericReadOnlyCollection); " is 184.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(LinkedList<>)' BuiltInTypes.CopyGenericLinkedList' BuiltInTypes.SerializeGenericLinkedList' BuiltInTypes.DeserializeGenericLinkedList); " is 152.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(HashSet<>)' BuiltInTypes.CopyGenericHashSet' BuiltInTypes.SerializeGenericHashSet' BuiltInTypes.DeserializeGenericHashSet); " is 140.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(SortedSet<>)' BuiltInTypes.CopyGenericSortedSet' BuiltInTypes.SerializeGenericSortedSet' BuiltInTypes.DeserializeGenericSortedSet); " is 148.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(Stack<>)' BuiltInTypes.CopyGenericStack' BuiltInTypes.SerializeGenericStack' BuiltInTypes.DeserializeGenericStack); " is 132.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(Queue<>)' BuiltInTypes.CopyGenericQueue' BuiltInTypes.SerializeGenericQueue' BuiltInTypes.DeserializeGenericQueue); " is 132.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(ReadOnlyDictionary<' >)' BuiltInTypes.CopyGenericReadOnlyDictionary' BuiltInTypes.SerializeGenericReadOnlyDictionary' BuiltInTypes.DeserializeGenericReadOnlyDictionary); " is 186.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(Dictionary<' >)' BuiltInTypes.CopyGenericDictionary' BuiltInTypes.SerializeGenericDictionary' BuiltInTypes.DeserializeGenericDictionary); " is 154.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(Dictionary<string' object>)' BuiltInTypes.CopyStringObjectDictionary' BuiltInTypes.SerializeStringObjectDictionary' BuiltInTypes.DeserializeStringObjectDictionary); " is 181.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(SortedDictionary<' >)' BuiltInTypes.CopyGenericSortedDictionary' BuiltInTypes.SerializeGenericSortedDictionary' BuiltInTypes.DeserializeGenericSortedDictionary); " is 178.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(SortedList<' >)' BuiltInTypes.CopyGenericSortedList' BuiltInTypes.SerializeGenericSortedList' BuiltInTypes.DeserializeGenericSortedList); " is 154.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(KeyValuePair<' >)' BuiltInTypes.CopyGenericKeyValuePair' BuiltInTypes.SerializeGenericKeyValuePair' BuiltInTypes.DeserializeGenericKeyValuePair); " is 162.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(Nullable<>)' BuiltInTypes.CopyGenericNullable' BuiltInTypes.SerializeGenericNullable' BuiltInTypes.DeserializeGenericNullable); " is 144.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(Immutable<>)' BuiltInTypes.CopyGenericImmutable' BuiltInTypes.SerializeGenericImmutable' BuiltInTypes.DeserializeGenericImmutable); " is 148.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(ImmutableQueue<>)' BuiltInTypes.CopyGenericImmutableQueue' BuiltInTypes.SerializeGenericImmutableQueue' BuiltInTypes.DeserializeGenericImmutableQueue); " is 168.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(ImmutableArray<>)' BuiltInTypes.CopyGenericImmutableArray' BuiltInTypes.SerializeGenericImmutableArray' BuiltInTypes.DeserializeGenericImmutableArray); " is 168.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(ImmutableSortedDictionary<' >)' BuiltInTypes.CopyGenericImmutableSortedDictionary' BuiltInTypes.SerializeGenericImmutableSortedDictionary' BuiltInTypes.DeserializeGenericImmutableSortedDictionary); " is 214.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(ImmutableSortedSet<>)' BuiltInTypes.CopyGenericImmutableSortedSet' BuiltInTypes.SerializeGenericImmutableSortedSet' BuiltInTypes.DeserializeGenericImmutableSortedSet); " is 184.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(ImmutableHashSet<>)' BuiltInTypes.CopyGenericImmutableHashSet' BuiltInTypes.SerializeGenericImmutableHashSet' BuiltInTypes.DeserializeGenericImmutableHashSet); " is 176.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(ImmutableDictionary<' >)' BuiltInTypes.CopyGenericImmutableDictionary' BuiltInTypes.SerializeGenericImmutableDictionary' BuiltInTypes.DeserializeGenericImmutableDictionary); " is 190.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(ImmutableList<>)' BuiltInTypes.CopyGenericImmutableList' BuiltInTypes.SerializeGenericImmutableList' BuiltInTypes.DeserializeGenericImmutableList); " is 164.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(TimeSpan)' BuiltInTypes.CopyTimeSpan' BuiltInTypes.SerializeTimeSpan' BuiltInTypes.DeserializeTimeSpan); " is 121.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(DateTimeOffset)' BuiltInTypes.CopyDateTimeOffset' BuiltInTypes.SerializeDateTimeOffset' BuiltInTypes.DeserializeDateTimeOffset); " is 145.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(IPAddress)' BuiltInTypes.CopyIPAddress' BuiltInTypes.SerializeIPAddress' BuiltInTypes.DeserializeIPAddress); " is 125.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(IPEndPoint)' BuiltInTypes.CopyIPEndPoint' BuiltInTypes.SerializeIPEndPoint' BuiltInTypes.DeserializeIPEndPoint); " is 129.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(CultureInfo)' BuiltInTypes.CopyCultureInfo' BuiltInTypes.SerializeCultureInfo' BuiltInTypes.DeserializeCultureInfo); " is 133.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(InvokeMethodRequest)' BuiltInTypes.CopyInvokeMethodRequest' BuiltInTypes.SerializeInvokeMethodRequest' BuiltInTypes.DeserializeInvokeMethodRequest); " is 165.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(Response)' BuiltInTypes.CopyOrleansResponse' BuiltInTypes.SerializeOrleansResponse' BuiltInTypes.DeserializeOrleansResponse); " is 142.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(ActivationId)' BuiltInTypes.CopyActivationId' BuiltInTypes.SerializeActivationId' BuiltInTypes.DeserializeActivationId); " is 137.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(ActivationAddress)' BuiltInTypes.CopyActivationAddress' BuiltInTypes.SerializeActivationAddress' BuiltInTypes.DeserializeActivationAddress); " is 157.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(CorrelationId)' BuiltInTypes.CopyCorrelationId' BuiltInTypes.SerializeCorrelationId' BuiltInTypes.DeserializeCorrelationId); " is 141.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterBuiltInSerializers,The length of the statement  "	Register (typeof(SiloAddress)' BuiltInTypes.CopySiloAddress' BuiltInTypes.SerializeSiloAddress' BuiltInTypes.DeserializeSiloAddress); " is 133.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,Register,The length of the statement  "				Register (type' (DeepCopier)copier.CreateDelegate (typeof(DeepCopier))' (Serializer)serializer.CreateDelegate (typeof(Serializer))' (Deserializer)deserializer.CreateDelegate (typeof(Deserializer))' true); " is 204.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,Register,The length of the statement  "				logger.Warn (ErrorCode.SerMgr_SerializationMethodsMissing' "Serialization methods not found on type {0}."' serializerType.GetParseableName ()); " is 143.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,Register,The length of the statement  "		logger.Warn (ErrorCode.SerMgr_ErrorBindingMethods' "Error binding serialization methods for type {0}"' type.GetParseableName ()); " is 129.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,FindSerializationInfo,The length of the statement  "	bool systemAssembly = !assembly.IsDynamic && (assembly.FullName.StartsWith ("mscorlib"' StringComparison.OrdinalIgnoreCase) || assembly.FullName.StartsWith ("System."' StringComparison.Ordinal)); " is 195.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,FindSerializationInfo,The length of the statement  "			if (!typeInfo.IsInterface && !typeInfo.IsAbstract && (typeInfo.Namespace == null || (!typeInfo.Namespace.Equals ("System"' StringComparison.Ordinal) && !typeInfo.Namespace.StartsWith ("System."' StringComparison.Ordinal)))) { " is 225.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,FindSerializationInfo,The length of the statement  "							Register (type' null' (Serializer)serializer.CreateDelegate (typeof(Serializer))' (Deserializer)deserializer.CreateDelegate (typeof(Deserializer))' true); " is 154.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,FindSerializationInfo,The length of the statement  "							logger.Warn (ErrorCode.SerMgr_ErrorBindingMethods' "Error binding serialization methods for type {0}"' type.OrleansTypeName ()); " is 128.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,FindSerializationInfo,The length of the statement  "							logger.Warn (ErrorCode.SerMgr_ErrorBindingMethods' "Error binding serialization methods for type {0}"' type.OrleansTypeName ()); " is 128.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,FindSerializationInfo,The length of the statement  "							if (ifaceTypeInfo.IsGenericType && (ifaceTypeInfo.GetGenericTypeDefinition () == typeof(IComparer<>) || ifaceTypeInfo.GetGenericTypeDefinition () == typeof(IEqualityComparer<>))) { " is 180.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,FindSerializationInfo,The length of the statement  "		logger.Warn (ErrorCode.SerMgr_ErrorLoadingAssemblyTypes' "Error loading types for assembly {0}: {1}"' assembly.GetName ().Name' sb.ToString ()); " is 144.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterConcreteSerializer,The length of the statement  "		return new SerializerMethods (GetCopier (concreteSerializerType)' GetSerializer (concreteSerializerType)' GetDeserializer (concreteSerializerType)); " is 148.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeepCopierHelper,The length of the statement  "				logger.Info (ErrorCode.Ser_LargeObjectAllocated' "Large byte array of size {0} is being copied. This will result in an allocation on the large object heap. " + "Frequent allocations to the large object heap can result in frequent gen2 garbage collections and poor system performance. " + "Please consider using Immutable<byte[]> instead."' source.Length); " is 355.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeepCopierHelper,The length of the statement  "				logger.Info (ErrorCode.Ser_LargeObjectAllocated' "Large {0} array of total byte size {1} is being copied. This will result in an allocation on the large object heap. " + "Frequent allocations to the large object heap can result in frequent gen2 garbage collections and poor system performance. " + "Please consider using Immutable<{0}> instead."' t.OrleansTypeName ()' Buffer.ByteLength (originalArray)); " is 404.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeepCopierHelper,The length of the statement  "	throw new OrleansException ("No copier found for object of type " + t.OrleansTypeName () + ". Perhaps you need to mark it [Serializable] or define a custom serializer for it?"); " is 177.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,HasSerializer,The length of the statement  "		return serializers.TryGetValue (genericTypeDefinition.TypeHandle' out ser) && typeInfo.GetGenericArguments ().All (type => HasSerializer (type)); " is 145.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,SerializeInner,The length of the statement  "		var foo = new Exception (String.Format ("Non-serializable exception of type {0}: {1}" + Environment.NewLine + "at {2}"' t.OrleansTypeName ()' rawException.Message' rawException.StackTrace)); " is 190.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,SerializeInner,The length of the statement  "	throw new ArgumentException ("No serializer found for object of type " + t.OrleansTypeName () + ". Perhaps you need to mark it [Serializable] or define a custom serializer for it?"); " is 182.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeserializeInner,The length of the statement  "		throw new SerializationException ("Unsupported type '" + resultType.OrleansTypeName () + "' encountered. Perhaps you need to mark it [Serializable] or define a custom serializer for it?"); " is 188.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,GetGetDelegate,The length of the statement  "	var method = new DynamicMethod (field.Name + "Get"' field.FieldType' parameterTypes' field.FieldType.GetTypeInfo ().Module' true); " is 130.
Long Statement,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,RegisterSerializationProviders,The length of the statement  "			logger.Error (ErrorCode.SerMgr_ErrorLoadingAssemblyTypes' "Failed to create instance of type: " + typeInfo.FullName' exception); " is 128.
Long Statement,Orleans.Core,GrainStateStorageBridge,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\GrainStateStorageBridge.cs,WriteStateAsync,The length of the statement  "                    store.Log.Warn(ErrorCode.StorageProvider_ForceReRead' "Forcing re-read of last good state for grain Type={0}"' grainTypeName);" is 126.
Long Statement,Orleans.Core,GrainStateStorageBridge,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\GrainStateStorageBridge.cs,MakeErrorMsg,The length of the statement  "	return string.Format ("Error from storage provider during {0} for grain Type={1} Pk={2} Id={3} Error={4}" + Environment.NewLine + " {5}"' what' grainTypeName' grainReference.GrainId.ToDetailedString ()' grainReference' errorCode' LogFormatter.PrintException (exc)); " is 265.
Long Statement,Orleans.Messaging,GatewayManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayManager.cs,Stop,The length of the statement  "		Utils.SafeExecute (() => ((IGatewayListObservable)ListProvider).UnSubscribeFromGatewayNotificationEvents (this)' logger); " is 121.
Long Statement,Orleans.Messaging,GatewayManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayManager.cs,GatewayListNotification,The length of the statement  "		logger.Error (ErrorCode.ProxyClient_GetGateways' "Exception occurred during GatewayListNotification -> UpdateLiveGatewaysSnapshot"' exc); " is 137.
Long Statement,Orleans.Messaging,GatewayManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayManager.cs,RefreshSnapshotLiveGateways_TimerCallback,The length of the statement  "			logger.Verbose ("Found {0} knownGateways from Gateway listProvider {1}"' currentKnownGateways.Count' Utils.EnumerableToString (currentKnownGateways)); " is 150.
Long Statement,Orleans.Messaging,GatewayManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayManager.cs,RefreshSnapshotLiveGateways_TimerCallback,The length of the statement  "		logger.Error (ErrorCode.ProxyClient_GetGateways' "Exception occurred during RefreshSnapshotLiveGateways_TimerCallback -> listProvider.GetGateways()"' exc); " is 155.
Long Statement,Orleans.Messaging,GatewayManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayManager.cs,UpdateLiveGatewaysSnapshot,The length of the statement  "			// The latter is to cover the case when the Gateway provider returns an outdated list that does not yet reflect the actually recently died Gateway. " is 147.
Long Statement,Orleans.Messaging,GatewayManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayManager.cs,UpdateLiveGatewaysSnapshot,The length of the statement  "			logger.Info (ErrorCode.GatewayManager_FoundKnownGateways' "Refreshed the live Gateway list. Found {0} gateways from Gateway listProvider: {1}. Picked only known live out of them. Now has {2} live Gateways: {3}. Previous refresh time was = {4}"' knownGateways.Count ()' Utils.EnumerableToString (knownGateways)' cachedLiveGateways.Count' Utils.EnumerableToString (cachedLiveGateways)' prevRefresh); " is 397.
Long Statement,Orleans.Messaging,GatewayClientReceiver,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayClientReceiver.cs,Run,The length of the statement  "		Log.Warn (ErrorCode.ProxyClientUnhandledExceptionWhileReceiving' String.Format ("Unexpected/unhandled exception while receiving: {0}. Restarting gateway receiver for {1}."' ex' gatewayConnection.Address)' ex); " is 209.
Long Statement,Orleans.Messaging,GatewayClientReceiver,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayClientReceiver.cs,FillBuffer,The length of the statement  "		Log.Warn (ErrorCode.Runtime_Error_100158' String.Format ("Exception receiving from gateway {0}: {1}"' gatewayConnection.Address' ex.Message)); " is 142.
Long Statement,Orleans.Messaging,GatewayConnection,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayConnection.cs,MarkAsDisconnected,The length of the statement  "		if (Socket == socket2Disconnect)// handles races between connect and disconnect' since sometimes we grab the socket outside lock. " is 129.
Long Statement,Orleans.Messaging,GatewayConnection,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayConnection.cs,MarkAsDisconnected,The length of the statement  "			Log.Warn (ErrorCode.ProxyClient_MarkGatewayDisconnected' String.Format ("Marking gateway at address {0} as Disconnected"' Address)); " is 132.
Long Statement,Orleans.Messaging,GatewayConnection,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayConnection.cs,MarkAsDead,The length of the statement  "	Log.Warn (ErrorCode.ProxyClient_MarkGatewayDead' String.Format ("Marking gateway at address {0} as Dead in my client local gateway list."' Address)); " is 149.
Long Statement,Orleans.Messaging,GatewayConnection,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayConnection.cs,Connect,The length of the statement  "			Log.Verbose (ErrorCode.ProxyClient_MsgCtrNotRunning' "Ignoring connection attempt to gateway {0} because the proxy message center is not running"' Address); " is 156.
Long Statement,Orleans.Messaging,GatewayConnection,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayConnection.cs,Connect,The length of the statement  "				Log.Verbose (ErrorCode.ProxyClient_DeadGateway' "Ignoring connection attempt to gateway {0} because this gateway connection is already marked as non live"' Address); " is 165.
Long Statement,Orleans.Messaging,GatewayConnection,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayConnection.cs,Connect,The length of the statement  "							Log.Verbose (ErrorCode.ProxyClient_PauseBeforeRetry' "Pausing for {0} before trying to connect to gateway {1} on trial {2}"' wait' Address' i); " is 143.
Long Statement,Orleans.Messaging,GatewayConnection,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayConnection.cs,PrepareMessageForSend,The length of the statement  "		// Recycle the message we've dequeued. Note that this will recycle messages that were queued up to be sent when the gateway connection is declared dead " is 151.
Long Statement,Orleans.Messaging,GatewayConnection,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayConnection.cs,OnMessageSerializationFailure,The length of the statement  "	Log.Warn (ErrorCode.ProxyClient_SerializationError' String.Format ("Unexpected error serializing message to gateway {0}."' Address)' exc); " is 138.
Long Statement,Orleans.Messaging,GatewayConnection,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayConnection.cs,ProcessMessageAfterSend,The length of the statement  "		// We can't recycle the current message' because that might wind up with it getting delivered out of order' so we have to reject it " is 131.
Long Statement,Orleans.Messaging,OutgoingMessageSender,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\OutgoingMessageSender.cs,Process,The length of the statement  "			this.Log.Info (ErrorCode.Messaging_LargeMsg_Outgoing' "Preparing to send large message Size={0} HeaderLength={1} BodyLength={2} #ArraySegments={3}. Msg={4}"' headerLength + bodyLength + Message.LENGTH_HEADER_SIZE' headerLength' bodyLength' data.Count' this.ToString ()); " is 270.
Long Statement,Orleans.Messaging,OutgoingMessageSender,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\OutgoingMessageSender.cs,Process,The length of the statement  "			sendErrorStr = String.Format ("Byte count mismatch on sending to {0}: sent {1}' expected {2}"' targetSilo' bytesSent' length); " is 126.
Long Statement,Orleans.Messaging,GatewayProviderFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayProviderFactory.cs,CreateGatewayListProvider,The length of the statement  "		listProvider = AssemblyLoader.LoadAndCreateInstance<IGatewayListProvider> (Constants.ORLEANS_AZURE_UTILS_DLL' logger' this.serviceProvider); " is 140.
Long Statement,Orleans.Messaging,GatewayProviderFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayProviderFactory.cs,CreateGatewayListProvider,The length of the statement  "		listProvider = AssemblyLoader.LoadAndCreateInstance<IGatewayListProvider> (Constants.ORLEANS_SQL_UTILS_DLL' logger' this.serviceProvider); " is 138.
Long Statement,Orleans.Messaging,GatewayProviderFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayProviderFactory.cs,CreateGatewayListProvider,The length of the statement  "		listProvider = AssemblyLoader.LoadAndCreateInstance<IGatewayListProvider> (cfg.CustomGatewayProviderAssemblyName' logger' this.serviceProvider); " is 144.
Long Statement,Orleans.Messaging,GatewayProviderFactory,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\GatewayProviderFactory.cs,CreateGatewayListProvider,The length of the statement  "		listProvider = AssemblyLoader.LoadAndCreateInstance<IGatewayListProvider> (Constants.ORLEANS_ZOOKEEPER_UTILS_DLL' logger' this.serviceProvider); " is 144.
Long Statement,Orleans.Messaging,ProxiedMessageCenter,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ProxiedMessageCenter.cs,SendMessage,The length of the statement  "	} // For untargeted messages to system targets' and for unordered messages' pick a next connection in round robin fashion. " is 122.
Long Statement,Orleans.Messaging,ProxiedMessageCenter,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ProxiedMessageCenter.cs,SendMessage,The length of the statement  "				logger.Warn (ErrorCode.ProxyClient_CannotSend' "Unable to send message {0}; gateway manager state is {1}"' msg' GatewayManager); " is 128.
Long Statement,Orleans.Messaging,ProxiedMessageCenter,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ProxiedMessageCenter.cs,SendMessage,The length of the statement  "					logger.Verbose (ErrorCode.ProxyClient_CreatedGatewayUnordered' "Creating gateway to {0} for unordered message to grain {1}"' addr' msg.TargetGrain); " is 148.
Long Statement,Orleans.Messaging,ProxiedMessageCenter,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ProxiedMessageCenter.cs,SendMessage,The length of the statement  "					logger.Warn (ErrorCode.ProxyClient_CannotSend_NoGateway' "Unable to send message {0}; gateway manager state is {1}"' msg' GatewayManager); " is 138.
Long Statement,Orleans.Messaging,ProxiedMessageCenter,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ProxiedMessageCenter.cs,SendMessage,The length of the statement  "					logger.Verbose2 (ErrorCode.ProxyClient_NewBucketIndex' "Starting new bucket index {0} for ordered messages to grain {1}"' index' msg.TargetGrain); " is 146.
Long Statement,Orleans.Messaging,ProxiedMessageCenter,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ProxiedMessageCenter.cs,SendMessage,The length of the statement  "						logger.Verbose (ErrorCode.ProxyClient_CreatedGatewayToGrain' "Creating gateway to {0} for message to grain {1}' bucket {2}' grain id hash code {3}X"' addr' msg.TargetGrain' index' msg.TargetGrain.GetHashCode ().ToString ("x")); " is 227.
Long Statement,Orleans.Messaging,ProxiedMessageCenter,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ProxiedMessageCenter.cs,SendMessage,The length of the statement  "			logger.Verbose2 (ErrorCode.ProxyClient_QueueRequest' "Sending message {0} via gateway {1}"' msg' gatewayConnection.Address); " is 124.
Long Statement,Orleans.Messaging,ProxiedMessageCenter,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ProxiedMessageCenter.cs,SendMessage,The length of the statement  "		// This exception can be thrown if the gateway connection we selected was closed since we checked (i.e.' we lost the race) " is 122.
Long Statement,Orleans.Messaging,ProxiedMessageCenter,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ProxiedMessageCenter.cs,WaitMessage,The length of the statement  "		logger.Verbose (ErrorCode.ProxyClient_OperationCancelled' "Received operation cancelled exception -- exiting. {0}"' exc); " is 121.
Long Statement,Orleans.Storage,StorageProviderUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\StorageProviderUtils.cs,PrintKeys,The length of the statement  "	return Utils.EnumerableToString (keys' keyTuple => string.Format ("Key:{0}={1}"' keyTuple.Item1' keyTuple.Item2 ?? "null")); " is 124.
Long Statement,Orleans.Storage,InconsistentStateException,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\IStorageProvider.cs,ToString,The length of the statement  "	return String.Format ("InconsistentStateException: {0} Expected Etag={1} Received Etag={2} {3}"' Message' StoredEtag' CurrentEtag' InnerException); " is 147.
Long Statement,Orleans.Streams,ImplicitStreamPubSub,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\ImplicitStreamPubSub.cs,RegisterProducer,The length of the statement  "	IDictionary<Guid' IStreamConsumerExtension> implicitSubscriptions = implicitTable.GetImplicitSubscribers (streamId' this.grainFactory); " is 135.
Long Statement,Orleans.Streams,StreamPubSubImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamPubSubImpl.cs,RegisterProducer,The length of the statement  "	ISet<PubSubSubscriptionState> explicitRes = await explicitPubSub.RegisterProducer (streamId' streamProvider' streamProducer); " is 125.
Long Statement,Orleans.Streams,StreamPubSubImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamPubSubImpl.cs,RegisterProducer,The length of the statement  "	ISet<PubSubSubscriptionState> implicitRes = await implicitPubSub.RegisterProducer (streamId' streamProvider' streamProducer); " is 125.
Long Statement,Orleans.Streams,StreamPubSubImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamPubSubImpl.cs,RegisterConsumer,The length of the statement  "	return implicitPubSub.IsImplicitSubscriber (streamConsumer' streamId) ? implicitPubSub.RegisterConsumer (subscriptionId' streamId' streamProvider' streamConsumer' filter) : explicitPubSub.RegisterConsumer (subscriptionId' streamId' streamProvider' streamConsumer' filter); " is 272.
Long Statement,Orleans.Streams,StreamPubSubImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamPubSubImpl.cs,UnregisterConsumer,The length of the statement  "	return implicitPubSub.IsImplicitSubscriber (subscriptionId' streamId) ? implicitPubSub.UnregisterConsumer (subscriptionId' streamId' streamProvider) : explicitPubSub.UnregisterConsumer (subscriptionId' streamId' streamProvider); " is 228.
Long Statement,Orleans.Streams,StreamPubSubImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamPubSubImpl.cs,GetAllSubscriptions,The length of the statement  "		return implicitPubSub.IsImplicitSubscriber (streamConsumer' streamId) ? await implicitPubSub.GetAllSubscriptions (streamId' streamConsumer) : await explicitPubSub.GetAllSubscriptions (streamId' streamConsumer); " is 210.
Long Statement,Orleans.Streams,StreamPubSubImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamPubSubImpl.cs,CreateSubscriptionId,The length of the statement  "	return implicitPubSub.IsImplicitSubscriber (streamConsumer' streamId) ? implicitPubSub.CreateSubscriptionId (streamId' streamConsumer) : explicitPubSub.CreateSubscriptionId (streamId' streamConsumer); " is 200.
Long Statement,Orleans.Streams,StreamPubSubImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamPubSubImpl.cs,FaultSubscription,The length of the statement  "	return implicitPubSub.IsImplicitSubscriber (subscriptionId' streamId) ? implicitPubSub.FaultSubscription (streamId' subscriptionId) : explicitPubSub.FaultSubscription (streamId' subscriptionId); " is 194.
Long Statement,Orleans.Streams,StreamSubscriptionHandleImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamSubscriptionHandleImpl.cs,NextItem,The length of the statement  "		throw new InvalidCastException ("Received an item of type " + item.GetType ().Name + "' expected " + typeof(T).FullName); " is 121.
Long Statement,Orleans.Streams,StreamSubscriptionHandleImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamSubscriptionHandleImpl.cs,ToString,The length of the statement  "	return String.Format ("StreamSubscriptionHandleImpl:Stream={0}'HandleId={1}"' IsValid ? streamImpl.StreamId.ToString () : "null"' HandleId); " is 140.
Long Statement,Orleans.Streams,PersistentStreamProviderConfig,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Providers\IStreamProviderRuntime.cs,ToString,The length of the statement  "	return String.Format ("{0}={1}' {2}={3}' {4}={5}' {6}={7}' {8}={9}' {10}={11}' {12}={13}"' GET_QUEUE_MESSAGES_TIMER_PERIOD' GetQueueMsgsTimerPeriod' INIT_QUEUE_TIMEOUT' InitQueueTimeout' MAX_EVENT_DELIVERY_TIME' MaxEventDeliveryTime' STREAM_INACTIVITY_PERIOD' StreamInactivityPeriod' QUEUE_BALANCER_TYPE' BalancerType' STREAM_PUBSUB_TYPE' PubSubType' SILO_MATURITY_PERIOD' SiloMaturityPeriod); " is 393.
Long Statement,Orleans.Streams,GrainBasedPubSubRuntime,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\GrainBasedPubSubRuntime.cs,GetRendezvousGrain,The length of the statement  "	return grainFactory.GetGrain<IPubSubRendezvousGrain> (primaryKey: streamId.Guid' keyExtension: streamId.ProviderName + "_" + streamId.Namespace); " is 145.
Long Statement,Orleans.Streams,PubSubSubscriptionState,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\PubSubSubscriptionState.cs,ToString,The length of the statement  "	return string.Format ("PubSubSubscriptionState:SubscriptionId={0}'StreamId={1}'Consumer={2}."' SubscriptionId' Stream' Consumer); " is 129.
Long Statement,Orleans.Streams,StreamConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumer.cs,SubscribeAsync,The length of the statement  "		throw new ArgumentException ("On-behalf subscription via grain references is not supported. Only passing of object references is allowed."' "observer"); " is 152.
Long Statement,Orleans.Streams,StreamConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumer.cs,SubscribeAsync,The length of the statement  "	// Basicaly' those 2 operations should be done as one atomic transaction - either both or none and isolated from concurrent reads. " is 130.
Long Statement,Orleans.Streams,StreamConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumer.cs,SubscribeAsync,The length of the statement  "	// since this subscriptionId is unique (random Guid) and no one knows it anyway' unless successfully subscribed in the pubsub. " is 126.
Long Statement,Orleans.Streams,StreamConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumer.cs,ResumeAsync,The length of the statement  "	StreamSubscriptionHandle<T> newHandle = myExtension.SetObserver (oldHandleImpl.SubscriptionId' stream' observer' token' null); " is 126.
Long Statement,Orleans.Streams,StreamConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumer.cs,ResumeAsync,The length of the statement  "	// On failure caller should be able to retry using the original handle' so invalidate old handle only if everything succeeded.   " is 126.
Long Statement,Orleans.Streams,StreamConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumer.cs,GetAllSubscriptions,The length of the statement  "	return subscriptions.Select (sub => new StreamSubscriptionHandleImpl<T> (GuidId.GetGuidId (sub.SubscriptionId)' stream)).ToList<StreamSubscriptionHandle<T>> (); " is 160.
Long Statement,Orleans.Streams,StreamConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumer.cs,Cleanup,The length of the statement  "		logger.Warn (ErrorCode.StreamProvider_ConsumerFailedToUnregister' "Ignoring unhandled exception during PubSub.UnregisterConsumer"' exc); " is 136.
Long Statement,Orleans.Streams,StreamConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumer.cs,BindExtensionLazy,The length of the statement  "				var tup = await providerRuntime.BindExtension<StreamConsumerExtension' IStreamConsumerExtension> (() => new StreamConsumerExtension (providerRuntime)); " is 151.
Long Statement,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,SetObserver,The length of the statement  "		// Note: The caller [StreamConsumer] already handles locking for Add/Remove operations' so we don't need to repeat here. " is 120.
Long Statement,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,SetObserver,The length of the statement  "		return allStreamObservers.AddOrUpdate (subscriptionId' handle' (key' old) => handle) as StreamSubscriptionHandleImpl<T>; " is 120.
Long Statement,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,DeliverMutable,The length of the statement  "		itemString = (itemString.Length > MAXIMUM_ITEM_STRING_LOG_LENGTH) ? itemString.Substring (0' MAXIMUM_ITEM_STRING_LOG_LENGTH) + "..." : itemString; " is 146.
Long Statement,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,DeliverMutable,The length of the statement  "	logger.Warn ((int)(ErrorCode.StreamProvider_NoStreamForItem)' "{0} got an item for subscription {1}' but I don't have any subscriber for that stream. Dropping on the floor."' providerRuntime.ExecutingEntityIdentity ()' subscriptionId); " is 235.
Long Statement,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,DeliverBatch,The length of the statement  "	logger.Warn ((int)(ErrorCode.StreamProvider_NoStreamForBatch)' "{0} got an item for subscription {1}' but I don't have any subscriber for that stream. Dropping on the floor."' providerRuntime.ExecutingEntityIdentity ()' subscriptionId); " is 236.
Long Statement,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,CompleteStream,The length of the statement  "	logger.Warn ((int)(ErrorCode.StreamProvider_NoStreamForItem)' "{0} got a Complete for subscription {1}' but I don't have any subscriber for that stream. Dropping on the floor."' providerRuntime.ExecutingEntityIdentity ()' subscriptionId); " is 238.
Long Statement,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,ErrorInStream,The length of the statement  "	logger.Warn ((int)(ErrorCode.StreamProvider_NoStreamForItem)' "{0} got an Error for subscription {1}' but I don't have any subscriber for that stream. Dropping on the floor."' providerRuntime.ExecutingEntityIdentity ()' subscriptionId); " is 236.
Long Statement,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,GetSequenceToken,The length of the statement  "	return Task.FromResult (allStreamObservers.TryGetValue (subscriptionId' out observer) ? observer.GetSequenceToken () : null); " is 125.
Long Statement,Orleans.Streams,StreamConsumerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamConsumerExtension.cs,DiagCountStreamObservers,The length of the statement  "	return allStreamObservers.Values.OfType<StreamSubscriptionHandleImpl<T>> ().Aggregate (0' (count' o) => count + (o.SameStreamId (streamId) ? 1 : 0)); " is 149.
Long Statement,Orleans.Streams,PersistentStreamProducer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProducer.cs,OnNextAsync,The length of the statement  "	return this.queueAdapter.QueueMessageAsync (this.stream.StreamId.Guid' this.stream.StreamId.Namespace' item' token' RequestContext.Export (this.serializationManager)); " is 167.
Long Statement,Orleans.Streams,PersistentStreamProducer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProducer.cs,OnNextBatchAsync,The length of the statement  "	return this.queueAdapter.QueueMessageBatchAsync (this.stream.StreamId.Guid' this.stream.StreamId.Namespace' batch' token' RequestContext.Export (this.serializationManager)); " is 173.
Long Statement,Orleans.Streams,StreamConsumerData,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\QueueStreamDataStructures.cs,SafeDisposeCursor,The length of the statement  "			Utils.SafeExecute (Cursor.Dispose' logger' () => String.Format ("Cursor.Dispose on stream {0}' StreamConsumer {1} has thrown exception."' StreamId' StreamConsumer)); " is 165.
Long Statement,Orleans.Streams,QueueId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\QueueId.cs,Equals,The length of the statement  "	return other != null && queueId == other.queueId && String.Equals (queueNamePrefix' other.queueNamePrefix' StringComparison.Ordinal) && uniformHashCache == other.uniformHashCache; " is 179.
Long Statement,Orleans.Streams,QueueId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\QueueId.cs,ToString,The length of the statement  "	return String.Format ("{0}-{1}"' (queueNamePrefix != null ? queueNamePrefix.ToLower () : String.Empty)' queueId.ToString ()); " is 125.
Long Statement,Orleans.Streams,StreamId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\StreamId.cs,ToString,The length of the statement  "	return Namespace == null ? Guid.ToString () : String.Format ("{0}{1}-{2}"' Namespace != null ? (String.Format ("{0}-"' Namespace)) : ""' Guid' ProviderName); " is 157.
Long Statement,Orleans.Streams,StreamIdInternerKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\StreamId.cs,Equals,The length of the statement  "	return Guid.Equals (other.Guid) && Object.Equals (ProviderName' other.ProviderName) && Object.Equals (Namespace' other.Namespace); " is 130.
Long Statement,Orleans.Streams,StreamIdInternerKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\StreamId.cs,GetHashCode,The length of the statement  "	return Guid.GetHashCode () ^ (ProviderName != null ? ProviderName.GetHashCode () : 0) ^ (Namespace != null ? Namespace.GetHashCode () : 0); " is 139.
Long Statement,Orleans.Streams,StreamProviderManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Providers\StreamProviderManager.cs,LoadStreamProviders,The length of the statement  "	appStreamProviders.LoadProviders (configs [ProviderCategoryConfiguration.STREAM_PROVIDER_CATEGORY_NAME].Providers' this); " is 121.
Long Statement,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The length of the statement  "	var grainRef = grainFactory.GetGrain<TGrainInterface> (primaryKey' keyExtension' grainClassNamePrefix) as GrainReference; " is 121.
Long Statement,Orleans.Streams.PubSub,StreamSubscriptionManagerExtensions,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\StreamSubscriptionManagerExtensions.cs,AddSubscription,The length of the statement  "	var grainRef = grainFactory.GetGrain<TGrainInterface> (primaryKey' keyExtension' grainClassNamePrefix) as GrainReference; " is 121.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProvider.cs,Init,The length of the statement  "	if (this.myConfig.PubSubType == StreamPubSubType.ExplicitGrainBasedAndImplicit || this.myConfig.PubSubType == StreamPubSubType.ExplicitGrainBasedOnly) { " is 152.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProvider.cs,Init,The length of the statement  "		this.streamSubscriptionManager = this.providerRuntime.ServiceProvider.GetService<IStreamSubscriptionManagerAdmin> ().GetStreamSubscriptionManager (StreamSubscriptionManagerType.ExplicitSubscribeOnly); " is 200.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProvider.cs,Init,The length of the statement  "			throw new ArgumentException (String.Format ("Unsupported value '{0}' for configuration parameter {1} of stream provider {2}."' startup' StartupStatePropertyName' config.Name)); " is 176.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProvider.cs,Init,The length of the statement  "	logger.Info ("Initialized PersistentStreamProvider<{0}> with name {1}' Adapter {2} and config {3}' {4} = {5}."' typeof(TAdapterFactory).Name' Name' queueAdapter.Name' myConfig' StartupStatePropertyName' startupState); " is 217.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProvider.cs,Start,The length of the statement  "	if (queueAdapter.Direction.Equals (StreamProviderDirection.ReadOnly) || queueAdapter.Direction.Equals (StreamProviderDirection.ReadWrite)) { " is 140.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProvider.cs,GetStream,The length of the statement  "	return providerRuntime.GetStreamDirectory ().GetOrAddStream<T> (streamId' () => new StreamImpl<T> (streamId' this' IsRewindable' this.runtimeClient)); " is 150.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProvider.cs,GetProducerInterface,The length of the statement  "	return new PersistentStreamProducer<T> ((StreamImpl<T>)stream' providerRuntime' queueAdapter' IsRewindable' this.serializationManager); " is 135.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProvider.cs,GetConsumerInterfaceImpl,The length of the statement  "	return new StreamConsumer<T> ((StreamImpl<T>)stream' Name' providerRuntime' providerRuntime.PubSub (myConfig.PubSubType)' IsRewindable); " is 136.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProvider.cs,ExecuteCommand,The length of the statement  "	if (command >= (int)PersistentStreamProviderCommand.AdapterCommandStartRange && command <= (int)PersistentStreamProviderCommand.AdapterCommandEndRange && queueAdapter is IControllable) { " is 186.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProvider.cs,ExecuteCommand,The length of the statement  "	if (command >= (int)PersistentStreamProviderCommand.AdapterFactoryCommandStartRange && command <= (int)PersistentStreamProviderCommand.AdapterFactoryCommandEndRange && adapterFactory is IControllable) { " is 202.
Long Statement,Orleans.Providers.Streams.Common,PersistentStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PersistentStreams\PersistentStreamProvider.cs,ExecuteCommand,The length of the statement  "	logger.Warn (0' String.Format ("Got command {0} with arg {1}' but PullingAgentManager is not initialized yet. Ignoring the command."' (PersistentStreamProviderCommand)command' arg != null ? arg.ToString () : "null")); " is 217.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProducer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProducer.cs,RegisterProducer,The length of the statement  "	var tup = await providerRuntime.BindExtension<SimpleMessageStreamProducerExtension' IStreamProducerExtension> (() => new SimpleMessageStreamProducerExtension (providerRuntime' pubSub' fireAndForgetDelivery' optimizeForImmutableData)); " is 234.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProducer,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProducer.cs,Cleanup,The length of the statement  "			logger.Warn ((int)ErrorCode.StreamProvider_ProducerFailedToUnregister' "Ignoring unhandled exception during PubSub.UnregisterProducer"' exc); " is 141.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProvider.cs,Init,The length of the statement  "	optimizeForImmutableData = config.GetBoolProperty (OPTIMIZE_FOR_IMMUTABLE_DATA' DEFAULT_VALUE_OPTIMIZE_FOR_IMMUTABLE_DATA); " is 123.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProvider.cs,Init,The length of the statement  "	pubSubType = !config.Properties.TryGetValue (STREAM_PUBSUB_TYPE' out pubSubTypeString) ? DEFAULT_STREAM_PUBSUB_TYPE : (StreamPubSubType)Enum.Parse (typeof(StreamPubSubType)' pubSubTypeString); " is 192.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProvider.cs,Init,The length of the statement  "	if (pubSubType == StreamPubSubType.ExplicitGrainBasedAndImplicit || pubSubType == StreamPubSubType.ExplicitGrainBasedOnly) { " is 124.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProvider.cs,Init,The length of the statement  "		this.streamSubscriptionManager = this.providerRuntime.ServiceProvider.GetService<IStreamSubscriptionManagerAdmin> ().GetStreamSubscriptionManager (StreamSubscriptionManagerType.ExplicitSubscribeOnly); " is 200.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProvider.cs,Init,The length of the statement  "	logger.Info ("Initialized SimpleMessageStreamProvider with name {0} and with property FireAndForgetDelivery: {1}' OptimizeForImmutableData: {2} " + "and PubSubType: {3}"' Name' fireAndForgetDelivery' optimizeForImmutableData' pubSubType); " is 238.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProvider.cs,GetStream,The length of the statement  "	return providerRuntime.GetStreamDirectory ().GetOrAddStream<T> (streamId' () => new StreamImpl<T> (streamId' this' IsRewindable' this.runtimeClient)); " is 150.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProvider.cs,GetProducerInterface,The length of the statement  "	return new SimpleMessageStreamProducer<T> ((StreamImpl<T>)stream' Name' providerRuntime' fireAndForgetDelivery' optimizeForImmutableData' providerRuntime.PubSub (pubSubType)' IsRewindable); " is 189.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProvider,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProvider.cs,GetConsumerInterfaceImpl,The length of the statement  "	return new StreamConsumer<T> ((StreamImpl<T>)stream' Name' providerRuntime' providerRuntime.PubSub (pubSubType)' IsRewindable); " is 127.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProducerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,AddSubscribers,The length of the statement  "		logger.Verbose ("{0} AddSubscribers {1} for stream {2}"' providerRuntime.ExecutingEntityIdentity ()' Utils.EnumerableToString (newSubscribers)' streamId); " is 154.
Long Statement,Orleans.Providers.Streams.SimpleMessageStream,SimpleMessageStreamProducerExtension,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\SimpleMessageStream\SimpleMessageStreamProducerExtension.cs,AddSubscriber,The length of the statement  "		logger.Verbose ("{0} AddSubscriber {1} for stream {2}"' providerRuntime.ExecutingEntityIdentity ()' streamConsumer' streamId); " is 126.
Complex Conditional,Orleans.Runtime,ByteArrayBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\ByteArrayBuilder.cs,Append,The conditional expression  "((arrLen != bufferSize) && (currentOffset > MINIMUM_BUFFER_SIZE) && (arrLen > MINIMUM_BUFFER_SIZE)) || (arrLen > bufferSize)"  is complex.
Complex Conditional,Orleans.CodeGeneration,GrainInterfaceUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GrainInterfaceUtils.cs,IsGrainInterface,The conditional expression  "t == typeof(IGrain) || t == typeof(IGrainWithGuidKey) || t == typeof(IGrainWithIntegerKey) || t == typeof(IGrainWithGuidCompoundKey) || t == typeof(IGrainWithIntegerCompoundKey)"  is complex.
Complex Conditional,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,RegisterStatisticsProvider,The conditional expression  "providerTypeInfo.IsAbstract || providerTypeInfo.IsGenericType || providerTypeInfo.IsGenericType || !(typeof(IStatisticsPublisher).IsAssignableFrom (typeof(T)) && typeof(IClientMetricsDataPublisher).IsAssignableFrom (typeof(T)))"  is complex.
Complex Conditional,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseLimitValues,The conditional expression  "grandchild.LocalName.Equals ("Limit") && grandchild.HasAttribute ("Name") && (grandchild.HasAttribute ("SoftLimit") || grandchild.HasAttribute ("HardLimit"))"  is complex.
Complex Conditional,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,SetTraceFileName,The conditional expression  "config.TraceFilePattern == null || string.IsNullOrWhiteSpace (config.TraceFilePattern) || config.TraceFilePattern.Equals ("false"' StringComparison.OrdinalIgnoreCase) || config.TraceFilePattern.Equals ("none"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Orleans.Runtime.Configuration,GlobalConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\GlobalConfiguration.cs,RegisterStatisticsProvider,The conditional expression  "providerTypeInfo.IsAbstract || providerTypeInfo.IsGenericType || !(typeof(IStatisticsPublisher).IsAssignableFrom (providerType) && typeof(ISiloMetricsDataPublisher).IsAssignableFrom (providerType))"  is complex.
Complex Conditional,Orleans.Providers,ProviderTypeLoader,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\ProviderTypeLoader.cs,ProcessType,The conditional expression  "alreadyProcessed.Contains (type) || typeInfo.IsInterface || typeInfo.IsAbstract || !condition (type)"  is complex.
Complex Conditional,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,FindSerializationInfo,The conditional expression  "!typeInfo.IsInterface && !typeInfo.IsAbstract && (typeInfo.Namespace == null || (!typeInfo.Namespace.Equals ("System"' StringComparison.Ordinal) && !typeInfo.Namespace.StartsWith ("System."' StringComparison.Ordinal)))"  is complex.
Virtual Method Call from Constructor,Orleans.Serialization,TypeSerializer,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\TypeSerializer.cs,TypeSerializer,The constructor "TypeSerializer" calls a virtual method "GetNameFromType".
Empty Catch Block,Orleans.Runtime,LogManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LogManager.cs,Flush,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,LogManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LogManager.cs,Flush,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,LogManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LogManager.cs,Flush,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,LogManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LogManager.cs,Close,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,LogManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LogManager.cs,Close,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,LogManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LogManager.cs,Close,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,FloatValueStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\FloatValueStatistic.cs,GetCurrentValue,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,FloatValueStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\FloatValueStatistic.cs,GetCurrentValue,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,CounterStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\CounterStatistic.cs,GetValueString,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,CounterStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\CounterStatistic.cs,GetDeltaString,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,CounterStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\CounterStatistic.cs,GetDisplayString,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,CounterStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\CounterStatistic.cs,GetDisplayString,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,CallbackData,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\CallbackData.cs,DisposeTimer,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,SocketManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\SocketManager.cs,SendingSocketCreator,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,SocketManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\SocketManager.cs,CloseSocket,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,SocketManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\SocketManager.cs,CloseSocket,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,SocketManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\SocketManager.cs,CloseSocket,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,ConsoleText,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\ConsoleText.cs,WriteLine,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,ConsoleText,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\ConsoleText.cs,WriteLine,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,ConsoleText,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\ConsoleText.cs,WriteLine,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,SafeExecute,The method has an empty catch block.
Empty Catch Block,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,SafeExecute,The method has an empty catch block.
Empty Catch Block,Orleans,OrleansTaskExtentions,F:\newReposMay17\dotnet_orleans\src\Orleans\Async\TaskExtensions.cs,ExecuteAndIgnoreException,The method has an empty catch block.
Empty Catch Block,Orleans,GrainClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Core\GrainClient.cs,InternalUninitialize,The method has an empty catch block.
Empty Catch Block,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,LocalObjectMessagePumpAsync,The method has an empty catch block.
Empty Catch Block,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ConstructorReset,The method has an empty catch block.
Empty Catch Block,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ConstructorReset,The method has an empty catch block.
Empty Catch Block,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ConstructorReset,The method has an empty catch block.
Empty Catch Block,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,ConstructorReset,The method has an empty catch block.
Empty Catch Block,Orleans,OutsideRuntimeClient,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\OutsideRuntimeClient.cs,CurrentDomain_DomainUnload,The method has an empty catch block.
Magic Number,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,LogWithoutBulkingAndTruncating,The following statement contains a magic number: if (message.Length > LogManager.MAX_LOG_MESSAGE_SIZE) {  	int startIndex = 0;  	int maxChunkSize = LogManager.MAX_LOG_MESSAGE_SIZE - 100;  	// 100 bytes to allow slack and prefix.  	int partNum = 1;  	while (startIndex < message.Length) {  		int chunkSize = (startIndex + maxChunkSize) < message.Length ? maxChunkSize : (message.Length - startIndex);  		var messageToLog;  		WriteLogMessage ((int)errorCode' severity' messageToLog' null' null);  		startIndex += chunkSize;  		partNum++;  	}  } else {  	WriteLogMessage ((int)errorCode' severityLevel' message' null' null);  }  
Magic Number,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,CheckBulkMessageLimits,The following statement contains a magic number: if (copyMessageCounts != null && copyMessageCounts.Count > 0) {  	object[] args = new object[4];  	args [3] = sinceInterval;  	// Output summary counts for any pending bulk message occurrances  	foreach (int ec in copyMessageCounts.Keys) {  		int num = copyMessageCounts [ec] - LogManager.BulkMessageLimit;  		// Only output log codes which exceeded limit threshold  		if (num > 0) {  			args [0] = ec;  			args [1] = num;  			args [2] = (num == 1) ? "" : "s";  			WriteLogMessage (ec + LogManager.BulkMessageSummaryOffset' Severity.Info' "Log code {0} occurred {1} additional time{2} in the previous {3}"' args' null);  		}  	}  }  
Magic Number,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,CheckBulkMessageLimits,The following statement contains a magic number: if (copyMessageCounts != null && copyMessageCounts.Count > 0) {  	object[] args = new object[4];  	args [3] = sinceInterval;  	// Output summary counts for any pending bulk message occurrances  	foreach (int ec in copyMessageCounts.Keys) {  		int num = copyMessageCounts [ec] - LogManager.BulkMessageLimit;  		// Only output log codes which exceeded limit threshold  		if (num > 0) {  			args [0] = ec;  			args [1] = num;  			args [2] = (num == 1) ? "" : "s";  			WriteLogMessage (ec + LogManager.BulkMessageSummaryOffset' Severity.Info' "Log code {0} occurred {1} additional time{2} in the previous {3}"' args' null);  		}  	}  }  
Magic Number,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,CheckBulkMessageLimits,The following statement contains a magic number: if (copyMessageCounts != null && copyMessageCounts.Count > 0) {  	object[] args = new object[4];  	args [3] = sinceInterval;  	// Output summary counts for any pending bulk message occurrances  	foreach (int ec in copyMessageCounts.Keys) {  		int num = copyMessageCounts [ec] - LogManager.BulkMessageLimit;  		// Only output log codes which exceeded limit threshold  		if (num > 0) {  			args [0] = ec;  			args [1] = num;  			args [2] = (num == 1) ? "" : "s";  			WriteLogMessage (ec + LogManager.BulkMessageSummaryOffset' Severity.Info' "Log code {0} occurred {1} additional time{2} in the previous {3}"' args' null);  		}  	}  }  
Magic Number,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,CheckBulkMessageLimits,The following statement contains a magic number: args [3] = sinceInterval;  
Magic Number,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,CheckBulkMessageLimits,The following statement contains a magic number: foreach (int ec in copyMessageCounts.Keys) {  	int num = copyMessageCounts [ec] - LogManager.BulkMessageLimit;  	// Only output log codes which exceeded limit threshold  	if (num > 0) {  		args [0] = ec;  		args [1] = num;  		args [2] = (num == 1) ? "" : "s";  		WriteLogMessage (ec + LogManager.BulkMessageSummaryOffset' Severity.Info' "Log code {0} occurred {1} additional time{2} in the previous {3}"' args' null);  	}  }  
Magic Number,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,CheckBulkMessageLimits,The following statement contains a magic number: if (num > 0) {  	args [0] = ec;  	args [1] = num;  	args [2] = (num == 1) ? "" : "s";  	WriteLogMessage (ec + LogManager.BulkMessageSummaryOffset' Severity.Info' "Log code {0} occurred {1} additional time{2} in the previous {3}"' args' null);  }  
Magic Number,Orleans.Runtime,LoggerImpl,F:\newReposMay17\dotnet_orleans\src\Orleans\Logging\LoggerImpl.cs,CheckBulkMessageLimits,The following statement contains a magic number: args [2] = (num == 1) ? "" : "s";  
Magic Number,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = this.IncludeNamespace.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.IncludeTypeParameters.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.IncludeGenericTypeParameters.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.NestedTypeSeparator.GetHashCode ();  	hashCode = (hashCode * 397) ^ (this.NameSuffix != null ? this.NameSuffix.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ this.IncludeGlobal.GetHashCode ();  	return hashCode;  }  
Magic Number,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = this.IncludeNamespace.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.IncludeTypeParameters.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.IncludeGenericTypeParameters.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.NestedTypeSeparator.GetHashCode ();  	hashCode = (hashCode * 397) ^ (this.NameSuffix != null ? this.NameSuffix.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ this.IncludeGlobal.GetHashCode ();  	return hashCode;  }  
Magic Number,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = this.IncludeNamespace.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.IncludeTypeParameters.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.IncludeGenericTypeParameters.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.NestedTypeSeparator.GetHashCode ();  	hashCode = (hashCode * 397) ^ (this.NameSuffix != null ? this.NameSuffix.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ this.IncludeGlobal.GetHashCode ();  	return hashCode;  }  
Magic Number,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = this.IncludeNamespace.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.IncludeTypeParameters.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.IncludeGenericTypeParameters.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.NestedTypeSeparator.GetHashCode ();  	hashCode = (hashCode * 397) ^ (this.NameSuffix != null ? this.NameSuffix.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ this.IncludeGlobal.GetHashCode ();  	return hashCode;  }  
Magic Number,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = this.IncludeNamespace.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.IncludeTypeParameters.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.IncludeGenericTypeParameters.GetHashCode ();  	hashCode = (hashCode * 397) ^ this.NestedTypeSeparator.GetHashCode ();  	hashCode = (hashCode * 397) ^ (this.NameSuffix != null ? this.NameSuffix.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ this.IncludeGlobal.GetHashCode ();  	return hashCode;  }  
Magic Number,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.IncludeTypeParameters.GetHashCode ();  
Magic Number,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.IncludeGenericTypeParameters.GetHashCode ();  
Magic Number,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.NestedTypeSeparator.GetHashCode ();  
Magic Number,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (this.NameSuffix != null ? this.NameSuffix.GetHashCode () : 0);  
Magic Number,Orleans.Runtime,TypeFormattingOptions,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeFormattingOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.IncludeGlobal.GetHashCode ();  
Magic Number,Orleans.Runtime,SingleRange,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\RingRange.cs,RangePercentage,The following statement contains a magic number: return ((double)RangeSize () / (double)RangeFactory.RING_SIZE) * ((double)100.0);  
Magic Number,Orleans.Runtime,IncomingMessageBuffer,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\IncomingMessageBuffer.cs,TryDecodeMessage,The following statement contains a magic number: if (headerLength == 0 || bodyLength == 0) {  	// get length segments  	List<ArraySegment<byte>> lenghts = ByteArrayBuilder.BuildSegmentListWithLengthLimit (readBuffer' decodeOffset' Message.LENGTH_HEADER_SIZE);  	// copy length segment to buffer  	int lengthBufferoffset = 0;  	foreach (ArraySegment<byte> seg in lenghts) {  		Buffer.BlockCopy (seg.Array' seg.Offset' lengthBuffer' lengthBufferoffset' seg.Count);  		lengthBufferoffset += seg.Count;  	}  	// read lengths  	headerLength = BitConverter.ToInt32 (lengthBuffer' 0);  	bodyLength = BitConverter.ToInt32 (lengthBuffer' 4);  }  
Magic Number,Orleans.Runtime,IncomingMessageBuffer,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\IncomingMessageBuffer.cs,TryDecodeMessage,The following statement contains a magic number: bodyLength = BitConverter.ToInt32 (lengthBuffer' 4);  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,Parse,The following statement contains a magic number: if (Guid.TryParse (trimmed' out guid))  	return NewKey (guid);  else {  	var fields = trimmed.Split (KeyExtSeparationChar' 2);  	var n0 = ulong.Parse (fields [0].Substring (0' 16)' NumberStyles.HexNumber);  	var n1 = ulong.Parse (fields [0].Substring (16' 16)' NumberStyles.HexNumber);  	var typeCodeData = ulong.Parse (fields [0].Substring (32' 16)' NumberStyles.HexNumber);  	string keyExt = null;  	switch (fields.Length) {  	default:  		throw new InvalidDataException ("UniqueKey hex strings cannot contain more than one + separator.");  	case 1:  		break;  	case 2:  		if (fields [1] != "null") {  			keyExt = fields [1];  		}  		break;  	}  	return NewKey (n0' n1' typeCodeData' keyExt);  }  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,Parse,The following statement contains a magic number: if (Guid.TryParse (trimmed' out guid))  	return NewKey (guid);  else {  	var fields = trimmed.Split (KeyExtSeparationChar' 2);  	var n0 = ulong.Parse (fields [0].Substring (0' 16)' NumberStyles.HexNumber);  	var n1 = ulong.Parse (fields [0].Substring (16' 16)' NumberStyles.HexNumber);  	var typeCodeData = ulong.Parse (fields [0].Substring (32' 16)' NumberStyles.HexNumber);  	string keyExt = null;  	switch (fields.Length) {  	default:  		throw new InvalidDataException ("UniqueKey hex strings cannot contain more than one + separator.");  	case 1:  		break;  	case 2:  		if (fields [1] != "null") {  			keyExt = fields [1];  		}  		break;  	}  	return NewKey (n0' n1' typeCodeData' keyExt);  }  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,Parse,The following statement contains a magic number: if (Guid.TryParse (trimmed' out guid))  	return NewKey (guid);  else {  	var fields = trimmed.Split (KeyExtSeparationChar' 2);  	var n0 = ulong.Parse (fields [0].Substring (0' 16)' NumberStyles.HexNumber);  	var n1 = ulong.Parse (fields [0].Substring (16' 16)' NumberStyles.HexNumber);  	var typeCodeData = ulong.Parse (fields [0].Substring (32' 16)' NumberStyles.HexNumber);  	string keyExt = null;  	switch (fields.Length) {  	default:  		throw new InvalidDataException ("UniqueKey hex strings cannot contain more than one + separator.");  	case 1:  		break;  	case 2:  		if (fields [1] != "null") {  			keyExt = fields [1];  		}  		break;  	}  	return NewKey (n0' n1' typeCodeData' keyExt);  }  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,Parse,The following statement contains a magic number: if (Guid.TryParse (trimmed' out guid))  	return NewKey (guid);  else {  	var fields = trimmed.Split (KeyExtSeparationChar' 2);  	var n0 = ulong.Parse (fields [0].Substring (0' 16)' NumberStyles.HexNumber);  	var n1 = ulong.Parse (fields [0].Substring (16' 16)' NumberStyles.HexNumber);  	var typeCodeData = ulong.Parse (fields [0].Substring (32' 16)' NumberStyles.HexNumber);  	string keyExt = null;  	switch (fields.Length) {  	default:  		throw new InvalidDataException ("UniqueKey hex strings cannot contain more than one + separator.");  	case 1:  		break;  	case 2:  		if (fields [1] != "null") {  			keyExt = fields [1];  		}  		break;  	}  	return NewKey (n0' n1' typeCodeData' keyExt);  }  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,Parse,The following statement contains a magic number: if (Guid.TryParse (trimmed' out guid))  	return NewKey (guid);  else {  	var fields = trimmed.Split (KeyExtSeparationChar' 2);  	var n0 = ulong.Parse (fields [0].Substring (0' 16)' NumberStyles.HexNumber);  	var n1 = ulong.Parse (fields [0].Substring (16' 16)' NumberStyles.HexNumber);  	var typeCodeData = ulong.Parse (fields [0].Substring (32' 16)' NumberStyles.HexNumber);  	string keyExt = null;  	switch (fields.Length) {  	default:  		throw new InvalidDataException ("UniqueKey hex strings cannot contain more than one + separator.");  	case 1:  		break;  	case 2:  		if (fields [1] != "null") {  			keyExt = fields [1];  		}  		break;  	}  	return NewKey (n0' n1' typeCodeData' keyExt);  }  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,Parse,The following statement contains a magic number: if (Guid.TryParse (trimmed' out guid))  	return NewKey (guid);  else {  	var fields = trimmed.Split (KeyExtSeparationChar' 2);  	var n0 = ulong.Parse (fields [0].Substring (0' 16)' NumberStyles.HexNumber);  	var n1 = ulong.Parse (fields [0].Substring (16' 16)' NumberStyles.HexNumber);  	var typeCodeData = ulong.Parse (fields [0].Substring (32' 16)' NumberStyles.HexNumber);  	string keyExt = null;  	switch (fields.Length) {  	default:  		throw new InvalidDataException ("UniqueKey hex strings cannot contain more than one + separator.");  	case 1:  		break;  	case 2:  		if (fields [1] != "null") {  			keyExt = fields [1];  		}  		break;  	}  	return NewKey (n0' n1' typeCodeData' keyExt);  }  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,Parse,The following statement contains a magic number: if (Guid.TryParse (trimmed' out guid))  	return NewKey (guid);  else {  	var fields = trimmed.Split (KeyExtSeparationChar' 2);  	var n0 = ulong.Parse (fields [0].Substring (0' 16)' NumberStyles.HexNumber);  	var n1 = ulong.Parse (fields [0].Substring (16' 16)' NumberStyles.HexNumber);  	var typeCodeData = ulong.Parse (fields [0].Substring (32' 16)' NumberStyles.HexNumber);  	string keyExt = null;  	switch (fields.Length) {  	default:  		throw new InvalidDataException ("UniqueKey hex strings cannot contain more than one + separator.");  	case 1:  		break;  	case 2:  		if (fields [1] != "null") {  			keyExt = fields [1];  		}  		break;  	}  	return NewKey (n0' n1' typeCodeData' keyExt);  }  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,Parse,The following statement contains a magic number: switch (fields.Length) {  default:  	throw new InvalidDataException ("UniqueKey hex strings cannot contain more than one + separator.");  case 1:  	break;  case 2:  	if (fields [1] != "null") {  		keyExt = fields [1];  	}  	break;  }  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ConvertToGuid,The following statement contains a magic number: return new Guid ((UInt32)(N0 & 0xffffffff)' (UInt16)(N0 >> 32)' (UInt16)(N0 >> 48)' (byte)N1' (byte)(N1 >> 8)' (byte)(N1 >> 16)' (byte)(N1 >> 24)' (byte)(N1 >> 32)' (byte)(N1 >> 40)' (byte)(N1 >> 48)' (byte)(N1 >> 56));  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ConvertToGuid,The following statement contains a magic number: return new Guid ((UInt32)(N0 & 0xffffffff)' (UInt16)(N0 >> 32)' (UInt16)(N0 >> 48)' (byte)N1' (byte)(N1 >> 8)' (byte)(N1 >> 16)' (byte)(N1 >> 24)' (byte)(N1 >> 32)' (byte)(N1 >> 40)' (byte)(N1 >> 48)' (byte)(N1 >> 56));  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ConvertToGuid,The following statement contains a magic number: return new Guid ((UInt32)(N0 & 0xffffffff)' (UInt16)(N0 >> 32)' (UInt16)(N0 >> 48)' (byte)N1' (byte)(N1 >> 8)' (byte)(N1 >> 16)' (byte)(N1 >> 24)' (byte)(N1 >> 32)' (byte)(N1 >> 40)' (byte)(N1 >> 48)' (byte)(N1 >> 56));  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ConvertToGuid,The following statement contains a magic number: return new Guid ((UInt32)(N0 & 0xffffffff)' (UInt16)(N0 >> 32)' (UInt16)(N0 >> 48)' (byte)N1' (byte)(N1 >> 8)' (byte)(N1 >> 16)' (byte)(N1 >> 24)' (byte)(N1 >> 32)' (byte)(N1 >> 40)' (byte)(N1 >> 48)' (byte)(N1 >> 56));  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ConvertToGuid,The following statement contains a magic number: return new Guid ((UInt32)(N0 & 0xffffffff)' (UInt16)(N0 >> 32)' (UInt16)(N0 >> 48)' (byte)N1' (byte)(N1 >> 8)' (byte)(N1 >> 16)' (byte)(N1 >> 24)' (byte)(N1 >> 32)' (byte)(N1 >> 40)' (byte)(N1 >> 48)' (byte)(N1 >> 56));  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ConvertToGuid,The following statement contains a magic number: return new Guid ((UInt32)(N0 & 0xffffffff)' (UInt16)(N0 >> 32)' (UInt16)(N0 >> 48)' (byte)N1' (byte)(N1 >> 8)' (byte)(N1 >> 16)' (byte)(N1 >> 24)' (byte)(N1 >> 32)' (byte)(N1 >> 40)' (byte)(N1 >> 48)' (byte)(N1 >> 56));  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ConvertToGuid,The following statement contains a magic number: return new Guid ((UInt32)(N0 & 0xffffffff)' (UInt16)(N0 >> 32)' (UInt16)(N0 >> 48)' (byte)N1' (byte)(N1 >> 8)' (byte)(N1 >> 16)' (byte)(N1 >> 24)' (byte)(N1 >> 32)' (byte)(N1 >> 40)' (byte)(N1 >> 48)' (byte)(N1 >> 56));  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ConvertToGuid,The following statement contains a magic number: return new Guid ((UInt32)(N0 & 0xffffffff)' (UInt16)(N0 >> 32)' (UInt16)(N0 >> 48)' (byte)N1' (byte)(N1 >> 8)' (byte)(N1 >> 16)' (byte)(N1 >> 24)' (byte)(N1 >> 32)' (byte)(N1 >> 40)' (byte)(N1 >> 48)' (byte)(N1 >> 56));  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,ConvertToGuid,The following statement contains a magic number: return new Guid ((UInt32)(N0 & 0xffffffff)' (UInt16)(N0 >> 32)' (UInt16)(N0 >> 48)' (byte)N1' (byte)(N1 >> 8)' (byte)(N1 >> 16)' (byte)(N1 >> 24)' (byte)(N1 >> 32)' (byte)(N1 >> 40)' (byte)(N1 >> 48)' (byte)(N1 >> 56));  
Magic Number,Orleans.Runtime,UniqueKey,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\UniqueKey.cs,GetCategory,The following statement contains a magic number: return (Category)((typeCodeData >> 56) & 0xFF);  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysis,The following statement contains a magic number: stableReadyTimeProportion = 0.3;  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The following statement contains a magic number: try {  	lock (stageGroups) {  		double cores = Environment.ProcessorCount;  		Dictionary<string' double> cpuPerRequest = new Dictionary<string' double> ();  		// CPU time per request for each stage  		Dictionary<string' double> wallClockPerRequest = new Dictionary<string' double> ();  		// Wallclock time per request for each stage  		Dictionary<string' double> numberOfRequests = new Dictionary<string' double> ();  		// Number of requests for each stage  		foreach (var keyVal in stageGroups) {  			string name = keyVal.Key;  			if (GetNumberOfRequests (name) > 0) {  				cpuPerRequest.Add (name' GetCpuPerStagePerRequest (name));  				wallClockPerRequest.Add (name' GetWallClockPerStagePerRequest (name));  				numberOfRequests.Add (name' GetNumberOfRequests (name));  			}  		}  		cpuPerRequest.Add ("Untracked.ThreadPoolThread"' GetCpuPerStagePerRequest ("Untracked.ThreadPoolThread"));  		numberOfRequests.Add ("Untracked.ThreadPoolThread"' GetNumberOfRequests ("Untracked.ThreadPoolThread"));  		double elapsedWallClock = GetMaxWallClock ();  		double elapsedCPUClock = GetTotalCPU ();  		// Idle time estimation  		double untrackedProportionTime = 1 - elapsedCPUClock / (cores * elapsedWallClock);  		// Ratio of wall clock per cpu time calculation  		double sum = 0;  		double num = 0;  		foreach (var stage in wallClockPerRequest.Keys) {  			if (!waitingStages.Contains (stage)) {  				double ratio = wallClockPerRequest [stage] / cpuPerRequest [stage] - 1;  				sum += ratio * numberOfRequests [stage];  				num += numberOfRequests [stage];  			}  		}  		double avgRatio = sum / num;  		// Wait time estimation - implementation of strategy 2 from the "local-throughput.pdf" "Coping with Practical Measurements".   		var waitTimes = new Dictionary<string' double> ();  		// Wait time per request for each stage  		foreach (var stage in wallClockPerRequest.Keys) {  			waitTimes.Add (stage' waitingStages.Contains (stage) ? Math.Max (wallClockPerRequest [stage] - avgRatio * cpuPerRequest [stage] - cpuPerRequest [stage]' 0) : 0);  		}  		// CPU sum for denominator of final equation  		double cpuSum = 0;  		foreach (var stage in cpuPerRequest.Keys) {  			cpuSum += cpuPerRequest [stage] * numberOfRequests [stage];  		}  		// beta and lambda values  		var beta = new Dictionary<string' double> ();  		var s = new Dictionary<string' double> ();  		var lambda = new Dictionary<string' double> ();  		foreach (var stage in wallClockPerRequest.Keys) {  			beta.Add (stage' cpuPerRequest [stage] / (cpuPerRequest [stage] + waitTimes [stage]));  			s.Add (stage' 1000.0 / (cpuPerRequest [stage] + waitTimes [stage]));  			lambda.Add (stage' 1000.0 * numberOfRequests [stage] / elapsedWallClock);  		}  		// Final equation thread allocation - implementation of theorem 2 from the "local-throughput.pdf" "Incorporating Ready Time".   		var throughputThreadAllocation = new Dictionary<string' double> ();  		// Thread allocation suggestion for each stage  		foreach (var stage in wallClockPerRequest.Keys) {  			// cores is p  			// numberOfRequests is q  			// cpuPerRequest is x  			// stableReadyTimeProportion is alpha  			// waitTimes is w  			throughputThreadAllocation.Add (stage' cores * numberOfRequests [stage] * (cpuPerRequest [stage] * (1 + stableReadyTimeProportion) + waitTimes [stage]) / cpuSum);  		}  		double sum1 = 0;  		foreach (var stage in s.Keys)  			sum1 += lambda [stage] * beta [stage] / s [stage];  		double sum2 = 0;  		foreach (var stage in s.Keys)  			sum2 += Math.Sqrt (lambda [stage] * beta [stage] / s [stage]);  		var latencyThreadAllocation = new Dictionary<string' double> ();  		// Latency thread allocation suggestion for each stage  		foreach (var stage in wallClockPerRequest.Keys)  			latencyThreadAllocation.Add (stage' lambda [stage] / s [stage] + Math.Sqrt (lambda [stage]) * (cores - sum1) / (Math.Sqrt (s [stage] * beta [stage]) * sum2));  		var latencyPenalizedThreadAllocationConst = new Dictionary<string' double> ();  		var latencyPenalizedThreadAllocationCoef = new Dictionary<string' double> ();  		foreach (var stage in wallClockPerRequest.Keys) {  			latencyPenalizedThreadAllocationConst.Add (stage' lambda [stage] / s [stage]);  			latencyPenalizedThreadAllocationCoef.Add (stage' Math.Sqrt (lambda [stage] / (lambda [firstStage] * s [stage])));  		}  		double sum3 = 0;  		foreach (var stage in s.Keys)  			sum3 += beta [stage] * Math.Sqrt (lambda [stage] / s [stage]);  		double zeta = Math.Pow (sum3 / (cores - sum1)' 2) / lambda [firstStage];  		var sb = new StringBuilder ();  		sb.AppendLine ();  		sb.AppendLine ();  		sb.AppendLine ("zeta:   " + zeta);  		sb.AppendLine ();  		foreach (var stage in stages.Intersect (wallClockPerRequest.Keys)) {  			sb.AppendLine ("Stage: " + stage);  			sb.AppendLine ("  Measured average CPU per request:        " + cpuPerRequest [stage].ToString ("F3") + " ms");  			sb.AppendLine ("  Measured average Wall-clock per request: " + wallClockPerRequest [stage].ToString ("F3") + " ms");  			sb.AppendLine ("  Measured number of requests:             " + numberOfRequests [stage].ToString ("F0") + " requests");  			sb.AppendLine ("  lambda:                                  " + lambda [stage].ToString ("F3") + " arrival rate requests/sec");  			sb.AppendLine ("  s:                                       " + s [stage].ToString ("F3") + " per thread service rate requests/sec");  			sb.AppendLine ("  beta:                                    " + beta [stage].ToString ("F3") + " per thread CPU usage");  			sb.AppendLine ("  Estimated wait time:                     " + waitTimes [stage].ToString ("F3") + " ms");  			sb.AppendLine ("  Throughput thread allocation:            " + Math.Ceiling (throughputThreadAllocation [stage]) + " threads  (rounded up from " + throughputThreadAllocation [stage].ToString ("F3") + ")");  			sb.AppendLine ("  Latency thread allocation:               " + Math.Ceiling (latencyThreadAllocation [stage]) + " threads  (rounded up from " + latencyThreadAllocation [stage].ToString ("F3") + ")");  			sb.AppendLine ("  Regularlized latency thread allocation:  " + latencyPenalizedThreadAllocationConst [stage].ToString ("F3") + " + " + latencyPenalizedThreadAllocationCoef [stage].ToString ("F3") + " / sqrt(eta) threads  (rounded this value up)");  		}  		var cpuBreakdown = new Dictionary<string' double> ();  		foreach (var stage in cpuPerRequest.Keys) {  			double val = (numberOfRequests [stage] * cpuPerRequest [stage]) / (cores * elapsedWallClock);  			cpuBreakdown.Add (stage == "ThreadPoolThread" ? "ThreadPoolThread.AsynchronousReceive" : stage' val);  		}  		cpuBreakdown.Add ("Untracked"' untrackedProportionTime);  		sb.AppendLine ();  		sb.AppendLine ("CPU usage by thread type:");  		foreach (var v in cpuBreakdown.OrderBy (key => (-1 * key.Value)))  			sb.AppendLine ("  " + v.Value.ToString ("F3") + "' " + v.Key);  		sb.AppendLine ();  		sb.Append ("EndStageAnalysis");  		return sb.ToString ();  	}  } catch (Exception e) {  	return e + Environment.NewLine + e.StackTrace;  }  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The following statement contains a magic number: try {  	lock (stageGroups) {  		double cores = Environment.ProcessorCount;  		Dictionary<string' double> cpuPerRequest = new Dictionary<string' double> ();  		// CPU time per request for each stage  		Dictionary<string' double> wallClockPerRequest = new Dictionary<string' double> ();  		// Wallclock time per request for each stage  		Dictionary<string' double> numberOfRequests = new Dictionary<string' double> ();  		// Number of requests for each stage  		foreach (var keyVal in stageGroups) {  			string name = keyVal.Key;  			if (GetNumberOfRequests (name) > 0) {  				cpuPerRequest.Add (name' GetCpuPerStagePerRequest (name));  				wallClockPerRequest.Add (name' GetWallClockPerStagePerRequest (name));  				numberOfRequests.Add (name' GetNumberOfRequests (name));  			}  		}  		cpuPerRequest.Add ("Untracked.ThreadPoolThread"' GetCpuPerStagePerRequest ("Untracked.ThreadPoolThread"));  		numberOfRequests.Add ("Untracked.ThreadPoolThread"' GetNumberOfRequests ("Untracked.ThreadPoolThread"));  		double elapsedWallClock = GetMaxWallClock ();  		double elapsedCPUClock = GetTotalCPU ();  		// Idle time estimation  		double untrackedProportionTime = 1 - elapsedCPUClock / (cores * elapsedWallClock);  		// Ratio of wall clock per cpu time calculation  		double sum = 0;  		double num = 0;  		foreach (var stage in wallClockPerRequest.Keys) {  			if (!waitingStages.Contains (stage)) {  				double ratio = wallClockPerRequest [stage] / cpuPerRequest [stage] - 1;  				sum += ratio * numberOfRequests [stage];  				num += numberOfRequests [stage];  			}  		}  		double avgRatio = sum / num;  		// Wait time estimation - implementation of strategy 2 from the "local-throughput.pdf" "Coping with Practical Measurements".   		var waitTimes = new Dictionary<string' double> ();  		// Wait time per request for each stage  		foreach (var stage in wallClockPerRequest.Keys) {  			waitTimes.Add (stage' waitingStages.Contains (stage) ? Math.Max (wallClockPerRequest [stage] - avgRatio * cpuPerRequest [stage] - cpuPerRequest [stage]' 0) : 0);  		}  		// CPU sum for denominator of final equation  		double cpuSum = 0;  		foreach (var stage in cpuPerRequest.Keys) {  			cpuSum += cpuPerRequest [stage] * numberOfRequests [stage];  		}  		// beta and lambda values  		var beta = new Dictionary<string' double> ();  		var s = new Dictionary<string' double> ();  		var lambda = new Dictionary<string' double> ();  		foreach (var stage in wallClockPerRequest.Keys) {  			beta.Add (stage' cpuPerRequest [stage] / (cpuPerRequest [stage] + waitTimes [stage]));  			s.Add (stage' 1000.0 / (cpuPerRequest [stage] + waitTimes [stage]));  			lambda.Add (stage' 1000.0 * numberOfRequests [stage] / elapsedWallClock);  		}  		// Final equation thread allocation - implementation of theorem 2 from the "local-throughput.pdf" "Incorporating Ready Time".   		var throughputThreadAllocation = new Dictionary<string' double> ();  		// Thread allocation suggestion for each stage  		foreach (var stage in wallClockPerRequest.Keys) {  			// cores is p  			// numberOfRequests is q  			// cpuPerRequest is x  			// stableReadyTimeProportion is alpha  			// waitTimes is w  			throughputThreadAllocation.Add (stage' cores * numberOfRequests [stage] * (cpuPerRequest [stage] * (1 + stableReadyTimeProportion) + waitTimes [stage]) / cpuSum);  		}  		double sum1 = 0;  		foreach (var stage in s.Keys)  			sum1 += lambda [stage] * beta [stage] / s [stage];  		double sum2 = 0;  		foreach (var stage in s.Keys)  			sum2 += Math.Sqrt (lambda [stage] * beta [stage] / s [stage]);  		var latencyThreadAllocation = new Dictionary<string' double> ();  		// Latency thread allocation suggestion for each stage  		foreach (var stage in wallClockPerRequest.Keys)  			latencyThreadAllocation.Add (stage' lambda [stage] / s [stage] + Math.Sqrt (lambda [stage]) * (cores - sum1) / (Math.Sqrt (s [stage] * beta [stage]) * sum2));  		var latencyPenalizedThreadAllocationConst = new Dictionary<string' double> ();  		var latencyPenalizedThreadAllocationCoef = new Dictionary<string' double> ();  		foreach (var stage in wallClockPerRequest.Keys) {  			latencyPenalizedThreadAllocationConst.Add (stage' lambda [stage] / s [stage]);  			latencyPenalizedThreadAllocationCoef.Add (stage' Math.Sqrt (lambda [stage] / (lambda [firstStage] * s [stage])));  		}  		double sum3 = 0;  		foreach (var stage in s.Keys)  			sum3 += beta [stage] * Math.Sqrt (lambda [stage] / s [stage]);  		double zeta = Math.Pow (sum3 / (cores - sum1)' 2) / lambda [firstStage];  		var sb = new StringBuilder ();  		sb.AppendLine ();  		sb.AppendLine ();  		sb.AppendLine ("zeta:   " + zeta);  		sb.AppendLine ();  		foreach (var stage in stages.Intersect (wallClockPerRequest.Keys)) {  			sb.AppendLine ("Stage: " + stage);  			sb.AppendLine ("  Measured average CPU per request:        " + cpuPerRequest [stage].ToString ("F3") + " ms");  			sb.AppendLine ("  Measured average Wall-clock per request: " + wallClockPerRequest [stage].ToString ("F3") + " ms");  			sb.AppendLine ("  Measured number of requests:             " + numberOfRequests [stage].ToString ("F0") + " requests");  			sb.AppendLine ("  lambda:                                  " + lambda [stage].ToString ("F3") + " arrival rate requests/sec");  			sb.AppendLine ("  s:                                       " + s [stage].ToString ("F3") + " per thread service rate requests/sec");  			sb.AppendLine ("  beta:                                    " + beta [stage].ToString ("F3") + " per thread CPU usage");  			sb.AppendLine ("  Estimated wait time:                     " + waitTimes [stage].ToString ("F3") + " ms");  			sb.AppendLine ("  Throughput thread allocation:            " + Math.Ceiling (throughputThreadAllocation [stage]) + " threads  (rounded up from " + throughputThreadAllocation [stage].ToString ("F3") + ")");  			sb.AppendLine ("  Latency thread allocation:               " + Math.Ceiling (latencyThreadAllocation [stage]) + " threads  (rounded up from " + latencyThreadAllocation [stage].ToString ("F3") + ")");  			sb.AppendLine ("  Regularlized latency thread allocation:  " + latencyPenalizedThreadAllocationConst [stage].ToString ("F3") + " + " + latencyPenalizedThreadAllocationCoef [stage].ToString ("F3") + " / sqrt(eta) threads  (rounded this value up)");  		}  		var cpuBreakdown = new Dictionary<string' double> ();  		foreach (var stage in cpuPerRequest.Keys) {  			double val = (numberOfRequests [stage] * cpuPerRequest [stage]) / (cores * elapsedWallClock);  			cpuBreakdown.Add (stage == "ThreadPoolThread" ? "ThreadPoolThread.AsynchronousReceive" : stage' val);  		}  		cpuBreakdown.Add ("Untracked"' untrackedProportionTime);  		sb.AppendLine ();  		sb.AppendLine ("CPU usage by thread type:");  		foreach (var v in cpuBreakdown.OrderBy (key => (-1 * key.Value)))  			sb.AppendLine ("  " + v.Value.ToString ("F3") + "' " + v.Key);  		sb.AppendLine ();  		sb.Append ("EndStageAnalysis");  		return sb.ToString ();  	}  } catch (Exception e) {  	return e + Environment.NewLine + e.StackTrace;  }  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The following statement contains a magic number: try {  	lock (stageGroups) {  		double cores = Environment.ProcessorCount;  		Dictionary<string' double> cpuPerRequest = new Dictionary<string' double> ();  		// CPU time per request for each stage  		Dictionary<string' double> wallClockPerRequest = new Dictionary<string' double> ();  		// Wallclock time per request for each stage  		Dictionary<string' double> numberOfRequests = new Dictionary<string' double> ();  		// Number of requests for each stage  		foreach (var keyVal in stageGroups) {  			string name = keyVal.Key;  			if (GetNumberOfRequests (name) > 0) {  				cpuPerRequest.Add (name' GetCpuPerStagePerRequest (name));  				wallClockPerRequest.Add (name' GetWallClockPerStagePerRequest (name));  				numberOfRequests.Add (name' GetNumberOfRequests (name));  			}  		}  		cpuPerRequest.Add ("Untracked.ThreadPoolThread"' GetCpuPerStagePerRequest ("Untracked.ThreadPoolThread"));  		numberOfRequests.Add ("Untracked.ThreadPoolThread"' GetNumberOfRequests ("Untracked.ThreadPoolThread"));  		double elapsedWallClock = GetMaxWallClock ();  		double elapsedCPUClock = GetTotalCPU ();  		// Idle time estimation  		double untrackedProportionTime = 1 - elapsedCPUClock / (cores * elapsedWallClock);  		// Ratio of wall clock per cpu time calculation  		double sum = 0;  		double num = 0;  		foreach (var stage in wallClockPerRequest.Keys) {  			if (!waitingStages.Contains (stage)) {  				double ratio = wallClockPerRequest [stage] / cpuPerRequest [stage] - 1;  				sum += ratio * numberOfRequests [stage];  				num += numberOfRequests [stage];  			}  		}  		double avgRatio = sum / num;  		// Wait time estimation - implementation of strategy 2 from the "local-throughput.pdf" "Coping with Practical Measurements".   		var waitTimes = new Dictionary<string' double> ();  		// Wait time per request for each stage  		foreach (var stage in wallClockPerRequest.Keys) {  			waitTimes.Add (stage' waitingStages.Contains (stage) ? Math.Max (wallClockPerRequest [stage] - avgRatio * cpuPerRequest [stage] - cpuPerRequest [stage]' 0) : 0);  		}  		// CPU sum for denominator of final equation  		double cpuSum = 0;  		foreach (var stage in cpuPerRequest.Keys) {  			cpuSum += cpuPerRequest [stage] * numberOfRequests [stage];  		}  		// beta and lambda values  		var beta = new Dictionary<string' double> ();  		var s = new Dictionary<string' double> ();  		var lambda = new Dictionary<string' double> ();  		foreach (var stage in wallClockPerRequest.Keys) {  			beta.Add (stage' cpuPerRequest [stage] / (cpuPerRequest [stage] + waitTimes [stage]));  			s.Add (stage' 1000.0 / (cpuPerRequest [stage] + waitTimes [stage]));  			lambda.Add (stage' 1000.0 * numberOfRequests [stage] / elapsedWallClock);  		}  		// Final equation thread allocation - implementation of theorem 2 from the "local-throughput.pdf" "Incorporating Ready Time".   		var throughputThreadAllocation = new Dictionary<string' double> ();  		// Thread allocation suggestion for each stage  		foreach (var stage in wallClockPerRequest.Keys) {  			// cores is p  			// numberOfRequests is q  			// cpuPerRequest is x  			// stableReadyTimeProportion is alpha  			// waitTimes is w  			throughputThreadAllocation.Add (stage' cores * numberOfRequests [stage] * (cpuPerRequest [stage] * (1 + stableReadyTimeProportion) + waitTimes [stage]) / cpuSum);  		}  		double sum1 = 0;  		foreach (var stage in s.Keys)  			sum1 += lambda [stage] * beta [stage] / s [stage];  		double sum2 = 0;  		foreach (var stage in s.Keys)  			sum2 += Math.Sqrt (lambda [stage] * beta [stage] / s [stage]);  		var latencyThreadAllocation = new Dictionary<string' double> ();  		// Latency thread allocation suggestion for each stage  		foreach (var stage in wallClockPerRequest.Keys)  			latencyThreadAllocation.Add (stage' lambda [stage] / s [stage] + Math.Sqrt (lambda [stage]) * (cores - sum1) / (Math.Sqrt (s [stage] * beta [stage]) * sum2));  		var latencyPenalizedThreadAllocationConst = new Dictionary<string' double> ();  		var latencyPenalizedThreadAllocationCoef = new Dictionary<string' double> ();  		foreach (var stage in wallClockPerRequest.Keys) {  			latencyPenalizedThreadAllocationConst.Add (stage' lambda [stage] / s [stage]);  			latencyPenalizedThreadAllocationCoef.Add (stage' Math.Sqrt (lambda [stage] / (lambda [firstStage] * s [stage])));  		}  		double sum3 = 0;  		foreach (var stage in s.Keys)  			sum3 += beta [stage] * Math.Sqrt (lambda [stage] / s [stage]);  		double zeta = Math.Pow (sum3 / (cores - sum1)' 2) / lambda [firstStage];  		var sb = new StringBuilder ();  		sb.AppendLine ();  		sb.AppendLine ();  		sb.AppendLine ("zeta:   " + zeta);  		sb.AppendLine ();  		foreach (var stage in stages.Intersect (wallClockPerRequest.Keys)) {  			sb.AppendLine ("Stage: " + stage);  			sb.AppendLine ("  Measured average CPU per request:        " + cpuPerRequest [stage].ToString ("F3") + " ms");  			sb.AppendLine ("  Measured average Wall-clock per request: " + wallClockPerRequest [stage].ToString ("F3") + " ms");  			sb.AppendLine ("  Measured number of requests:             " + numberOfRequests [stage].ToString ("F0") + " requests");  			sb.AppendLine ("  lambda:                                  " + lambda [stage].ToString ("F3") + " arrival rate requests/sec");  			sb.AppendLine ("  s:                                       " + s [stage].ToString ("F3") + " per thread service rate requests/sec");  			sb.AppendLine ("  beta:                                    " + beta [stage].ToString ("F3") + " per thread CPU usage");  			sb.AppendLine ("  Estimated wait time:                     " + waitTimes [stage].ToString ("F3") + " ms");  			sb.AppendLine ("  Throughput thread allocation:            " + Math.Ceiling (throughputThreadAllocation [stage]) + " threads  (rounded up from " + throughputThreadAllocation [stage].ToString ("F3") + ")");  			sb.AppendLine ("  Latency thread allocation:               " + Math.Ceiling (latencyThreadAllocation [stage]) + " threads  (rounded up from " + latencyThreadAllocation [stage].ToString ("F3") + ")");  			sb.AppendLine ("  Regularlized latency thread allocation:  " + latencyPenalizedThreadAllocationConst [stage].ToString ("F3") + " + " + latencyPenalizedThreadAllocationCoef [stage].ToString ("F3") + " / sqrt(eta) threads  (rounded this value up)");  		}  		var cpuBreakdown = new Dictionary<string' double> ();  		foreach (var stage in cpuPerRequest.Keys) {  			double val = (numberOfRequests [stage] * cpuPerRequest [stage]) / (cores * elapsedWallClock);  			cpuBreakdown.Add (stage == "ThreadPoolThread" ? "ThreadPoolThread.AsynchronousReceive" : stage' val);  		}  		cpuBreakdown.Add ("Untracked"' untrackedProportionTime);  		sb.AppendLine ();  		sb.AppendLine ("CPU usage by thread type:");  		foreach (var v in cpuBreakdown.OrderBy (key => (-1 * key.Value)))  			sb.AppendLine ("  " + v.Value.ToString ("F3") + "' " + v.Key);  		sb.AppendLine ();  		sb.Append ("EndStageAnalysis");  		return sb.ToString ();  	}  } catch (Exception e) {  	return e + Environment.NewLine + e.StackTrace;  }  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The following statement contains a magic number: lock (stageGroups) {  	double cores = Environment.ProcessorCount;  	Dictionary<string' double> cpuPerRequest = new Dictionary<string' double> ();  	// CPU time per request for each stage  	Dictionary<string' double> wallClockPerRequest = new Dictionary<string' double> ();  	// Wallclock time per request for each stage  	Dictionary<string' double> numberOfRequests = new Dictionary<string' double> ();  	// Number of requests for each stage  	foreach (var keyVal in stageGroups) {  		string name = keyVal.Key;  		if (GetNumberOfRequests (name) > 0) {  			cpuPerRequest.Add (name' GetCpuPerStagePerRequest (name));  			wallClockPerRequest.Add (name' GetWallClockPerStagePerRequest (name));  			numberOfRequests.Add (name' GetNumberOfRequests (name));  		}  	}  	cpuPerRequest.Add ("Untracked.ThreadPoolThread"' GetCpuPerStagePerRequest ("Untracked.ThreadPoolThread"));  	numberOfRequests.Add ("Untracked.ThreadPoolThread"' GetNumberOfRequests ("Untracked.ThreadPoolThread"));  	double elapsedWallClock = GetMaxWallClock ();  	double elapsedCPUClock = GetTotalCPU ();  	// Idle time estimation  	double untrackedProportionTime = 1 - elapsedCPUClock / (cores * elapsedWallClock);  	// Ratio of wall clock per cpu time calculation  	double sum = 0;  	double num = 0;  	foreach (var stage in wallClockPerRequest.Keys) {  		if (!waitingStages.Contains (stage)) {  			double ratio = wallClockPerRequest [stage] / cpuPerRequest [stage] - 1;  			sum += ratio * numberOfRequests [stage];  			num += numberOfRequests [stage];  		}  	}  	double avgRatio = sum / num;  	// Wait time estimation - implementation of strategy 2 from the "local-throughput.pdf" "Coping with Practical Measurements".   	var waitTimes = new Dictionary<string' double> ();  	// Wait time per request for each stage  	foreach (var stage in wallClockPerRequest.Keys) {  		waitTimes.Add (stage' waitingStages.Contains (stage) ? Math.Max (wallClockPerRequest [stage] - avgRatio * cpuPerRequest [stage] - cpuPerRequest [stage]' 0) : 0);  	}  	// CPU sum for denominator of final equation  	double cpuSum = 0;  	foreach (var stage in cpuPerRequest.Keys) {  		cpuSum += cpuPerRequest [stage] * numberOfRequests [stage];  	}  	// beta and lambda values  	var beta = new Dictionary<string' double> ();  	var s = new Dictionary<string' double> ();  	var lambda = new Dictionary<string' double> ();  	foreach (var stage in wallClockPerRequest.Keys) {  		beta.Add (stage' cpuPerRequest [stage] / (cpuPerRequest [stage] + waitTimes [stage]));  		s.Add (stage' 1000.0 / (cpuPerRequest [stage] + waitTimes [stage]));  		lambda.Add (stage' 1000.0 * numberOfRequests [stage] / elapsedWallClock);  	}  	// Final equation thread allocation - implementation of theorem 2 from the "local-throughput.pdf" "Incorporating Ready Time".   	var throughputThreadAllocation = new Dictionary<string' double> ();  	// Thread allocation suggestion for each stage  	foreach (var stage in wallClockPerRequest.Keys) {  		// cores is p  		// numberOfRequests is q  		// cpuPerRequest is x  		// stableReadyTimeProportion is alpha  		// waitTimes is w  		throughputThreadAllocation.Add (stage' cores * numberOfRequests [stage] * (cpuPerRequest [stage] * (1 + stableReadyTimeProportion) + waitTimes [stage]) / cpuSum);  	}  	double sum1 = 0;  	foreach (var stage in s.Keys)  		sum1 += lambda [stage] * beta [stage] / s [stage];  	double sum2 = 0;  	foreach (var stage in s.Keys)  		sum2 += Math.Sqrt (lambda [stage] * beta [stage] / s [stage]);  	var latencyThreadAllocation = new Dictionary<string' double> ();  	// Latency thread allocation suggestion for each stage  	foreach (var stage in wallClockPerRequest.Keys)  		latencyThreadAllocation.Add (stage' lambda [stage] / s [stage] + Math.Sqrt (lambda [stage]) * (cores - sum1) / (Math.Sqrt (s [stage] * beta [stage]) * sum2));  	var latencyPenalizedThreadAllocationConst = new Dictionary<string' double> ();  	var latencyPenalizedThreadAllocationCoef = new Dictionary<string' double> ();  	foreach (var stage in wallClockPerRequest.Keys) {  		latencyPenalizedThreadAllocationConst.Add (stage' lambda [stage] / s [stage]);  		latencyPenalizedThreadAllocationCoef.Add (stage' Math.Sqrt (lambda [stage] / (lambda [firstStage] * s [stage])));  	}  	double sum3 = 0;  	foreach (var stage in s.Keys)  		sum3 += beta [stage] * Math.Sqrt (lambda [stage] / s [stage]);  	double zeta = Math.Pow (sum3 / (cores - sum1)' 2) / lambda [firstStage];  	var sb = new StringBuilder ();  	sb.AppendLine ();  	sb.AppendLine ();  	sb.AppendLine ("zeta:   " + zeta);  	sb.AppendLine ();  	foreach (var stage in stages.Intersect (wallClockPerRequest.Keys)) {  		sb.AppendLine ("Stage: " + stage);  		sb.AppendLine ("  Measured average CPU per request:        " + cpuPerRequest [stage].ToString ("F3") + " ms");  		sb.AppendLine ("  Measured average Wall-clock per request: " + wallClockPerRequest [stage].ToString ("F3") + " ms");  		sb.AppendLine ("  Measured number of requests:             " + numberOfRequests [stage].ToString ("F0") + " requests");  		sb.AppendLine ("  lambda:                                  " + lambda [stage].ToString ("F3") + " arrival rate requests/sec");  		sb.AppendLine ("  s:                                       " + s [stage].ToString ("F3") + " per thread service rate requests/sec");  		sb.AppendLine ("  beta:                                    " + beta [stage].ToString ("F3") + " per thread CPU usage");  		sb.AppendLine ("  Estimated wait time:                     " + waitTimes [stage].ToString ("F3") + " ms");  		sb.AppendLine ("  Throughput thread allocation:            " + Math.Ceiling (throughputThreadAllocation [stage]) + " threads  (rounded up from " + throughputThreadAllocation [stage].ToString ("F3") + ")");  		sb.AppendLine ("  Latency thread allocation:               " + Math.Ceiling (latencyThreadAllocation [stage]) + " threads  (rounded up from " + latencyThreadAllocation [stage].ToString ("F3") + ")");  		sb.AppendLine ("  Regularlized latency thread allocation:  " + latencyPenalizedThreadAllocationConst [stage].ToString ("F3") + " + " + latencyPenalizedThreadAllocationCoef [stage].ToString ("F3") + " / sqrt(eta) threads  (rounded this value up)");  	}  	var cpuBreakdown = new Dictionary<string' double> ();  	foreach (var stage in cpuPerRequest.Keys) {  		double val = (numberOfRequests [stage] * cpuPerRequest [stage]) / (cores * elapsedWallClock);  		cpuBreakdown.Add (stage == "ThreadPoolThread" ? "ThreadPoolThread.AsynchronousReceive" : stage' val);  	}  	cpuBreakdown.Add ("Untracked"' untrackedProportionTime);  	sb.AppendLine ();  	sb.AppendLine ("CPU usage by thread type:");  	foreach (var v in cpuBreakdown.OrderBy (key => (-1 * key.Value)))  		sb.AppendLine ("  " + v.Value.ToString ("F3") + "' " + v.Key);  	sb.AppendLine ();  	sb.Append ("EndStageAnalysis");  	return sb.ToString ();  }  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The following statement contains a magic number: lock (stageGroups) {  	double cores = Environment.ProcessorCount;  	Dictionary<string' double> cpuPerRequest = new Dictionary<string' double> ();  	// CPU time per request for each stage  	Dictionary<string' double> wallClockPerRequest = new Dictionary<string' double> ();  	// Wallclock time per request for each stage  	Dictionary<string' double> numberOfRequests = new Dictionary<string' double> ();  	// Number of requests for each stage  	foreach (var keyVal in stageGroups) {  		string name = keyVal.Key;  		if (GetNumberOfRequests (name) > 0) {  			cpuPerRequest.Add (name' GetCpuPerStagePerRequest (name));  			wallClockPerRequest.Add (name' GetWallClockPerStagePerRequest (name));  			numberOfRequests.Add (name' GetNumberOfRequests (name));  		}  	}  	cpuPerRequest.Add ("Untracked.ThreadPoolThread"' GetCpuPerStagePerRequest ("Untracked.ThreadPoolThread"));  	numberOfRequests.Add ("Untracked.ThreadPoolThread"' GetNumberOfRequests ("Untracked.ThreadPoolThread"));  	double elapsedWallClock = GetMaxWallClock ();  	double elapsedCPUClock = GetTotalCPU ();  	// Idle time estimation  	double untrackedProportionTime = 1 - elapsedCPUClock / (cores * elapsedWallClock);  	// Ratio of wall clock per cpu time calculation  	double sum = 0;  	double num = 0;  	foreach (var stage in wallClockPerRequest.Keys) {  		if (!waitingStages.Contains (stage)) {  			double ratio = wallClockPerRequest [stage] / cpuPerRequest [stage] - 1;  			sum += ratio * numberOfRequests [stage];  			num += numberOfRequests [stage];  		}  	}  	double avgRatio = sum / num;  	// Wait time estimation - implementation of strategy 2 from the "local-throughput.pdf" "Coping with Practical Measurements".   	var waitTimes = new Dictionary<string' double> ();  	// Wait time per request for each stage  	foreach (var stage in wallClockPerRequest.Keys) {  		waitTimes.Add (stage' waitingStages.Contains (stage) ? Math.Max (wallClockPerRequest [stage] - avgRatio * cpuPerRequest [stage] - cpuPerRequest [stage]' 0) : 0);  	}  	// CPU sum for denominator of final equation  	double cpuSum = 0;  	foreach (var stage in cpuPerRequest.Keys) {  		cpuSum += cpuPerRequest [stage] * numberOfRequests [stage];  	}  	// beta and lambda values  	var beta = new Dictionary<string' double> ();  	var s = new Dictionary<string' double> ();  	var lambda = new Dictionary<string' double> ();  	foreach (var stage in wallClockPerRequest.Keys) {  		beta.Add (stage' cpuPerRequest [stage] / (cpuPerRequest [stage] + waitTimes [stage]));  		s.Add (stage' 1000.0 / (cpuPerRequest [stage] + waitTimes [stage]));  		lambda.Add (stage' 1000.0 * numberOfRequests [stage] / elapsedWallClock);  	}  	// Final equation thread allocation - implementation of theorem 2 from the "local-throughput.pdf" "Incorporating Ready Time".   	var throughputThreadAllocation = new Dictionary<string' double> ();  	// Thread allocation suggestion for each stage  	foreach (var stage in wallClockPerRequest.Keys) {  		// cores is p  		// numberOfRequests is q  		// cpuPerRequest is x  		// stableReadyTimeProportion is alpha  		// waitTimes is w  		throughputThreadAllocation.Add (stage' cores * numberOfRequests [stage] * (cpuPerRequest [stage] * (1 + stableReadyTimeProportion) + waitTimes [stage]) / cpuSum);  	}  	double sum1 = 0;  	foreach (var stage in s.Keys)  		sum1 += lambda [stage] * beta [stage] / s [stage];  	double sum2 = 0;  	foreach (var stage in s.Keys)  		sum2 += Math.Sqrt (lambda [stage] * beta [stage] / s [stage]);  	var latencyThreadAllocation = new Dictionary<string' double> ();  	// Latency thread allocation suggestion for each stage  	foreach (var stage in wallClockPerRequest.Keys)  		latencyThreadAllocation.Add (stage' lambda [stage] / s [stage] + Math.Sqrt (lambda [stage]) * (cores - sum1) / (Math.Sqrt (s [stage] * beta [stage]) * sum2));  	var latencyPenalizedThreadAllocationConst = new Dictionary<string' double> ();  	var latencyPenalizedThreadAllocationCoef = new Dictionary<string' double> ();  	foreach (var stage in wallClockPerRequest.Keys) {  		latencyPenalizedThreadAllocationConst.Add (stage' lambda [stage] / s [stage]);  		latencyPenalizedThreadAllocationCoef.Add (stage' Math.Sqrt (lambda [stage] / (lambda [firstStage] * s [stage])));  	}  	double sum3 = 0;  	foreach (var stage in s.Keys)  		sum3 += beta [stage] * Math.Sqrt (lambda [stage] / s [stage]);  	double zeta = Math.Pow (sum3 / (cores - sum1)' 2) / lambda [firstStage];  	var sb = new StringBuilder ();  	sb.AppendLine ();  	sb.AppendLine ();  	sb.AppendLine ("zeta:   " + zeta);  	sb.AppendLine ();  	foreach (var stage in stages.Intersect (wallClockPerRequest.Keys)) {  		sb.AppendLine ("Stage: " + stage);  		sb.AppendLine ("  Measured average CPU per request:        " + cpuPerRequest [stage].ToString ("F3") + " ms");  		sb.AppendLine ("  Measured average Wall-clock per request: " + wallClockPerRequest [stage].ToString ("F3") + " ms");  		sb.AppendLine ("  Measured number of requests:             " + numberOfRequests [stage].ToString ("F0") + " requests");  		sb.AppendLine ("  lambda:                                  " + lambda [stage].ToString ("F3") + " arrival rate requests/sec");  		sb.AppendLine ("  s:                                       " + s [stage].ToString ("F3") + " per thread service rate requests/sec");  		sb.AppendLine ("  beta:                                    " + beta [stage].ToString ("F3") + " per thread CPU usage");  		sb.AppendLine ("  Estimated wait time:                     " + waitTimes [stage].ToString ("F3") + " ms");  		sb.AppendLine ("  Throughput thread allocation:            " + Math.Ceiling (throughputThreadAllocation [stage]) + " threads  (rounded up from " + throughputThreadAllocation [stage].ToString ("F3") + ")");  		sb.AppendLine ("  Latency thread allocation:               " + Math.Ceiling (latencyThreadAllocation [stage]) + " threads  (rounded up from " + latencyThreadAllocation [stage].ToString ("F3") + ")");  		sb.AppendLine ("  Regularlized latency thread allocation:  " + latencyPenalizedThreadAllocationConst [stage].ToString ("F3") + " + " + latencyPenalizedThreadAllocationCoef [stage].ToString ("F3") + " / sqrt(eta) threads  (rounded this value up)");  	}  	var cpuBreakdown = new Dictionary<string' double> ();  	foreach (var stage in cpuPerRequest.Keys) {  		double val = (numberOfRequests [stage] * cpuPerRequest [stage]) / (cores * elapsedWallClock);  		cpuBreakdown.Add (stage == "ThreadPoolThread" ? "ThreadPoolThread.AsynchronousReceive" : stage' val);  	}  	cpuBreakdown.Add ("Untracked"' untrackedProportionTime);  	sb.AppendLine ();  	sb.AppendLine ("CPU usage by thread type:");  	foreach (var v in cpuBreakdown.OrderBy (key => (-1 * key.Value)))  		sb.AppendLine ("  " + v.Value.ToString ("F3") + "' " + v.Key);  	sb.AppendLine ();  	sb.Append ("EndStageAnalysis");  	return sb.ToString ();  }  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The following statement contains a magic number: lock (stageGroups) {  	double cores = Environment.ProcessorCount;  	Dictionary<string' double> cpuPerRequest = new Dictionary<string' double> ();  	// CPU time per request for each stage  	Dictionary<string' double> wallClockPerRequest = new Dictionary<string' double> ();  	// Wallclock time per request for each stage  	Dictionary<string' double> numberOfRequests = new Dictionary<string' double> ();  	// Number of requests for each stage  	foreach (var keyVal in stageGroups) {  		string name = keyVal.Key;  		if (GetNumberOfRequests (name) > 0) {  			cpuPerRequest.Add (name' GetCpuPerStagePerRequest (name));  			wallClockPerRequest.Add (name' GetWallClockPerStagePerRequest (name));  			numberOfRequests.Add (name' GetNumberOfRequests (name));  		}  	}  	cpuPerRequest.Add ("Untracked.ThreadPoolThread"' GetCpuPerStagePerRequest ("Untracked.ThreadPoolThread"));  	numberOfRequests.Add ("Untracked.ThreadPoolThread"' GetNumberOfRequests ("Untracked.ThreadPoolThread"));  	double elapsedWallClock = GetMaxWallClock ();  	double elapsedCPUClock = GetTotalCPU ();  	// Idle time estimation  	double untrackedProportionTime = 1 - elapsedCPUClock / (cores * elapsedWallClock);  	// Ratio of wall clock per cpu time calculation  	double sum = 0;  	double num = 0;  	foreach (var stage in wallClockPerRequest.Keys) {  		if (!waitingStages.Contains (stage)) {  			double ratio = wallClockPerRequest [stage] / cpuPerRequest [stage] - 1;  			sum += ratio * numberOfRequests [stage];  			num += numberOfRequests [stage];  		}  	}  	double avgRatio = sum / num;  	// Wait time estimation - implementation of strategy 2 from the "local-throughput.pdf" "Coping with Practical Measurements".   	var waitTimes = new Dictionary<string' double> ();  	// Wait time per request for each stage  	foreach (var stage in wallClockPerRequest.Keys) {  		waitTimes.Add (stage' waitingStages.Contains (stage) ? Math.Max (wallClockPerRequest [stage] - avgRatio * cpuPerRequest [stage] - cpuPerRequest [stage]' 0) : 0);  	}  	// CPU sum for denominator of final equation  	double cpuSum = 0;  	foreach (var stage in cpuPerRequest.Keys) {  		cpuSum += cpuPerRequest [stage] * numberOfRequests [stage];  	}  	// beta and lambda values  	var beta = new Dictionary<string' double> ();  	var s = new Dictionary<string' double> ();  	var lambda = new Dictionary<string' double> ();  	foreach (var stage in wallClockPerRequest.Keys) {  		beta.Add (stage' cpuPerRequest [stage] / (cpuPerRequest [stage] + waitTimes [stage]));  		s.Add (stage' 1000.0 / (cpuPerRequest [stage] + waitTimes [stage]));  		lambda.Add (stage' 1000.0 * numberOfRequests [stage] / elapsedWallClock);  	}  	// Final equation thread allocation - implementation of theorem 2 from the "local-throughput.pdf" "Incorporating Ready Time".   	var throughputThreadAllocation = new Dictionary<string' double> ();  	// Thread allocation suggestion for each stage  	foreach (var stage in wallClockPerRequest.Keys) {  		// cores is p  		// numberOfRequests is q  		// cpuPerRequest is x  		// stableReadyTimeProportion is alpha  		// waitTimes is w  		throughputThreadAllocation.Add (stage' cores * numberOfRequests [stage] * (cpuPerRequest [stage] * (1 + stableReadyTimeProportion) + waitTimes [stage]) / cpuSum);  	}  	double sum1 = 0;  	foreach (var stage in s.Keys)  		sum1 += lambda [stage] * beta [stage] / s [stage];  	double sum2 = 0;  	foreach (var stage in s.Keys)  		sum2 += Math.Sqrt (lambda [stage] * beta [stage] / s [stage]);  	var latencyThreadAllocation = new Dictionary<string' double> ();  	// Latency thread allocation suggestion for each stage  	foreach (var stage in wallClockPerRequest.Keys)  		latencyThreadAllocation.Add (stage' lambda [stage] / s [stage] + Math.Sqrt (lambda [stage]) * (cores - sum1) / (Math.Sqrt (s [stage] * beta [stage]) * sum2));  	var latencyPenalizedThreadAllocationConst = new Dictionary<string' double> ();  	var latencyPenalizedThreadAllocationCoef = new Dictionary<string' double> ();  	foreach (var stage in wallClockPerRequest.Keys) {  		latencyPenalizedThreadAllocationConst.Add (stage' lambda [stage] / s [stage]);  		latencyPenalizedThreadAllocationCoef.Add (stage' Math.Sqrt (lambda [stage] / (lambda [firstStage] * s [stage])));  	}  	double sum3 = 0;  	foreach (var stage in s.Keys)  		sum3 += beta [stage] * Math.Sqrt (lambda [stage] / s [stage]);  	double zeta = Math.Pow (sum3 / (cores - sum1)' 2) / lambda [firstStage];  	var sb = new StringBuilder ();  	sb.AppendLine ();  	sb.AppendLine ();  	sb.AppendLine ("zeta:   " + zeta);  	sb.AppendLine ();  	foreach (var stage in stages.Intersect (wallClockPerRequest.Keys)) {  		sb.AppendLine ("Stage: " + stage);  		sb.AppendLine ("  Measured average CPU per request:        " + cpuPerRequest [stage].ToString ("F3") + " ms");  		sb.AppendLine ("  Measured average Wall-clock per request: " + wallClockPerRequest [stage].ToString ("F3") + " ms");  		sb.AppendLine ("  Measured number of requests:             " + numberOfRequests [stage].ToString ("F0") + " requests");  		sb.AppendLine ("  lambda:                                  " + lambda [stage].ToString ("F3") + " arrival rate requests/sec");  		sb.AppendLine ("  s:                                       " + s [stage].ToString ("F3") + " per thread service rate requests/sec");  		sb.AppendLine ("  beta:                                    " + beta [stage].ToString ("F3") + " per thread CPU usage");  		sb.AppendLine ("  Estimated wait time:                     " + waitTimes [stage].ToString ("F3") + " ms");  		sb.AppendLine ("  Throughput thread allocation:            " + Math.Ceiling (throughputThreadAllocation [stage]) + " threads  (rounded up from " + throughputThreadAllocation [stage].ToString ("F3") + ")");  		sb.AppendLine ("  Latency thread allocation:               " + Math.Ceiling (latencyThreadAllocation [stage]) + " threads  (rounded up from " + latencyThreadAllocation [stage].ToString ("F3") + ")");  		sb.AppendLine ("  Regularlized latency thread allocation:  " + latencyPenalizedThreadAllocationConst [stage].ToString ("F3") + " + " + latencyPenalizedThreadAllocationCoef [stage].ToString ("F3") + " / sqrt(eta) threads  (rounded this value up)");  	}  	var cpuBreakdown = new Dictionary<string' double> ();  	foreach (var stage in cpuPerRequest.Keys) {  		double val = (numberOfRequests [stage] * cpuPerRequest [stage]) / (cores * elapsedWallClock);  		cpuBreakdown.Add (stage == "ThreadPoolThread" ? "ThreadPoolThread.AsynchronousReceive" : stage' val);  	}  	cpuBreakdown.Add ("Untracked"' untrackedProportionTime);  	sb.AppendLine ();  	sb.AppendLine ("CPU usage by thread type:");  	foreach (var v in cpuBreakdown.OrderBy (key => (-1 * key.Value)))  		sb.AppendLine ("  " + v.Value.ToString ("F3") + "' " + v.Key);  	sb.AppendLine ();  	sb.Append ("EndStageAnalysis");  	return sb.ToString ();  }  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The following statement contains a magic number: foreach (var stage in wallClockPerRequest.Keys) {  	beta.Add (stage' cpuPerRequest [stage] / (cpuPerRequest [stage] + waitTimes [stage]));  	s.Add (stage' 1000.0 / (cpuPerRequest [stage] + waitTimes [stage]));  	lambda.Add (stage' 1000.0 * numberOfRequests [stage] / elapsedWallClock);  }  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The following statement contains a magic number: foreach (var stage in wallClockPerRequest.Keys) {  	beta.Add (stage' cpuPerRequest [stage] / (cpuPerRequest [stage] + waitTimes [stage]));  	s.Add (stage' 1000.0 / (cpuPerRequest [stage] + waitTimes [stage]));  	lambda.Add (stage' 1000.0 * numberOfRequests [stage] / elapsedWallClock);  }  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The following statement contains a magic number: s.Add (stage' 1000.0 / (cpuPerRequest [stage] + waitTimes [stage]));  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,StageAnalysisInfo,The following statement contains a magic number: lambda.Add (stage' 1000.0 * numberOfRequests [stage] / elapsedWallClock);  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,GetMaxWallClock,The following statement contains a magic number: maxTime -= 60 * 1000;  
Magic Number,Orleans.Runtime,StageAnalysis,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\StageAnalysis.cs,GetMaxWallClock,The following statement contains a magic number: maxTime -= 60 * 1000;  
Magic Number,Orleans.Runtime,TimeIntervalThreadCycleCounterBased,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ThreadCycleStopWatch.cs,TimeIntervalThreadCycleCounterBased,The following statement contains a magic number: cyclesPerSecond = (double)(1024.0 * (double)cyclesPerMillisecond);  
Magic Number,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The following statement contains a magic number: imaEnqueuedByContext = new CounterStatistic[3];  
Magic Number,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The following statement contains a magic number: imaEnqueuedByContext [2] = CounterStatistic.FindOrCreate (StatisticNames.MESSAGING_IMA_ENQUEUED_TO_ACTIVATION);  
Magic Number,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,Init,The following statement contains a magic number: dispatcherReceivedByContext = new CounterStatistic[2];  
Magic Number,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,OnImaMessageEnqueued,The following statement contains a magic number: if (context == null) {  	imaEnqueuedByContext [0].Increment ();  } else if (context.ContextType == SchedulingContextType.SystemTarget) {  	imaEnqueuedByContext [1].Increment ();  } else if (context.ContextType == SchedulingContextType.Activation) {  	imaEnqueuedByContext [2].Increment ();  }  
Magic Number,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,OnImaMessageEnqueued,The following statement contains a magic number: if (context.ContextType == SchedulingContextType.SystemTarget) {  	imaEnqueuedByContext [1].Increment ();  } else if (context.ContextType == SchedulingContextType.Activation) {  	imaEnqueuedByContext [2].Increment ();  }  
Magic Number,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,OnImaMessageEnqueued,The following statement contains a magic number: if (context.ContextType == SchedulingContextType.Activation) {  	imaEnqueuedByContext [2].Increment ();  }  
Magic Number,Orleans.Runtime,MessagingProcessingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingProcessingStatisticsGroup.cs,OnImaMessageEnqueued,The following statement contains a magic number: imaEnqueuedByContext [2].Increment ();  
Magic Number,Orleans.Runtime,GrainClassData,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,GetTypeCode,The following statement contains a magic number: if (typeInfo.IsGenericType && this.IsGeneric) {  	string args = TypeUtils.GetGenericTypeArgs (typeInfo.GetGenericArguments ()' t => true);  	int hash = Utils.CalculateIdHash (args);  	return (((long)(hash & 0x00FFFFFF)) << 32) + GrainTypeCode;  } else {  	return GrainTypeCode;  }  
Magic Number,Orleans.Runtime,GrainClassData,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\GrainInterfaceMap.cs,GetTypeCode,The following statement contains a magic number: return (((long)(hash & 0x00FFFFFF)) << 32) + GrainTypeCode;  
Magic Number,Orleans.Runtime,ClientStatisticsManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ClientStatisticsManager.cs,Stop,The following statement contains a magic number: if (logStatistics != null) {  	logStatistics.Stop ();  	logStatistics.DumpCounters ().WaitWithThrow (TimeSpan.FromSeconds (10));  }  
Magic Number,Orleans.Runtime,ClientStatisticsManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\ClientStatisticsManager.cs,Stop,The following statement contains a magic number: logStatistics.DumpCounters ().WaitWithThrow (TimeSpan.FromSeconds (10));  
Magic Number,Orleans.Runtime,ExponentialHistogramValueStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\HistogramValueStatistic.cs,BucketStart,The following statement contains a magic number: return Math.Pow (2' i);  
Magic Number,Orleans.Runtime,ExponentialHistogramValueStatistic,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\HistogramValueStatistic.cs,BucketEnd,The following statement contains a magic number: return Math.Pow (2' i + 1) - 1;  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: lock (lockable) {  	int i = workerThreadCounter;  	workerThreadCounter++;  	if (i == turnsExecutedPerWorkerThreadApplicationTurns.Length) {  		// need to resize the array  		Array.Resize (ref turnsExecutedPerWorkerThreadApplicationTurns' 2 * turnsExecutedPerWorkerThreadApplicationTurns.Length);  		Array.Resize (ref turnsExecutedPerWorkerThreadSystemTurns' 2 * turnsExecutedPerWorkerThreadSystemTurns.Length);  		Array.Resize (ref turnsExecutedPerWorkerThreadNull' 2 * turnsExecutedPerWorkerThreadNull.Length);  	}  	turnsExecutedPerWorkerThreadApplicationTurns [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_APPLICATION_PERTHREAD' threadName));  	turnsExecutedPerWorkerThreadSystemTurns [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_SYSTEM_PERTHREAD' threadName));  	turnsExecutedPerWorkerThreadNull [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_NULL_PERTHREAD' threadName));  	return i;  }  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: lock (lockable) {  	int i = workerThreadCounter;  	workerThreadCounter++;  	if (i == turnsExecutedPerWorkerThreadApplicationTurns.Length) {  		// need to resize the array  		Array.Resize (ref turnsExecutedPerWorkerThreadApplicationTurns' 2 * turnsExecutedPerWorkerThreadApplicationTurns.Length);  		Array.Resize (ref turnsExecutedPerWorkerThreadSystemTurns' 2 * turnsExecutedPerWorkerThreadSystemTurns.Length);  		Array.Resize (ref turnsExecutedPerWorkerThreadNull' 2 * turnsExecutedPerWorkerThreadNull.Length);  	}  	turnsExecutedPerWorkerThreadApplicationTurns [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_APPLICATION_PERTHREAD' threadName));  	turnsExecutedPerWorkerThreadSystemTurns [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_SYSTEM_PERTHREAD' threadName));  	turnsExecutedPerWorkerThreadNull [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_NULL_PERTHREAD' threadName));  	return i;  }  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: lock (lockable) {  	int i = workerThreadCounter;  	workerThreadCounter++;  	if (i == turnsExecutedPerWorkerThreadApplicationTurns.Length) {  		// need to resize the array  		Array.Resize (ref turnsExecutedPerWorkerThreadApplicationTurns' 2 * turnsExecutedPerWorkerThreadApplicationTurns.Length);  		Array.Resize (ref turnsExecutedPerWorkerThreadSystemTurns' 2 * turnsExecutedPerWorkerThreadSystemTurns.Length);  		Array.Resize (ref turnsExecutedPerWorkerThreadNull' 2 * turnsExecutedPerWorkerThreadNull.Length);  	}  	turnsExecutedPerWorkerThreadApplicationTurns [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_APPLICATION_PERTHREAD' threadName));  	turnsExecutedPerWorkerThreadSystemTurns [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_SYSTEM_PERTHREAD' threadName));  	turnsExecutedPerWorkerThreadNull [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_TURNSEXECUTED_NULL_PERTHREAD' threadName));  	return i;  }  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: if (i == turnsExecutedPerWorkerThreadApplicationTurns.Length) {  	// need to resize the array  	Array.Resize (ref turnsExecutedPerWorkerThreadApplicationTurns' 2 * turnsExecutedPerWorkerThreadApplicationTurns.Length);  	Array.Resize (ref turnsExecutedPerWorkerThreadSystemTurns' 2 * turnsExecutedPerWorkerThreadSystemTurns.Length);  	Array.Resize (ref turnsExecutedPerWorkerThreadNull' 2 * turnsExecutedPerWorkerThreadNull.Length);  }  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: if (i == turnsExecutedPerWorkerThreadApplicationTurns.Length) {  	// need to resize the array  	Array.Resize (ref turnsExecutedPerWorkerThreadApplicationTurns' 2 * turnsExecutedPerWorkerThreadApplicationTurns.Length);  	Array.Resize (ref turnsExecutedPerWorkerThreadSystemTurns' 2 * turnsExecutedPerWorkerThreadSystemTurns.Length);  	Array.Resize (ref turnsExecutedPerWorkerThreadNull' 2 * turnsExecutedPerWorkerThreadNull.Length);  }  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: if (i == turnsExecutedPerWorkerThreadApplicationTurns.Length) {  	// need to resize the array  	Array.Resize (ref turnsExecutedPerWorkerThreadApplicationTurns' 2 * turnsExecutedPerWorkerThreadApplicationTurns.Length);  	Array.Resize (ref turnsExecutedPerWorkerThreadSystemTurns' 2 * turnsExecutedPerWorkerThreadSystemTurns.Length);  	Array.Resize (ref turnsExecutedPerWorkerThreadNull' 2 * turnsExecutedPerWorkerThreadNull.Length);  }  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: Array.Resize (ref turnsExecutedPerWorkerThreadApplicationTurns' 2 * turnsExecutedPerWorkerThreadApplicationTurns.Length);  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: Array.Resize (ref turnsExecutedPerWorkerThreadSystemTurns' 2 * turnsExecutedPerWorkerThreadSystemTurns.Length);  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkingThread,The following statement contains a magic number: Array.Resize (ref turnsExecutedPerWorkerThreadNull' 2 * turnsExecutedPerWorkerThreadNull.Length);  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The following statement contains a magic number: lock (lockable) {  	int i = workItemGroupCounter;  	workItemGroupCounter++;  	if (i == turnsExecutedPerWorkItemGroup.Length) {  		// need to resize the array  		Array.Resize (ref turnsExecutedPerWorkItemGroup' 2 * turnsExecutedPerWorkItemGroup.Length);  		Array.Resize (ref workItemGroupStatuses' 2 * workItemGroupStatuses.Length);  	}  	CounterStorage storage = StatisticsCollector.ReportPerWorkItemStats (context) ? CounterStorage.LogAndTable : CounterStorage.DontStore;  	turnsExecutedPerWorkItemGroup [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_ACTIVATION_TURNSEXECUTED_PERACTIVATION' workItemGroupName)' storage);  	workItemGroupStatuses [i] = StringValueStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_ACTIVATION_STATUS_PERACTIVATION' workItemGroupName)' statusGetter' storage);  	return i;  }  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The following statement contains a magic number: lock (lockable) {  	int i = workItemGroupCounter;  	workItemGroupCounter++;  	if (i == turnsExecutedPerWorkItemGroup.Length) {  		// need to resize the array  		Array.Resize (ref turnsExecutedPerWorkItemGroup' 2 * turnsExecutedPerWorkItemGroup.Length);  		Array.Resize (ref workItemGroupStatuses' 2 * workItemGroupStatuses.Length);  	}  	CounterStorage storage = StatisticsCollector.ReportPerWorkItemStats (context) ? CounterStorage.LogAndTable : CounterStorage.DontStore;  	turnsExecutedPerWorkItemGroup [i] = CounterStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_ACTIVATION_TURNSEXECUTED_PERACTIVATION' workItemGroupName)' storage);  	workItemGroupStatuses [i] = StringValueStatistic.FindOrCreate (new StatisticName (StatisticNames.SCHEDULER_ACTIVATION_STATUS_PERACTIVATION' workItemGroupName)' statusGetter' storage);  	return i;  }  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The following statement contains a magic number: if (i == turnsExecutedPerWorkItemGroup.Length) {  	// need to resize the array  	Array.Resize (ref turnsExecutedPerWorkItemGroup' 2 * turnsExecutedPerWorkItemGroup.Length);  	Array.Resize (ref workItemGroupStatuses' 2 * workItemGroupStatuses.Length);  }  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The following statement contains a magic number: if (i == turnsExecutedPerWorkItemGroup.Length) {  	// need to resize the array  	Array.Resize (ref turnsExecutedPerWorkItemGroup' 2 * turnsExecutedPerWorkItemGroup.Length);  	Array.Resize (ref workItemGroupStatuses' 2 * workItemGroupStatuses.Length);  }  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The following statement contains a magic number: Array.Resize (ref turnsExecutedPerWorkItemGroup' 2 * turnsExecutedPerWorkItemGroup.Length);  
Magic Number,Orleans.Runtime,SchedulerStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\SchedulerStatisticsGroup.cs,RegisterWorkItemGroup,The following statement contains a magic number: Array.Resize (ref workItemGroupStatuses' 2 * workItemGroupStatuses.Length);  
Magic Number,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,CheckCpuUsage,The following statement contains a magic number: if (cpuCounterPF != null) {  	var currentUsage = cpuCounterPF.NextValue ();  	// We calculate a decaying average for CPU utilization  	CpuUsage = (CpuUsage + 2 * currentUsage) / 3;  } else {  	CpuUsage = 0;  }  
Magic Number,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,CheckCpuUsage,The following statement contains a magic number: if (cpuCounterPF != null) {  	var currentUsage = cpuCounterPF.NextValue ();  	// We calculate a decaying average for CPU utilization  	CpuUsage = (CpuUsage + 2 * currentUsage) / 3;  } else {  	CpuUsage = 0;  }  
Magic Number,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,CheckCpuUsage,The following statement contains a magic number: CpuUsage = (CpuUsage + 2 * currentUsage) / 3;  
Magic Number,Orleans.Runtime,RuntimeStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\RuntimeStatisticsGroup.cs,CheckCpuUsage,The following statement contains a magic number: CpuUsage = (CpuUsage + 2 * currentUsage) / 3;  
Magic Number,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,CheckTimerDelay,The following statement contains a magic number: if (exceptedTimeToNexTick >= TimeSpan.FromSeconds (6)) {  	exceptedTimeWithSlack = exceptedTimeToNexTick + TimeSpan.FromSeconds (3);  } else {  	exceptedTimeWithSlack = exceptedTimeToNexTick.Multiply (1.5);  }  
Magic Number,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,CheckTimerDelay,The following statement contains a magic number: if (exceptedTimeToNexTick >= TimeSpan.FromSeconds (6)) {  	exceptedTimeWithSlack = exceptedTimeToNexTick + TimeSpan.FromSeconds (3);  } else {  	exceptedTimeWithSlack = exceptedTimeToNexTick.Multiply (1.5);  }  
Magic Number,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,CheckTimerDelay,The following statement contains a magic number: if (exceptedTimeToNexTick >= TimeSpan.FromSeconds (6)) {  	exceptedTimeWithSlack = exceptedTimeToNexTick + TimeSpan.FromSeconds (3);  } else {  	exceptedTimeWithSlack = exceptedTimeToNexTick.Multiply (1.5);  }  
Magic Number,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,CheckTimerDelay,The following statement contains a magic number: exceptedTimeWithSlack = exceptedTimeToNexTick + TimeSpan.FromSeconds (3);  
Magic Number,Orleans.Runtime,SafeTimerBase,F:\newReposMay17\dotnet_orleans\src\Orleans\Timers\SafeTimerBase.cs,CheckTimerDelay,The following statement contains a magic number: exceptedTimeWithSlack = exceptedTimeToNexTick.Multiply (1.5);  
Magic Number,Orleans.Runtime,SafeRandom,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\SafeRandom.cs,GetRandom,The following statement contains a magic number: if (random == null) {  	byte[] buffer = new byte[4];  	globalCryptoProvider.GetBytes (buffer);  	random = new Random (BitConverter.ToInt32 (buffer' 0));  }  
Magic Number,Orleans.Runtime,SocketManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Messaging\SocketManager.cs,SendingSocketCreator,The following statement contains a magic number: try {  	Connect (s' target' connectionTimeout);  	// Prep the socket so it will reset on close and won't Nagle  	s.LingerState = new LingerOption (true' 0);  	s.NoDelay = true;  	WriteConnectionPreamble (s' Constants.SiloDirectConnectionId);  	// Identifies this client as a direct silo-to-silo socket  	// Start an asynch receive off of the socket to detect closure  	var receiveAsyncEventArgs = new SocketAsyncEventArgs {  		BufferList = new List<ArraySegment<byte>> {  			new ArraySegment<byte> (new byte[4])  		}'  		UserToken = new Tuple<Socket' IPEndPoint' SocketManager> (s' target' this)  	};  	receiveAsyncEventArgs.Completed += ReceiveCallback;  	bool receiveCompleted = s.ReceiveAsync (receiveAsyncEventArgs);  	NetworkingStatisticsGroup.OnOpenedSendingSocket ();  	if (!receiveCompleted) {  		ReceiveCallback (this' receiveAsyncEventArgs);  	}  } catch (Exception) {  	try {  		s.Dispose ();  	} catch (Exception) {  		// ignore  	}  	throw;  }  
Magic Number,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AsynchAgent,The following statement contains a magic number: if (type.StartsWith ("Orleans."' StringComparison.Ordinal)) {  	type = type.Substring (8);  }  
Magic Number,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AsynchAgent,The following statement contains a magic number: type = type.Substring (8);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (!detailed) {  	if (keyString.Length >= 48)  		idString = keyString.Substring (24' 8) + keyString.Substring (48);  	else  		idString = keyString.Substring (24' 8);  }  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (!detailed) {  	if (keyString.Length >= 48)  		idString = keyString.Substring (24' 8) + keyString.Substring (48);  	else  		idString = keyString.Substring (24' 8);  }  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (!detailed) {  	if (keyString.Length >= 48)  		idString = keyString.Substring (24' 8) + keyString.Substring (48);  	else  		idString = keyString.Substring (24' 8);  }  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (!detailed) {  	if (keyString.Length >= 48)  		idString = keyString.Substring (24' 8) + keyString.Substring (48);  	else  		idString = keyString.Substring (24' 8);  }  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (!detailed) {  	if (keyString.Length >= 48)  		idString = keyString.Substring (24' 8) + keyString.Substring (48);  	else  		idString = keyString.Substring (24' 8);  }  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (!detailed) {  	if (keyString.Length >= 48)  		idString = keyString.Substring (24' 8) + keyString.Substring (48);  	else  		idString = keyString.Substring (24' 8);  }  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (keyString.Length >= 48)  	idString = keyString.Substring (24' 8) + keyString.Substring (48);  else  	idString = keyString.Substring (24' 8);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (keyString.Length >= 48)  	idString = keyString.Substring (24' 8) + keyString.Substring (48);  else  	idString = keyString.Substring (24' 8);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (keyString.Length >= 48)  	idString = keyString.Substring (24' 8) + keyString.Substring (48);  else  	idString = keyString.Substring (24' 8);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (keyString.Length >= 48)  	idString = keyString.Substring (24' 8) + keyString.Substring (48);  else  	idString = keyString.Substring (24' 8);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (keyString.Length >= 48)  	idString = keyString.Substring (24' 8) + keyString.Substring (48);  else  	idString = keyString.Substring (24' 8);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (keyString.Length >= 48)  	idString = keyString.Substring (24' 8) + keyString.Substring (48);  else  	idString = keyString.Substring (24' 8);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: idString = keyString.Substring (24' 8) + keyString.Substring (48);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: idString = keyString.Substring (24' 8) + keyString.Substring (48);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: idString = keyString.Substring (24' 8) + keyString.Substring (48);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: idString = keyString.Substring (24' 8);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: idString = keyString.Substring (24' 8);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: switch (Category) {  case UniqueKey.Category.Grain:  case UniqueKey.Category.KeyExtGrain:  	var typeString = TypeCode.ToString ("X");  	if (!detailed)  		typeString = typeString.Tail (8);  	fullString = String.Format ("*grn/{0}/{1}"' typeString' idString);  	break;  case UniqueKey.Category.Client:  	fullString = "*cli/" + idString;  	break;  case UniqueKey.Category.GeoClient:  	fullString = string.Format ("*gcl/{0}/{1}"' Key.KeyExt' idString);  	break;  case UniqueKey.Category.SystemTarget:  	string explicitName = Constants.SystemTargetName (this);  	if (TypeCode != 0) {  		var typeStr = TypeCode.ToString ("X");  		return String.Format ("{0}/{1}/{2}"' explicitName' typeStr' idString);  	}  	fullString = explicitName;  	break;  default:  	fullString = "???/" + idString;  	break;  }  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: if (!detailed)  	typeString = typeString.Tail (8);  
Magic Number,Orleans.Runtime,GrainId,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\GrainId.cs,ToStringImpl,The following statement contains a magic number: typeString = typeString.Tail (8);  
Magic Number,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetInnerTypes,The following statement contains a magic number: foreach (var candidate in candidatesWithPositions) {  	if (startPos == -1) {  		foreach (var token in tokenPairs) {  			if (candidate.Str.StartsWith (token.Start)) {  				curStartToken = token.Start;  				curEndToken = token.End;  				startPos = candidate.Pos;  				break;  			}  		}  	}  	if (curStartToken != "" && candidate.Str.StartsWith (curStartToken))  		endTokensNeeded++;  	if (curEndToken != "" && candidate.Str.EndsWith (curEndToken)) {  		endPos = candidate.Pos;  		endTokensNeeded--;  	}  	if (endTokensNeeded == 0 && startPos != -1) {  		results.Add (input.Substring (startPos' endPos - startPos + 2));  		startPos = -1;  		curStartToken = "";  	}  }  
Magic Number,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetInnerTypes,The following statement contains a magic number: if (endTokensNeeded == 0 && startPos != -1) {  	results.Add (input.Substring (startPos' endPos - startPos + 2));  	startPos = -1;  	curStartToken = "";  }  
Magic Number,Orleans.Runtime,TypeUtils,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\TypeUtils.cs,GetInnerTypes,The following statement contains a magic number: results.Add (input.Substring (startPos' endPos - startPos + 2));  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: try {  	byte[] data = Encoding.Unicode.GetBytes (text);  	byte[] result = sha.ComputeHash (data);  	for (int i = 0; i < result.Length; i += 4) {  		int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  		hash = hash ^ tmp;  	}  } finally {  	sha.Dispose ();  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: try {  	byte[] data = Encoding.Unicode.GetBytes (text);  	byte[] result = sha.ComputeHash (data);  	for (int i = 0; i < result.Length; i += 4) {  		int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  		hash = hash ^ tmp;  	}  } finally {  	sha.Dispose ();  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: try {  	byte[] data = Encoding.Unicode.GetBytes (text);  	byte[] result = sha.ComputeHash (data);  	for (int i = 0; i < result.Length; i += 4) {  		int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  		hash = hash ^ tmp;  	}  } finally {  	sha.Dispose ();  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: try {  	byte[] data = Encoding.Unicode.GetBytes (text);  	byte[] result = sha.ComputeHash (data);  	for (int i = 0; i < result.Length; i += 4) {  		int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  		hash = hash ^ tmp;  	}  } finally {  	sha.Dispose ();  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: try {  	byte[] data = Encoding.Unicode.GetBytes (text);  	byte[] result = sha.ComputeHash (data);  	for (int i = 0; i < result.Length; i += 4) {  		int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  		hash = hash ^ tmp;  	}  } finally {  	sha.Dispose ();  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: try {  	byte[] data = Encoding.Unicode.GetBytes (text);  	byte[] result = sha.ComputeHash (data);  	for (int i = 0; i < result.Length; i += 4) {  		int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  		hash = hash ^ tmp;  	}  } finally {  	sha.Dispose ();  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: for (int i = 0; i < result.Length; i += 4) {  	int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  	hash = hash ^ tmp;  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: for (int i = 0; i < result.Length; i += 4) {  	int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  	hash = hash ^ tmp;  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: for (int i = 0; i < result.Length; i += 4) {  	int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  	hash = hash ^ tmp;  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: for (int i = 0; i < result.Length; i += 4) {  	int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  	hash = hash ^ tmp;  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: for (int i = 0; i < result.Length; i += 4) {  	int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  	hash = hash ^ tmp;  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: for (int i = 0; i < result.Length; i += 4) {  	int tmp = (result [i] << 24) | (result [i + 1] << 16) | (result [i + 2] << 8) | (result [i + 3]);  	hash = hash ^ tmp;  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateIdHash,The following statement contains a magic number: i += 4
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateGuidHash,The following statement contains a magic number: try {  	byte[] data = Encoding.Unicode.GetBytes (text);  	byte[] result = sha.ComputeHash (data);  	for (int i = 0; i < result.Length; i++) {  		byte tmp = (byte)(hash [i % 16] ^ result [i]);  		hash [i % 16] = tmp;  	}  } finally {  	sha.Dispose ();  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateGuidHash,The following statement contains a magic number: try {  	byte[] data = Encoding.Unicode.GetBytes (text);  	byte[] result = sha.ComputeHash (data);  	for (int i = 0; i < result.Length; i++) {  		byte tmp = (byte)(hash [i % 16] ^ result [i]);  		hash [i % 16] = tmp;  	}  } finally {  	sha.Dispose ();  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateGuidHash,The following statement contains a magic number: for (int i = 0; i < result.Length; i++) {  	byte tmp = (byte)(hash [i % 16] ^ result [i]);  	hash [i % 16] = tmp;  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateGuidHash,The following statement contains a magic number: for (int i = 0; i < result.Length; i++) {  	byte tmp = (byte)(hash [i % 16] ^ result [i]);  	hash [i % 16] = tmp;  }  
Magic Number,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,CalculateGuidHash,The following statement contains a magic number: hash [i % 16] = tmp;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,Mix,The following statement contains a magic number: a ^= (c >> 13);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,Mix,The following statement contains a magic number: b ^= (a << 8);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,Mix,The following statement contains a magic number: c ^= (b >> 13);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,Mix,The following statement contains a magic number: a ^= (c >> 12);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,Mix,The following statement contains a magic number: b ^= (a << 16);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,Mix,The following statement contains a magic number: c ^= (b >> 5);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,Mix,The following statement contains a magic number: a ^= (c >> 3);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,Mix,The following statement contains a magic number: b ^= (a << 10);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,Mix,The following statement contains a magic number: c ^= (b >> 15);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: while (i + 12 <= len) {  	a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	Mix (ref a' ref b' ref c);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: while (i + 12 <= len) {  	a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	Mix (ref a' ref b' ref c);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: while (i + 12 <= len) {  	a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	Mix (ref a' ref b' ref c);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: while (i + 12 <= len) {  	a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	Mix (ref a' ref b' ref c);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: while (i + 12 <= len) {  	a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	Mix (ref a' ref b' ref c);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: while (i + 12 <= len) {  	a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	Mix (ref a' ref b' ref c);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: while (i + 12 <= len) {  	a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	Mix (ref a' ref b' ref c);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: while (i + 12 <= len) {  	a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	Mix (ref a' ref b' ref c);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: while (i + 12 <= len) {  	a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	Mix (ref a' ref b' ref c);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: while (i + 12 <= len) {  	a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  	Mix (ref a' ref b' ref c);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: a += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: b += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: c += (uint)data [i++] | ((uint)data [i++] << 8) | ((uint)data [i++] << 16) | ((uint)data [i++] << 24);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: if (i < len)  	a += (uint)data [i++] << 8;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: a += (uint)data [i++] << 8;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: if (i < len)  	a += (uint)data [i++] << 16;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: a += (uint)data [i++] << 16;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: if (i < len)  	a += (uint)data [i++] << 24;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: a += (uint)data [i++] << 24;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: if (i < len)  	b += (uint)data [i++] << 8;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: b += (uint)data [i++] << 8;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: if (i < len)  	b += (uint)data [i++] << 16;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: b += (uint)data [i++] << 16;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: if (i < len)  	b += (uint)data [i++] << 24;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: b += (uint)data [i++] << 24;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: if (i < len)  	c += (uint)data [i++] << 8;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: c += (uint)data [i++] << 8;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: if (i < len)  	c += (uint)data [i++] << 16;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: c += (uint)data [i++] << 16;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: if (i < len)  	c += (uint)data [i++] << 24;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: c += (uint)data [i++] << 24;  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: unchecked {  	a += (uint)u1;  	b += (uint)((u1 ^ (uint)u1) >> 32);  	c += (uint)u2;  	Mix (ref a' ref b' ref c);  	a += (uint)((u2 ^ (uint)u2) >> 32);  	b += (uint)u3;  	c += (uint)((u3 ^ (uint)u3) >> 32);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: unchecked {  	a += (uint)u1;  	b += (uint)((u1 ^ (uint)u1) >> 32);  	c += (uint)u2;  	Mix (ref a' ref b' ref c);  	a += (uint)((u2 ^ (uint)u2) >> 32);  	b += (uint)u3;  	c += (uint)((u3 ^ (uint)u3) >> 32);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: unchecked {  	a += (uint)u1;  	b += (uint)((u1 ^ (uint)u1) >> 32);  	c += (uint)u2;  	Mix (ref a' ref b' ref c);  	a += (uint)((u2 ^ (uint)u2) >> 32);  	b += (uint)u3;  	c += (uint)((u3 ^ (uint)u3) >> 32);  }  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: b += (uint)((u1 ^ (uint)u1) >> 32);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: a += (uint)((u2 ^ (uint)u2) >> 32);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: c += (uint)((u3 ^ (uint)u3) >> 32);  
Magic Number,Orleans,JenkinsHash,F:\newReposMay17\dotnet_orleans\src\Orleans\IDs\JenkinsHash.cs,ComputeHash,The following statement contains a magic number: c += 24;  
Magic Number,Orleans.CodeGeneration,GenericMethodInvoker,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GenericMethodInvoker.cs,GetHashCode,The following statement contains a magic number: unchecked {  	// Only consider the type parameters.  	var result = 0;  	for (var i = 0; i < this.typeParameterCount && i < obj.Length; i++) {  		var type = obj [i] as Type;  		if (type == null)  			break;  		result = (result * 367) ^ type.GetHashCode ();  	}  	return result;  }  
Magic Number,Orleans.CodeGeneration,GenericMethodInvoker,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GenericMethodInvoker.cs,GetHashCode,The following statement contains a magic number: for (var i = 0; i < this.typeParameterCount && i < obj.Length; i++) {  	var type = obj [i] as Type;  	if (type == null)  		break;  	result = (result * 367) ^ type.GetHashCode ();  }  
Magic Number,Orleans.CodeGeneration,GenericMethodInvoker,F:\newReposMay17\dotnet_orleans\src\Orleans\CodeGeneration\GenericMethodInvoker.cs,GetHashCode,The following statement contains a magic number: result = (result * 367) ^ type.GetHashCode ();  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("ms"' StringComparison.Ordinal)) {  	unitSize = 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 10000;  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("s"' StringComparison.Ordinal)) {  	unitSize = 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 1000 * 10000;  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 1000 * 10000;  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("m"' StringComparison.Ordinal)) {  	unitSize = 60 * 1000 * 10000;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 1).Trim ();  } else if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 60 * 1000 * 10000;  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 60 * 1000 * 10000;  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 60 * 1000 * 10000;  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: if (trimmedInput.EndsWith ("hr"' StringComparison.Ordinal)) {  	unitSize = 60 * 60 * 1000 * 10000L;  	numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  } else {  	unitSize = 1000 * 10000;  	// Default is seconds  	numberInput = trimmedInput;  }  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 60 * 60 * 1000 * 10000L;  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 60 * 60 * 1000 * 10000L;  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 60 * 60 * 1000 * 10000L;  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: numberInput = trimmedInput.Remove (trimmedInput.Length - 2).Trim ();  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 1000 * 10000;  
Magic Number,Orleans.Runtime.Configuration,ConfigUtilities,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ConfigUtilities.cs,ParseTimeSpan,The following statement contains a magic number: unitSize = 1000 * 10000;  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,NodeConfiguration,The following statement contains a magic number: DelayWarningThreshold = TimeSpan.FromMilliseconds (10000);  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,NodeConfiguration,The following statement contains a magic number: TurnWarningLengthThreshold = TimeSpan.FromMilliseconds (200);  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,NodeConfiguration,The following statement contains a magic number: LoadSheddingLimit = 95;  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The following statement contains a magic number: foreach (XmlNode c in root.ChildNodes) {  	var child = c as XmlElement;  	if (child == null)  		continue;  	// Skip comment lines  	switch (child.LocalName) {  	case "Networking":  		if (child.HasAttribute ("Address")) {  			HostNameOrIPAddress = child.GetAttribute ("Address");  		}  		if (child.HasAttribute ("Port")) {  			Port = ConfigUtilities.ParseInt (child.GetAttribute ("Port")' "Non-numeric Port attribute value on Networking element for " + SiloName);  		}  		if (child.HasAttribute ("PreferredFamily")) {  			AddressType = ConfigUtilities.ParseEnum<AddressFamily> (child.GetAttribute ("PreferredFamily")' "Invalid preferred address family on Networking node. Valid choices are 'InterNetwork' and 'InterNetworkV6'");  		}  		break;  	case "ProxyingGateway":  		ProxyGatewayEndpoint = ConfigUtilities.ParseIPEndPoint (child' Subnet).GetResult ();  		break;  	case "Scheduler":  		if (child.HasAttribute ("MaxActiveThreads")) {  			MaxActiveThreads = ConfigUtilities.ParseInt (child.GetAttribute ("MaxActiveThreads")' "Non-numeric MaxActiveThreads attribute value on Scheduler element for " + SiloName);  			if (MaxActiveThreads < 1) {  				MaxActiveThreads = DEFAULT_MAX_ACTIVE_THREADS;  			}  		}  		if (child.HasAttribute ("DelayWarningThreshold")) {  			DelayWarningThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("DelayWarningThreshold")' "Non-numeric DelayWarningThreshold attribute value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("ActivationSchedulingQuantum")) {  			ActivationSchedulingQuantum = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("ActivationSchedulingQuantum")' "Non-numeric ActivationSchedulingQuantum attribute value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("TurnWarningLengthThreshold")) {  			TurnWarningLengthThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("TurnWarningLengthThreshold")' "Non-numeric TurnWarningLengthThreshold attribute value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("MinDotNetThreadPoolSize")) {  			MinDotNetThreadPoolSize = ConfigUtilities.ParseInt (child.GetAttribute ("MinDotNetThreadPoolSize")' "Invalid ParseInt MinDotNetThreadPoolSize value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("Expect100Continue")) {  			Expect100Continue = ConfigUtilities.ParseBool (child.GetAttribute ("Expect100Continue")' "Invalid ParseBool Expect100Continue value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("DefaultConnectionLimit")) {  			DefaultConnectionLimit = ConfigUtilities.ParseInt (child.GetAttribute ("DefaultConnectionLimit")' "Invalid ParseInt DefaultConnectionLimit value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("UseNagleAlgorithm ")) {  			UseNagleAlgorithm = ConfigUtilities.ParseBool (child.GetAttribute ("UseNagleAlgorithm ")' "Invalid ParseBool UseNagleAlgorithm value on Scheduler element for " + SiloName);  		}  		break;  	case "LoadShedding":  		if (child.HasAttribute ("Enabled")) {  			LoadSheddingEnabled = ConfigUtilities.ParseBool (child.GetAttribute ("Enabled")' "Invalid boolean value for Enabled attribute on LoadShedding attribute for " + SiloName);  		}  		if (child.HasAttribute ("LoadLimit")) {  			LoadSheddingLimit = ConfigUtilities.ParseInt (child.GetAttribute ("LoadLimit")' "Invalid integer value for LoadLimit attribute on LoadShedding attribute for " + SiloName);  			if (LoadSheddingLimit < 0) {  				LoadSheddingLimit = 0;  			}  			if (LoadSheddingLimit > 100) {  				LoadSheddingLimit = 100;  			}  		}  		break;  	case "Tracing":  		ConfigUtilities.ParseTracing (this' child' SiloName);  		break;  	case "Statistics":  		ConfigUtilities.ParseStatistics (this' child' SiloName);  		break;  	case "Limits":  		ConfigUtilities.ParseLimitValues (LimitManager' child' SiloName);  		break;  	case "Startup":  		if (child.HasAttribute ("Type")) {  			StartupTypeName = child.GetAttribute ("Type");  		}  		break;  	case "Telemetry":  		ConfigUtilities.ParseTelemetry (child);  		break;  	case "AdditionalAssemblyDirectories":  		ConfigUtilities.ParseAdditionalAssemblyDirectories (AdditionalAssemblyDirectories' child);  		break;  	}  }  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The following statement contains a magic number: foreach (XmlNode c in root.ChildNodes) {  	var child = c as XmlElement;  	if (child == null)  		continue;  	// Skip comment lines  	switch (child.LocalName) {  	case "Networking":  		if (child.HasAttribute ("Address")) {  			HostNameOrIPAddress = child.GetAttribute ("Address");  		}  		if (child.HasAttribute ("Port")) {  			Port = ConfigUtilities.ParseInt (child.GetAttribute ("Port")' "Non-numeric Port attribute value on Networking element for " + SiloName);  		}  		if (child.HasAttribute ("PreferredFamily")) {  			AddressType = ConfigUtilities.ParseEnum<AddressFamily> (child.GetAttribute ("PreferredFamily")' "Invalid preferred address family on Networking node. Valid choices are 'InterNetwork' and 'InterNetworkV6'");  		}  		break;  	case "ProxyingGateway":  		ProxyGatewayEndpoint = ConfigUtilities.ParseIPEndPoint (child' Subnet).GetResult ();  		break;  	case "Scheduler":  		if (child.HasAttribute ("MaxActiveThreads")) {  			MaxActiveThreads = ConfigUtilities.ParseInt (child.GetAttribute ("MaxActiveThreads")' "Non-numeric MaxActiveThreads attribute value on Scheduler element for " + SiloName);  			if (MaxActiveThreads < 1) {  				MaxActiveThreads = DEFAULT_MAX_ACTIVE_THREADS;  			}  		}  		if (child.HasAttribute ("DelayWarningThreshold")) {  			DelayWarningThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("DelayWarningThreshold")' "Non-numeric DelayWarningThreshold attribute value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("ActivationSchedulingQuantum")) {  			ActivationSchedulingQuantum = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("ActivationSchedulingQuantum")' "Non-numeric ActivationSchedulingQuantum attribute value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("TurnWarningLengthThreshold")) {  			TurnWarningLengthThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("TurnWarningLengthThreshold")' "Non-numeric TurnWarningLengthThreshold attribute value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("MinDotNetThreadPoolSize")) {  			MinDotNetThreadPoolSize = ConfigUtilities.ParseInt (child.GetAttribute ("MinDotNetThreadPoolSize")' "Invalid ParseInt MinDotNetThreadPoolSize value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("Expect100Continue")) {  			Expect100Continue = ConfigUtilities.ParseBool (child.GetAttribute ("Expect100Continue")' "Invalid ParseBool Expect100Continue value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("DefaultConnectionLimit")) {  			DefaultConnectionLimit = ConfigUtilities.ParseInt (child.GetAttribute ("DefaultConnectionLimit")' "Invalid ParseInt DefaultConnectionLimit value on Scheduler element for " + SiloName);  		}  		if (child.HasAttribute ("UseNagleAlgorithm ")) {  			UseNagleAlgorithm = ConfigUtilities.ParseBool (child.GetAttribute ("UseNagleAlgorithm ")' "Invalid ParseBool UseNagleAlgorithm value on Scheduler element for " + SiloName);  		}  		break;  	case "LoadShedding":  		if (child.HasAttribute ("Enabled")) {  			LoadSheddingEnabled = ConfigUtilities.ParseBool (child.GetAttribute ("Enabled")' "Invalid boolean value for Enabled attribute on LoadShedding attribute for " + SiloName);  		}  		if (child.HasAttribute ("LoadLimit")) {  			LoadSheddingLimit = ConfigUtilities.ParseInt (child.GetAttribute ("LoadLimit")' "Invalid integer value for LoadLimit attribute on LoadShedding attribute for " + SiloName);  			if (LoadSheddingLimit < 0) {  				LoadSheddingLimit = 0;  			}  			if (LoadSheddingLimit > 100) {  				LoadSheddingLimit = 100;  			}  		}  		break;  	case "Tracing":  		ConfigUtilities.ParseTracing (this' child' SiloName);  		break;  	case "Statistics":  		ConfigUtilities.ParseStatistics (this' child' SiloName);  		break;  	case "Limits":  		ConfigUtilities.ParseLimitValues (LimitManager' child' SiloName);  		break;  	case "Startup":  		if (child.HasAttribute ("Type")) {  			StartupTypeName = child.GetAttribute ("Type");  		}  		break;  	case "Telemetry":  		ConfigUtilities.ParseTelemetry (child);  		break;  	case "AdditionalAssemblyDirectories":  		ConfigUtilities.ParseAdditionalAssemblyDirectories (AdditionalAssemblyDirectories' child);  		break;  	}  }  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The following statement contains a magic number: switch (child.LocalName) {  case "Networking":  	if (child.HasAttribute ("Address")) {  		HostNameOrIPAddress = child.GetAttribute ("Address");  	}  	if (child.HasAttribute ("Port")) {  		Port = ConfigUtilities.ParseInt (child.GetAttribute ("Port")' "Non-numeric Port attribute value on Networking element for " + SiloName);  	}  	if (child.HasAttribute ("PreferredFamily")) {  		AddressType = ConfigUtilities.ParseEnum<AddressFamily> (child.GetAttribute ("PreferredFamily")' "Invalid preferred address family on Networking node. Valid choices are 'InterNetwork' and 'InterNetworkV6'");  	}  	break;  case "ProxyingGateway":  	ProxyGatewayEndpoint = ConfigUtilities.ParseIPEndPoint (child' Subnet).GetResult ();  	break;  case "Scheduler":  	if (child.HasAttribute ("MaxActiveThreads")) {  		MaxActiveThreads = ConfigUtilities.ParseInt (child.GetAttribute ("MaxActiveThreads")' "Non-numeric MaxActiveThreads attribute value on Scheduler element for " + SiloName);  		if (MaxActiveThreads < 1) {  			MaxActiveThreads = DEFAULT_MAX_ACTIVE_THREADS;  		}  	}  	if (child.HasAttribute ("DelayWarningThreshold")) {  		DelayWarningThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("DelayWarningThreshold")' "Non-numeric DelayWarningThreshold attribute value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("ActivationSchedulingQuantum")) {  		ActivationSchedulingQuantum = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("ActivationSchedulingQuantum")' "Non-numeric ActivationSchedulingQuantum attribute value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("TurnWarningLengthThreshold")) {  		TurnWarningLengthThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("TurnWarningLengthThreshold")' "Non-numeric TurnWarningLengthThreshold attribute value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("MinDotNetThreadPoolSize")) {  		MinDotNetThreadPoolSize = ConfigUtilities.ParseInt (child.GetAttribute ("MinDotNetThreadPoolSize")' "Invalid ParseInt MinDotNetThreadPoolSize value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("Expect100Continue")) {  		Expect100Continue = ConfigUtilities.ParseBool (child.GetAttribute ("Expect100Continue")' "Invalid ParseBool Expect100Continue value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("DefaultConnectionLimit")) {  		DefaultConnectionLimit = ConfigUtilities.ParseInt (child.GetAttribute ("DefaultConnectionLimit")' "Invalid ParseInt DefaultConnectionLimit value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("UseNagleAlgorithm ")) {  		UseNagleAlgorithm = ConfigUtilities.ParseBool (child.GetAttribute ("UseNagleAlgorithm ")' "Invalid ParseBool UseNagleAlgorithm value on Scheduler element for " + SiloName);  	}  	break;  case "LoadShedding":  	if (child.HasAttribute ("Enabled")) {  		LoadSheddingEnabled = ConfigUtilities.ParseBool (child.GetAttribute ("Enabled")' "Invalid boolean value for Enabled attribute on LoadShedding attribute for " + SiloName);  	}  	if (child.HasAttribute ("LoadLimit")) {  		LoadSheddingLimit = ConfigUtilities.ParseInt (child.GetAttribute ("LoadLimit")' "Invalid integer value for LoadLimit attribute on LoadShedding attribute for " + SiloName);  		if (LoadSheddingLimit < 0) {  			LoadSheddingLimit = 0;  		}  		if (LoadSheddingLimit > 100) {  			LoadSheddingLimit = 100;  		}  	}  	break;  case "Tracing":  	ConfigUtilities.ParseTracing (this' child' SiloName);  	break;  case "Statistics":  	ConfigUtilities.ParseStatistics (this' child' SiloName);  	break;  case "Limits":  	ConfigUtilities.ParseLimitValues (LimitManager' child' SiloName);  	break;  case "Startup":  	if (child.HasAttribute ("Type")) {  		StartupTypeName = child.GetAttribute ("Type");  	}  	break;  case "Telemetry":  	ConfigUtilities.ParseTelemetry (child);  	break;  case "AdditionalAssemblyDirectories":  	ConfigUtilities.ParseAdditionalAssemblyDirectories (AdditionalAssemblyDirectories' child);  	break;  }  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The following statement contains a magic number: switch (child.LocalName) {  case "Networking":  	if (child.HasAttribute ("Address")) {  		HostNameOrIPAddress = child.GetAttribute ("Address");  	}  	if (child.HasAttribute ("Port")) {  		Port = ConfigUtilities.ParseInt (child.GetAttribute ("Port")' "Non-numeric Port attribute value on Networking element for " + SiloName);  	}  	if (child.HasAttribute ("PreferredFamily")) {  		AddressType = ConfigUtilities.ParseEnum<AddressFamily> (child.GetAttribute ("PreferredFamily")' "Invalid preferred address family on Networking node. Valid choices are 'InterNetwork' and 'InterNetworkV6'");  	}  	break;  case "ProxyingGateway":  	ProxyGatewayEndpoint = ConfigUtilities.ParseIPEndPoint (child' Subnet).GetResult ();  	break;  case "Scheduler":  	if (child.HasAttribute ("MaxActiveThreads")) {  		MaxActiveThreads = ConfigUtilities.ParseInt (child.GetAttribute ("MaxActiveThreads")' "Non-numeric MaxActiveThreads attribute value on Scheduler element for " + SiloName);  		if (MaxActiveThreads < 1) {  			MaxActiveThreads = DEFAULT_MAX_ACTIVE_THREADS;  		}  	}  	if (child.HasAttribute ("DelayWarningThreshold")) {  		DelayWarningThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("DelayWarningThreshold")' "Non-numeric DelayWarningThreshold attribute value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("ActivationSchedulingQuantum")) {  		ActivationSchedulingQuantum = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("ActivationSchedulingQuantum")' "Non-numeric ActivationSchedulingQuantum attribute value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("TurnWarningLengthThreshold")) {  		TurnWarningLengthThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("TurnWarningLengthThreshold")' "Non-numeric TurnWarningLengthThreshold attribute value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("MinDotNetThreadPoolSize")) {  		MinDotNetThreadPoolSize = ConfigUtilities.ParseInt (child.GetAttribute ("MinDotNetThreadPoolSize")' "Invalid ParseInt MinDotNetThreadPoolSize value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("Expect100Continue")) {  		Expect100Continue = ConfigUtilities.ParseBool (child.GetAttribute ("Expect100Continue")' "Invalid ParseBool Expect100Continue value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("DefaultConnectionLimit")) {  		DefaultConnectionLimit = ConfigUtilities.ParseInt (child.GetAttribute ("DefaultConnectionLimit")' "Invalid ParseInt DefaultConnectionLimit value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("UseNagleAlgorithm ")) {  		UseNagleAlgorithm = ConfigUtilities.ParseBool (child.GetAttribute ("UseNagleAlgorithm ")' "Invalid ParseBool UseNagleAlgorithm value on Scheduler element for " + SiloName);  	}  	break;  case "LoadShedding":  	if (child.HasAttribute ("Enabled")) {  		LoadSheddingEnabled = ConfigUtilities.ParseBool (child.GetAttribute ("Enabled")' "Invalid boolean value for Enabled attribute on LoadShedding attribute for " + SiloName);  	}  	if (child.HasAttribute ("LoadLimit")) {  		LoadSheddingLimit = ConfigUtilities.ParseInt (child.GetAttribute ("LoadLimit")' "Invalid integer value for LoadLimit attribute on LoadShedding attribute for " + SiloName);  		if (LoadSheddingLimit < 0) {  			LoadSheddingLimit = 0;  		}  		if (LoadSheddingLimit > 100) {  			LoadSheddingLimit = 100;  		}  	}  	break;  case "Tracing":  	ConfigUtilities.ParseTracing (this' child' SiloName);  	break;  case "Statistics":  	ConfigUtilities.ParseStatistics (this' child' SiloName);  	break;  case "Limits":  	ConfigUtilities.ParseLimitValues (LimitManager' child' SiloName);  	break;  case "Startup":  	if (child.HasAttribute ("Type")) {  		StartupTypeName = child.GetAttribute ("Type");  	}  	break;  case "Telemetry":  	ConfigUtilities.ParseTelemetry (child);  	break;  case "AdditionalAssemblyDirectories":  	ConfigUtilities.ParseAdditionalAssemblyDirectories (AdditionalAssemblyDirectories' child);  	break;  }  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The following statement contains a magic number: if (child.HasAttribute ("LoadLimit")) {  	LoadSheddingLimit = ConfigUtilities.ParseInt (child.GetAttribute ("LoadLimit")' "Invalid integer value for LoadLimit attribute on LoadShedding attribute for " + SiloName);  	if (LoadSheddingLimit < 0) {  		LoadSheddingLimit = 0;  	}  	if (LoadSheddingLimit > 100) {  		LoadSheddingLimit = 100;  	}  }  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The following statement contains a magic number: if (child.HasAttribute ("LoadLimit")) {  	LoadSheddingLimit = ConfigUtilities.ParseInt (child.GetAttribute ("LoadLimit")' "Invalid integer value for LoadLimit attribute on LoadShedding attribute for " + SiloName);  	if (LoadSheddingLimit < 0) {  		LoadSheddingLimit = 0;  	}  	if (LoadSheddingLimit > 100) {  		LoadSheddingLimit = 100;  	}  }  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The following statement contains a magic number: if (LoadSheddingLimit > 100) {  	LoadSheddingLimit = 100;  }  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The following statement contains a magic number: if (LoadSheddingLimit > 100) {  	LoadSheddingLimit = 100;  }  
Magic Number,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The following statement contains a magic number: LoadSheddingLimit = 100;  
Magic Number,Orleans.MultiCluster,MultiClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\MultiCluster\MultiClusterConfiguration.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = this.AdminTimestamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ (this.Clusters != null ? this.Clusters.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (this.Comment != null ? this.Comment.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Orleans.MultiCluster,MultiClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\MultiCluster\MultiClusterConfiguration.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = this.AdminTimestamp.GetHashCode ();  	hashCode = (hashCode * 397) ^ (this.Clusters != null ? this.Clusters.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (this.Comment != null ? this.Comment.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Orleans.MultiCluster,MultiClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\MultiCluster\MultiClusterConfiguration.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (this.Clusters != null ? this.Clusters.GetHashCode () : 0);  
Magic Number,Orleans.MultiCluster,MultiClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\MultiCluster\MultiClusterConfiguration.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (this.Comment != null ? this.Comment.GetHashCode () : 0);  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadArgument,The following statement contains a magic number: switch (index) {  case 0:  	this.il.Emit (OpCodes.Ldarg_0);  	break;  case 1:  	this.il.Emit (OpCodes.Ldarg_1);  	break;  case 2:  	this.il.Emit (OpCodes.Ldarg_2);  	break;  case 3:  	this.il.Emit (OpCodes.Ldarg_3);  	break;  default:  	if (index < 0xFF) {  		this.il.Emit (OpCodes.Ldarg_S' (byte)index);  	} else {  		this.il.Emit (OpCodes.Ldarg' index);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadArgument,The following statement contains a magic number: switch (index) {  case 0:  	this.il.Emit (OpCodes.Ldarg_0);  	break;  case 1:  	this.il.Emit (OpCodes.Ldarg_1);  	break;  case 2:  	this.il.Emit (OpCodes.Ldarg_2);  	break;  case 3:  	this.il.Emit (OpCodes.Ldarg_3);  	break;  default:  	if (index < 0xFF) {  		this.il.Emit (OpCodes.Ldarg_S' (byte)index);  	} else {  		this.il.Emit (OpCodes.Ldarg' index);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value) {  case 0:  	this.il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	this.il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	this.il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	this.il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	this.il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	this.il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	this.il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	this.il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	this.il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value < 0xFF) {  		this.il.Emit (OpCodes.Ldc_I4_S' (byte)value);  	} else {  		this.il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value) {  case 0:  	this.il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	this.il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	this.il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	this.il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	this.il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	this.il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	this.il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	this.il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	this.il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value < 0xFF) {  		this.il.Emit (OpCodes.Ldc_I4_S' (byte)value);  	} else {  		this.il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value) {  case 0:  	this.il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	this.il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	this.il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	this.il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	this.il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	this.il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	this.il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	this.il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	this.il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value < 0xFF) {  		this.il.Emit (OpCodes.Ldc_I4_S' (byte)value);  	} else {  		this.il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value) {  case 0:  	this.il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	this.il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	this.il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	this.il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	this.il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	this.il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	this.il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	this.il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	this.il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value < 0xFF) {  		this.il.Emit (OpCodes.Ldc_I4_S' (byte)value);  	} else {  		this.il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value) {  case 0:  	this.il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	this.il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	this.il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	this.il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	this.il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	this.il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	this.il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	this.il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	this.il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value < 0xFF) {  		this.il.Emit (OpCodes.Ldc_I4_S' (byte)value);  	} else {  		this.il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value) {  case 0:  	this.il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	this.il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	this.il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	this.il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	this.il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	this.il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	this.il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	this.il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	this.il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value < 0xFF) {  		this.il.Emit (OpCodes.Ldc_I4_S' (byte)value);  	} else {  		this.il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadConstant,The following statement contains a magic number: switch (value) {  case 0:  	this.il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	this.il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	this.il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	this.il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	this.il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	this.il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	this.il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	this.il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	this.il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value < 0xFF) {  		this.il.Emit (OpCodes.Ldc_I4_S' (byte)value);  	} else {  		this.il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	this.il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	this.il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	this.il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	this.il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index < 0xFF) {  		this.il.Emit (OpCodes.Stloc_S' (byte)index);  	} else {  		this.il.Emit (OpCodes.Stloc' loc);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	this.il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	this.il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	this.il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	this.il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index < 0xFF) {  		this.il.Emit (OpCodes.Stloc_S' (byte)index);  	} else {  		this.il.Emit (OpCodes.Stloc' loc);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	this.il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	this.il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	this.il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	this.il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index < 0xFF) {  		this.il.Emit (OpCodes.Ldloc_S' (byte)index);  	} else {  		this.il.Emit (OpCodes.Ldloc' loc);  	}  	break;  }  
Magic Number,Orleans.Serialization,ILDelegateBuilder,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\ILDelegateBuilder.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	this.il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	this.il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	this.il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	this.il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index < 0xFF) {  		this.il.Emit (OpCodes.Ldloc_S' (byte)index);  	} else {  		this.il.Emit (OpCodes.Ldloc' loc);  	}  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadDecimal,The following statement contains a magic number: for (var i = 0; i < 4; i++) {  	raw [i] = BitConverter.ToInt32 (buff' n);  	n += sizeof(int);  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: for (var i = 0; i < 12; i++) {  	if (buff [offset + i] != 0) {  		v4 = false;  		break;  	}  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: if (v4) {  	var v4Bytes = new byte[4];  	for (var i = 0; i < 4; i++) {  		v4Bytes [i] = buff [offset + 12 + i];  	}  	return new IPAddress (v4Bytes);  } else {  	var v6Bytes = new byte[16];  	for (var i = 0; i < 16; i++) {  		v6Bytes [i] = buff [offset + i];  	}  	return new IPAddress (v6Bytes);  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: if (v4) {  	var v4Bytes = new byte[4];  	for (var i = 0; i < 4; i++) {  		v4Bytes [i] = buff [offset + 12 + i];  	}  	return new IPAddress (v4Bytes);  } else {  	var v6Bytes = new byte[16];  	for (var i = 0; i < 16; i++) {  		v6Bytes [i] = buff [offset + i];  	}  	return new IPAddress (v6Bytes);  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: if (v4) {  	var v4Bytes = new byte[4];  	for (var i = 0; i < 4; i++) {  		v4Bytes [i] = buff [offset + 12 + i];  	}  	return new IPAddress (v4Bytes);  } else {  	var v6Bytes = new byte[16];  	for (var i = 0; i < 16; i++) {  		v6Bytes [i] = buff [offset + i];  	}  	return new IPAddress (v6Bytes);  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: if (v4) {  	var v4Bytes = new byte[4];  	for (var i = 0; i < 4; i++) {  		v4Bytes [i] = buff [offset + 12 + i];  	}  	return new IPAddress (v4Bytes);  } else {  	var v6Bytes = new byte[16];  	for (var i = 0; i < 16; i++) {  		v6Bytes [i] = buff [offset + i];  	}  	return new IPAddress (v6Bytes);  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: if (v4) {  	var v4Bytes = new byte[4];  	for (var i = 0; i < 4; i++) {  		v4Bytes [i] = buff [offset + 12 + i];  	}  	return new IPAddress (v4Bytes);  } else {  	var v6Bytes = new byte[16];  	for (var i = 0; i < 16; i++) {  		v6Bytes [i] = buff [offset + i];  	}  	return new IPAddress (v6Bytes);  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: for (var i = 0; i < 4; i++) {  	v4Bytes [i] = buff [offset + 12 + i];  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: for (var i = 0; i < 4; i++) {  	v4Bytes [i] = buff [offset + 12 + i];  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: v4Bytes [i] = buff [offset + 12 + i];  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadIPAddress,The following statement contains a magic number: for (var i = 0; i < 16; i++) {  	v6Bytes [i] = buff [offset + i];  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,TryReadSimpleType,The following statement contains a magic number: switch (token) {  case SerializationTokenType.True:  	result = true;  	break;  case SerializationTokenType.False:  	result = false;  	break;  case SerializationTokenType.Null:  	result = null;  	break;  case SerializationTokenType.Object:  	result = new object ();  	break;  case SerializationTokenType.Int:  	result = ReadInt ();  	break;  case SerializationTokenType.Uint:  	result = ReadUInt ();  	break;  case SerializationTokenType.Short:  	result = ReadShort ();  	break;  case SerializationTokenType.Ushort:  	result = ReadUShort ();  	break;  case SerializationTokenType.Long:  	result = ReadLong ();  	break;  case SerializationTokenType.Ulong:  	result = ReadULong ();  	break;  case SerializationTokenType.Byte:  	result = ReadByte ();  	break;  case SerializationTokenType.Sbyte:  	result = ReadSByte ();  	break;  case SerializationTokenType.Float:  	result = ReadFloat ();  	break;  case SerializationTokenType.Double:  	result = ReadDouble ();  	break;  case SerializationTokenType.Decimal:  	result = ReadDecimal ();  	break;  case SerializationTokenType.String:  	result = ReadString ();  	break;  case SerializationTokenType.Character:  	result = ReadChar ();  	break;  case SerializationTokenType.Guid:  	bytes = ReadBytes (16);  	result = new Guid (bytes);  	break;  case SerializationTokenType.Date:  	result = DateTime.FromBinary (ReadLong ());  	break;  case SerializationTokenType.TimeSpan:  	result = new TimeSpan (ReadLong ());  	break;  case SerializationTokenType.GrainId:  	result = ReadGrainId ();  	break;  case SerializationTokenType.ActivationId:  	result = ReadActivationId ();  	break;  case SerializationTokenType.SiloAddress:  	result = ReadSiloAddress ();  	break;  case SerializationTokenType.ActivationAddress:  	result = ReadActivationAddress ();  	break;  case SerializationTokenType.IpAddress:  	result = ReadIPAddress ();  	break;  case SerializationTokenType.IpEndPoint:  	result = ReadIPEndPoint ();  	break;  case SerializationTokenType.CorrelationId:  	result = new CorrelationId (ReadBytes (CorrelationId.SIZE_BYTES));  	break;  default:  	result = null;  	return false;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,TryReadSimpleType,The following statement contains a magic number: bytes = ReadBytes (16);  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: switch (token) {  case SerializationTokenType.Boolean:  	return typeof(bool);  case SerializationTokenType.Int:  	return typeof(int);  case SerializationTokenType.Short:  	return typeof(short);  case SerializationTokenType.Long:  	return typeof(long);  case SerializationTokenType.Sbyte:  	return typeof(sbyte);  case SerializationTokenType.Uint:  	return typeof(uint);  case SerializationTokenType.Ushort:  	return typeof(ushort);  case SerializationTokenType.Ulong:  	return typeof(ulong);  case SerializationTokenType.Byte:  	return typeof(byte);  case SerializationTokenType.Float:  	return typeof(float);  case SerializationTokenType.Double:  	return typeof(double);  case SerializationTokenType.Decimal:  	return typeof(decimal);  case SerializationTokenType.String:  	return typeof(string);  case SerializationTokenType.Character:  	return typeof(char);  case SerializationTokenType.Guid:  	return typeof(Guid);  case SerializationTokenType.Date:  	return typeof(DateTime);  case SerializationTokenType.TimeSpan:  	return typeof(TimeSpan);  case SerializationTokenType.IpAddress:  	return typeof(IPAddress);  case SerializationTokenType.IpEndPoint:  	return typeof(IPEndPoint);  case SerializationTokenType.GrainId:  	return typeof(GrainId);  case SerializationTokenType.ActivationId:  	return typeof(ActivationId);  case SerializationTokenType.SiloAddress:  	return typeof(SiloAddress);  case SerializationTokenType.ActivationAddress:  	return typeof(ActivationAddress);  case SerializationTokenType.CorrelationId:  	return typeof(CorrelationId);  case SerializationTokenType.Request:  	return typeof(InvokeMethodRequest);  case SerializationTokenType.Response:  	return typeof(Response);  case SerializationTokenType.StringObjDict:  	return typeof(Dictionary<string' object>);  case SerializationTokenType.Object:  	return typeof(Object);  case SerializationTokenType.Tuple + 1:  	Trace ("----Reading type info for a Tuple'1");  	return typeof(Tuple<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Tuple + 2:  	Trace ("----Reading type info for a Tuple'2");  	return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Tuple + 3:  	Trace ("----Reading type info for a Tuple'3");  	return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  case SerializationTokenType.Tuple + 4:  	Trace ("----Reading type info for a Tuple'4");  	return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  case SerializationTokenType.Tuple + 5:  	Trace ("----Reading type info for a Tuple'5");  	return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  case SerializationTokenType.Tuple + 6:  	Trace ("----Reading type info for a Tuple'6");  	return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  case SerializationTokenType.Tuple + 7:  	Trace ("----Reading type info for a Tuple'7");  	return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  case SerializationTokenType.Array + 1:  	var et1 = ReadFullTypeHeader (serializationManager);  	return et1.MakeArrayType ();  case SerializationTokenType.Array + 2:  	var et2 = ReadFullTypeHeader (serializationManager);  	return et2.MakeArrayType (2);  case SerializationTokenType.Array + 3:  	var et3 = ReadFullTypeHeader (serializationManager);  	return et3.MakeArrayType (3);  case SerializationTokenType.Array + 4:  	var et4 = ReadFullTypeHeader (serializationManager);  	return et4.MakeArrayType (4);  case SerializationTokenType.Array + 5:  	var et5 = ReadFullTypeHeader (serializationManager);  	return et5.MakeArrayType (5);  case SerializationTokenType.Array + 6:  	var et6 = ReadFullTypeHeader (serializationManager);  	return et6.MakeArrayType (6);  case SerializationTokenType.Array + 7:  	var et7 = ReadFullTypeHeader (serializationManager);  	return et7.MakeArrayType (7);  case SerializationTokenType.Array + 8:  	var et8 = ReadFullTypeHeader (serializationManager);  	return et8.MakeArrayType (8);  case SerializationTokenType.List:  	return typeof(List<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Dictionary:  	return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.KeyValuePair:  	return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.Set:  	return typeof(HashSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.SortedList:  	return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  case SerializationTokenType.SortedSet:  	return typeof(SortedSet<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Stack:  	return typeof(Stack<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Queue:  	return typeof(Queue<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.LinkedList:  	return typeof(LinkedList<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.Nullable:  	return typeof(Nullable<>).MakeGenericType (ReadGenericArguments (serializationManager' 1));  case SerializationTokenType.ByteArray:  	return typeof(byte[]);  case SerializationTokenType.ShortArray:  	return typeof(short[]);  case SerializationTokenType.IntArray:  	return typeof(int[]);  case SerializationTokenType.LongArray:  	return typeof(long[]);  case SerializationTokenType.UShortArray:  	return typeof(ushort[]);  case SerializationTokenType.UIntArray:  	return typeof(uint[]);  case SerializationTokenType.ULongArray:  	return typeof(ulong[]);  case SerializationTokenType.FloatArray:  	return typeof(float[]);  case SerializationTokenType.DoubleArray:  	return typeof(double[]);  case SerializationTokenType.CharArray:  	return typeof(char[]);  case SerializationTokenType.BoolArray:  	return typeof(bool[]);  case SerializationTokenType.SByteArray:  	return typeof(sbyte[]);  case SerializationTokenType.NamedType:  	var typeName = ReadString ();  	try {  		return serializationManager.ResolveTypeName (typeName);  	} catch (TypeAccessException ex) {  		throw new TypeAccessException ("Named type \"" + typeName + "\" is invalid: " + ex.Message);  	}  default:  	break;  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return typeof(Tuple<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return typeof(Tuple<' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 3));  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return typeof(Tuple<' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 4));  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return typeof(Tuple<' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 5));  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return typeof(Tuple<' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 6));  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return typeof(Tuple<' ' ' ' ' ' >).MakeGenericType (ReadGenericArguments (serializationManager' 7));  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return et2.MakeArrayType (2);  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return et3.MakeArrayType (3);  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return et4.MakeArrayType (4);  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return et5.MakeArrayType (5);  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return et6.MakeArrayType (6);  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return et7.MakeArrayType (7);  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return et8.MakeArrayType (8);  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return typeof(Dictionary<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return typeof(KeyValuePair<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  
Magic Number,Orleans.Serialization,BinaryTokenStreamReader,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamReader.cs,ReadSpecifiedTypeHeader,The following statement contains a magic number: return typeof(SortedList<' >).MakeGenericType (ReadGenericArguments (serializationManager' 2));  
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens [typeof(Tuple<' >).TypeHandle] = SerializationTokenType.Tuple + 2;  
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens [typeof(Tuple<' ' >).TypeHandle] = SerializationTokenType.Tuple + 3;  
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens [typeof(Tuple<' ' ' >).TypeHandle] = SerializationTokenType.Tuple + 4;  
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens [typeof(Tuple<' ' ' ' >).TypeHandle] = SerializationTokenType.Tuple + 5;  
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens [typeof(Tuple<' ' ' ' ' >).TypeHandle] = SerializationTokenType.Tuple + 6;  
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamWriter.cs,BinaryTokenStreamWriter,The following statement contains a magic number: typeTokens [typeof(Tuple<' ' ' ' ' ' >).TypeHandle] = SerializationTokenType.Tuple + 7;  
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamWriter.cs,Write,The following statement contains a magic number: if (ip.AddressFamily == AddressFamily.InterNetwork) {  	for (var i = 0; i < 12; i++) {  		Write ((byte)0);  	}  	Write (ip.GetAddressBytes ());  	// IPv4 -- 4 bytes  } else {  	Write (ip.GetAddressBytes ());  	// IPv6 -- 16 bytes  }  
Magic Number,Orleans.Serialization,BinaryTokenStreamWriter,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\BinaryTokenStreamWriter.cs,Write,The following statement contains a magic number: for (var i = 0; i < 12; i++) {  	Write ((byte)0);  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeepCopierHelper,The following statement contains a magic number: if (originalArray != null) {  	if (originalArray.Rank == 1 && originalArray.GetLength (0) == 0) {  		return originalArray;  	}  	if (t.TypeHandle.Equals (byteArrayTypeHandle) && (originalArray.Rank == 1)) {  		var source = (byte[])original;  		if (source.Length > this.LargeObjectSizeThreshold) {  			logger.Info (ErrorCode.Ser_LargeObjectAllocated' "Large byte array of size {0} is being copied. This will result in an allocation on the large object heap. " + "Frequent allocations to the large object heap can result in frequent gen2 garbage collections and poor system performance. " + "Please consider using Immutable<byte[]> instead."' source.Length);  		}  		var dest = new byte[source.Length];  		Array.Copy (source' dest' source.Length);  		return dest;  	}  	var et = t.GetElementType ();  	var etInfo = et.GetTypeInfo ();  	if (et.IsOrleansShallowCopyable ()) {  		if (etInfo.IsPrimitive && Buffer.ByteLength (originalArray) > this.LargeObjectSizeThreshold) {  			logger.Info (ErrorCode.Ser_LargeObjectAllocated' "Large {0} array of total byte size {1} is being copied. This will result in an allocation on the large object heap. " + "Frequent allocations to the large object heap can result in frequent gen2 garbage collections and poor system performance. " + "Please consider using Immutable<{0}> instead."' t.OrleansTypeName ()' Buffer.ByteLength (originalArray));  		}  		return originalArray.Clone ();  	}  	var rank = originalArray.Rank;  	var lengths = new int[rank];  	for (var i = 0; i < rank; i++)  		lengths [i] = originalArray.GetLength (i);  	var copyArray = Array.CreateInstance (et' lengths);  	context.RecordCopy (original' copyArray);  	if (rank == 1) {  		for (var i = 0; i < lengths [0]; i++)  			copyArray.SetValue (DeepCopyInner (originalArray.GetValue (i)' context)' i);  	} else if (rank == 2) {  		for (var i = 0; i < lengths [0]; i++)  			for (var j = 0; j < lengths [1]; j++)  				copyArray.SetValue (DeepCopyInner (originalArray.GetValue (i' j)' context)' i' j);  	} else {  		var index = new int[rank];  		var sizes = new int[rank];  		sizes [rank - 1] = 1;  		for (var k = rank - 2; k >= 0; k--)  			sizes [k] = sizes [k + 1] * lengths [k + 1];  		for (var i = 0; i < originalArray.Length; i++) {  			int k = i;  			for (int n = 0; n < rank; n++) {  				int offset = k / sizes [n];  				k = k - offset * sizes [n];  				index [n] = offset;  			}  			copyArray.SetValue (DeepCopyInner (originalArray.GetValue (index)' context)' index);  		}  	}  	return copyArray;  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeepCopierHelper,The following statement contains a magic number: if (originalArray != null) {  	if (originalArray.Rank == 1 && originalArray.GetLength (0) == 0) {  		return originalArray;  	}  	if (t.TypeHandle.Equals (byteArrayTypeHandle) && (originalArray.Rank == 1)) {  		var source = (byte[])original;  		if (source.Length > this.LargeObjectSizeThreshold) {  			logger.Info (ErrorCode.Ser_LargeObjectAllocated' "Large byte array of size {0} is being copied. This will result in an allocation on the large object heap. " + "Frequent allocations to the large object heap can result in frequent gen2 garbage collections and poor system performance. " + "Please consider using Immutable<byte[]> instead."' source.Length);  		}  		var dest = new byte[source.Length];  		Array.Copy (source' dest' source.Length);  		return dest;  	}  	var et = t.GetElementType ();  	var etInfo = et.GetTypeInfo ();  	if (et.IsOrleansShallowCopyable ()) {  		if (etInfo.IsPrimitive && Buffer.ByteLength (originalArray) > this.LargeObjectSizeThreshold) {  			logger.Info (ErrorCode.Ser_LargeObjectAllocated' "Large {0} array of total byte size {1} is being copied. This will result in an allocation on the large object heap. " + "Frequent allocations to the large object heap can result in frequent gen2 garbage collections and poor system performance. " + "Please consider using Immutable<{0}> instead."' t.OrleansTypeName ()' Buffer.ByteLength (originalArray));  		}  		return originalArray.Clone ();  	}  	var rank = originalArray.Rank;  	var lengths = new int[rank];  	for (var i = 0; i < rank; i++)  		lengths [i] = originalArray.GetLength (i);  	var copyArray = Array.CreateInstance (et' lengths);  	context.RecordCopy (original' copyArray);  	if (rank == 1) {  		for (var i = 0; i < lengths [0]; i++)  			copyArray.SetValue (DeepCopyInner (originalArray.GetValue (i)' context)' i);  	} else if (rank == 2) {  		for (var i = 0; i < lengths [0]; i++)  			for (var j = 0; j < lengths [1]; j++)  				copyArray.SetValue (DeepCopyInner (originalArray.GetValue (i' j)' context)' i' j);  	} else {  		var index = new int[rank];  		var sizes = new int[rank];  		sizes [rank - 1] = 1;  		for (var k = rank - 2; k >= 0; k--)  			sizes [k] = sizes [k + 1] * lengths [k + 1];  		for (var i = 0; i < originalArray.Length; i++) {  			int k = i;  			for (int n = 0; n < rank; n++) {  				int offset = k / sizes [n];  				k = k - offset * sizes [n];  				index [n] = offset;  			}  			copyArray.SetValue (DeepCopyInner (originalArray.GetValue (index)' context)' index);  		}  	}  	return copyArray;  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeepCopierHelper,The following statement contains a magic number: if (rank == 1) {  	for (var i = 0; i < lengths [0]; i++)  		copyArray.SetValue (DeepCopyInner (originalArray.GetValue (i)' context)' i);  } else if (rank == 2) {  	for (var i = 0; i < lengths [0]; i++)  		for (var j = 0; j < lengths [1]; j++)  			copyArray.SetValue (DeepCopyInner (originalArray.GetValue (i' j)' context)' i' j);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < originalArray.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		copyArray.SetValue (DeepCopyInner (originalArray.GetValue (index)' context)' index);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeepCopierHelper,The following statement contains a magic number: if (rank == 1) {  	for (var i = 0; i < lengths [0]; i++)  		copyArray.SetValue (DeepCopyInner (originalArray.GetValue (i)' context)' i);  } else if (rank == 2) {  	for (var i = 0; i < lengths [0]; i++)  		for (var j = 0; j < lengths [1]; j++)  			copyArray.SetValue (DeepCopyInner (originalArray.GetValue (i' j)' context)' i' j);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < originalArray.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		copyArray.SetValue (DeepCopyInner (originalArray.GetValue (index)' context)' index);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeepCopierHelper,The following statement contains a magic number: if (rank == 2) {  	for (var i = 0; i < lengths [0]; i++)  		for (var j = 0; j < lengths [1]; j++)  			copyArray.SetValue (DeepCopyInner (originalArray.GetValue (i' j)' context)' i' j);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < originalArray.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		copyArray.SetValue (DeepCopyInner (originalArray.GetValue (index)' context)' index);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeepCopierHelper,The following statement contains a magic number: if (rank == 2) {  	for (var i = 0; i < lengths [0]; i++)  		for (var j = 0; j < lengths [1]; j++)  			copyArray.SetValue (DeepCopyInner (originalArray.GetValue (i' j)' context)' i' j);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < originalArray.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		copyArray.SetValue (DeepCopyInner (originalArray.GetValue (index)' context)' index);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeepCopierHelper,The following statement contains a magic number: for (var k = rank - 2; k >= 0; k--)  	sizes [k] = sizes [k + 1] * lengths [k + 1];  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,SerializeArray,The following statement contains a magic number: if (rank == 1) {  	for (int i = 0; i < lengths [0]; i++)  		SerializeInner (array.GetValue (i)' context' et);  } else if (rank == 2) {  	for (int i = 0; i < lengths [0]; i++)  		for (int j = 0; j < lengths [1]; j++)  			SerializeInner (array.GetValue (i' j)' context' et);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < array.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		SerializeInner (array.GetValue (index)' context' et);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,SerializeArray,The following statement contains a magic number: if (rank == 1) {  	for (int i = 0; i < lengths [0]; i++)  		SerializeInner (array.GetValue (i)' context' et);  } else if (rank == 2) {  	for (int i = 0; i < lengths [0]; i++)  		for (int j = 0; j < lengths [1]; j++)  			SerializeInner (array.GetValue (i' j)' context' et);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < array.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		SerializeInner (array.GetValue (index)' context' et);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,SerializeArray,The following statement contains a magic number: if (rank == 2) {  	for (int i = 0; i < lengths [0]; i++)  		for (int j = 0; j < lengths [1]; j++)  			SerializeInner (array.GetValue (i' j)' context' et);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < array.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		SerializeInner (array.GetValue (index)' context' et);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,SerializeArray,The following statement contains a magic number: if (rank == 2) {  	for (int i = 0; i < lengths [0]; i++)  		for (int j = 0; j < lengths [1]; j++)  			SerializeInner (array.GetValue (i' j)' context' et);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < array.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		SerializeInner (array.GetValue (index)' context' et);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,SerializeArray,The following statement contains a magic number: for (var k = rank - 2; k >= 0; k--)  	sizes [k] = sizes [k + 1] * lengths [k + 1];  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeserializeArray,The following statement contains a magic number: if (rank == 1) {  	for (int i = 0; i < lengths [0]; i++)  		array.SetValue (DeserializeInner (et' context)' i);  } else if (rank == 2) {  	for (int i = 0; i < lengths [0]; i++)  		for (int j = 0; j < lengths [1]; j++)  			array.SetValue (DeserializeInner (et' context)' i' j);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < array.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		array.SetValue (DeserializeInner (et' context)' index);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeserializeArray,The following statement contains a magic number: if (rank == 1) {  	for (int i = 0; i < lengths [0]; i++)  		array.SetValue (DeserializeInner (et' context)' i);  } else if (rank == 2) {  	for (int i = 0; i < lengths [0]; i++)  		for (int j = 0; j < lengths [1]; j++)  			array.SetValue (DeserializeInner (et' context)' i' j);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < array.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		array.SetValue (DeserializeInner (et' context)' index);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeserializeArray,The following statement contains a magic number: if (rank == 2) {  	for (int i = 0; i < lengths [0]; i++)  		for (int j = 0; j < lengths [1]; j++)  			array.SetValue (DeserializeInner (et' context)' i' j);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < array.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		array.SetValue (DeserializeInner (et' context)' index);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeserializeArray,The following statement contains a magic number: if (rank == 2) {  	for (int i = 0; i < lengths [0]; i++)  		for (int j = 0; j < lengths [1]; j++)  			array.SetValue (DeserializeInner (et' context)' i' j);  } else {  	var index = new int[rank];  	var sizes = new int[rank];  	sizes [rank - 1] = 1;  	for (var k = rank - 2; k >= 0; k--)  		sizes [k] = sizes [k + 1] * lengths [k + 1];  	for (var i = 0; i < array.Length; i++) {  		int k = i;  		for (int n = 0; n < rank; n++) {  			int offset = k / sizes [n];  			k = k - offset * sizes [n];  			index [n] = offset;  		}  		array.SetValue (DeserializeInner (et' context)' index);  	}  }  
Magic Number,Orleans.Serialization,SerializationManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Serialization\SerializationManager.cs,DeserializeArray,The following statement contains a magic number: for (var k = rank - 2; k >= 0; k--)  	sizes [k] = sizes [k + 1] * lengths [k + 1];  
Magic Number,Orleans.Streams,StreamHandshakeToken,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamHandshakeToken.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (GetType ().GetHashCode () * 397) ^ (Token != null ? Token.GetHashCode () : 0);  }  
Magic Number,Orleans.Streams,StreamHandshakeToken,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\Internal\StreamHandshakeToken.cs,GetHashCode,The following statement contains a magic number: return (GetType ().GetHashCode () * 397) ^ (Token != null ? Token.GetHashCode () : 0);  
Magic Number,Orleans.Streams,PubSubPublisherState,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\PubSubPublisherState.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Stream != null ? Stream.GetHashCode () : 0) * 397) ^ (Producer != null ? Producer.GetHashCode () : 0);  }  
Magic Number,Orleans.Streams,PubSubPublisherState,F:\newReposMay17\dotnet_orleans\src\Orleans\Streams\PubSub\PubSubPublisherState.cs,GetHashCode,The following statement contains a magic number: return ((Stream != null ? Stream.GetHashCode () : 0) * 397) ^ (Producer != null ? Producer.GetHashCode () : 0);  
Missing Default,Orleans.Runtime,TraceTelemetryConsumer,F:\newReposMay17\dotnet_orleans\src\Orleans\Telemetry\Consumers\TraceTelemetryConsumer.cs,TrackTrace,The following switch statement is missing a default case: switch (severity) {  case Severity.Error:  	Trace.TraceError (message);  	break;  case Severity.Info:  	Trace.TraceInformation (message);  	break;  case Severity.Verbose:  case Severity.Verbose2:  case Severity.Verbose3:  	Trace.WriteLine (message);  	break;  case Severity.Warning:  	Trace.TraceWarning (message);  	break;  case Severity.Off:  	return;  }  
Missing Default,Orleans.Runtime,MessagingStatisticsGroup,F:\newReposMay17\dotnet_orleans\src\Orleans\Statistics\MessagingStatisticsGroup.cs,OnMessageExpired,The following switch statement is missing a default case: switch (phase) {  case Phase.Send:  	expiredAtSendCounter.Increment ();  	break;  case Phase.Receive:  	expiredAtReceiveCounter.Increment ();  	break;  case Phase.Dispatch:  	expiredAtDispatchCounter.Increment ();  	break;  case Phase.Invoke:  	expiredAtInvokeCounter.Increment ();  	break;  case Phase.Respond:  	expiredAtRespondCounter.Increment ();  	break;  }  
Missing Default,Orleans.Runtime,AsynchAgent,F:\newReposMay17\dotnet_orleans\src\Orleans\Runtime\AsynchAgent.cs,AgentThreadProc,The following switch statement is missing a default case: switch (agent.OnFault) {  case FaultBehavior.CrashOnFault:  	Console.WriteLine ("The {0} agent has thrown an unhandled exception' {1}. The process will be terminated."' agent.Name' exc);  	log.Error (ErrorCode.Runtime_Error_100023' "AsynchAgent Run method has thrown an unhandled exception. The process will be terminated."' exc);  	log.Fail (ErrorCode.Runtime_Error_100024' "Terminating process because of an unhandled exception caught in AsynchAgent.Run.");  	break;  case FaultBehavior.IgnoreFault:  	log.Error (ErrorCode.Runtime_Error_100025' "AsynchAgent Run method has thrown an unhandled exception. The agent will exit."' exc);  	agent.State = ThreadState.Stopped;  	break;  case FaultBehavior.RestartOnFault:  	log.Error (ErrorCode.Runtime_Error_100026' "AsynchAgent Run method has thrown an unhandled exception. The agent will be restarted."' exc);  	agent.State = ThreadState.Stopped;  	try {  		agent.Start ();  	} catch (Exception ex) {  		log.Error (ErrorCode.Runtime_Error_100027' "Unable to restart AsynchAgent"' ex);  		agent.State = ThreadState.Stopped;  	}  	break;  }  
Missing Default,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,ToIPEndPoint,The following switch statement is missing a default case: switch (uri.Scheme) {  case "gwy.tcp":  	return new System.Net.IPEndPoint (System.Net.IPAddress.Parse (uri.Host)' uri.Port);  }  
Missing Default,Orleans.Runtime,Utils,F:\newReposMay17\dotnet_orleans\src\Orleans\Utils\Utils.cs,ToSiloAddress,The following switch statement is missing a default case: switch (uri.Scheme) {  case "gwy.tcp":  	return SiloAddress.New (uri.ToIPEndPoint ()' uri.Segments.Length > 1 ? int.Parse (uri.Segments [1]) : 0);  }  
Missing Default,Orleans.Runtime.Configuration,ClientConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClientConfiguration.cs,CheckGatewayProviderSettings,The following switch statement is missing a default case: switch (GatewayProvider) {  case GatewayProviderType.AzureTable:  	if (!UseAzureSystemStore)  		throw new ArgumentException ("Config specifies Azure based GatewayProviderType' but Azure element is not specified or not complete."' "GatewayProvider");  	break;  case GatewayProviderType.Config:  	if (!HasStaticGateways)  		throw new ArgumentException ("Config specifies Config based GatewayProviderType' but Gateway element(s) is/are not specified."' "GatewayProvider");  	break;  case GatewayProviderType.Custom:  	if (String.IsNullOrEmpty (CustomGatewayProviderAssemblyName))  		throw new ArgumentException ("Config specifies Custom GatewayProviderType' but CustomGatewayProviderAssemblyName attribute is not specified"' "GatewayProvider");  	break;  case GatewayProviderType.None:  	if (!UseAzureSystemStore && !HasStaticGateways)  		throw new ArgumentException ("Config does not specify GatewayProviderType' and also does not have the adequate defaults: no Azure and or Gateway element(s) are specified."' "GatewayProvider");  	break;  case GatewayProviderType.SqlServer:  	if (!UseSqlSystemStore)  		throw new ArgumentException ("Config specifies SqlServer based GatewayProviderType' but DeploymentId or DataConnectionString are not specified or not complete."' "GatewayProvider");  	break;  case GatewayProviderType.ZooKeeper:  	break;  }  
Missing Default,Orleans.Runtime.Configuration,NodeConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\NodeConfiguration.cs,Load,The following switch statement is missing a default case: switch (child.LocalName) {  case "Networking":  	if (child.HasAttribute ("Address")) {  		HostNameOrIPAddress = child.GetAttribute ("Address");  	}  	if (child.HasAttribute ("Port")) {  		Port = ConfigUtilities.ParseInt (child.GetAttribute ("Port")' "Non-numeric Port attribute value on Networking element for " + SiloName);  	}  	if (child.HasAttribute ("PreferredFamily")) {  		AddressType = ConfigUtilities.ParseEnum<AddressFamily> (child.GetAttribute ("PreferredFamily")' "Invalid preferred address family on Networking node. Valid choices are 'InterNetwork' and 'InterNetworkV6'");  	}  	break;  case "ProxyingGateway":  	ProxyGatewayEndpoint = ConfigUtilities.ParseIPEndPoint (child' Subnet).GetResult ();  	break;  case "Scheduler":  	if (child.HasAttribute ("MaxActiveThreads")) {  		MaxActiveThreads = ConfigUtilities.ParseInt (child.GetAttribute ("MaxActiveThreads")' "Non-numeric MaxActiveThreads attribute value on Scheduler element for " + SiloName);  		if (MaxActiveThreads < 1) {  			MaxActiveThreads = DEFAULT_MAX_ACTIVE_THREADS;  		}  	}  	if (child.HasAttribute ("DelayWarningThreshold")) {  		DelayWarningThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("DelayWarningThreshold")' "Non-numeric DelayWarningThreshold attribute value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("ActivationSchedulingQuantum")) {  		ActivationSchedulingQuantum = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("ActivationSchedulingQuantum")' "Non-numeric ActivationSchedulingQuantum attribute value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("TurnWarningLengthThreshold")) {  		TurnWarningLengthThreshold = ConfigUtilities.ParseTimeSpan (child.GetAttribute ("TurnWarningLengthThreshold")' "Non-numeric TurnWarningLengthThreshold attribute value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("MinDotNetThreadPoolSize")) {  		MinDotNetThreadPoolSize = ConfigUtilities.ParseInt (child.GetAttribute ("MinDotNetThreadPoolSize")' "Invalid ParseInt MinDotNetThreadPoolSize value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("Expect100Continue")) {  		Expect100Continue = ConfigUtilities.ParseBool (child.GetAttribute ("Expect100Continue")' "Invalid ParseBool Expect100Continue value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("DefaultConnectionLimit")) {  		DefaultConnectionLimit = ConfigUtilities.ParseInt (child.GetAttribute ("DefaultConnectionLimit")' "Invalid ParseInt DefaultConnectionLimit value on Scheduler element for " + SiloName);  	}  	if (child.HasAttribute ("UseNagleAlgorithm ")) {  		UseNagleAlgorithm = ConfigUtilities.ParseBool (child.GetAttribute ("UseNagleAlgorithm ")' "Invalid ParseBool UseNagleAlgorithm value on Scheduler element for " + SiloName);  	}  	break;  case "LoadShedding":  	if (child.HasAttribute ("Enabled")) {  		LoadSheddingEnabled = ConfigUtilities.ParseBool (child.GetAttribute ("Enabled")' "Invalid boolean value for Enabled attribute on LoadShedding attribute for " + SiloName);  	}  	if (child.HasAttribute ("LoadLimit")) {  		LoadSheddingLimit = ConfigUtilities.ParseInt (child.GetAttribute ("LoadLimit")' "Invalid integer value for LoadLimit attribute on LoadShedding attribute for " + SiloName);  		if (LoadSheddingLimit < 0) {  			LoadSheddingLimit = 0;  		}  		if (LoadSheddingLimit > 100) {  			LoadSheddingLimit = 100;  		}  	}  	break;  case "Tracing":  	ConfigUtilities.ParseTracing (this' child' SiloName);  	break;  case "Statistics":  	ConfigUtilities.ParseStatistics (this' child' SiloName);  	break;  case "Limits":  	ConfigUtilities.ParseLimitValues (LimitManager' child' SiloName);  	break;  case "Startup":  	if (child.HasAttribute ("Type")) {  		StartupTypeName = child.GetAttribute ("Type");  	}  	break;  case "Telemetry":  	ConfigUtilities.ParseTelemetry (child);  	break;  case "AdditionalAssemblyDirectories":  	ConfigUtilities.ParseAdditionalAssemblyDirectories (AdditionalAssemblyDirectories' child);  	break;  }  
Missing Default,Orleans.Runtime.Configuration,ClusterConfiguration,F:\newReposMay17\dotnet_orleans\src\Orleans\Configuration\ClusterConfiguration.cs,LoadFromXml,The following switch statement is missing a default case: switch (child.LocalName) {  case "Globals":  	Globals.Load (child);  	// set subnets so this is independent of order  	Defaults.Subnet = Globals.Subnet;  	foreach (var o in Overrides.Values) {  		o.Subnet = Globals.Subnet;  	}  	if (Globals.SeedNodes.Count > 0) {  		primaryNode = Globals.SeedNodes [0];  	}  	break;  case "Defaults":  	Defaults.Load (child);  	Defaults.Subnet = Globals.Subnet;  	break;  case "Override":  	overrideXml [child.GetAttribute ("Node")] = WriteXml (child);  	break;  }  
Missing Default,Orleans.Providers,ProviderStateManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\ProviderStateManager.cs,PresetState,The following switch statement is missing a default case: switch (state) {  case ProviderState.None:  	throw new ProviderStateException ("Provider state can not be set to none.");  case ProviderState.Initialized:  	switch (State) {  	case ProviderState.None:  		return true;  	}  	break;  case ProviderState.Started:  	switch (State) {  	case ProviderState.None:  		throw new ProviderStateException ("Trying to start a provider that hasn't been initialized.");  	case ProviderState.Initialized:  		return true;  	case ProviderState.Closed:  		throw new ProviderStateException ("Trying to start a provider that has been closed.");  	}  	break;  case ProviderState.Closed:  	switch (State) {  	case ProviderState.None:  		throw new ProviderStateException ("Trying to close a provider that hasn't been initialized.");  	case ProviderState.Initialized:  	case ProviderState.Started:  		return true;  	}  	return true;  }  
Missing Default,Orleans.Providers,ProviderStateManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\ProviderStateManager.cs,PresetState,The following switch statement is missing a default case: switch (State) {  case ProviderState.None:  	return true;  }  
Missing Default,Orleans.Providers,ProviderStateManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\ProviderStateManager.cs,PresetState,The following switch statement is missing a default case: switch (State) {  case ProviderState.None:  	throw new ProviderStateException ("Trying to start a provider that hasn't been initialized.");  case ProviderState.Initialized:  	return true;  case ProviderState.Closed:  	throw new ProviderStateException ("Trying to start a provider that has been closed.");  }  
Missing Default,Orleans.Providers,ProviderStateManager,F:\newReposMay17\dotnet_orleans\src\Orleans\Providers\ProviderStateManager.cs,PresetState,The following switch statement is missing a default case: switch (State) {  case ProviderState.None:  	throw new ProviderStateException ("Trying to close a provider that hasn't been initialized.");  case ProviderState.Initialized:  case ProviderState.Started:  	return true;  }  
