Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OrleansTelemetryConsumers.Counters,OrleansPerfCounterTelemetryConsumer,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\OrleansPerfCounterTelemetryConsumer.cs,WriteMetric,Cyclomatic complexity of the method is 9
Complex Method,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,OnStart,Cyclomatic complexity of the method is 11
Long Identifier,OrleansTelemetryConsumers.Counters,OrleansPerfCounterTelemetryConsumer,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\OrleansPerfCounterTelemetryConsumer.cs,,The length of the parameter ExplainHowToCreateOrleansPerfCounters is 37.
Long Identifier,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,,The length of the parameter promotedFinalizationMemoryFromGen0PF is 36.
Long Statement,OrleansTelemetryConsumers.Counters,OrleansPerfCounterTelemetryConsumer,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\OrleansPerfCounterTelemetryConsumer.cs,AreWindowsPerfCountersAvailable,The length of the statement  "                    logger.Warn(ErrorCode.PerfCounterNotFound' "Windows perf counters are only available on Windows :) -- defaulting to in-memory counters."); " is 138.
Long Statement,OrleansTelemetryConsumers.Counters,OrleansPerfCounterTelemetryConsumer,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\OrleansPerfCounterTelemetryConsumer.cs,Initialize,The length of the statement  "                // TODO: get rid of this static access. Telemetry consumers now allow being injected with dependencies' so extract it as such " is 125.
Long Statement,OrleansTelemetryConsumers.Counters,OrleansPerfCounterTelemetryConsumer,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\OrleansPerfCounterTelemetryConsumer.cs,WriteMetric,The length of the statement  "                if (this.logger.IsEnabled(LogLevel.Trace)) this.logger.Trace(ErrorCode.PerfCounterWriting' "Writing perf counter {0}"' perfCounterName); " is 136.
Long Statement,OrleansTelemetryConsumers.Counters,OrleansPerfCounterTelemetryConsumer,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\OrleansPerfCounterTelemetryConsumer.cs,WriteMetric,The length of the statement  "                this.logger.Error(ErrorCode.PerfCounterUnableToWrite' string.Format("Unable to write to Windows perf counter '{0}'"' statsName)' ex); " is 133.
Long Statement,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,InitCpuMemoryCounters,The length of the statement  "                promotedFinalizationMemoryFromGen0PF = new PerformanceCounter(".NET CLR Memory"' "Promoted Finalization-Memory from Gen 0"' thisProcess' true); " is 143.
Long Statement,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,InitCpuMemoryCounters,The length of the statement  "                    "Error initializing CPU & Memory perf counters - you need to repair Windows perf counter config on this machine with 'lodctr /r' command"); " is 139.
Long Statement,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,OnStart,The length of the statement  "                    "CPU & Memory perf counters did not initialize correctly - try repairing Windows perf counter config on this machine with 'lodctr /r' command"); " is 144.
Long Statement,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,OnStart,The length of the statement  "            IntValueStatistic.FindOrCreate(StatisticNames.RUNTIME_GC_TOTALMEMORYKB' () => (long)((MemoryUsage + KB - 1.0) / KB)); // Round up " is 129.
Long Statement,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,OnStart,The length of the statement  "                FloatValueStatistic.FindOrCreate(StatisticNames.RUNTIME_GC_ALLOCATEDBYTESINKBPERSEC' () => allocatedBytesPerSecPF.NextValue() / KB); " is 132.
Long Statement,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,OnStart,The length of the statement  "                FloatValueStatistic.FindOrCreate(StatisticNames.RUNTIME_GC_PROMOTEDMEMORYFROMGEN1KB' () => promotedMemoryFromGen1PF.NextValue() / KB); " is 134.
Long Statement,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,OnStart,The length of the statement  "                FloatValueStatistic.FindOrCreate(StatisticNames.RUNTIME_GC_LARGEOBJECTHEAPSIZEKB' () => largeObjectHeapSizePF.NextValue() / KB); " is 128.
Long Statement,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,OnStart,The length of the statement  "                FloatValueStatistic.FindOrCreate(StatisticNames.RUNTIME_GC_PROMOTEDMEMORYFROMGEN0KB' () => promotedFinalizationMemoryFromGen0PF.NextValue() / KB); " is 146.
Long Statement,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,OnStart,The length of the statement  "            IntValueStatistic.FindOrCreate(StatisticNames.RUNTIME_MEMORY_TOTALPHYSICALMEMORYMB' () => (long)((TotalPhysicalMemory / KB) / KB)); " is 131.
Long Statement,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,OnStart,The length of the statement  "                IntValueStatistic.FindOrCreate(StatisticNames.RUNTIME_MEMORY_AVAILABLEMEMORYMB' () => (long)((AvailableMemory / KB) / KB)); // Round up " is 135.
Magic Number,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,CheckCpuUsage,The following statement contains a magic number: CpuUsage = (CpuUsage + 2 * currentUsage) / 3;
Magic Number,Orleans.Statistics,PerfCounterEnvironmentStatistics,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\Statistics\PerfCounterEnvironmentStatistics.cs,CheckCpuUsage,The following statement contains a magic number: CpuUsage = (CpuUsage + 2 * currentUsage) / 3;
Missing Default,OrleansTelemetryConsumers.Counters,OrleansPerfCounterTelemetryConsumer,D:\research\architectureSmells\repos\dotnet_orleans\src\TelemetryConsumers\Orleans.TelemetryConsumers.Counters\OrleansPerfCounterTelemetryConsumer.cs,WriteMetric,The following switch statement is missing a default case: switch (mode)                  {                      case UpdateMode.Increment:                          if (value.HasValue)                          {                              cd.PerfCounter.IncrementBy((long)value.Value);                          }                          else                          {                              cd.PerfCounter.Increment();                          }                          break;                      case UpdateMode.Decrement:                          if (value.HasValue)                          {                              cd.PerfCounter.RawValue = cd.PerfCounter.RawValue - (long)value.Value;                          }                          else                          {                              cd.PerfCounter.Decrement();                          }                          break;                      case UpdateMode.Set:                          cd.PerfCounter.RawValue = (long)value.Value;                          break;                  }
