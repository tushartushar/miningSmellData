Implementation smell,Namespace,Class,File,Method,Description
Long Method,Orleans.Transactions.State,ReadWriteLock<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ReaderWriterLock.cs,EnterLock,The method has 109 lines of code.
Long Method,Orleans.Transactions.State,ReadWriteLock<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ReaderWriterLock.cs,LockWork,The method has 101 lines of code.
Complex Method,Orleans.Transactions,TransactionAgent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgent.cs,CollateParticipants,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Transactions,TransactionalStateStorageProviderWrapper<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalStateStorageProviderWrapper.cs,Store,Cyclomatic complexity of the method is 10
Complex Method,Orleans.Transactions,CommitQueue,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\Utilities\CommitQueue.cs,Find,Cyclomatic complexity of the method is 11
Complex Method,Orleans.Transactions.State,ReadWriteLock<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ReaderWriterLock.cs,EnterLock,Cyclomatic complexity of the method is 17
Complex Method,Orleans.Transactions.State,ReadWriteLock<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ReaderWriterLock.cs,LockWork,Cyclomatic complexity of the method is 22
Complex Method,Orleans.Transactions.State,ReadWriteLock<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ReaderWriterLock.cs,LockExits,Cyclomatic complexity of the method is 15
Complex Method,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,EnqueueCommit,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,NotifyOfAbort,Cyclomatic complexity of the method is 10
Complex Method,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,StorageWork,Cyclomatic complexity of the method is 10
Complex Method,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,CheckProgressOfCommitQueue,Cyclomatic complexity of the method is 12
Long Parameter List,Orleans.Transactions.Abstractions,ITransactionalResourceExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\Abstractions\ITransactionalResourceExtension.cs,Prepare,The method has 5 parameters. Parameters: resourceId' transactionId' accessCount' timeStamp' transactionManager
Long Parameter List,Orleans.Transactions.Abstractions,ITransactionalStateStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\Abstractions\ITransactionalStateStorage.cs,Store,The method has 5 parameters. Parameters: expectedETag' metadata' statesToPrepare' commitUpTo' abortAfter
Long Parameter List,Orleans.Transactions.Abstractions,TransactionalStorageLoadResponse<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\Abstractions\ITransactionalStateStorage.cs,TransactionalStorageLoadResponse,The method has 5 parameters. Parameters: etag' committedState' committedSequenceId' metadata' pendingStates
Long Parameter List,Orleans.Transactions.Abstractions,ITransactionManager,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\Abstractions\ITransactionManager.cs,PrepareAndCommit,The method has 5 parameters. Parameters: transactionId' accessCount' timeStamp' writerResources' totalParticipants
Long Parameter List,Orleans.Transactions.Abstractions,ITransactionManagerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\Abstractions\ITransactionManagerExtension.cs,PrepareAndCommit,The method has 6 parameters. Parameters: resourceId' transactionId' accessCount' timeStamp' writeResources' totalParticipants
Long Parameter List,Orleans.Transactions.Abstractions,ITransactionManagerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\Abstractions\ITransactionManagerExtension.cs,Prepared,The method has 5 parameters. Parameters: resourceId' transactionId' timestamp' resource' status
Long Parameter List,Orleans.Transactions,TransactionalResourceExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionalResourceExtension.cs,Prepare,The method has 5 parameters. Parameters: resourceId' transactionId' accessCount' timeStamp' transactionManager
Long Parameter List,Orleans.Transactions,TransactionManagerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionManagerExtension.cs,PrepareAndCommit,The method has 6 parameters. Parameters: resourceId' transactionId' accessCount' timeStamp' writeResources' totalResources
Long Parameter List,Orleans.Transactions,TransactionManagerExtension,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionManagerExtension.cs,Prepared,The method has 5 parameters. Parameters: resourceId' transactionId' timestamp' resource' status
Long Parameter List,Orleans.Transactions,ITransactionalStateStorageEvents,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\StorageBatch.cs,Prepare,The method has 5 parameters. Parameters: sequenceNumber' transactionId' timestamp' transactionManager' state
Long Parameter List,Orleans.Transactions,StorageBatch<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\StorageBatch.cs,Prepare,The method has 5 parameters. Parameters: sequenceNumber' transactionId' timestamp' transactionManager' state
Long Parameter List,Orleans.Transactions,TransactionalState<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalState.cs,TransactionalState,The method has 5 parameters. Parameters: transactionalStateConfiguration' context' copier' grainRuntime' loggerFactory
Long Parameter List,Orleans.Transactions,TransactionalStateStorageProviderWrapper<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalStateStorageProviderWrapper.cs,Store,The method has 5 parameters. Parameters: expectedETag' metadata' statesToPrepare' commitUpTo' abortAfter
Long Parameter List,Orleans.Transactions,TransactionCommitter<TService>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\TOC\TransactionCommitter.cs,TransactionCommitter,The method has 5 parameters. Parameters: config' context' copier' grainRuntime' loggerFactory
Long Parameter List,Orleans.Transactions.State,ConfirmationWorker<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ConfirmationWorker.cs,ConfirmationWorker,The method has 7 parameters. Parameters: options' me' storageWorker' getStorageBatch' logger' timerManager' activationLifetime
Long Parameter List,Orleans.Transactions.State,Confirmation,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ConfirmationWorker.cs,Confirmation,The method has 5 parameters. Parameters: paricipant' transactionId' timestamp' call' logger
Long Parameter List,Orleans.Transactions.State,ReadWriteLock<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ReaderWriterLock.cs,ReadWriteLock,The method has 5 parameters. Parameters: options' queue' storageWorker' logger' activationLifetime
Long Parameter List,Orleans.Transactions.State,ReadWriteLock<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ReaderWriterLock.cs,EnterLock,The method has 5 parameters. Parameters: transactionId' priority' counter' isRead' task
Long Parameter List,Orleans.Transactions.State,ReadWriteLock<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ReaderWriterLock.cs,HasConflict,The method has 5 parameters. Parameters: isRead' priority' transactionId' group' resolvable
Long Parameter List,Orleans.Transactions.State,TransactionManager<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionManager.cs,PrepareAndCommit,The method has 5 parameters. Parameters: transactionId' accessCount' timeStamp' writeResources' totalResources
Long Parameter List,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,TransactionQueue,The method has 8 parameters. Parameters: options' resource' deactivate' storage' clock' logger' timerManager' activationLifetime
Long Parameter List,Orleans.Transactions.TOC,TocTransactionQueue<TService>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\TOC\TocTransactionQueue.cs,TocTransactionQueue,The method has 9 parameters. Parameters: service' options' resource' deactivate' storage' clock' logger' timerManager' activationLifetime
Long Identifier,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,,The length of the parameter TransactionsStartedTotalMetric is 30.
Long Identifier,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,,The length of the parameter TransactionsStartedPerSecondMetric is 34.
Long Identifier,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,,The length of the parameter SuccessfulTransactionsTotalMetric is 33.
Long Identifier,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,,The length of the parameter SuccessfulTransactionsPerSecondMetric is 37.
Long Identifier,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,,The length of the parameter FailedTransactionsPerSecondMetric is 33.
Long Identifier,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,,The length of the parameter ThrottledTransactionsTotalMetric is 32.
Long Identifier,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,,The length of the parameter ThrottledTransactionsPerSecondMetric is 36.
Long Identifier,Orleans.Transactions,TransactionalState<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalState.cs,TransactionalState,The length of the parameter transactionalStateConfiguration is 31.
Long Identifier,Orleans.Configuration,TransactionalStateOptions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalStateOptions.cs,,The length of the parameter DefaultRemoteTransactionPingFrequency is 37.
Long Statement,Orleans.Transactions,ContextResourceFactoryExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\ContextResourceFactoryExtensions.cs,GetResourceFactoryRegistry,The length of the statement  "            ResourceFactoryRegistry<T> result = (context.Items.TryGetValue(resourceFactoryRegistryName' out object resourceFactoryRegistryObj)) " is 131.
Long Statement,Orleans.Transactions,TransactionAgent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgent.cs,CommitReadOnlyTransaction,The length of the statement  "                            logger.Debug($"{stopwatch.Elapsed.TotalMilliseconds:f2} fail {transactionInfo.TransactionId} prepare response status={status}"); " is 128.
Long Statement,Orleans.Transactions,TransactionAgent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgent.cs,CommitReadOnlyTransaction,The length of the statement  "                this.logger.LogWarning(ex' "Unknown error while commiting readonly transaction {TransactionId}"' transactionInfo.TransactionId); " is 128.
Long Statement,Orleans.Transactions,TransactionAgent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgent.cs,CommitReadOnlyTransaction,The length of the statement  "                        logger.Debug($"{stopwatch.Elapsed.TotalMilliseconds:f2} failure aborting {transactionInfo.TransactionId} CommitReadOnly"); " is 122.
Long Statement,Orleans.Transactions,TransactionAgent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgent.cs,CommitReadWriteTransaction,The length of the statement  "                    .PrepareAndCommit(manager.Key.Name' transactionInfo.TransactionId' manager.Value' transactionInfo.TimeStamp' writeResources' resources.Count); " is 142.
Long Statement,Orleans.Transactions,TransactionAgent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgent.cs,CommitReadWriteTransaction,The length of the statement  "                    logger.Debug($"{stopwatch.Elapsed.TotalMilliseconds:f2} timeout {transactionInfo.TransactionId} on CommitReadWriteTransaction"); " is 128.
Long Statement,Orleans.Transactions,TransactionAgent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgent.cs,CommitReadWriteTransaction,The length of the statement  "                    logger.Debug($"{stopwatch.Elapsed.TotalMilliseconds:f2} failure {transactionInfo.TransactionId} CommitReadWriteTransaction"); " is 125.
Long Statement,Orleans.Transactions,TransactionAgent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgent.cs,CommitReadWriteTransaction,The length of the statement  "                        logger.Debug($"{stopwatch.Elapsed.TotalMilliseconds:f2} failure aborting {transactionInfo.TransactionId} CommitReadWriteTransaction"); " is 134.
Long Statement,Orleans.Transactions,TransactionAgent,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgent.cs,CollateParticipants,The length of the statement  "                        : throw new ArgumentOutOfRangeException(nameof(participants)' "Only one priority transaction manager allowed in transaction"); " is 126.
Long Statement,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,OnStart,The length of the statement  "            this.timer = new Timer(ReportMetrics' null' this.statisticsOptions.PerfCountersWriteInterval' this.statisticsOptions.PerfCountersWriteInterval); " is 144.
Long Statement,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,ReportMetrics,The length of the statement  "            this.telemetryProducer.TrackMetric(TransactionsStartedPerSecondMetric' PerSecond(this.lastReported.TransactionsStarted' currentReported.TransactionsStarted' reportPeriod)); " is 172.
Long Statement,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,ReportMetrics,The length of the statement  "            this.telemetryProducer.TrackMetric(SuccessfulTransactionsPerSecondMetric' PerSecond(this.lastReported.TransactionsSucceeded' currentReported.TransactionsSucceeded' reportPeriod)); " is 179.
Long Statement,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,ReportMetrics,The length of the statement  "            this.telemetryProducer.TrackMetric(FailedTransactionsPerSecondMetric' PerSecond(this.lastReported.TransactionsFailed' currentReported.TransactionsFailed' reportPeriod)); " is 169.
Long Statement,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,ReportMetrics,The length of the statement  "            this.telemetryProducer.TrackMetric(ThrottledTransactionsPerSecondMetric' PerSecond(this.lastReported.TransactionsThrottled' currentReported.TransactionsThrottled' reportPeriod)); " is 178.
Long Statement,Orleans.Transactions,TransactionOverloadDetector,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionOverloadDetector.cs,RecordStatistics,The length of the statement  "            this.transactionStartedPerSecond = CalculateTps(this.lastStatistics.TransactionsStarted' this.lastCheckTime' current.TransactionsStarted' now); " is 143.
Long Statement,Orleans.Transactions,TransactionOverloadDetector,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionOverloadDetector.cs,IsOverloaded,The length of the statement  "            double txPerSecondCurrently = CalculateTps(this.lastStatistics.TransactionsStarted' this.lastCheckTime' this.statistics.TransactionsStarted' now); " is 146.
Long Statement,Orleans.Transactions,TransactionRecord<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionRecord.cs,ToString,The length of the statement  "                    return $"RCE tid={TransactionId} v{SequenceNumber} pip={PrepareIsPersisted} ls={LastSent.HasValue} ro={IsReadOnly} rtb={ReadyToCommit} tm={TransactionManager}"; " is 160.
Long Statement,Orleans.Transactions,NamedTransactionalStateStorageFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\NamedTransactionalStateStorageFactory.cs,Create,The length of the statement  "            if (grainStorage != null) return new TransactionalStateStorageProviderWrapper<TState>(grainStorage' stateName' context' this.loggerFactory); " is 140.
Long Statement,Orleans.Transactions,NamedTransactionalStateStorageFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\NamedTransactionalStateStorageFactory.cs,Create,The length of the statement  "                ? new InvalidOperationException($"No default {nameof(ITransactionalStateStorageFactory)} nor {nameof(IGrainStorage)} was found while attempting to create transactional state storage.") " is 184.
Long Statement,Orleans.Transactions,NamedTransactionalStateStorageFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\NamedTransactionalStateStorageFactory.cs,Create,The length of the statement  "                : new InvalidOperationException($"No {nameof(ITransactionalStateStorageFactory)} nor {nameof(IGrainStorage)} with the name {storageName} was found while attempting to create transactional state storage."); " is 205.
Long Statement,Orleans.Transactions,TransactionalState<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalState.cs,Participate,The length of the statement  "            lifecycle.Subscribe<TransactionalState<TState>>(GrainLifecycleStage.SetupState' (ct) => OnSetupState(ct' SetupResourceFactory)); " is 128.
Long Statement,Orleans.Transactions,TransactionalState<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalState.cs,OnSetupState,The length of the statement  "            this.participantId = new ParticipantId(this.config.StateName' this.context.GrainInstance.GrainReference' this.config.SupportedRoles); " is 133.
Long Statement,Orleans.Transactions,TransactionalState<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalState.cs,OnSetupState,The length of the statement  "            this.logger = loggerFactory.CreateLogger($"{context.GrainType.Name}.{this.config.StateName}.{this.context.GrainIdentity.IdentityString}"); " is 138.
Long Statement,Orleans.Transactions,TransactionalState<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalState.cs,OnSetupState,The length of the statement  "            ITransactionalStateStorage<TState> storage = storageFactory.Create<TState>(this.config.StorageName' this.config.StateName); " is 123.
Long Statement,Orleans.Transactions,TransactionalState<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalState.cs,OnSetupState,The length of the statement  "            this.queue = new TransactionQueue<TState>(options' this.participantId' deactivate' storage' clock' logger' timerManager' this.activationLifetime); " is 146.
Long Statement,Orleans.Transactions,TransactionalStateFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalStateFactory.cs,Create,The length of the statement  "            TransactionalState<TState> transactionalState = ActivatorUtilities.CreateInstance<TransactionalState<TState>>(this.context.ActivationServices' config' this.context); " is 165.
Long Statement,Orleans.Transactions,TransactionalStateStorageProviderWrapper<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalStateStorageProviderWrapper.cs,Load,The length of the statement  "            return new TransactionalStorageLoadResponse<TState>(stateStorage.Etag' stateStorage.State.CommittedState' stateStorage.State.CommittedSequenceId' stateStorage.State.Metadata' stateStorage.State.PendingStates); " is 209.
Long Statement,Orleans.Transactions,TransactionalStateStorageProviderWrapper<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalStateStorageProviderWrapper.cs,Store,The length of the statement  "                    throw new InvalidOperationException($"Transactional state corrupted. Missing prepare record (SequenceId={commitUpTo.Value}) for committed transaction."); " is 153.
Long Statement,Orleans.Transactions,TransactionalStateStorageProviderWrapper<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionalStateStorageProviderWrapper.cs,GetStateStorage,The length of the statement  "            return new StateStorageBridge<TransactionalStateRecord<TState>>(fullStateName' this.context.GrainInstance.GrainReference' grainStorage' this.loggerFactory); " is 156.
Long Statement,Orleans.Transactions,TransactionCommitter<TService>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\TOC\TransactionCommitter.cs,OnSetupState,The length of the statement  "            this.participantId = new ParticipantId(this.config.ServiceName' this.context.GrainInstance.GrainReference' ParticipantId.Role.Resource | ParticipantId.Role.PriorityManager); " is 173.
Long Statement,Orleans.Transactions,TransactionCommitter<TService>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\TOC\TransactionCommitter.cs,OnSetupState,The length of the statement  "            this.logger = loggerFactory.CreateLogger($"{context.GrainType.Name}.{this.config.ServiceName}.{this.context.GrainIdentity.IdentityString}"); " is 140.
Long Statement,Orleans.Transactions,TransactionCommitter<TService>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\TOC\TransactionCommitter.cs,OnSetupState,The length of the statement  "            ITransactionalStateStorage<OperationState> storage = storageFactory.Create<OperationState>(this.config.StorageName' this.config.ServiceName); " is 141.
Long Statement,Orleans.Transactions,TransactionCommitter<TService>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\TOC\TransactionCommitter.cs,OnSetupState,The length of the statement  "            this.queue = new TocTransactionQueue<TService>(service' options' this.participantId' deactivate' storage' clock' logger' timerManager' this.activationLifetime); " is 160.
Long Statement,Orleans.Transactions,TransactionCommitter<TService>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\TOC\TransactionCommitter.cs,OnSetupState,The length of the statement  "            this.context.RegisterResourceFactory<ITransactionManager>(this.config.ServiceName' () => new TransactionManager<OperationState>(this.queue)); " is 141.
Long Statement,Orleans.Transactions,TransactionCommitterFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\TOC\TransactionCommitterFactory.cs,Create,The length of the statement  "            TransactionCommitter<TService> transactionalState = ActivatorUtilities.CreateInstance<TransactionCommitter<TService>>(this.context.ActivationServices' config' this.context); " is 173.
Long Statement,Orleans.Transactions,CommitQueue,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\Utilities\CommitQueue.cs,Add,The length of the statement  "                throw new ArgumentException($"elements must be added in timestamp order' but {entry.Timestamp:o} is before {buffer[(pos + Count - 1) % buffer.Length].Timestamp:o}"' nameof(entry)); " is 180.
Long Statement,Orleans.Transactions.State,ConfirmationWorker<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ConfirmationWorker.cs,TryCollect,The length of the statement  "                this.logger.LogWarning(ex' "Error occured while cleaning up transaction {TransactionId} from commit log.  Will retry."' transactionId); " is 135.
Long Statement,Orleans.Transactions.State,Confirmation,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ConfirmationWorker.cs,Confirmed,The length of the statement  "                    logger.LogWarning(ex' "Confirmation of transaction {TransactionId} with timestamp {Timestamp} to participant {Participant} failed.  Retrying"' this.transactionId' this.timestamp' this.participant); " is 197.
Long Statement,Orleans.Transactions.State,ReadWriteLock<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ReaderWriterLock.cs,LockWork,The length of the statement  "                                logger.LogWarning("Break-lock timeout for transactions {TransactionIds}. {Late}ms late"' txlist' Math.Floor(late.TotalMilliseconds)); " is 133.
Long Statement,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,EnqueueCommit,The length of the statement  "                                this.storageBatch.Prepare(record.SequenceNumber' record.TransactionId' record.Timestamp' record.TransactionManager' record.State); " is 130.
Long Statement,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,EnqueueCommit,The length of the statement  "                                          .Prepared(record.TransactionManager.Name' record.TransactionId' record.Timestamp' this.resource' TransactionalStatus.Ok) " is 120.
Long Statement,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,NotifyOfPrepared,The length of the statement  "                logger.Trace("NotifyOfPrepared - TransactionId:{TransactionId} Timestamp:{Timestamp}' TransactionalStatus{TransactionalStatus}"' transactionId' timeStamp' status); " is 163.
Long Statement,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,NotifyOfAbort,The length of the statement  "                            this.logger.LogWarning(ex' "Failed to notify all transaction participants of cancellation.  TransactionId: {TransactionId}' Timestamp: {Timestamp}' Status: {Status}"' entry.TransactionId' entry.Timestamp' status); " is 213.
Long Statement,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,NotifyOfConfirm,The length of the statement  "            remoteEntry.ConfirmationResponsePromise = remoteEntry.ConfirmationResponsePromise ?? new TaskCompletionSource<bool>(TaskCreationOptions.RunContinuationsAsynchronously); " is 168.
Long Statement,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,NotifyOfCancel,The length of the statement  "                logger.Trace("{MethodName}. TransactionId: {TransactionId}' TimeStamp: {TimeStamp} Status: {TransactionalStatus}"' nameof(NotifyOfCancel)' transactionId' timeStamp' status); " is 173.
Long Statement,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,Restore,The length of the statement  "                logger.Debug($"Load v{this.stableSequenceNumber} {loadresponse.PendingStates.Count}p {storageBatch.MetaData.CommitRecords.Count}c"); " is 132.
Long Statement,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,CollectEventsForBatch,The length of the statement  "                                        this.logger.Trace("Confirmed remote commit v{SequenceNumber}. TransactionId:{TransactionId} Timestamp:{Timestamp} TransactionManager:{TransactionManager}"' entry.SequenceNumber' entry.TransactionId' entry.Timestamp' entry.TransactionManager); " is 242.
Long Statement,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,OnLocalCommit,The length of the statement  "            this.storageBatch.Prepare(entry.SequenceNumber' entry.TransactionId' entry.Timestamp' entry.TransactionManager' entry.State); " is 125.
Complex Conditional,Orleans.Transactions.State,ReadWriteLock<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ReaderWriterLock.cs,LockExits,The conditional expression  "cachedMin == DateTime.MaxValue                      || !currentGroup.TryGetValue(cachedMinId' out var record)                      || record.Role != CommitRole.NotYetDetermined                      || record.Timestamp != cachedMin"  is complex.
Magic Number,Orleans.Transactions,IdComparer,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\ParticipantId.cs,GetHashCode,The following statement contains a magic number: return (idHashCode * 397) ^ (referenceHashCode);
Magic Number,Orleans.Transactions,TransactionAgentStatisticsReporter,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionAgentStatisticsReporter.cs,PerSecond,The following statement contains a magic number: return ((end - start) * 1000) / Math.Max(1'(long)time.TotalMilliseconds);
Magic Number,Orleans.Transactions,TransactionOverloadDetector,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionOverloadDetector.cs,IsOverloaded,The following statement contains a magic number: var aggregratedTxPerSecond = (this.transactionStartedPerSecond + (2.0 * txPerSecondCurrently)) / 3.0;
Magic Number,Orleans.Transactions,TransactionOverloadDetector,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionOverloadDetector.cs,IsOverloaded,The following statement contains a magic number: var aggregratedTxPerSecond = (this.transactionStartedPerSecond + (2.0 * txPerSecondCurrently)) / 3.0;
Magic Number,Orleans.Transactions,TransactionOverloadDetector,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionOverloadDetector.cs,CalculateTps,The following statement contains a magic number: return (deltaTime.TotalMilliseconds < 1000)                  ? deltaCounter                  : (deltaCounter * 1000.0) / deltaTime.TotalMilliseconds;
Magic Number,Orleans.Transactions,TransactionOverloadDetector,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\DistributedTM\TransactionOverloadDetector.cs,CalculateTps,The following statement contains a magic number: return (deltaTime.TotalMilliseconds < 1000)                  ? deltaCounter                  : (deltaCounter * 1000.0) / deltaTime.TotalMilliseconds;
Magic Number,Orleans.Transactions,CommitQueue,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\Utilities\CommitQueue.cs,Find,The following statement contains a magic number: int mid = (left + right) / 2;
Magic Number,Orleans.Transactions.State,ActivationLifetime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ActivationLifetime.cs,OnStopAsync,The following statement contains a magic number: var maxTime = TimeSpan.FromSeconds(5);
Magic Number,Orleans.Transactions.State,ActivationLifetime,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\ActivationLifetime.cs,OnStopAsync,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(10));
Magic Number,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,EnqueueCommit,The following statement contains a magic number: switch (record.Role)                  {                      case CommitRole.ReadOnly:                          {                              // no extra actions needed                              break;                          }                        case CommitRole.LocalCommit:                          {                              // process prepared messages received ahead of time                              if (unprocessedPreparedMessages.TryGetValue(record.Timestamp' out PreparedMessages info))                              {                                  if (info.Status == TransactionalStatus.Ok)                                  {                                      record.WaitCount -= info.Count;                                  }                                  else                                  {                                      await AbortCommits(info.Status' commitQueue.Count - 1);                                        this.RWLock.Notify();                                  }                                  unprocessedPreparedMessages.Remove(record.Timestamp);                              }                              break;                          }                        case CommitRole.RemoteCommit:                          {                                // optimization: can immediately proceed if dependency is implied                              bool behindRemoteEntryBySameTM = false;                                  /* disabled - jbragg - TODO - revisit                                  commitQueue.Count >= 2                                  && commitQueue[commitQueue.Count - 2] is TransactionRecord<TState> rce                                  && rce.Role == CommitRole.RemoteCommit                                  && rce.TransactionManager.Equals(record.TransactionManager);                                  */                                if (record.NumberWrites > 0)                              {                                  this.storageBatch.Prepare(record.SequenceNumber' record.TransactionId' record.Timestamp' record.TransactionManager' record.State);                              }                              else                              {                                  this.storageBatch.Read(record.Timestamp);                              }                                this.storageBatch.FollowUpAction(() =>                              {                                  if (logger.IsEnabled(LogLevel.Trace))                                  {                                      logger.Trace("persisted {Record}"' record);                                  }                                    record.PrepareIsPersisted = true;                                    if (behindRemoteEntryBySameTM)                                  {                                      if (logger.IsEnabled(LogLevel.Trace))                                      {                                          logger.Trace("Sending immediate prepared {Record}"' record);                                      }                                      // can send prepared message immediately after persisting prepare record                                      record.TransactionManager.Reference.AsReference<ITransactionManagerExtension>()                                            .Prepared(record.TransactionManager.Name' record.TransactionId' record.Timestamp' this.resource' TransactionalStatus.Ok)                                            .Ignore();                                      record.LastSent = DateTime.UtcNow;                                  }                              });                              break;                          }                        default:                          {                              logger.LogError(777' "internal error: impossible case {CommitRole}"' record.Role);                              throw new NotSupportedException($"{record.Role} is not a supported CommitRole.");                          }                  }
Magic Number,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,NotifyOfPrepared,The following statement contains a magic number: logger.Error(666' $"transaction abort due to internal error in {nameof(NotifyOfPrepared)}: Wrong commit type");
Magic Number,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,NotifyOfAbort,The following statement contains a magic number: switch (entry.Role)              {                  case CommitRole.NotYetDetermined:                      {                          // cannot notify anyone. TA will detect broken lock during prepare.                          break;                      }                  case CommitRole.RemoteCommit:                      {                          if (logger.IsEnabled(LogLevel.Trace))                              logger.Trace("aborting status={Status} {Entry}"' status' entry);                            entry.ConfirmationResponsePromise?.TrySetException(new OrleansException($"Confirm failed: Status {status}"));                            if (entry.LastSent.HasValue)                              return; // cannot abort anymore if we already sent prepare-ok message                            if (logger.IsEnabled(LogLevel.Trace))                              logger.Trace("aborting via Prepared. Status={Status} Entry={Entry}"' status' entry);                            entry.TransactionManager.Reference.AsReference<ITransactionManagerExtension>()                               .Prepared(entry.TransactionManager.Name' entry.TransactionId' entry.Timestamp' resource' status)                               .Ignore();                          break;                      }                  case CommitRole.LocalCommit:                      {                          if (logger.IsEnabled(LogLevel.Trace))                              logger.Trace("aborting status={Status} {Entry}"' status' entry);                            try                          {                              // tell remote participants                              await Task.WhenAll(entry.WriteParticipants                                  .Where(p => !p.Equals(resource))                                  .Select(p => p.Reference.AsReference<ITransactionalResourceExtension>()                                       .Cancel(p.Name' entry.TransactionId' entry.Timestamp' status)));                          } catch(Exception ex)                          {                              this.logger.LogWarning(ex' "Failed to notify all transaction participants of cancellation.  TransactionId: {TransactionId}' Timestamp: {Timestamp}' Status: {Status}"' entry.TransactionId' entry.Timestamp' status);                          }                            // reply to transaction agent                          entry.PromiseForTA.TrySetResult(status);                            break;                      }                  case CommitRole.ReadOnly:                      {                          if (logger.IsEnabled(LogLevel.Trace))                              logger.Trace("aborting status={Status} {Entry}"' status' entry);                            // reply to transaction agent                          entry.PromiseForTA.TrySetResult(status);                            break;                      }                  default:                      {                          logger.LogError(777' "internal error: impossible case {CommitRole}"' entry.Role);                          throw new NotSupportedException($"{entry.Role} is not a supported CommitRole.");                      }              }
Magic Number,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,NotifyOfConfirm,The following statement contains a magic number: logger.Error(666' $"internal error in {nameof(NotifyOfConfirm)}: wrong commit type");
Magic Number,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,Bail,The following statement contains a magic number: ++failCounter >= 10 || force
Magic Number,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,CheckProgressOfCommitQueue,The following statement contains a magic number: switch (bottom.Role)                  {                      case CommitRole.LocalCommit:                          {                              // check for timeout periodically                              if (bottom.WaitingSince + this.options.PrepareTimeout <= now)                              {                                  await AbortCommits(TransactionalStatus.PrepareTimeout);                                  this.RWLock.Notify();                              }                              else                              {                                  storageWorker.Notify(bottom.WaitingSince + this.options.PrepareTimeout);                              }                              break;                          }                        case CommitRole.RemoteCommit:                          {                              if (bottom.PrepareIsPersisted && !bottom.LastSent.HasValue)                              {                                  // send PreparedMessage to remote TM                                  bottom.TransactionManager.Reference.AsReference<ITransactionManagerExtension>()                                        .Prepared(bottom.TransactionManager.Name' bottom.TransactionId' bottom.Timestamp' resource' TransactionalStatus.Ok)                                        .Ignore();                                                                                                        bottom.LastSent = now;                                    if (logger.IsEnabled(LogLevel.Trace))                                      logger.Trace("sent prepared {BottomEntry}"' bottom);                                    if (bottom.IsReadOnly)                                  {                                      storageWorker.Notify(); // we are ready to batch now                                  }                                  else                                  {                                      storageWorker.Notify(bottom.LastSent.Value + this.options.RemoteTransactionPingFrequency);                                  }                              }                              else if (!bottom.IsReadOnly && bottom.LastSent.HasValue)                              {                                  // send ping messages periodically to reactivate crashed TMs                                    if (bottom.LastSent + this.options.RemoteTransactionPingFrequency <= now)                                  {                                      if (logger.IsEnabled(LogLevel.Trace))                                          logger.Trace("sent ping {BottomEntry}"' bottom);                                      bottom.TransactionManager.Reference.AsReference<ITransactionManagerExtension>()                                            .Ping(bottom.TransactionManager.Name' bottom.TransactionId' bottom.Timestamp' resource).Ignore();                                      bottom.LastSent = now;                                  }                                  storageWorker.Notify(bottom.LastSent.Value + this.options.RemoteTransactionPingFrequency);                              }                                break;                          }                        default:                          {                              logger.LogError(777' "internal error: impossible case {CommitRole}"' bottom.Role);                              throw new NotSupportedException($"{bottom.Role} is not a supported CommitRole.");                          }                  }
Magic Number,Orleans.Transactions.State,TransactionQueue<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions\State\TransactionQueue.cs,CollectEventsForBatch,The following statement contains a magic number: switch (entry.Role)                  {                      case CommitRole.LocalCommit:                          {                              OnLocalCommit(entry);                              break;                          }                        case CommitRole.RemoteCommit:                          {                              if (entry.ConfirmationResponsePromise == null)                              {                                  // this is a read-only participant that has sent                                  // its prepared message.                                  // So we are really done and need not store or do anything.                              }                              else                              {                                  // we must confirm in storage' and then respond to TM so it can collect                                  this.storageBatch.Confirm(entry.SequenceNumber);                                  this.storageBatch.FollowUpAction(() =>                                  {                                      entry.ConfirmationResponsePromise.TrySetResult(true);                                      if (this.logger.IsEnabled(LogLevel.Trace))                                      {                                          this.logger.Trace("Confirmed remote commit v{SequenceNumber}. TransactionId:{TransactionId} Timestamp:{Timestamp} TransactionManager:{TransactionManager}"' entry.SequenceNumber' entry.TransactionId' entry.Timestamp' entry.TransactionManager);                                      }                                  });                              }                                break;                          }                        case CommitRole.ReadOnly:                          {                              // we are a participant of a read-only transaction. Must store timestamp and then respond.                              this.storageBatch.Read(entry.Timestamp);                              this.storageBatch.FollowUpAction(() =>                              {                                  entry.PromiseForTA.TrySetResult(TransactionalStatus.Ok);                              });                                break;                          }                        default:                          {                              logger.LogError(777' "internal error: impossible case {CommitRole}"' entry.Role);                              throw new NotSupportedException($"{entry.Role} is not a supported CommitRole.");                          }                  }
