Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Benchmarks.Ping,ConcurrentLoadGenerator<TState>,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\ConcurrentLoadGenerator.cs,ConcurrentLoadGenerator,The method has 6 parameters. Parameters: maxConcurrency' blocksPerWorker' requestsPerBlock' issueRequest' getStateForWorker' logIntermediateResults
Long Statement,Benchmarks.GrainStorage,GrainStorageBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\GrainStorage\GrainStorageBenchmark.cs,PersistLoop,The length of the statement  "            Console.WriteLine($"Average time in ms per call was {sw.ElapsedMilliseconds/stored}' with longest call taking {maxCalltime.TotalMilliseconds}ms."); " is 147.
Long Statement,Benchmarks.Transactions,TransactionBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Transactions\TransactionBenchmark.cs,FullRunAsync,The length of the statement  "            Report[] reports = await Task.WhenAll(Enumerable.Range(0' runners).Select(i => RunAsync(i' transactionsPerRunner' runners))); " is 125.
Long Statement,Benchmarks.Transactions,TransactionBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Transactions\TransactionBenchmark.cs,FullRunAsync,The length of the statement  "                finalReport.Elapsed = TimeSpan.FromMilliseconds(Math.Max(finalReport.Elapsed.TotalMilliseconds' report.Elapsed.TotalMilliseconds)); " is 131.
Long Statement,Benchmarks.Transactions,TransactionBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Transactions\TransactionBenchmark.cs,FullRunAsync,The length of the statement  "            Console.WriteLine($"{(int)(finalReport.Succeeded * 1000 / finalReport.Elapsed.TotalMilliseconds)} transactions per second."); " is 125.
Empty Catch Block,Benchmarks.Ping,ConcurrentLoadGenerator<TState>,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\ConcurrentLoadGenerator.cs,Run,The method has an empty catch block.
Magic Number,Benchmarks.GrainStorage,GrainStorageBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\GrainStorage\GrainStorageBenchmark.cs,RunAsync,The following statement contains a magic number: Task[] tasks = { PersistLoop(isRunning)' Task.Delay(TimeSpan.FromSeconds(30)) };
Magic Number,Benchmarks.MapReduce,MapReduceBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\MapReduce\MapReduceBenchmark.cs,Bench,The following statement contains a magic number: var pipelines = Enumerable                  .Range(0' this._pipelineParallelization)                  .AsParallel()                  .WithDegreeOfParallelism(4)                  .Select(async i =>                  {                      await BenchCore();                  });
Magic Number,Benchmarks.MapReduce,MapReduceBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\MapReduce\MapReduceBenchmark.cs,BenchCore,The following statement contains a magic number: !resultList.Any() || resultList.First().Count < 84
Magic Number,Benchmarks.MapReduce,MapReduceBenchmarkConfig,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\MapReduce\MapReduceBenchmarkConfig.cs,MapReduceBenchmarkConfig,The following statement contains a magic number: Add(new Job              {                  Run = {                      LaunchCount = 1'                      IterationCount = 2'                      WarmupCount = 0                  }              });
Magic Number,Benchmarks.Ping,ConcurrentLoadGenerator<TState>,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\ConcurrentLoadGenerator.cs,Warmup,The following statement contains a magic number: this.tasks[ree] = this.RunWorker(this.states[ree]' this.requestsPerBlock' 3);
Magic Number,Benchmarks.Ping,ConcurrentLoadGenerator<TState>,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\ConcurrentLoadGenerator.cs,Run,The following statement contains a magic number: var blocksPerReport = this.numWorkers * this.blocksPerWorker / 5;
Magic Number,Benchmarks.Ping,ConcurrentLoadGenerator<TState>,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\ConcurrentLoadGenerator.cs,Run,The following statement contains a magic number: return $"{ratePerSecond'6}/s {successes'7} reqs in {totalSeconds'6:0.000}s{failureString}";
Magic Number,Benchmarks.Ping,ConcurrentLoadGenerator<TState>,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\ConcurrentLoadGenerator.cs,Run,The following statement contains a magic number: return $"{ratePerSecond'6}/s {successes'7} reqs in {totalSeconds'6:0.000}s{failureString}";
Magic Number,Benchmarks.Ping,ConcurrentLoadGenerator<TState>,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\ConcurrentLoadGenerator.cs,Run,The following statement contains a magic number: return $"{ratePerSecond'6}/s {successes'7} reqs in {totalSeconds'6:0.000}s{failureString}";
Magic Number,Benchmarks.Ping,PingBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\PingBenchmark.cs,PingBenchmark,The following statement contains a magic number: var primary = i == 0 ? null : new IPEndPoint(IPAddress.Loopback' 11111);
Magic Number,Benchmarks.Ping,PingBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\PingBenchmark.cs,PingBenchmark,The following statement contains a magic number: var siloBuilder = new SiloHostBuilder()                      .ConfigureDefaults()                      .UseLocalhostClustering(                          siloPort: 11111 + i'                          gatewayPort: 30000 + i'                          primarySiloEndpoint: primary);
Magic Number,Benchmarks.Ping,PingBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\PingBenchmark.cs,PingBenchmark,The following statement contains a magic number: var siloBuilder = new SiloHostBuilder()                      .ConfigureDefaults()                      .UseLocalhostClustering(                          siloPort: 11111 + i'                          gatewayPort: 30000 + i'                          primarySiloEndpoint: primary);
Magic Number,Benchmarks.Ping,PingBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\PingBenchmark.cs,PingBenchmark,The following statement contains a magic number: Thread.Sleep(4000);
Magic Number,Benchmarks.Ping,PingBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\PingBenchmark.cs,Run,The following statement contains a magic number: var loadGenerator = new ConcurrentLoadGenerator<IPingGrain>(                  maxConcurrency: 250'                  blocksPerWorker: blocksPerWorker'                  requestsPerBlock: 500'                  issueRequest: g => g.Run()'                  getStateForWorker: workerId => grainFactory.GetGrain<IPingGrain>(Guid.NewGuid().GetHashCode()));
Magic Number,Benchmarks.Ping,PingBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\PingBenchmark.cs,Run,The following statement contains a magic number: var loadGenerator = new ConcurrentLoadGenerator<IPingGrain>(                  maxConcurrency: 250'                  blocksPerWorker: blocksPerWorker'                  requestsPerBlock: 500'                  issueRequest: g => g.Run()'                  getStateForWorker: workerId => grainFactory.GetGrain<IPingGrain>(Guid.NewGuid().GetHashCode()));
Magic Number,Benchmarks.Ping,PingBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Ping\PingBenchmark.cs,PingPongForever,The following statement contains a magic number: await grain.PingPongInterleave(other' 100);
Magic Number,Benchmarks.Serialization,SerializationBenchmarks,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Serialization\SerializationBenchmarks.cs,BenchmarkSetup,The following statement contains a magic number: this.complexClass.Int = 89;
Magic Number,Benchmarks.Serialization,SerializationBenchmarks,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Serialization\SerializationBenchmarks.cs,BenchmarkSetup,The following statement contains a magic number: this.complexClass.NonSerializedInt = 39;
Magic Number,Benchmarks.Serialization,SerializationBenchmarks,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Serialization\SerializationBenchmarks.cs,BenchmarkSetup,The following statement contains a magic number: this.complexClass.SetObsoleteInt(38);
Magic Number,Benchmarks.Serialization,SerializationBenchmarks,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Serialization\SerializationBenchmarks.cs,BenchmarkSetup,The following statement contains a magic number: this.complexClass.Struct = new SomeStruct(10)              {                  Id = Guid.NewGuid()'                  PublicValue = 6'                  ValueWithPrivateGetter = 7              };
Magic Number,Benchmarks.Serialization,SerializationBenchmarks,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Serialization\SerializationBenchmarks.cs,BenchmarkSetup,The following statement contains a magic number: this.complexClass.Struct = new SomeStruct(10)              {                  Id = Guid.NewGuid()'                  PublicValue = 6'                  ValueWithPrivateGetter = 7              };
Magic Number,Benchmarks.Serialization,SerializationBenchmarks,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Serialization\SerializationBenchmarks.cs,BenchmarkSetup,The following statement contains a magic number: this.complexClass.Struct = new SomeStruct(10)              {                  Id = Guid.NewGuid()'                  PublicValue = 6'                  ValueWithPrivateGetter = 7              };
Magic Number,Benchmarks.Serialization,SerializationBenchmarks,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Serialization\SerializationBenchmarks.cs,BenchmarkSetup,The following statement contains a magic number: this.complexClass.Struct.SetValueWithPrivateSetter(8);
Magic Number,Benchmarks.Serialization,SerializationBenchmarks,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Serialization\SerializationBenchmarks.cs,BenchmarkSetup,The following statement contains a magic number: this.complexClass.Struct.SetPrivateValue(9);
Magic Number,Benchmarks.Serialization,SerializationBenchmarks,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Serialization\SerializationBenchmarks.cs,BenchmarkSetup,The following statement contains a magic number: this.largeTestData.SetBit(13);
Magic Number,Benchmarks.Serialization,SerializationBenchmarks,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Serialization\SerializationBenchmarks.cs,BenchmarkSetup,The following statement contains a magic number: this.largeTestData.SetEnemy(17' CampaignEnemyTestType.Enemy1);
Magic Number,Benchmarks.Serialization,InnerType,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Serialization\SerializationBenchmarks.cs,GetHashCode,The following statement contains a magic number: return (this.Id.GetHashCode() * 397) ^ (this.Something?.GetHashCode() ?? 0);
Magic Number,Benchmarks.Transactions,TransactionBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Transactions\TransactionBenchmark.cs,MemorySetup,The following statement contains a magic number: var builder = new TestClusterBuilder(4);
Magic Number,Benchmarks.Transactions,TransactionBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Transactions\TransactionBenchmark.cs,MemoryThrottledSetup,The following statement contains a magic number: var builder = new TestClusterBuilder(4);
Magic Number,Benchmarks.Transactions,TransactionBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Transactions\TransactionBenchmark.cs,AzureSetup,The following statement contains a magic number: var builder = new TestClusterBuilder(4);
Magic Number,Benchmarks.Transactions,TransactionBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Transactions\TransactionBenchmark.cs,AzureThrottledSetup,The following statement contains a magic number: var builder = new TestClusterBuilder(4);
Magic Number,Benchmarks.Transactions,TransactionBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Transactions\TransactionBenchmark.cs,FullRunAsync,The following statement contains a magic number: Console.WriteLine($"{(int)(finalReport.Succeeded * 1000 / finalReport.Elapsed.TotalMilliseconds)} transactions per second.");
Magic Number,Benchmarks.Transactions,TransactionBenchmark,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Transactions\TransactionBenchmark.cs,RunAsync,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(10));
Magic Number,Benchmarks.Transactions,SiloTransactionThrottlingConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Transactions\TransactionBenchmark.cs,Configure,The following statement contains a magic number: hostBuilder.Configure<TransactionRateLoadSheddingOptions>(options =>                  {                      options.Enabled = true;                      options.Limit = 50;                  });
Magic Number,Benchmarks.Transactions,SiloTransactionConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\Benchmarks\Transactions\TransactionBenchmark.cs,Configure,The following statement contains a magic number: hostBuilder                      .UseTransactions()                      .ConfigureServices(services => services.AddSingleton<TelemetryConsumer>())                      .Configure<TelemetryOptions>(options => options.AddConsumer<TelemetryConsumer>())                      .Configure<StatisticsOptions>(options =>                      {                          options.PerfCountersWriteInterval = TimeSpan.FromSeconds(3);                      });
