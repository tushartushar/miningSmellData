Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DefaultCluster.Tests.General,StatelessWorkerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\StatelessWorkerTests.cs,StatelessWorkerActivationsPerSiloDoNotExceedMaxLocalWorkersCount,Cyclomatic complexity of the method is 8
Long Identifier,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenRoundTripSerialization,The length of the parameter expectedStructConstraintObject is 30.
Long Statement,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_1Argument_GenericCallOnly,The length of the statement  "            var grain =  this.GrainFactory.GetGrain<IGeneric1Argument<string>>(Guid.NewGuid()' "UnitTests.Grains.Generic1ArgumentGrain"); " is 125.
Long Statement,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,SerializationTests_Generic_CircularReferenceTest,The length of the statement  "            var grain =  this.GrainFactory.GetGrain<ICircularStateTestGrain>(primaryKey: grainId' keyExtension: grainId.ToString("N")); " is 123.
Long Statement,DefaultCluster.Tests.General,GrainReferenceTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceTest.cs,GrainReferenceComparison_DifferentReference,The length of the statement  "            ISimpleGrain ref1 = this.GrainFactory.GetGrain<ISimpleGrain>(random.Next()' UnitTests.Grains.SimpleGrain.SimpleGrainNamePrefix); " is 128.
Long Statement,DefaultCluster.Tests.General,GrainReferenceTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceTest.cs,GrainReferenceComparison_DifferentReference,The length of the statement  "            ISimpleGrain ref2 = this.GrainFactory.GetGrain<ISimpleGrain>(random.Next()' UnitTests.Grains.SimpleGrain.SimpleGrainNamePrefix); " is 128.
Long Statement,DefaultCluster.Tests.General,GrainReferenceTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceTest.cs,TestGrainReferenceSerialization,The length of the statement  "            var grain = this.GrainFactory.GetGrain<ISimpleGrain>(random.Next()' UnitTests.Grains.SimpleGrain.SimpleGrainNamePrefix); " is 120.
Long Statement,DefaultCluster.Tests.General,GrainReferenceTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceTest.cs,DotNetSerializeRoundtrip,The length of the statement  "                    Context = new StreamingContext(StreamingContextStates.All' new SerializationContext(this.HostedCluster.SerializationManager)) " is 125.
Long Statement,DefaultCluster.Tests.General,KeyExtensionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\KeyExtensionTests.cs,PrimaryKeyExtensionsShouldDifferentiateGrainsUsingTheSameBasePrimaryKey,The length of the statement  "            Assert.NotEqual(activationId1' activationId2); // Mismatched key extensions should differentiate an identical base primary key. " is 127.
Long Statement,DefaultCluster.Tests.General,KeyExtensionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\KeyExtensionTests.cs,PrimaryKeyExtensionsShouldDifferentiateGrainsUsingDifferentBaseKeys,The length of the statement  "            Assert.NotEqual(activationId1' activationId2); // Mismatched base keys should differentiate between identical extended keys. " is 124.
Long Statement,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_SimpleNotification_Callback,The length of the statement  "            this.Logger.Info("Invoking ObserverTest_SimpleNotification_Callback for {0} time with a = {1} and b = {2}"' this.callbackCounter' a' b); " is 136.
Long Statement,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionSameReference,The length of the statement  "            this.observer1 = new SimpleGrainObserver(this.ObserverTest_DoubleSubscriptionSameReference_Callback' result' this.Logger); " is 122.
Long Statement,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionSameReference_Callback,The length of the statement  "            this.Logger.Info("Invoking ObserverTest_DoubleSubscriptionSameReference_Callback for {0} time with a={1} and b={2}"' this.callbackCounter' a' b); " is 145.
Long Statement,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_SubscribeUnsubscribe_Callback,The length of the statement  "            this.Logger.Info("Invoking ObserverTest_SubscribeUnsubscribe_Callback for {0} time with a = {1} and b = {2}"' this.callbackCounter' a' b); " is 138.
Long Statement,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionDifferentReferences,The length of the statement  "            this.observer1 = new SimpleGrainObserver(this.ObserverTest_DoubleSubscriptionDifferentReferences_Callback' result' this.Logger); " is 128.
Long Statement,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionDifferentReferences,The length of the statement  "            this.observer2 = new SimpleGrainObserver(this.ObserverTest_DoubleSubscriptionDifferentReferences_Callback' result' this.Logger); " is 128.
Long Statement,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionDifferentReferences_Callback,The length of the statement  "            this.Logger.Info("Invoking ObserverTest_DoubleSubscriptionDifferentReferences_Callback for {0} time with a = {1} and b = {2}"' this.callbackCounter' a' b); " is 155.
Long Statement,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DeleteObject_Callback,The length of the statement  "            this.Logger.Info("Invoking ObserverTest_DeleteObject_Callback for {0} time with a = {1} and b = {2}"' this.callbackCounter' a' b); " is 130.
Long Statement,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_CreateObjectReference_ThrowsForInvalidArgumentTypes,The length of the statement  "            await Assert.ThrowsAsync<ArgumentException>(() => this.Client.CreateObjectReference<ISimpleGrainObserver>(new DummyObserverGrain())); " is 133.
Long Statement,DefaultCluster.Tests.General,PolymorphicInterfaceTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\PolymorphicInterfaceTest.cs,Polymorphic_FactoryMethods,The length of the statement  "            IC ICRef = this.GrainFactory.GetGrain<IF>(GetRandomGrainId()' grainFullName); // FRef factory method returns a polymorphic reference to ICRef " is 141.
Long Statement,DefaultCluster.Tests.General,PolymorphicInterfaceTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\PolymorphicInterfaceTest.cs,Polymorphic_FactoryMethods,The length of the statement  "            IA IARef = this.GrainFactory.GetGrain<ID>(GetRandomGrainId()' grainFullName); // DRef factory method returns a polymorphic reference to IARef " is 141.
Long Statement,DefaultCluster.Tests.General,PolymorphicInterfaceTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\PolymorphicInterfaceTest.cs,Polymorphic__DerivedServiceType,The length of the statement  "            IB IBRef = (IB)IARef; // this could result in an invalid cast exception but it shoudn't because we have a priori knowledge that DerivedServiceType implements the interface " is 171.
Long Statement,DefaultCluster.Tests.General,SimpleGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SimpleGrainTests.cs,GettingGrainWithMultipleConstructorsActivesViaDefaultConstructor,The length of the statement  "            ISimpleGrain grain = this.GrainFactory.GetGrain<ISimpleGrain>(GetRandomGrainId()' grainClassNamePrefix: MultipleConstructorsSimpleGrain.MultipleConstructorsSimpleGrainPrefix); " is 175.
Long Statement,DefaultCluster.Tests.General,StatelessWorkerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\StatelessWorkerTests.cs,StatelessWorkerActivationsPerSiloDoNotExceedMaxLocalWorkersCount,The length of the statement  "            var gatewayOptions = this.Fixture.Client.ServiceProvider.GetRequiredService<IOptions<StaticGatewayListProviderOptions>>(); " is 122.
Long Statement,DefaultCluster.Tests.General,StatelessWorkerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\StatelessWorkerTests.cs,StatelessWorkerActivationsPerSiloDoNotExceedMaxLocalWorkersCount,The length of the statement  "                Assert.True(activations.Count <= ExpectedMaxLocalActivations' $"activations.Count = {activations.Count} in silo {silo} but expected no more than {ExpectedMaxLocalActivations}"); " is 177.
Long Statement,DefaultCluster.Tests.General,StatelessWorkerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\StatelessWorkerTests.cs,StatelessWorkerFastActivationsDontFailInMultiSiloDeployment,The length of the statement  "            var gatewayOptions = this.Fixture.Client.ServiceProvider.GetRequiredService<IOptions<StaticGatewayListProviderOptions>>(); " is 122.
Long Statement,DefaultCluster.Tests.General,StatelessWorkerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\StatelessWorkerTests.cs,StatelessWorkerFastActivationsDontFailInMultiSiloDeployment,The length of the statement  "                throw new SkipException("This test was created to run with more than 1 gateway. 2 is the default at the time of this writing"); " is 127.
Long Statement,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,ErrorHandlingTimedMethod,The length of the statement  "            Assert.True(stopwatch.ElapsedMilliseconds >= 900' $"Waited less than 900ms: ({stopwatch.ElapsedMilliseconds}ms)"); // check that we waited at least 0.9 second " is 158.
Long Statement,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,ErrorHandlingTimedMethodWithError,The length of the statement  "            Assert.True(stopwatch.ElapsedMilliseconds >= 900' $"Waited less than 900ms: ({stopwatch.ElapsedMilliseconds}ms)"); // check that we waited at least 0.9 second " is 158.
Long Statement,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,CreateGR,The length of the statement  "            output.WriteLine("Guid = {0}' Guid.HashCode = x{1:X8}' GrainId.HashCode = x{2:X8}' GrainId.UniformHashCode = x{3:X8}"' guid' guid.GetHashCode()' grainId.GetHashCode()' grainId.GetUniformHashCode()); " is 198.
Long Statement,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,CastGrainRefCastFromMyType,The length of the statement  "            GrainReference grain = (GrainReference)this.GrainFactory.GetGrain<ISimpleGrain>(random.Next()' SimpleGrain.SimpleGrainNamePrefix); " is 130.
Long Statement,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,CastMultifacetRWReference,The length of the statement  "            // Error: System.InvalidCastException: Grain reference MultifacetGrain.MultifacetWriterFactory+MultifacetWriterReference service interface mismatch: expected interface id=[1947430462] received interface name=[MultifacetGrain.IMultifacetWriter] id=[62435819] in grainRef=[GrainReference:*std/b198f19f] " is 300.
Long Statement,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,CastMultifacetRWReferenceWaitForResolve,The length of the statement  "            // Error: System.InvalidCastException: Grain reference MultifacetGrain.MultifacetWriterFactory+MultifacetWriterReference service interface mismatch: expected interface id=[1947430462] received interface name=[MultifacetGrain.IMultifacetWriter] id=[62435819] in grainRef=[GrainReference:*std/8408c2bc] " is 300.
Long Statement,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,CastCheckExpectedCompatIds,The length of the statement  "            GrainReference grain = (GrainReference)this.GrainFactory.GetGrain<ISimpleGrain>(random.Next()' SimpleGrain.SimpleGrainNamePrefix); " is 130.
Long Statement,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,CastCheckExpectedCompatIds2,The length of the statement  "            GrainReference grain = (GrainReference) this.GrainFactory.GetGrain<IGeneratorTestDerivedDerivedGrain>(GetRandomGrainId()); " is 122.
Long Statement,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,CastInternalCastFromMyType,The length of the statement  "            GrainReference grain = (GrainReference)this.GrainFactory.GetGrain<ISimpleGrain>(random.Next()' SimpleGrain.SimpleGrainNamePrefix); " is 130.
Long Statement,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,CastGrainRefUpCastFromGrandchild,The length of the statement  "            GrainReference grain = (GrainReference)this.GrainFactory.GetGrain<IGeneratorTestDerivedDerivedGrain>(GetRandomGrainId()); " is 121.
Long Statement,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,CastGrainRefUpCastFromDerivedDerivedChild,The length of the statement  "            GrainReference grain = (GrainReference) this.GrainFactory.GetGrain<IGeneratorTestDerivedDerivedGrain>(GetRandomGrainId()); " is 122.
Long Statement,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,GeneratorDerivedGrain2ControlFlow,The length of the statement  "            IGeneratorTestDerivedGrain2 grain = this.GrainFactory.GetGrain<IGeneratorTestDerivedGrain2>(GetRandomGrainId()' grainName); " is 123.
Long Statement,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,GeneratorDerivedDerivedGrainControlFlow,The length of the statement  "            IGeneratorTestDerivedDerivedGrain grain = this.GrainFactory.GetGrain<IGeneratorTestDerivedDerivedGrain>(GetRandomGrainId()); " is 124.
Long Statement,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenDerivedFromCSharpInterfaceInDifferentAssembly,The length of the statement  "            var grain = this.GrainFactory.GetGrain<IGeneratorTestDerivedFromCSharpInterfaceInExternalAssemblyGrain>(Guid.NewGuid()); " is 120.
Long Statement,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,GrainWithGenericMethods,The length of the statement  "            Assert.Equal(new[] { typeof(IGrain)' typeof(string)' typeof(DateTime) }' await grain.GetTypesExplicit<IGrain' string' DateTime>()); " is 131.
Long Statement,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,GrainWithGenericMethods,The length of the statement  "            Assert.Equal(new[] { typeof(IGrain)' typeof(string)' typeof(DateTime) }' await grain.GetTypesInferred((IGrain)grain' default(string)' default(DateTime))); " is 154.
Long Statement,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,GrainWithGenericMethods,The length of the statement  "            Assert.Equal(new[] { typeof(IGrain)' typeof(string) }' await grain.GetTypesInferred(default(IGrain)' default(string)' 0)); " is 122.
Long Statement,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenDerivedFromFSharpInterfaceInDifferentAssembly,The length of the statement  "            var grain = this.GrainFactory.GetGrain<IGeneratorTestDerivedFromFSharpInterfaceInExternalAssemblyGrain>(Guid.NewGuid()); " is 120.
Long Statement,DefaultCluster.Tests.ActivationsLifeCycleTests,GrainActivateDeactivateTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainActivateDeactivateTests.cs,LongRunning_Deactivate,The length of the statement  "            ILongRunningActivateDeactivateTestGrain grain = this.GrainFactory.GetGrain<ILongRunningActivateDeactivateTestGrain>(id); " is 120.
Long Statement,DefaultCluster.Tests.ActivationsLifeCycleTests,GrainActivateDeactivateTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainActivateDeactivateTests.cs,AssertIsNotInvalidOperationException,The length of the statement  "            Assert.True(e.Message.Contains(expectedMessageSubstring)' "Did not get expected exception message returned: " + e.Message); " is 123.
Long Statement,DefaultCluster.Tests.StorageTests,MemoryStorageProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MemoryStorageProviderTests.cs,MemoryStorageGrainEnforcesEtagsTest,The length of the statement  "            // write state with etag' when there is nothing in storage.  Most storage should fail this' but memory storage should succeed. " is 126.
Long Statement,DefaultCluster.Tests.StorageTests,MemoryStorageProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MemoryStorageProviderTests.cs,MemoryStorageGrainEnforcesEtagsTest,The length of the statement  "            var ex = await Assert.ThrowsAsync<MemoryStorageEtagMismatchException>(() => memoryStorageGrain.WriteStateAsync("grain"' "id"' TestGrainState.CreateWithEtag(null))); " is 164.
Long Statement,DefaultCluster.Tests.StorageTests,MemoryStorageProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MemoryStorageProviderTests.cs,MemoryStorageGrainEnforcesEtagsTest,The length of the statement  "            ex = await Assert.ThrowsAsync<MemoryStorageEtagMismatchException>(() => memoryStorageGrain.WriteStateAsync("grain"' "id"' TestGrainState.CreateWithEtag(newEtag+"a"))); " is 167.
Long Statement,DefaultCluster.Tests.StorageTests,MemoryStorageProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MemoryStorageProviderTests.cs,MemoryStorageGrainEnforcesEtagsTest,The length of the statement  "            ex = await Assert.ThrowsAsync<MemoryStorageEtagMismatchException>(() => memoryStorageGrain.DeleteStateAsync("grain"' "id"' null)); " is 130.
Long Statement,DefaultCluster.Tests.StorageTests,MemoryStorageProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MemoryStorageProviderTests.cs,MemoryStorageGrainEnforcesEtagsTest,The length of the statement  "            ex = await Assert.ThrowsAsync<MemoryStorageEtagMismatchException>(() => memoryStorageGrain.DeleteStateAsync("grain"' "id"' latestEtag+"a")); " is 140.
Long Statement,DefaultCluster.Tests.StorageTests,MemoryStorageProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MemoryStorageProviderTests.cs,MemoryStorageGrainEnforcesEtagsTest,The length of the statement  "            ex = await Assert.ThrowsAsync<MemoryStorageEtagMismatchException>(() => memoryStorageGrain.DeleteStateAsync("grain"' "id"' latestEtag)); " is 136.
Long Statement,DefaultCluster.Tests.StorageTests,MemoryStorageProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MemoryStorageProviderTests.cs,MemoryStorageGrainEnforcesEtagsTest,The length of the statement  "            ex = await Assert.ThrowsAsync<MemoryStorageEtagMismatchException>(() => memoryStorageGrain.WriteStateAsync("grain"' "id"' TestGrainState.CreateWithEtag(latestEtag))); " is 166.
Empty Catch Block,DefaultCluster.Tests,ProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ProviderTests.cs,Providers_TestExtensions,The method has an empty catch block.
Magic Number,DefaultCluster.Tests.General,BasicActivationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\BasicActivationTests.cs,BasicActivation_Fail,The following statement contains a magic number: ITestGrain fail = this.GrainFactory.GetGrain<ITestGrain>(-2);
Magic Number,DefaultCluster.Tests.General,BasicActivationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\BasicActivationTests.cs,BasicActivation_Reentrant_RecoveryAfterExpiredMessage,The following statement contains a magic number: TimeSpan shortTimeout = TimeSpan.FromMilliseconds(1000);
Magic Number,DefaultCluster.Tests.General,BasicActivationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\BasicActivationTests.cs,BasicActivation_Reentrant_RecoveryAfterExpiredMessage,The following statement contains a magic number: int num = 10;
Magic Number,DefaultCluster.Tests.General,BasicActivationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\BasicActivationTests.cs,BasicActivation_Reentrant_RecoveryAfterExpiredMessage,The following statement contains a magic number: Task task = grain.DoLongAction(                          TimeSpan.FromMilliseconds(shortTimeout.TotalMilliseconds * 3)'                          "A_" + i);
Magic Number,DefaultCluster.Tests.General,BasicActivationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\BasicActivationTests.cs,BasicActivation_Reentrant_RecoveryAfterExpiredMessage,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(10));
Magic Number,DefaultCluster.Tests.General,StateClassTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ConcreteStateClassTests.cs,StateClassTests_Test,The following statement contains a magic number: await grain.SetA(98' true);
Magic Number,DefaultCluster.Tests.General,StateClassTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ConcreteStateClassTests.cs,StateClassTests_Test,The following statement contains a magic number: Assert.Equal(98' a);
Magic Number,DefaultCluster.Tests.General,DeactivationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\DeactivationTests.cs,DeactivateReactivateTiming,The following statement contains a magic number: await grain.SetA(99' true);
Magic Number,DefaultCluster.Tests.General,DeactivationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\DeactivationTests.cs,DeactivateReactivateTiming,The following statement contains a magic number: Assert.True(sw.ElapsedMilliseconds < 1000);
Magic Number,DefaultCluster.Tests.General,DeactivationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\DeactivationTests.cs,DeactivateReactivateTiming,The following statement contains a magic number: Assert.Equal(99' a);
Magic Number,DefaultCluster.Tests.General,EchoTaskGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\EchoTaskGrainTests.cs,EchoGrain_Timeout_Wait,The following statement contains a magic number: TimeSpan delay30 = TimeSpan.FromSeconds(30);
Magic Number,DefaultCluster.Tests.General,EchoTaskGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\EchoTaskGrainTests.cs,EchoGrain_Timeout_Wait,The following statement contains a magic number: TimeSpan delay45 = TimeSpan.FromSeconds(45);
Magic Number,DefaultCluster.Tests.General,EchoTaskGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\EchoTaskGrainTests.cs,EchoGrain_Timeout_Wait,The following statement contains a magic number: TimeSpan delay60 = TimeSpan.FromSeconds(60);
Magic Number,DefaultCluster.Tests.General,EchoTaskGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\EchoTaskGrainTests.cs,EchoGrain_Timeout_Await,The following statement contains a magic number: TimeSpan delay30 = TimeSpan.FromSeconds(30);
Magic Number,DefaultCluster.Tests.General,EchoTaskGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\EchoTaskGrainTests.cs,EchoGrain_Timeout_Await,The following statement contains a magic number: TimeSpan delay60 = TimeSpan.FromSeconds(60);
Magic Number,DefaultCluster.Tests.General,EchoTaskGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\EchoTaskGrainTests.cs,EchoGrain_Timeout_Result,The following statement contains a magic number: TimeSpan delay30 = TimeSpan.FromSeconds(30);
Magic Number,DefaultCluster.Tests.General,EchoTaskGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\EchoTaskGrainTests.cs,EchoGrain_Timeout_Result,The following statement contains a magic number: TimeSpan delay60 = TimeSpan.FromSeconds(60);
Magic Number,DefaultCluster.Tests.General,FSharpGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\FSharpGrainTests.cs,FSharpGrains_Ping_IntOption_Some,The following statement contains a magic number: var input = FSharpOption<int>.Some(10);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_ConcreteGrainWithGenericInterfaceGetGrain,The following statement contains a magic number: await grainOfIntFloat1.SetT(123);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_ConcreteGrainWithGenericInterfaceGetGrain,The following statement contains a magic number: await grainOfIntFloat2.SetT(456);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_ConcreteGrainWithGenericInterfaceGetGrain,The following statement contains a magic number: await grainOfFloatString.SetT(789.0f);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_ConcreteGrainWithGenericInterfaceGetGrain,The following statement contains a magic number: Assert.Equal(123f' floatResult1);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_ConcreteGrainWithGenericInterfaceGetGrain,The following statement contains a magic number: Assert.Equal(456f' floatResult2);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_ConcreteGrainWithGenericInterfaceMultiplicity,The following statement contains a magic number: await grainRef1.SetT(123);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_ConcreteGrainWithGenericInterfaceMultiplicity,The following statement contains a magic number: Assert.Equal(123f' floatResult);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_SimpleGenericGrainGetGrain,The following statement contains a magic number: await grainOfFloat1.Set(1.2f);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_SimpleGenericGrainGetGrain,The following statement contains a magic number: await grainOfFloat2.Set(3.4f);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_SimpleGenericGrainGetGrain,The following statement contains a magic number: Assert.Equal(1.2f' floatResult1);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_SimpleGenericGrainGetGrain,The following statement contains a magic number: Assert.Equal(3.4f' floatResult2);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_GenericInterfaceWithGenericParametersGetGrain,The following statement contains a magic number: list.Add(0.1f);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_GenericInterfaceWithGenericParametersGetGrain,The following statement contains a magic number: Assert.Equal(0.1f' result[0]);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_SimpleGenericGrainMultiplicity,The following statement contains a magic number: await grainRef1.Set(1.2f);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_SimpleGenericGrainMultiplicity,The following statement contains a magic number: Assert.Equal(1.2f' floatResult);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_PreferConcreteGrainImplementationOfGenericInterface,The following statement contains a magic number: await grainOfDouble2.Set(2.0);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_PreferConcreteGrainImplementationOfGenericInterface,The following statement contains a magic number: Assert.Equal(2.0' result1);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_PreferConcreteGrainImplementationOfGenericInterface,The following statement contains a magic number: Assert.Equal(4.0' result2);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_PreferConcreteGrainImplementationOfGenericInterfaceMultiplicity,The following statement contains a magic number: Assert.Equal(4.0f' floatResult);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_ConcreteGrainWithMultipleGenericInterfacesGetGrain,The following statement contains a magic number: await grain2.Set(2);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_ConcreteGrainWithMultipleGenericInterfacesGetGrain,The following statement contains a magic number: Assert.Equal(10' result1);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_ConcreteGrainWithMultipleGenericInterfacesGetGrain,The following statement contains a magic number: Assert.Equal(20' result2);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GenericGrainTests_ConcreteGrainWithMultipleGenericInterfacesMultiplicity1,The following statement contains a magic number: Assert.Equal(100' floatResult);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_SimpleGrainControlFlow,The following statement contains a magic number: var a = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_SimpleGrainControlFlow_Blocking,The following statement contains a magic number: var a = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_SimpleGrainDataFlow,The following statement contains a magic number: var a = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_SimpleGrainControlFlow2_GetAB,The following statement contains a magic number: var a = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_SimpleGrainControlFlow3,The following statement contains a magic number: await g.SetA(3);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_SimpleGrainControlFlow3,The following statement contains a magic number: await g.SetB(1.25f);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_BasicGrainControlFlow,The following statement contains a magic number: await g.SetA(3);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_BasicGrainControlFlow,The following statement contains a magic number: await g.SetB(1.25f);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GrainWithListFields,The following statement contains a magic number: string a = random.Next(100).ToString(CultureInfo.InvariantCulture);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GrainWithListFields,The following statement contains a magic number: string b = random.Next(100).ToString(CultureInfo.InvariantCulture);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_GrainWithListFields,The following statement contains a magic number: int a = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_GrainWithListFields,The following statement contains a magic number: int b = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_GrainWithNoProperties_ControlFlow,The following statement contains a magic number: int a = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_GrainWithNoProperties_ControlFlow,The following statement contains a magic number: int b = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GrainWithNoProperties_ControlFlow,The following statement contains a magic number: int a = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,GrainWithNoProperties_ControlFlow,The following statement contains a magic number: int b = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_ReaderWriterGrain1,The following statement contains a magic number: int a = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_ReaderWriterGrain2,The following statement contains a magic number: int a = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_ReaderWriterGrain3,The following statement contains a magic number: int a = random.Next(100);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_ReaderWriterGrain3,The following statement contains a magic number: double c = 3.145;
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_Non_Primitive_Type_Argument,The following statement contains a magic number: await g2.Foo(Guid.Empty' 0' 2);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_Non_Primitive_Type_Argument,The following statement contains a magic number: await g3.Foo(Guid.Empty' new byte[] { }' 3);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_Non_Primitive_Type_Argument,The following statement contains a magic number: Assert.Equal(2' await g2.GetX());
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_Non_Primitive_Type_Argument,The following statement contains a magic number: Assert.Equal(3m' await g3.GetX());
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,DifferentTypeArgsProduceIndependentActivations,The following statement contains a magic number: await grain1.SetValue(123);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_ScheduleDelayedPingAndDeactivate,The following statement contains a magic number: await grain.ScheduleDelayedPingToSelfAndDeactivate(target' s1' TimeSpan.FromSeconds(5));
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_ScheduleDelayedPingAndDeactivate,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(6));
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_GrainWithTypeConstraints,The following statement contains a magic number: await grain.Add(42);
Magic Number,DefaultCluster.Tests.General,GenericGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GenericGrainTests.cs,Generic_GrainWithValueTypeState,The following statement contains a magic number: var expectedValue = new ValueTypeTestData(42);
Magic Number,DefaultCluster.Tests.General,GrainReferenceCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCacheTests.cs,GetGrain2,The following statement contains a magic number: int id2 = 2;
Magic Number,DefaultCluster.Tests.General,GrainReferenceCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCacheTests.cs,GetGrain2,The following statement contains a magic number: Assert.Equal(2' numGrainsCreated);
Magic Number,DefaultCluster.Tests.General,GrainReferenceCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCacheTests.cs,Get2GrainsFromCache,The following statement contains a magic number: int size = 2;
Magic Number,DefaultCluster.Tests.General,GrainReferenceCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCacheTests.cs,Get2GrainsFromCache,The following statement contains a magic number: int id2 = 2;
Magic Number,DefaultCluster.Tests.General,GrainReferenceCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCacheTests.cs,Get2GrainsFromCache,The following statement contains a magic number: Assert.Equal(2' cache.Count);
Magic Number,DefaultCluster.Tests.General,GrainReferenceCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCacheTests.cs,Get2GrainsFromCache,The following statement contains a magic number: Assert.Equal(2' numGrainsCreated);
Magic Number,DefaultCluster.Tests.General,GrainReferenceTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceTest.cs,GrainReference_Json_Serialization_Nested,The following statement contains a magic number: await grain.SetA(56820);
Magic Number,DefaultCluster.Tests.General,GrainReferenceTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceTest.cs,GrainReference_Json_Serialization_Nested,The following statement contains a magic number: Assert.Equal(56820' await ((ISimpleGrain)reference).GetA());
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_GrainCallTest,The following statement contains a magic number: var grain = client.GetGrain<ISimpleGrain>(65);
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_GrainCallTest,The following statement contains a magic number: await grain.SetA(23);
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_GrainCallTest,The following statement contains a magic number: Assert.Equal(23' val);
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_ReferenceEquality_GrainCallTest,The following statement contains a magic number: object expected = new string('*'' 5);
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_ReferenceEquality_GrainCallTest,The following statement contains a magic number: var collection = new int[] { 1' 3' 9 };
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_ReferenceEquality_GrainCallTest,The following statement contains a magic number: var collection = new int[] { 1' 3' 9 };
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_ObserverTest,The following statement contains a magic number: var callbacksRecieved = new bool[2];
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_ObserverTest,The following statement contains a magic number: var observer = new ObserverTests.SimpleGrainObserver(                  (a' b' result) =>                  {                      Assert.Null(RuntimeContext.Current);                      callbackCounter[0]++;                        if (a == 3 && b == 0)                          callbacksRecieved[0] = true;                      else if (a == 3 && b == 2)                          callbacksRecieved[1] = true;                      else                          throw new ArgumentOutOfRangeException("Unexpected callback with values: a=" + a + "'b=" + b);                        if (callbackCounter[0] == 1)                      {                          // Allow for callbacks occurring in any order                          Assert.True(callbacksRecieved[0] || callbacksRecieved[1]);                      }                      else if (callbackCounter[0] == 2)                      {                          Assert.True(callbacksRecieved[0] && callbacksRecieved[1]);                          result.Done = true;                      }                      else                      {                          Assert.True(false);                      }                  }'                  handle'                  client.ServiceProvider.GetRequiredService<ILogger<ISimpleGrainObserver>>());
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_ObserverTest,The following statement contains a magic number: var observer = new ObserverTests.SimpleGrainObserver(                  (a' b' result) =>                  {                      Assert.Null(RuntimeContext.Current);                      callbackCounter[0]++;                        if (a == 3 && b == 0)                          callbacksRecieved[0] = true;                      else if (a == 3 && b == 2)                          callbacksRecieved[1] = true;                      else                          throw new ArgumentOutOfRangeException("Unexpected callback with values: a=" + a + "'b=" + b);                        if (callbackCounter[0] == 1)                      {                          // Allow for callbacks occurring in any order                          Assert.True(callbacksRecieved[0] || callbacksRecieved[1]);                      }                      else if (callbackCounter[0] == 2)                      {                          Assert.True(callbacksRecieved[0] && callbacksRecieved[1]);                          result.Done = true;                      }                      else                      {                          Assert.True(false);                      }                  }'                  handle'                  client.ServiceProvider.GetRequiredService<ILogger<ISimpleGrainObserver>>());
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_ObserverTest,The following statement contains a magic number: var observer = new ObserverTests.SimpleGrainObserver(                  (a' b' result) =>                  {                      Assert.Null(RuntimeContext.Current);                      callbackCounter[0]++;                        if (a == 3 && b == 0)                          callbacksRecieved[0] = true;                      else if (a == 3 && b == 2)                          callbacksRecieved[1] = true;                      else                          throw new ArgumentOutOfRangeException("Unexpected callback with values: a=" + a + "'b=" + b);                        if (callbackCounter[0] == 1)                      {                          // Allow for callbacks occurring in any order                          Assert.True(callbacksRecieved[0] || callbacksRecieved[1]);                      }                      else if (callbackCounter[0] == 2)                      {                          Assert.True(callbacksRecieved[0] && callbacksRecieved[1]);                          result.Done = true;                      }                      else                      {                          Assert.True(false);                      }                  }'                  handle'                  client.ServiceProvider.GetRequiredService<ILogger<ISimpleGrainObserver>>());
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_ObserverTest,The following statement contains a magic number: var observer = new ObserverTests.SimpleGrainObserver(                  (a' b' result) =>                  {                      Assert.Null(RuntimeContext.Current);                      callbackCounter[0]++;                        if (a == 3 && b == 0)                          callbacksRecieved[0] = true;                      else if (a == 3 && b == 2)                          callbacksRecieved[1] = true;                      else                          throw new ArgumentOutOfRangeException("Unexpected callback with values: a=" + a + "'b=" + b);                        if (callbackCounter[0] == 1)                      {                          // Allow for callbacks occurring in any order                          Assert.True(callbacksRecieved[0] || callbacksRecieved[1]);                      }                      else if (callbackCounter[0] == 2)                      {                          Assert.True(callbacksRecieved[0] && callbacksRecieved[1]);                          result.Done = true;                      }                      else                      {                          Assert.True(false);                      }                  }'                  handle'                  client.ServiceProvider.GetRequiredService<ILogger<ISimpleGrainObserver>>());
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_ObserverTest,The following statement contains a magic number: await grain.SetA(3);
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_ObserverTest,The following statement contains a magic number: await grain.SetB(2);
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_StreamTest,The following statement contains a magic number: await client.GetStreamProvider("MemStream").GetStream<int>(Guid.Empty' "hi")                          .SubscribeAsync(                              (val' token) =>                              {                                  vals.Add(val);                                  if (vals.Count >= 2) handle.Done = true;                                  return Task.CompletedTask;                              });
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_StreamTest,The following statement contains a magic number: await stream.OnNextAsync(409);
Magic Number,DefaultCluster.Tests.General,HostedClientTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\HostedClientTests.cs,HostedClient_StreamTest,The following statement contains a magic number: Assert.Equal(new[] { 1' 409 }' vals);
Magic Number,DefaultCluster.Tests.General,KeyExtensionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\KeyExtensionTests.cs,PrimaryKeyExtensionsShouldPermitStringsLongerThan127BytesLong,The following statement contains a magic number: string kx1 = new string('\\'' 300);
Magic Number,DefaultCluster.Tests.General,MultifacetGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MultifacetGrainTest.cs,RWReferences,The following statement contains a magic number: int x = 1234;
Magic Number,DefaultCluster.Tests.General,MultifacetGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MultifacetGrainTest.cs,MultifacetFactory,The following statement contains a magic number: writer.SetValue(5).Wait();
Magic Number,DefaultCluster.Tests.General,MultifacetGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MultifacetGrainTest.cs,MultifacetFactory,The following statement contains a magic number: Assert.Equal(5' v);
Magic Number,DefaultCluster.Tests.General,MultifacetGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MultifacetGrainTest.cs,Multifacet_InterfacesAsArguments,The following statement contains a magic number: writer.SetValue(10).Wait();
Magic Number,DefaultCluster.Tests.General,MultifacetGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MultifacetGrainTest.cs,Multifacet_InterfacesAsArguments,The following statement contains a magic number: Assert.Equal(10' v);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_SimpleNotification,The following statement contains a magic number: await grain.SetA(3);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_SimpleNotification,The following statement contains a magic number: await grain.SetB(2);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_SimpleNotification_GeneratedFactory,The following statement contains a magic number: await grain.SetA(3);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_SimpleNotification_GeneratedFactory,The following statement contains a magic number: await grain.SetB(2);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_SimpleNotification_Callback,The following statement contains a magic number: a == 3 && b == 0
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionSameReference,The following statement contains a magic number: await grain.SetA(2);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionSameReference_Callback,The following statement contains a magic number: Assert.True(callbackCounter <= 2' "Callback has been called more times than was expected " + callbackCounter);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionSameReference_Callback,The following statement contains a magic number: callbackCounter == 2
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_SubscribeUnsubscribe,The following statement contains a magic number: await grain.SetA(5);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_SubscribeUnsubscribe,The following statement contains a magic number: await grain.SetB(3);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_SubscribeUnsubscribe_Callback,The following statement contains a magic number: Assert.True(callbackCounter < 2' "Callback has been called more times than was expected.");
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_SubscribeUnsubscribe_Callback,The following statement contains a magic number: Assert.Equal(5' a);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionDifferentReferences,The following statement contains a magic number: grain.SetA(6).Ignore();
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionDifferentReferences_Callback,The following statement contains a magic number: Assert.True(callbackCounter < 3' "Callback has been called more times than was expected.");
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionDifferentReferences_Callback,The following statement contains a magic number: Assert.Equal(6' a);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DoubleSubscriptionDifferentReferences_Callback,The following statement contains a magic number: callbackCounter == 2
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DeleteObject,The following statement contains a magic number: await grain.SetA(5);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DeleteObject,The following statement contains a magic number: await grain.SetB(3);
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DeleteObject_Callback,The following statement contains a magic number: Assert.True(callbackCounter < 2' "Callback has been called more times than was expected.");
Magic Number,DefaultCluster.Tests.General,ObserverTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ObserverTests.cs,ObserverTest_DeleteObject_Callback,The following statement contains a magic number: Assert.Equal(5' a);
Magic Number,DefaultCluster.Tests.General,OneWayCallTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\OneWayCallTests.cs,OneWayMethodsReturnSynchronously_ViaClient,The following statement contains a magic number: await observer.ReceivedValue.WithTimeout(TimeSpan.FromSeconds(10));
Magic Number,DefaultCluster.Tests.General,OneWayCallTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\OneWayCallTests.cs,OneWayMethodReturnSynchronously_ViaGrain,The following statement contains a magic number: await observer.ReceivedValue.WithTimeout(TimeSpan.FromSeconds(10));
Magic Number,DefaultCluster.Tests.General,OneWayCallTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\OneWayCallTests.cs,MethodsInvokedThroughOneWayExtensionReturnSynchronously,The following statement contains a magic number: await observer.ReceivedValue.WithTimeout(TimeSpan.FromSeconds(10));
Magic Number,DefaultCluster.Tests.General,SimpleGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SimpleGrainTests.cs,SimpleGrainControlFlow,The following statement contains a magic number: Task setPromise = grain.SetA(2);
Magic Number,DefaultCluster.Tests.General,SimpleGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SimpleGrainTests.cs,SimpleGrainControlFlow,The following statement contains a magic number: setPromise = grain.SetB(3);
Magic Number,DefaultCluster.Tests.General,SimpleGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SimpleGrainTests.cs,SimpleGrainControlFlow,The following statement contains a magic number: Assert.Equal(6' await intPromise);
Magic Number,DefaultCluster.Tests.General,SimpleGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SimpleGrainTests.cs,SimpleGrainDataFlow,The following statement contains a magic number: Task setAPromise = grain.SetA(3);
Magic Number,DefaultCluster.Tests.General,SimpleGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SimpleGrainTests.cs,SimpleGrainDataFlow,The following statement contains a magic number: Task setBPromise = grain.SetB(4);
Magic Number,DefaultCluster.Tests.General,SimpleGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SimpleGrainTests.cs,SimpleGrainDataFlow,The following statement contains a magic number: Assert.Equal(12' x);
Magic Number,DefaultCluster.Tests.General,StatelessWorkerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\StatelessWorkerTests.cs,StatelessWorkerThrowExceptionConstructor,The following statement contains a magic number: i<100
Magic Number,DefaultCluster.Tests.General,StatelessWorkerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\StatelessWorkerTests.cs,StatelessWorkerActivationsPerSiloDoNotExceedMaxLocalWorkersCount,The following statement contains a magic number: int numberOfCalls = ExpectedMaxLocalActivations * 3 * gatewaysCount;
Magic Number,DefaultCluster.Tests.General,StatelessWorkerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\StatelessWorkerTests.cs,StatelessWorkerActivationsPerSiloDoNotExceedMaxLocalWorkersCount,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,DefaultCluster.Tests.General,StatelessWorkerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\StatelessWorkerTests.cs,StatelessWorkerFastActivationsDontFailInMultiSiloDeployment,The following statement contains a magic number: gatewaysCount < 2
Magic Number,DefaultCluster.Tests.General,StatelessWorkerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\StatelessWorkerTests.cs,StatelessWorkerFastActivationsDontFailInMultiSiloDeployment,The following statement contains a magic number: int numberOfCalls = ExpectedMaxLocalActivations * 3 * gatewaysCount;
Magic Number,DefaultCluster.Tests,ClientAddressableTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ClientAddressableTests.cs,MicroClientAddressableSerialStressTest,The following statement contains a magic number: const int iterationCount = 1000;
Magic Number,DefaultCluster.Tests,ClientAddressableTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ClientAddressableTests.cs,MicroClientAddressableParallelStressTest,The following statement contains a magic number: const int iterationCount = 1000;
Magic Number,DefaultCluster.Tests,MyPseudoGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ClientAddressableTests.cs,OnSerialStress,The following statement contains a magic number: return Task.FromResult(10000 + n);
Magic Number,DefaultCluster.Tests,MyPseudoGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ClientAddressableTests.cs,OnParallelStress,The following statement contains a magic number: return Task.FromResult(10000 + n);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,ErrorHandlingTimedMethod,The following statement contains a magic number: Task promise = grain.LongMethod(2000);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,ErrorHandlingTimedMethod,The following statement contains a magic number: Assert.False(promise.Wait(1000)' "The task shouldn't have completed yet.");
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,ErrorHandlingTimedMethod,The following statement contains a magic number: Assert.True(stopwatch.ElapsedMilliseconds >= 900' $"Waited less than 900ms: ({stopwatch.ElapsedMilliseconds}ms)");
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,ErrorHandlingTimedMethod,The following statement contains a magic number: Assert.True(stopwatch.ElapsedMilliseconds <= 1300' $"Waited longer than 1300ms: ({stopwatch.ElapsedMilliseconds}ms)");
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,ErrorHandlingTimedMethodWithError,The following statement contains a magic number: Task promise = grain.LongMethodWithError(2000);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,ErrorHandlingTimedMethodWithError,The following statement contains a magic number: Assert.False(promise.Wait(1000)' "The task shouldn't have completed yet.");
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,ErrorHandlingTimedMethodWithError,The following statement contains a magic number: Assert.True(stopwatch.ElapsedMilliseconds >= 900' $"Waited less than 900ms: ({stopwatch.ElapsedMilliseconds}ms)");
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,ErrorHandlingTimedMethodWithError,The following statement contains a magic number: Assert.True(stopwatch.ElapsedMilliseconds <= 1300' $"Waited longer than 1300ms: ({stopwatch.ElapsedMilliseconds}ms)");
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,StressHandlingMultipleDelayedRequests,The following statement contains a magic number: i < 500
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,StressHandlingMultipleDelayedRequests,The following statement contains a magic number: await Task.WhenAll(tasks).WithTimeout(TimeSpan.FromSeconds(20));
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,AC_DelayedExecutor_2,The following statement contains a magic number: Task<bool> promise = grain.ExecuteDelayed(TimeSpan.FromMilliseconds(2000));
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_AsyncMethods,The following statement contains a magic number: Task setPromise = grain.SetA_Async(10);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_AsyncMethods,The following statement contains a magic number: setPromise = grain.SetB_Async(30);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_AsyncMethods,The following statement contains a magic number: Assert.Equal(300' intPromise.Result);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_PromiseForward,The following statement contains a magic number: Task<int> promise = forwardGrain.GetAxB(5' 6);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_PromiseForward,The following statement contains a magic number: Task<int> promise = forwardGrain.GetAxB(5' 6);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_PromiseForward,The following statement contains a magic number: Assert.Equal(30' result);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_GuidDistribution,The following statement contains a magic number: CreateGR(n + 2' 1);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_GuidDistribution,The following statement contains a magic number: CreateGR(n + 3' 1);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_GuidDistribution,The following statement contains a magic number: CreateGR(n + 4' 1);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_GuidDistribution,The following statement contains a magic number: CreateGR(n' 2);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_GuidDistribution,The following statement contains a magic number: CreateGR(n + 1' 2);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_GuidDistribution,The following statement contains a magic number: CreateGR(n + 2' 2);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_GuidDistribution,The following statement contains a magic number: CreateGR(n + 2' 2);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_GuidDistribution,The following statement contains a magic number: CreateGR(n + 3' 2);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_GuidDistribution,The following statement contains a magic number: CreateGR(n + 3' 2);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_GuidDistribution,The following statement contains a magic number: CreateGR(n + 4' 2);
Magic Number,DefaultCluster.Tests,ErrorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\ErrorGrainTest.cs,SimpleGrain_GuidDistribution,The following statement contains a magic number: CreateGR(n + 4' 2);
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: await doSomethingEmptyGrain.SetA(10);
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: await doSomethingEmptyWithMoreGrain.SetA(10);
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: await doSomethingWithMoreEmptyGrain.SetA(10);
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: await doSomethingWithMoreGrain.SetA(10);
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: await doSomethingWithMoreGrain.SetB(10);
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: await doSomethingCombinedGrain.SetA(10);
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: await doSomethingCombinedGrain.SetB(10);
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: await doSomethingCombinedGrain.SetC(10);
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: Assert.Equal(11' await doSomethingEmptyGrain.GetA());
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: Assert.Equal(11' await doSomethingEmptyWithMoreGrain.GetA());
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: Assert.Equal(11' await doSomethingWithMoreEmptyGrain.GetA());
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: Assert.Equal(11' await doSomethingWithMoreGrain.GetA());
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: Assert.Equal(11' await doSomethingWithMoreGrain.GetB());
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: Assert.Equal(11' await doSomethingCombinedGrain.GetA());
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: Assert.Equal(11' await doSomethingCombinedGrain.GetB());
Magic Number,DefaultCluster.Tests,GrainInterfaceHierarchyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainInterfaceHierarchyTests.cs,DoSomethingValidateSingleGrainTest,The following statement contains a magic number: Assert.Equal(11' await doSomethingCombinedGrain.GetC());
Magic Number,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,CastMultifacetRWReference,The following statement contains a magic number: int newValue = 3;
Magic Number,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,CastMultifacetRWReferenceWaitForResolve,The following statement contains a magic number: int newValue = 4;
Magic Number,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,CastMultifacetRWReferenceWaitForResolve,The following statement contains a magic number: IMultifacetWriter writer = this.GrainFactory.GetGrain<IMultifacetWriter>(2);
Magic Number,DefaultCluster.Tests,GrainReferenceCastTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainReferenceCastTests.cs,ConfirmServiceInterfacesListContents,The following statement contains a magic number: Assert.Equal(3' interfaces.Keys.Count);
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_LargeTestData,The following statement contains a magic number: data.SetBit(13);
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_LargeTestData,The following statement contains a magic number: data.SetEnemy(17' CampaignEnemyTestType.Enemy1);
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_ValueTypePhase1,The following statement contains a magic number: ValueTypeTestData data = new ValueTypeTestData(4);
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_ValueTypePhase1,The following statement contains a magic number: Assert.Equal<int>(4' ((ValueTypeTestData)obj).GetValue());
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_ValueTypePhase2,The following statement contains a magic number: ValueTypeTestData data = new ValueTypeTestData(4);
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_ValueTypePhase2,The following statement contains a magic number: Assert.Equal<int>(4' ((ValueTypeTestData)copy).GetValue());
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_NodaTime,The following statement contains a magic number: var data = new NodaTimeTestPoco(new LocalDate(2010' 10' 14));
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_NodaTime,The following statement contains a magic number: var data = new NodaTimeTestPoco(new LocalDate(2010' 10' 14));
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_NodaTime,The following statement contains a magic number: var data = new NodaTimeTestPoco(new LocalDate(2010' 10' 14));
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_NodaTime,The following statement contains a magic number: Assert.Equal<LocalDate>(new LocalDate(2010' 10' 14)' ((NodaTimeTestPoco)obj).Date);
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_NodaTime,The following statement contains a magic number: Assert.Equal<LocalDate>(new LocalDate(2010' 10' 14)' ((NodaTimeTestPoco)obj).Date);
Magic Number,DefaultCluster.Tests,SerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SerializationTests\SerializationTests.cs,Serialization_NodaTime,The following statement contains a magic number: Assert.Equal<LocalDate>(new LocalDate(2010' 10' 14)' ((NodaTimeTestPoco)obj).Date);
Magic Number,DefaultCluster.Tests.CodeGeneration,CodeGeneratorTests_RequiringSilo,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\CodeGeneratorTests_RequiringSilo.cs,CodeGen_GrainId_TypeCode,The following statement contains a magic number: Assert.Equal(1146670029' k1.BaseTypeCode);
Magic Number,DefaultCluster.Tests.CodeGeneration,CodeGeneratorTests_RequiringSilo,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\CodeGeneratorTests_RequiringSilo.cs,CollectionTest_GrainId_TypeCode,The following statement contains a magic number: Assert.Equal(1381240679' k1.BaseTypeCode);
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenRoundTripSerialization,The following statement contains a magic number: var expectedStruct = new SomeStruct(10) { Id = Guid.NewGuid()' PublicValue = 6' ValueWithPrivateGetter = 7 };
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenRoundTripSerialization,The following statement contains a magic number: var expectedStruct = new SomeStruct(10) { Id = Guid.NewGuid()' PublicValue = 6' ValueWithPrivateGetter = 7 };
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenRoundTripSerialization,The following statement contains a magic number: var expectedStruct = new SomeStruct(10) { Id = Guid.NewGuid()' PublicValue = 6' ValueWithPrivateGetter = 7 };
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenRoundTripSerialization,The following statement contains a magic number: expectedStruct.SetValueWithPrivateSetter(8);
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenRoundTripSerialization,The following statement contains a magic number: expectedStruct.SetPrivateValue(9);
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenRoundTripSerialization,The following statement contains a magic number: var input = new OuterClass.SomeConcreteClass { Int = 89' String = Guid.NewGuid().ToString() };
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenRoundTripSerialization,The following statement contains a magic number: input.SetObsoleteInt(38);
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenRoundTripSerialization,The following statement contains a magic number: input.NonSerializedInt = 39;
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,CodeGenRoundTripSerialization,The following statement contains a magic number: var expectedStructConstraintObject = new ClassWithStructConstraint<int> { Value = 38 };
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,GrainWithGenericMethods,The following statement contains a magic number: Assert.Equal(-8' await grain.RoundTrip(8));
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,GrainWithGenericMethods,The following statement contains a magic number: Assert.Equal(-8' await grain.RoundTrip(8));
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,GenericGrainWithGenericMethods,The following statement contains a magic number: Assert.Equal(0' await grain.Method(888));
Magic Number,Tester.CodeGenTests,GeneratorGrainTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\GeneratorGrainTest.cs,GrainWithValueTaskMethod,The following statement contains a magic number: Assert.Equal(2' await grain.ValueTaskMethod(false).ConfigureAwait(false));
Magic Number,Tester.CodeGenTests,GrainWithGenericMethods,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\IRuntimeCodeGenGrain.cs,ValueTaskMethod,The following statement contains a magic number: return new ValueTask<int>(Task.FromResult(2));
Magic Number,Tester.CodeGenTests,event,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\IRuntimeCodeGenGrain.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (this.@public != null ? this.@public.GetHashCode() : 0);
Magic Number,Tester.CodeGenTests,event,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\IRuntimeCodeGenGrain.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.privateId.GetHashCode();
Magic Number,Tester.CodeGenTests,event,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\CodeGenTests\IRuntimeCodeGenGrain.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.Id.GetHashCode();
Magic Number,DefaultCluster.Tests.GeoClusterTests,SimpleGlobalSingleInstanceGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GeoClusterTests\SimpleGlobalSingleInstanceGrainTests.cs,SimpleGlobalSingleInstanceGrainTest,The following statement contains a magic number: int r1 = random.Next(0' 100);
Magic Number,DefaultCluster.Tests.GeoClusterTests,SimpleGlobalSingleInstanceGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GeoClusterTests\SimpleGlobalSingleInstanceGrainTests.cs,SimpleGlobalSingleInstanceGrainTest,The following statement contains a magic number: int r2 = random.Next(0' 100);
Magic Number,DefaultCluster.Tests.GeoClusterTests,SimpleGlobalSingleInstanceGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GeoClusterTests\SimpleGlobalSingleInstanceGrainTests.cs,SimpleGlobalSingleInstanceGrainTest,The following statement contains a magic number: i++ < 100
Magic Number,DefaultCluster.Tests.ActivationsLifeCycleTests,GrainActivateDeactivateTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainActivateDeactivateTests.cs,Deactivate_Simple,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(2));
Magic Number,DefaultCluster.Tests.ActivationsLifeCycleTests,GrainActivateDeactivateTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainActivateDeactivateTests.cs,Reactivate_Simple,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(2));
Magic Number,DefaultCluster.Tests.ActivationsLifeCycleTests,GrainActivateDeactivateTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainActivateDeactivateTests.cs,Reactivate_Simple,The following statement contains a magic number: await CheckNumActivateDeactivateCalls(2' 1' new[] { activation' activation2 }' "After reactivation");
Magic Number,DefaultCluster.Tests.ActivationsLifeCycleTests,GrainActivateDeactivateTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainActivateDeactivateTests.cs,Deactivate_TailCall,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(2));
Magic Number,DefaultCluster.Tests.ActivationsLifeCycleTests,GrainActivateDeactivateTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainActivateDeactivateTests.cs,Reactivate_TailCall,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(2));
Magic Number,DefaultCluster.Tests.ActivationsLifeCycleTests,GrainActivateDeactivateTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainActivateDeactivateTests.cs,Reactivate_TailCall,The following statement contains a magic number: await CheckNumActivateDeactivateCalls(2' 1' new[] { activation' activation2 }' "After reactivation");
Magic Number,DefaultCluster.Tests.ActivationsLifeCycleTests,GrainActivateDeactivateTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainActivateDeactivateTests.cs,LongRunning_Deactivate,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(2));
Magic Number,DefaultCluster.Tests.ActivationsLifeCycleTests,GrainActivateDeactivateTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainActivateDeactivateTests.cs,LongRunning_Deactivate,The following statement contains a magic number: await CheckNumActivateDeactivateCalls(2' 1' new[] { activation' activation2 }' "After reactivation");
Magic Number,DefaultCluster.Tests.ActivationsLifeCycleTests,GrainActivateDeactivateTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\GrainActivateDeactivateTests.cs,TaskAction_Deactivate,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(2));
Magic Number,DefaultCluster.Tests.StorageTests,MemoryStorageProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\MemoryStorageProviderTests.cs,MemoryStorageProvider_WriteReadStateTest,The following statement contains a magic number: Assert.Equal(2' names.Count);
Magic Number,UnitTDefaultCluster.Tests.General,RequestContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\RequestContextTest.cs,RequestContextCallerToCalleeFlow,The following statement contains a magic number: RequestContext.Set("GrainInfo"' 10);
Magic Number,UnitTDefaultCluster.Tests.General,RequestContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\RequestContextTest.cs,RequestContextCallerToCalleeFlow,The following statement contains a magic number: Assert.True((int)infoFromGrain == 10);
Magic Number,UnitTDefaultCluster.Tests.General,RequestContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\RequestContextTest.cs,RequestContextCalleeToCallerFlow,The following statement contains a magic number: await grain.SetRequestContext(15);
Magic Number,UnitTDefaultCluster.Tests.General,RequestContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\RequestContextTest.cs,RequestContextCalleeToCallerFlow,The following statement contains a magic number: Assert.True((int)infoFromGrain == 15);
Magic Number,DefaultCluster.Tests.SchedulerTests,STSchedulerLongTurnTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SchedulerTests\STSchedulerLongTurnTest.cs,Sched_LongTurnTest,The following statement contains a magic number: i < 100
Magic Number,DefaultCluster.Tests.SchedulerTests,STSchedulerLongTurnTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SchedulerTests\STSchedulerLongTurnTest.cs,Sched_LongTurnTest,The following statement contains a magic number: promises = grains.Select(grain => grain.LongMethod(12));
Magic Number,DefaultCluster.Tests.SchedulerTests,STSchedulerLongTurnTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\SchedulerTests\STSchedulerLongTurnTest.cs,Sched_LongTurnTest,The following statement contains a magic number: Assert.True(timer.Elapsed.TotalSeconds < 40' "Long turns queued up and caused an extended runtime");
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Basic,The following statement contains a magic number: var timeout = period.Multiply(50);
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Basic,The following statement contains a magic number: await Task.Delay(period.Divide(2));
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Basic,The following statement contains a magic number: stopwatch.Elapsed < timeout && last < 10
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Basic,The following statement contains a magic number: Assert.True(last >= 10 & last <= 12' last.ToString());
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Basic,The following statement contains a magic number: Assert.True(last >= 10 & last <= 12' last.ToString());
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Basic,The following statement contains a magic number: await Task.Delay(period.Multiply(2));
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Basic,The following statement contains a magic number: i < 10
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Parallel,The following statement contains a magic number: i < 10
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Parallel,The following statement contains a magic number: tasks.Add(                      Task.Run(                          async () =>                          {                              int last = await grain.GetCounter();                              var stopwatch = Stopwatch.StartNew();                              var timeout = period.Multiply(50);                              while (stopwatch.Elapsed < timeout && last < 10)                              {                                  await Task.Delay(period.Divide(2));                                  last = await grain.GetCounter();                              }                                output.WriteLine("value = " + last);                              Assert.True(last >= 10 && last <= 12' "last >= 10 && last <= 12");                          }));
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Parallel,The following statement contains a magic number: tasks.Add(                      Task.Run(                          async () =>                          {                              int last = await grain.GetCounter();                              var stopwatch = Stopwatch.StartNew();                              var timeout = period.Multiply(50);                              while (stopwatch.Elapsed < timeout && last < 10)                              {                                  await Task.Delay(period.Divide(2));                                  last = await grain.GetCounter();                              }                                output.WriteLine("value = " + last);                              Assert.True(last >= 10 && last <= 12' "last >= 10 && last <= 12");                          }));
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Parallel,The following statement contains a magic number: tasks.Add(                      Task.Run(                          async () =>                          {                              int last = await grain.GetCounter();                              var stopwatch = Stopwatch.StartNew();                              var timeout = period.Multiply(50);                              while (stopwatch.Elapsed < timeout && last < 10)                              {                                  await Task.Delay(period.Divide(2));                                  last = await grain.GetCounter();                              }                                output.WriteLine("value = " + last);                              Assert.True(last >= 10 && last <= 12' "last >= 10 && last <= 12");                          }));
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Parallel,The following statement contains a magic number: tasks.Add(                      Task.Run(                          async () =>                          {                              int last = await grain.GetCounter();                              var stopwatch = Stopwatch.StartNew();                              var timeout = period.Multiply(50);                              while (stopwatch.Elapsed < timeout && last < 10)                              {                                  await Task.Delay(period.Divide(2));                                  last = await grain.GetCounter();                              }                                output.WriteLine("value = " + last);                              Assert.True(last >= 10 && last <= 12' "last >= 10 && last <= 12");                          }));
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Parallel,The following statement contains a magic number: tasks.Add(                      Task.Run(                          async () =>                          {                              int last = await grain.GetCounter();                              var stopwatch = Stopwatch.StartNew();                              var timeout = period.Multiply(50);                              while (stopwatch.Elapsed < timeout && last < 10)                              {                                  await Task.Delay(period.Divide(2));                                  last = await grain.GetCounter();                              }                                output.WriteLine("value = " + last);                              Assert.True(last >= 10 && last <= 12' "last >= 10 && last <= 12");                          }));
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Migration,The following statement contains a magic number: var timeout = period.Multiply(50);
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Migration,The following statement contains a magic number: await Task.Delay(period.Divide(2));
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Migration,The following statement contains a magic number: stopwatch.Elapsed < timeout && last < 10
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Migration,The following statement contains a magic number: await Task.Delay(period.Divide(2));
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,TimerOrleansTest_Migration,The following statement contains a magic number: stopwatch.Elapsed < timeout && last < 10
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,AsyncTimerTest_GrainCall,The following statement contains a magic number: TimeSpan delay = TimeSpan.FromSeconds(5);
Magic Number,DefaultCluster.Tests.TimerTests,TimerOrleansTest,D:\research\architectureSmells\repos\dotnet_orleans\test\DefaultCluster.Tests\TimerOrleansTest.cs,AsyncTimerTest_GrainCall,The following statement contains a magic number: TimeSpan wait = delay.Multiply(2);
