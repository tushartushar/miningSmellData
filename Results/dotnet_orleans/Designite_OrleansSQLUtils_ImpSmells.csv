Implementation smell,Namespace,Class,File,Method,Description
Long Method,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The method has 109 lines of code.
Complex Method,Orleans.SqlUtils,RelationalStorageExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,Cyclomatic complexity of the method is 10
Long Parameter List,Orleans.SqlUtils,DbConstants,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbConstantsStore.cs,DbConstants,The method has 7 parameters. Parameters: startEscapeIndicator' endEscapeIndicator' unionAllSelectTemplate' isSynchronousAdoNetImplementation' supportsStreamNatively' supportsCommandCancellation' commandInterceptor
Long Parameter List,Orleans.SqlUtils,DbExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbExtensions.cs,CreateParameter,The method has 6 parameters. Parameters: command' direction' parameterName' value' size' dbType
Long Parameter List,Orleans.SqlUtils,DbExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbExtensions.cs,AddParameter,The method has 6 parameters. Parameters: command' parameterName' value' direction' size' dbType
Long Parameter List,Orleans.SqlUtils,IRelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\IRelationalStorage.cs,ReadAsync,The method has 5 parameters. Parameters: query' parameterProvider' selector' cancellationToken' commandBehavior
Long Parameter List,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,UpsertSiloMetricsAsync,The method has 6 parameters. Parameters: deploymentId' siloId' gateway' siloAddress' hostName' siloMetrics
Long Parameter List,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,UpsertReportClientMetricsAsync,The method has 5 parameters. Parameters: deploymentId' clientId' address' hostName' clientMetrics
Long Parameter List,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,InsertStatisticsCountersAsync,The method has 5 parameters. Parameters: deploymentId' hostName' siloOrClientName' id' counters
Long Parameter List,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,UpsertReminderRowAsync,The method has 5 parameters. Parameters: serviceId' grainRef' reminderName' startTime' period
Long Parameter List,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ReadAsync,The method has 5 parameters. Parameters: query' parameterProvider' selector' cancellationToken' commandBehavior
Long Parameter List,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteAsync,The method has 6 parameters. Parameters: query' parameterProvider' executor' selector' cancellationToken' commandBehavior
Long Parameter List,Orleans.SqlUtils,RelationalStorageExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The method has 7 parameters. Parameters: storage' tableName' parameters' cancellationToken' nameMap' onlyOnceColumns' useSqlParams
Long Parameter List,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,CheckVersionInconsistency,The method has 7 parameters. Parameters: operation' serviceId' providerName' storageVersion' grainVersion' normalizedGrainType' grainId
Long Parameter List,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,LogString,The method has 7 parameters. Parameters: operationProlog' serviceId' providerName' version' normalizedGrainType' grainId' exceptionMessage
Long Parameter List,Orleans.Storage,IStorageHasherPicker,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\IStorageHashPicker.cs,PickHasher,The method has 6 parameters. Parameters: serviceId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Storage,IStorageSerializationPicker,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\IStorageSerializationPicker.cs,PickDeserializer,The method has 6 parameters. Parameters: serviceId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Storage,IStorageSerializationPicker,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\IStorageSerializationPicker.cs,PickSerializer,The method has 6 parameters. Parameters: serviceId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Storage,StorageHasherPicker,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\StorageHasherPicker.cs,PickHasher,The method has 6 parameters. Parameters: serviceId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Storage,DefaultRelationalStoragePicker,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\StorageSerializationPicker.cs,PickDeserializer,The method has 6 parameters. Parameters: serviceId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Storage,DefaultRelationalStoragePicker,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\StorageSerializationPicker.cs,PickSerializer,The method has 6 parameters. Parameters: servideId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Providers.SqlServer,SqlStatisticsPublisher,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,AddConfiguration,The method has 6 parameters. Parameters: clusterId' silo' siloId' address' gatewayAddress' hostName
Long Parameter List,Orleans.Providers.SqlServer,SqlStatisticsPublisher,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,Init,The method has 6 parameters. Parameters: clusterId' storageConnectionString' siloAddress' siloName' gateway' hostName
Long Parameter List,Orleans.Providers.SqlServer,SqlStatisticsPublisher,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,Init,The method has 6 parameters. Parameters: isSilo' storageConnectionString' clusterId' address' siloName' hostName
Long Identifier,Orleans.SqlUtils,CachedFactory,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbConnectionFactory.cs,CachedFactory,The length of the parameter factoryAssemblyQualifiedNameKey is 31.
Long Identifier,Orleans.SqlUtils,CachedFactory,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbConnectionFactory.cs,,The length of the parameter FactoryAssemblyQualifiedNameKey is 31.
Long Identifier,Orleans.SqlUtils,DbConstants,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbConstantsStore.cs,DbConstants,The length of the parameter isSynchronousAdoNetImplementation is 33.
Long Identifier,Orleans.SqlUtils,DbConstants,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbConstantsStore.cs,,The length of the parameter IsSynchronousAdoNetImplementation is 33.
Long Identifier,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,InsertStatisticsCountersAsync,The length of the parameter collectionOfParametersToBeUnionized is 35.
Long Identifier,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,,The length of the parameter InsertStatisticsMultiupdateColumns is 34.
Long Identifier,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,,The length of the parameter isSynchronousAdoNetImplementation is 33.
Long Identifier,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,,The length of the parameter DefaultAdoInvariantInvariantPropertyName is 40.
Long Identifier,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,,The length of the parameter DataConnectionStringPropertyName is 32.
Long Identifier,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,,The length of the parameter DataConnectionInvariantPropertyName is 35.
Long Statement,Orleans.Runtime.Membership,SqlGatewayListProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlGatewayListProvider.cs,InitializeGatewayListProvider,The length of the statement  "            orleansQueries = await RelationalOrleansQueries.CreateInstance(options.AdoInvariant' options.ConnectionString' this.grainReferenceConverter); " is 141.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,InitializeMembershipTable,The length of the statement  "            orleansQueries = await RelationalOrleansQueries.CreateInstance(membershipTableOptions.AdoInvariant' membershipTableOptions.ConnectionString' this.grainReferenceConverter); " is 171.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,ReadRow,The length of the statement  "            if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(string.Format("SqlMembershipTable.ReadRow called with key: {0}."' key)); " is 123.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,InsertRow,The length of the statement  "            if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(string.Format("SqlMembershipTable.InsertRow called with entry {0} and tableVersion {1}."' entry' tableVersion)); " is 163.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,InsertRow,The length of the statement  "                if (logger.IsEnabled(LogLevel.Debug)) logger.Debug("SqlMembershipTable.InsertRow aborted due to null check. MembershipEntry is null."); " is 135.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,InsertRow,The length of the statement  "                if (logger.IsEnabled(LogLevel.Debug)) logger.Debug("SqlMembershipTable.InsertRow aborted due to null check. TableVersion is null "); " is 132.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,UpdateRow,The length of the statement  "            if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(string.Format("IMembershipTable.UpdateRow called with entry {0}' etag {1} and tableVersion {2}."' entry' etag' tableVersion)); " is 177.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,UpdateRow,The length of the statement  "                if (logger.IsEnabled(LogLevel.Debug)) logger.Debug("SqlMembershipTable.UpdateRow aborted due to null check. MembershipEntry is null."); " is 135.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,UpdateRow,The length of the statement  "                if (logger.IsEnabled(LogLevel.Debug)) logger.Debug("SqlMembershipTable.UpdateRow aborted due to null check. TableVersion is null "); " is 132.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,UpdateIAmAlive,The length of the statement  "            if(logger.IsEnabled(LogLevel.Trace)) logger.Trace(string.Format("IMembershipTable.UpdateIAmAlive called with entry {0}."' entry)); " is 130.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,UpdateIAmAlive,The length of the statement  "                if (logger.IsEnabled(LogLevel.Debug)) logger.Debug("SqlMembershipTable.UpdateIAmAlive aborted due to null check. MembershipEntry is null."); " is 140.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,DeleteMembershipTableEntries,The length of the statement  "            if (logger.IsEnabled(LogLevel.Trace)) logger.Trace(string.Format("IMembershipTable.DeleteMembershipTableEntries called with clusterId {0}."' clusterId)); " is 153.
Long Statement,Orleans.SqlUtils,DbConnectionFactory,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbConnectionFactory.cs,GetFactory,The length of the statement  "                throw new InvalidOperationException($"Unable to find and/or load a candidate assembly for '{invariantName}' invariant name."' exc); " is 131.
Long Statement,Orleans.SqlUtils,DbConnectionFactory,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbConnectionFactory.cs,GetFactory,The length of the statement  "                throw new InvalidOperationException($"Can't find database provider factory with '{invariantName}' invariant name. Please make sure that your ADO.Net provider package library is deployed with your application."); " is 211.
Long Statement,Orleans.SqlUtils,DbConnectionFactory,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbConnectionFactory.cs,GetFactory,The length of the statement  "                throw new InvalidOperationException($"Unable to load type '{providerFactoryDefinition.Item2}' for '{invariantName}' invariant name."); " is 134.
Long Statement,Orleans.SqlUtils,DbConnectionFactory,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbConnectionFactory.cs,GetFactory,The length of the statement  "            var prop = providerFactoryType.GetFields().SingleOrDefault(p => string.Equals(p.Name' "Instance"' StringComparison.OrdinalIgnoreCase) && p.IsStatic); " is 149.
Long Statement,Orleans.SqlUtils,DbConnectionFactory,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbConnectionFactory.cs,GetFactory,The length of the statement  "                throw new InvalidOperationException($"Invalid provider type '{providerFactoryDefinition.Item2}' for '{invariantName}' invariant name."); " is 136.
Long Statement,Orleans.SqlUtils,DbConnectionFactory,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbConnectionFactory.cs,CreateConnection,The length of the statement  "                throw new InvalidOperationException($"Database provider factory: '{invariantName}' did not return a connection object."); " is 121.
Long Statement,Orleans.SqlUtils,DbExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbExtensions.cs,GetValueOrDefaultAsync,The length of the statement  "            return (await record.IsDBNullAsync(ordinal).ConfigureAwait(false)) ? @default : (await record.GetFieldValueAsync<TValue>(ordinal).ConfigureAwait(false)); " is 153.
Long Statement,Orleans.SqlUtils,DbExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbExtensions.cs,ReflectionParameterProvider,The length of the statement  "                    parameter.ParameterName = nameMap != null && nameMap.ContainsKey(properties[i].Name) ? nameMap[property.Name] : properties[i].Name; " is 131.
Long Statement,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,CreateInstance,The length of the statement  "            var queries = await storage.ReadAsync(DbStoredQueries.GetQueriesKey' DbStoredQueries.Converters.GetQueryKeyAndValue' null); " is 123.
Long Statement,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,CreateInstance,The length of the statement  "            return new RelationalOrleansQueries(storage' new DbStoredQueries(queries.ToDictionary(q => q.Key' q => q.Value))' grainReferenceConverter); " is 139.
Long Statement,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,InsertStatisticsCountersAsync,The length of the statement  "            //Zero statistic values mean either that the system is not running or no updates. Such values are not inserted and pruned " is 121.
Long Statement,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,InsertStatisticsCountersAsync,The length of the statement  "            //to BEGIN TRANSACTION; INSERT INTO [OrleansStatisticsTable] <columns> SELECT <variables>; UNION ALL <variables> COMMIT TRANSACTION; " is 132.
Long Statement,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,InsertStatisticsCountersAsync,The length of the statement  "            var query = queryTemplate.Replace(template' string.Join(storageConsts.UnionAllSelectTemplate' collectionOfParametersToBeUnionized)); " is 132.
Long Statement,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,ReadReminderRowsAsync,The length of the statement  "            return ReadAsync(dbStoredQueries.ReadReminderRowsKey' record => DbStoredQueries.Converters.GetReminderEntry(record' this.grainReferenceConverter)' command => " is 157.
Long Statement,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,ReadReminderRowsAsync,The length of the statement  "            return ReadAsync(query' record => DbStoredQueries.Converters.GetReminderEntry(record' this.grainReferenceConverter)' command => " is 127.
Long Statement,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,ReadReminderRowAsync,The length of the statement  "            return ReadAsync(dbStoredQueries.ReadReminderRowKey' record => DbStoredQueries.Converters.GetReminderEntry(record' this.grainReferenceConverter)' command => " is 156.
Long Statement,Orleans.SqlUtils,RelationalOrleansQueries,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,InsertMembershipVersionRowAsync,The length of the statement  "            return ReadAsync(dbStoredQueries.InsertMembershipVersionKey' DbStoredQueries.Converters.GetSingleBooleanValue' command => " is 121.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ReadAsync,The length of the statement  "            //If the query is something else that is not acceptable (e.g. an empty string)' there will an appropriate database exception. " is 125.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ReadAsync,The length of the statement  "            //It is certain the result is already ready here and can be collected straight away. Having a truly asynchronous result collection " is 130.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ReadAsync,The length of the statement  "            //IAsyncEnumerable<TResult> or equivalent method ought to be used. Taking the result here without async-await saves for generating " is 130.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ReadAsync,The length of the statement  "            var ret = ExecuteAsync(query' parameterProvider' ExecuteReaderAsync' selector' cancellationToken' commandBehavior).GetAwaiter().GetResult().Item1; " is 146.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteAsync,The length of the statement  "            //If the query is something else that is not acceptable (e.g. an empty string)' there will an appropriate database exception. " is 125.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteAsync,The length of the statement  "            //It is certain the result is already ready here and can be collected straight away. Having a truly asynchronous result collection " is 130.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteAsync,The length of the statement  "            //IAsyncEnumerable<TResult> or equivalent method ought to be used. Taking the result here without async-await saves for generating " is 130.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteAsync,The length of the statement  "            var ret = ExecuteAsync(query' parameterProvider' ExecuteReaderAsync' (unit' id' c) => Task.FromResult(unit)' cancellationToken' commandBehavior).GetAwaiter().GetResult().Item2; " is 176.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteReaderAsync,The length of the statement  "            using(var reader = await command.ExecuteReaderAsync(commandBehavior' cancellationToken).ConfigureAwait(continueOnCapturedContext: false)) " is 137.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteReaderAsync,The length of the statement  "                        cancellationRegistration = cancellationToken.Register(CommandCancellation' Tuple.Create(reader' command)' useSynchronizationContext: false); " is 140.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,CommandCancellation,The length of the statement  "            //The MSDN documentation tells that DbCommand.Cancel() should not be called for SqlCommand if the reader has been closed " is 120.
Long Statement,Orleans.SqlUtils,RelationalStorage,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,CommandCancellation,The length of the statement  "            //despite the connection already closed. Source: https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.cancel(v=vs.110).aspx. " is 145.
Long Statement,Orleans.SqlUtils,RelationalStorageExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "                columns = string.Join("'"' nameMap == null ? properties.Select(pn => string.Format("{0}{1}{2}"' startEscapeIndicator' pn.Name' endEscapeIndicator)) : properties.Select(pn => string.Format("{0}{1}{2}"' startEscapeIndicator' (nameMap.ContainsKey(pn.Name) ? nameMap[pn.Name] : pn.Name)' endEscapeIndicator))); " is 306.
Long Statement,Orleans.SqlUtils,RelationalStorageExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "                            var parameterName = string.Format("@{0}"' (nameMap.ContainsKey(onlyOnceProperties[i].Name) ? nameMap[onlyOnceProperties[i].Name] : onlyOnceProperties[i].Name)); " is 160.
Long Statement,Orleans.SqlUtils,RelationalStorageExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "                var multiProperties = onlyOnceColumns == null ? properties : properties.Where(pn => !onlyOnceColumns.Contains(pn.Name)).Select(pn => pn).ToArray(); " is 147.
Long Statement,Orleans.SqlUtils,RelationalStorageExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "            var query = string.Format(insertIntoValuesTemplate' tableName' columns' string.Join(storageConsts.UnionAllSelectTemplate' values)); " is 131.
Long Statement,Orleans.SqlUtils,RelationalStorageExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ReadAsync,The length of the statement  "            return storage.ReadAsync(query' parameterProvider' (record' i' cancellationToken) => Task.FromResult(selector(record))); " is 120.
Long Statement,Orleans.Runtime.ReminderService,SqlReminderTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\ReminderService\SqlReminderTable.cs,Init,The length of the statement  "            orleansQueries = await RelationalOrleansQueries.CreateInstance(config.AdoInvariantForReminders' config.DataConnectionStringForReminders' this.grainReferenceConverter); " is 167.
Long Statement,Orleans.Runtime.ReminderService,SqlReminderTable,C:\repos\dotnet_orleans\src\OrleansSQLUtils\ReminderService\SqlReminderTable.cs,UpsertRow,The length of the statement  "            return orleansQueries.UpsertReminderRowAsync(serviceId' entry.GrainRef' entry.ReminderName' entry.StartAt' entry.Period);             " is 121.
Long Statement,Orleans.Runtime.Configuration,AdoNetConfigurationExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\AdoNetConfigurationExtensions.cs,AddAdoNetStorageProvider,The length of the statement  "            var properties = new Dictionary<string' string> { { AdoNetStorageProvider.DataConnectionStringPropertyName' connectionString } }; " is 129.
Long Statement,Orleans.Runtime.Configuration,AdoNetConfigurationExtensions,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\AdoNetConfigurationExtensions.cs,GetConnectionString,The length of the statement  "            throw new ArgumentNullException(nameof(connectionString)' "Parameter value and fallback value are both null or empty."); " is 120.
Long Statement,OrleansSQLUtils.Storage,Converters,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbStoredQueries.cs,GetReminderEntry,The length of the statement  "                        //GetValue<int> causes an InvalidCastException with oracle data provider. See https://github.com/dotnet/orleans/issues/3561 " is 123.
Long Statement,OrleansSQLUtils.Storage,Converters,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbStoredQueries.cs,GetMembershipEntry,The length of the statement  "                //TODO: This is a bit of hack way to check in the current version if there's membership data or not' but if there's a start time' there's member.             " is 145.
Long Statement,OrleansSQLUtils.Storage,Converters,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\DbStoredQueries.cs,GetSiloAddress,The length of the statement  "                //GetValue<int> causes an InvalidCastException with orcale data provider. See https://github.com/dotnet/orleans/issues/3561 " is 123.
Long Statement,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToString,The length of the statement  "            return string.Format($"{primaryKey}{(keyExtension != null ? GrainIdAndExtensionSeparator + keyExtension : string.Empty)}"); " is 123.
Long Statement,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The length of the statement  "            return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56)); " is 249.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "                throw new BadProviderConfigException($"The {DataConnectionStringPropertyName} setting has not been configured. Add a {DataConnectionStringPropertyName} setting with a valid connection string."); " is 194.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "            //NOTE: StorageSerializationPicker should be defined outside and given as a parameter in constructor or via Init in IProviderConfiguration perhaps. " is 147.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "            //Currently this limits one's options to much to the current situation of providing only one serializer for serialization and deserialization " is 141.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "            //with no regard to state update or serializer changes. Maybe have this serialized as a JSON in props and read via a key? " is 121.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "            StorageSerializationPicker = new DefaultRelationalStoragePicker(this.ConfigureDeserializers(config' providerRuntime)' this.ConfigureSerializers(config' providerRuntime)); " is 170.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "            //NOTE: Currently there should be only one pair of providers given. That is' only UseJsonFormatPropertyName' UseXmlFormatPropertyName or UseBinaryFormatPropertyName. " is 165.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "                throw new ArgumentException("Configuration error' only one serializer and deserializer should be given."' nameof(config)); " is 122.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "                StorageSerializationPicker.Deserializers.Add(new OrleansStorageDefaultBinaryDeserializer(this.serializationManager' UseBinaryFormatPropertyName)); " is 146.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "                StorageSerializationPicker.Serializers.Add(new OrleansStorageDefaultBinarySerializer(this.serializationManager' UseBinaryFormatPropertyName)); " is 142.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "            var connectionInvariant = config.Properties.ContainsKey(DataConnectionInvariantPropertyName) ? config.Properties[DataConnectionInvariantPropertyName] : DefaultAdoInvariantInvariantPropertyName; " is 193.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "            logger.Info((int)RelationalStorageProviderCodes.RelationalProviderInitProvider' $"Initialized storage provider: ServiceId={ServiceId} ProviderName={Name} Invariant={Storage.InvariantName} ConnectionString={Storage.ConnectionString}."); " is 235.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "                logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderClearing' LogString("Clearing grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString())); " is 181.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "                var grainIdHash = HashPicker.PickHasher(ServiceId' Name' baseGrainType' grainReference' grainState).Hash(grainId.GetHashBytes()); " is 129.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "                var grainTypeHash = HashPicker.PickHasher(ServiceId' Name' baseGrainType' grainReference' grainState).Hash(Encoding.UTF8.GetBytes(baseGrainType)); " is 146.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "                    command.AddParameter("GrainStateVersion"' !string.IsNullOrWhiteSpace(grainState.ETag) ? int.Parse(grainState.ETag' CultureInfo.InvariantCulture) : default(int?)); " is 162.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "                }' (selector' resultSetCount' token) => Task.FromResult(selector.GetValue(0).ToString())' CancellationToken.None).ConfigureAwait(false)); " is 137.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "                logger.Error((int)RelationalStorageProviderCodes.RelationalProviderDeleteError' LogString("Error clearing grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString()' ex.Message)' ex); " is 206.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "            var inconsistentStateException = CheckVersionInconsistency(OperationString' ServiceId' Name' storageVersion' grainState.ETag' baseGrainType' grainId.ToString()); " is 161.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "                logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderCleared' LogString("Cleared grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString())); " is 179.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "                logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderReading' LogString("Reading grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString())); " is 179.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "                SerializationChoice choice = StorageSerializationPicker.PickDeserializer(ServiceId' Name' baseGrainType' grainReference' grainState' null); " is 139.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "                    var errorString = LogString("No deserializer found"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString()); " is 122.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "                var grainIdHash = HashPicker.PickHasher(ServiceId' Name' baseGrainType' grainReference' grainState).Hash(grainId.GetHashBytes()); " is 129.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "                var grainTypeHash = HashPicker.PickHasher(ServiceId' Name' baseGrainType' grainReference' grainState).Hash(Encoding.UTF8.GetBytes(baseGrainType)); " is 146.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "                    logger.Info((int)RelationalStorageProviderCodes.RelationalProviderNoStateFound' LogString("Null grain state read (default will be instantiated)"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString())); " is 216.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "                    logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderRead' LogString("Read grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString())); " is 173.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "                logger.Error((int)RelationalStorageProviderCodes.RelationalProviderReadError' LogString("Error reading grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString()' ex.Message)' ex); " is 203.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "                logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderWriting' LogString("Writing grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString())); " is 179.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "                var grainIdHash = HashPicker.PickHasher(ServiceId' Name' baseGrainType' grainReference' grainState).Hash(grainId.GetHashBytes()); " is 129.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "                var grainTypeHash = HashPicker.PickHasher(ServiceId' Name' baseGrainType' grainReference' grainState).Hash(Encoding.UTF8.GetBytes(baseGrainType)); " is 146.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "                    command.AddParameter("GrainStateVersion"' !string.IsNullOrWhiteSpace(grainState.ETag) ? int.Parse(grainState.ETag' CultureInfo.InvariantCulture) : default(int?)); " is 162.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "                    SerializationChoice serializer = StorageSerializationPicker.PickSerializer(ServiceId' Name' baseGrainType' grainReference' grainState); " is 135.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "                    command.AddParameter("PayloadBinary"' (byte[])(serializer.Serializer.Tag == UseBinaryFormatPropertyName ? serializer.Serializer.Serialize(data) : null)); " is 153.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "                    command.AddParameter("PayloadJson"' (string)(serializer.Serializer.Tag == UseJsonFormatPropertyName ? serializer.Serializer.Serialize(data) : null)); " is 149.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "                    command.AddParameter("PayloadXml"' (string)(serializer.Serializer.Tag == UseXmlFormatPropertyName ? serializer.Serializer.Serialize(data) : null)); " is 147.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "                { return Task.FromResult(selector.GetNullableInt32("NewGrainStateVersion").ToString()); }' CancellationToken.None).ConfigureAwait(false); " is 137.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "                logger.Error((int)RelationalStorageProviderCodes.RelationalProviderWriteError' LogString("Error writing grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString()' ex.Message)' ex); " is 204.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "            var inconsistentStateException = CheckVersionInconsistency(OperationString' ServiceId' Name' storageVersion' grainState.ETag' baseGrainType' grainId.ToString()); " is 161.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "                logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderWrote' LogString("Wrote grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString())); " is 175.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,CheckVersionInconsistency,The length of the statement  "                return new InconsistentStateException($"Version conflict ({operation}): ServiceId={serviceId} ProviderName={providerName} GrainType={normalizedGrainType} GrainId={grainId} ETag={grainVersion}."); " is 195.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,LogString,The length of the statement  "            return $"{operationProlog}: ServiceId={serviceId} ProviderName={providerName} GrainType={normalizedGrainType} GrainId={grainId} ETag={version}{(exceptionMessage != null ? Exception + exceptionMessage : string.Empty)}."; " is 219.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ExtractBaseClass,The length of the statement  "                return split[0] + string.Format($"[{string.Join("'"' split.Skip(1).Where(i => i.Length > 1 && i[0] != ''').Select(i => string.Format($"[{i.Substring(0' i.IndexOf('''' i.IndexOf(''') + 1))}]")))}]"); " is 198.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ConfigureDeserializers,The length of the statement  "            if(config.Properties.ContainsKey(UseJsonFormatPropertyName) && @true.Equals(config.Properties[UseJsonFormatPropertyName]' StringComparison.OrdinalIgnoreCase)) " is 158.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ConfigureDeserializers,The length of the statement  "                var jsonSettings = OrleansJsonSerializer.UpdateSerializerSettings(OrleansJsonSerializer.GetDefaultSerializerSettings(this.serializationManager' providerRuntime.GrainFactory)' config); " is 183.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ConfigureDeserializers,The length of the statement  "            if(config.Properties.ContainsKey(UseXmlFormatPropertyName) && @true.Equals(config.Properties[UseXmlFormatPropertyName]' StringComparison.OrdinalIgnoreCase)) " is 156.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ConfigureDeserializers,The length of the statement  "            if(config.Properties.ContainsKey(UseBinaryFormatPropertyName) && @true.Equals(config.Properties[UseBinaryFormatPropertyName]' StringComparison.OrdinalIgnoreCase)) " is 162.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ConfigureSerializers,The length of the statement  "            if(config.Properties.ContainsKey(UseJsonFormatPropertyName) && @true.Equals(config.Properties[UseJsonFormatPropertyName]' StringComparison.OrdinalIgnoreCase)) " is 158.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ConfigureSerializers,The length of the statement  "                var jsonSettings = OrleansJsonSerializer.UpdateSerializerSettings(OrleansJsonSerializer.GetDefaultSerializerSettings(this.serializationManager' providerRuntime.GrainFactory)' config); " is 183.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ConfigureSerializers,The length of the statement  "            if(config.Properties.ContainsKey(UseXmlFormatPropertyName) && @true.Equals(config.Properties[UseXmlFormatPropertyName]' StringComparison.OrdinalIgnoreCase)) " is 156.
Long Statement,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ConfigureSerializers,The length of the statement  "            if(config.Properties.ContainsKey(UseBinaryFormatPropertyName) && @true.Equals(config.Properties[UseBinaryFormatPropertyName]' StringComparison.OrdinalIgnoreCase)) " is 162.
Long Statement,Orleans.Storage,OrleansStorageDefaultBinaryDeserializer,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\OrleansStorageDefaultBinaryDeserializer.cs,Deserialize,The length of the statement  "            throw new NotSupportedException($"{nameof(OrleansStorageDefaultBinaryDeserializer)} does not support stream deserialization."); " is 127.
Long Statement,Orleans.Storage,OrleansStorageDefaultBinarySerializer,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\OrleansStorageDefaultBinarySerializer.cs,Serialize,The length of the statement  "            throw new NotSupportedException($"{nameof(OrleansStorageDefaultBinarySerializer)} does not support stream deserialization."); " is 125.
Long Statement,Orleans.Storage,DefaultRelationalStoragePicker,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\StorageSerializationPicker.cs,PickDeserializer,The length of the statement  "            //If the tag has been given' try to pick that one and if not found' take the first on the list. This arrangement allows one to switch storage format more easily. " is 161.
Long Statement,Orleans.Providers.SqlServer,SqlStatisticsPublisher,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,Init,The length of the statement  "            orleansQueries = await RelationalOrleansQueries.CreateInstance(adoInvariant' config.Properties["ConnectionString"]' this.grainReferenceConverter); " is 146.
Long Statement,Orleans.Providers.SqlServer,SqlStatisticsPublisher,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,Init,The length of the statement  "            orleansQueries = await RelationalOrleansQueries.CreateInstance(config.AdoInvariant' config.DataConnectionString' this.grainReferenceConverter); " is 143.
Long Statement,Orleans.Providers.SqlServer,SqlStatisticsPublisher,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,ReportMetrics,The length of the statement  "            if(logger.IsEnabled(LogLevel.Trace)) logger.Trace("SqlStatisticsPublisher.ReportMetrics (client) called with data: {0}."' metricsData); " is 135.
Long Statement,Orleans.Providers.SqlServer,SqlStatisticsPublisher,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,ReportMetrics,The length of the statement  "            if (logger.IsEnabled(LogLevel.Trace)) logger.Trace("SqlStatisticsPublisher.ReportMetrics (silo) called with data: {0}."' metricsData); " is 134.
Long Statement,Orleans.Providers.SqlServer,SqlStatisticsPublisher,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,ReportStats,The length of the statement  "            if (logger.IsEnabled(LogLevel.Trace)) logger.Trace("ReportStats called with {0} counters' name: {1}' id: {2}"' statsCounters.Count' siloOrClientName' id); " is 154.
Long Statement,Orleans.Providers.SqlServer,SqlStatisticsPublisher,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,ReportStats,The length of the statement  "                    insertTasks.Add(orleansQueries.InsertStatisticsCountersAsync(deploymentId' hostName' siloOrClientName' id' counterBatch)); " is 122.
Magic Number,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,AdoGrainKey,The following statement contains a magic number: N1Key = BitConverter.ToInt64(guidKeyBytes' 8);
Magic Number,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoNetStorageProvider,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The following statement contains a magic number: try              {                  SerializationChoice choice = StorageSerializationPicker.PickDeserializer(ServiceId' Name' baseGrainType' grainReference' grainState' null);                  if(choice.Deserializer == null)                  {                      var errorString = LogString("No deserializer found"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString());                      logger.Error((int)RelationalStorageProviderCodes.RelationalProviderNoDeserializer' errorString);                      throw new InvalidOperationException(errorString);                  }                    var commandBehavior = choice.PreferStreaming ? CommandBehavior.SequentialAccess : CommandBehavior.Default;                  var grainStateType = grainState.State.GetType();                  var grainIdHash = HashPicker.PickHasher(ServiceId' Name' baseGrainType' grainReference' grainState).Hash(grainId.GetHashBytes());                  var grainTypeHash = HashPicker.PickHasher(ServiceId' Name' baseGrainType' grainReference' grainState).Hash(Encoding.UTF8.GetBytes(baseGrainType));                  var readRecords = (await Storage.ReadAsync(CurrentOperationalQueries.ReadFromStorage' (command =>                  {                      command.AddParameter("GrainIdHash"' grainIdHash);                      command.AddParameter("GrainIdN0"' grainId.N0Key);                      command.AddParameter("GrainIdN1"' grainId.N1Key);                      command.AddParameter("GrainTypeHash"' grainTypeHash);                      command.AddParameter("GrainTypeString"' baseGrainType);                      command.AddParameter("GrainIdExtensionString"' grainId.StringKey);                      command.AddParameter("ServiceId"' ServiceId);                  })' async (selector' resultSetCount' token) =>                  {                      object storageState = null;                      int? version;                      if(choice.PreferStreaming)                      {                          //When streaming via ADO.NET' using CommandBehavior.SequentialAccess' the order of                          //the columns on how they are read needs to be exactly this.                          const int binaryColumnPositionInSelect = 0;                          const int xmlColumnPositionInSelect = 1;                          const int jsonColumnPositionInSelect = 2;                          var streamSelector = (DbDataReader)selector;                          if(!(await streamSelector.IsDBNullAsync(binaryColumnPositionInSelect)))                          {                              using(var downloadStream = streamSelector.GetStream(binaryColumnPositionInSelect' Storage))                              {                                  storageState = choice.Deserializer.Deserialize(downloadStream' grainStateType);                              }                          }                            if(!(await streamSelector.IsDBNullAsync(xmlColumnPositionInSelect)))                          {                              using(var downloadStream = streamSelector.GetTextReader(xmlColumnPositionInSelect))                              {                                  storageState = choice.Deserializer.Deserialize(downloadStream' grainStateType);                              }                          }                            if(!(await streamSelector.IsDBNullAsync(jsonColumnPositionInSelect)))                          {                              using(var downloadStream = streamSelector.GetTextReader(jsonColumnPositionInSelect))                              {                                  storageState = choice.Deserializer.Deserialize(downloadStream' grainStateType);                              }                          }                            version = await streamSelector.GetValueAsync<int?>("Version");                      }                      else                      {                          //All but one of these should be null. All will be read and an appropriate deserializer picked.                          //NOTE: When streaming will be implemented' it is worthwhile to optimize this so that the defined                          //serializer will be picked and then streaming tried according to its tag.                          object payload;                          payload = selector.GetValueOrDefault<byte[]>("PayloadBinary");                          if(payload == null)                          {                              payload = selector.GetValueOrDefault<string>("PayloadXml");                          }                            if(payload == null)                          {                              payload = selector.GetValueOrDefault<string>("PayloadJson");                          }                            if(payload != null)                          {                              storageState = choice.Deserializer.Deserialize(payload' grainStateType);                          }                            version = selector.GetNullableInt32("Version");                      }                        return Tuple.Create(storageState' version?.ToString(CultureInfo.InvariantCulture));                  }' CancellationToken.None' commandBehavior).ConfigureAwait(false)).SingleOrDefault();                    object state = readRecords != null ? readRecords.Item1 : null;                  string etag = readRecords != null ? readRecords.Item2 : null;                  if(state == null)                  {                      logger.Info((int)RelationalStorageProviderCodes.RelationalProviderNoStateFound' LogString("Null grain state read (default will be instantiated)"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString()));                      state = Activator.CreateInstance(grainStateType);                  }                    grainState.State = state;                  grainState.ETag = etag;                  if (logger.IsEnabled(LogLevel.Trace))                  {                      logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderRead' LogString("Read grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString()));                  }              }              catch(Exception ex)              {                  logger.Error((int)RelationalStorageProviderCodes.RelationalProviderReadError' LogString("Error reading grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString()' ex.Message)' ex);                  throw;              }
Magic Number,Orleans.Providers.SqlServer,SqlStatisticsPublisher,C:\repos\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,ReportStats,The following statement contains a magic number: try              {                                                      //This batching is done for two reasons:                  //1) For not to introduce a query large enough to be rejected.                  //2) Performance' though using a fixed constants likely will not give the optimal performance in every situation.                  const int maxBatchSizeInclusive = 200;                  var counterBatches = BatchCounters(statsCounters' maxBatchSizeInclusive);                  foreach(var counterBatch in counterBatches)                  {                      //The query template from which to retrieve the set of columns that are being inserted.                      insertTasks.Add(orleansQueries.InsertStatisticsCountersAsync(deploymentId' hostName' siloOrClientName' id' counterBatch));                  }                                    await Task.WhenAll(insertTasks);                              }              catch(Exception ex)              {                  if (logger.IsEnabled(LogLevel.Debug)) logger.Debug("ReportStats faulted: {0}"' ex.ToString());                                  foreach(var faultedTask in insertTasks.Where(t => t.IsFaulted))                  {                      if (logger.IsEnabled(LogLevel.Debug)) logger.Debug("Faulted task exception: {0}"' faultedTask.ToString());                  }                    throw;              }
