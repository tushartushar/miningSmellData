Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Orleans.SqlUtils,RelationalStorageExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,Cyclomatic complexity of the method is 10
Long Parameter List,Orleans.SqlUtils,DbExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\DbExtensions.cs,CreateParameter,The method has 6 parameters.
Long Parameter List,Orleans.SqlUtils,DbExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\DbExtensions.cs,AddParameter,The method has 6 parameters.
Long Parameter List,Orleans.SqlUtils,IRelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\IRelationalStorage.cs,ReadAsync,The method has 5 parameters.
Long Parameter List,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ReadAsync,The method has 5 parameters.
Long Parameter List,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteAsync,The method has 6 parameters.
Long Parameter List,Orleans.SqlUtils,RelationalOrleansQueries,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,UpsertSiloMetricsAsync,The method has 6 parameters.
Long Parameter List,Orleans.SqlUtils,RelationalOrleansQueries,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,UpsertReportClientMetricsAsync,The method has 5 parameters.
Long Parameter List,Orleans.SqlUtils,RelationalOrleansQueries,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,InsertStatisticsCountersAsync,The method has 5 parameters.
Long Parameter List,Orleans.SqlUtils,RelationalStorageExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The method has 7 parameters.
Long Parameter List,Orleans.Storage,IStorageHasherPicker,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\IStorageHashPicker.cs,PickHasher,The method has 6 parameters.
Long Parameter List,Orleans.Storage,StorageHasherPicker,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\StorageHasherPicker.cs,PickHasher,The method has 6 parameters.
Long Parameter List,Orleans.Storage,IStorageSerializationPicker,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\IStorageSerializationPicker.cs,PickDeserializer,The method has 6 parameters.
Long Parameter List,Orleans.Storage,IStorageSerializationPicker,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\IStorageSerializationPicker.cs,PickSerializer,The method has 6 parameters.
Long Parameter List,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,CheckVersionInconsistency,The method has 7 parameters.
Long Parameter List,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,LogString,The method has 7 parameters.
Long Parameter List,Orleans.Storage,DefaultRelationalStoragePicker,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\StorageSerializationPicker.cs,PickDeserializer,The method has 6 parameters.
Long Parameter List,Orleans.Storage,DefaultRelationalStoragePicker,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\StorageSerializationPicker.cs,PickSerializer,The method has 6 parameters.
Long Parameter List,Orleans.Providers.SqlServer,SqlStatisticsPublisher,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,AddConfiguration,The method has 6 parameters.
Long Parameter List,Orleans.Providers.SqlServer,SqlStatisticsPublisher,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,Init,The method has 6 parameters.
Long Parameter List,Orleans.Providers.SqlServer,SqlStatisticsPublisher,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,Init,The method has 6 parameters.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,InitializeMembershipTable,The length of the statement  "	orleansQueries = await RelationalOrleansQueries.CreateInstance (config.AdoInvariant' config.DataConnectionString' this.grainReferenceConverter); " is 144.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,InitializeGatewayListProvider,The length of the statement  "	orleansQueries = await RelationalOrleansQueries.CreateInstance (config.AdoInvariant' config.DataConnectionString' this.grainReferenceConverter); " is 144.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,InsertRow,The length of the statement  "		logger.Verbose3 (string.Format ("SqlMembershipTable.InsertRow called with entry {0} and tableVersion {1}."' entry' tableVersion)); " is 130.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,UpdateRow,The length of the statement  "		logger.Verbose3 (string.Format ("IMembershipTable.UpdateRow called with entry {0}' etag {1} and tableVersion {2}."' entry' etag' tableVersion)); " is 144.
Long Statement,Orleans.Runtime.MembershipService,SqlMembershipTable,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Messaging\SqlMembershipTable.cs,DeleteMembershipTableEntries,The length of the statement  "		logger.Verbose3 (string.Format ("IMembershipTable.DeleteMembershipTableEntries called with deploymentId {0}."' deploymentId)); " is 126.
Long Statement,Orleans.SqlUtils,DbExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\DbExtensions.cs,GetValueOrDefaultAsync,The length of the statement  "	return (await record.IsDBNullAsync (ordinal).ConfigureAwait (false)) ? @default : (await record.GetFieldValueAsync<TValue> (ordinal).ConfigureAwait (false)); " is 157.
Long Statement,Orleans.SqlUtils,DbExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\DbExtensions.cs,GetValueOrDefaultAsync,The length of the statement  "	return (await record.IsDBNullAsync (ordinal).ConfigureAwait (false)) ? @default : (await record.GetFieldValueAsync<TValue> (ordinal).ConfigureAwait (false)); " is 157.
Long Statement,Orleans.SqlUtils,DbExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\DbExtensions.cs,ReflectionParameterProvider,The length of the statement  "			parameter.ParameterName = nameMap != null && nameMap.ContainsKey (properties [i].Name) ? nameMap [property.Name] : properties [i].Name; " is 135.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ReadAsync,The length of the statement  "	//If the query is something else that is not acceptable (e.g. an empty string)' there will an appropriate database exception. " is 125.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ReadAsync,The length of the statement  "	//It is certain the result is already ready here and can be collected straight away. Having a truly asynchronous result collection " is 130.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ReadAsync,The length of the statement  "	//IAsyncEnumerable<TResult> or equivalent method ought to be used. Taking the result here without async-await saves for generating " is 130.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ReadAsync,The length of the statement  "	var ret = ExecuteAsync (query' parameterProvider' ExecuteReaderAsync' selector' cancellationToken' commandBehavior).GetAwaiter ().GetResult ().Item1; " is 149.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteAsync,The length of the statement  "	//If the query is something else that is not acceptable (e.g. an empty string)' there will an appropriate database exception. " is 125.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteAsync,The length of the statement  "	//It is certain the result is already ready here and can be collected straight away. Having a truly asynchronous result collection " is 130.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteAsync,The length of the statement  "	//IAsyncEnumerable<TResult> or equivalent method ought to be used. Taking the result here without async-await saves for generating " is 130.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteAsync,The length of the statement  "	var ret = ExecuteAsync (query' parameterProvider' ExecuteReaderAsync' (unit' id' c) => Task.FromResult (unit)' cancellationToken' commandBehavior).GetAwaiter ().GetResult ().Item2; " is 180.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteReaderAsync,The length of the statement  "	using (var reader = await command.ExecuteReaderAsync (commandBehavior' cancellationToken).ConfigureAwait (continueOnCapturedContext: false)) { " is 142.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,ExecuteReaderAsync,The length of the statement  "				cancellationRegistration = cancellationToken.Register (CommandCancellation' Tuple.Create (reader' command)' useSynchronizationContext: false); " is 142.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,CommandCancellation,The length of the statement  "	//The MSDN documentation tells that DbCommand.Cancel() should not be called for SqlCommand if the reader has been closed " is 120.
Long Statement,Orleans.SqlUtils,RelationalStorage,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorage.cs,CommandCancellation,The length of the statement  "	//despite the connection already closed. Source: https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.cancel(v=vs.110).aspx. " is 145.
Long Statement,Orleans.SqlUtils,RelationalOrleansQueries,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,CreateInstance,The length of the statement  "	var queries = await storage.ReadAsync (DbStoredQueries.GetQueriesKey' DbStoredQueries.Converters.GetQueryKeyAndValue' null); " is 124.
Long Statement,Orleans.SqlUtils,RelationalOrleansQueries,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalOrleansQueries.cs,CreateInstance,The length of the statement  "	return new RelationalOrleansQueries (storage' new DbStoredQueries (queries.ToDictionary (q => q.Key' q => q.Value))' grainReferenceConverter); " is 142.
Long Statement,Orleans.SqlUtils,RelationalStorageExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "		columns = string.Join ("'"' nameMap == null ? properties.Select (pn => string.Format ("{0}{1}{2}"' startEscapeIndicator' pn.Name' endEscapeIndicator)) : properties.Select (pn => string.Format ("{0}{1}{2}"' startEscapeIndicator' (nameMap.ContainsKey (pn.Name) ? nameMap [pn.Name] : pn.Name)' endEscapeIndicator))); " is 313.
Long Statement,Orleans.SqlUtils,RelationalStorageExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "					var parameterName = string.Format ("@{0}"' (nameMap.ContainsKey (onlyOnceProperties [i].Name) ? nameMap [onlyOnceProperties [i].Name] : onlyOnceProperties [i].Name)); " is 166.
Long Statement,Orleans.SqlUtils,RelationalStorageExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "		var multiProperties = onlyOnceColumns == null ? properties : properties.Where (pn => !onlyOnceColumns.Contains (pn.Name)).Select (pn => pn).ToArray (); " is 151.
Long Statement,Orleans.SqlUtils,RelationalStorageExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "	var query = string.Format (insertIntoValuesTemplate' tableName' columns' string.Join (storageConsts.UnionAllSelectTemplate' values)); " is 133.
Long Statement,Orleans.SqlUtils,RelationalStorageExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\RelationalStorageExtensions.cs,ReadAsync,The length of the statement  "	return storage.ReadAsync (query' parameterProvider' (record' i' cancellationToken) => Task.FromResult (selector (record))); " is 123.
Long Statement,Orleans.Runtime.ReminderService,SqlReminderTable,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\ReminderService\SqlReminderTable.cs,Init,The length of the statement  "	orleansQueries = await RelationalOrleansQueries.CreateInstance (config.AdoInvariantForReminders' config.DataConnectionStringForReminders' this.grainReferenceConverter); " is 168.
Long Statement,Orleans.Runtime.ReminderService,SqlReminderTable,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\ReminderService\SqlReminderTable.cs,UpsertRow,The length of the statement  "	return orleansQueries.UpsertReminderRowAsync (serviceId' entry.GrainRef' entry.ReminderName' entry.StartAt' entry.Period); " is 122.
Long Statement,Orleans.Runtime.Configuration,AdoNetConfigurationExtensions,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\AdoNetConfigurationExtensions.cs,GetConnectionString,The length of the statement  "	throw new ArgumentNullException (nameof (connectionString)' "Parameter value and fallback value are both null or empty."); " is 122.
Long Statement,Orleans.Storage,AdoGrainKey,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The length of the statement  "	return new Guid ((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56)); " is 250.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "	//NOTE: StorageSerializationPicker should be defined outside and given as a parameter in constructor or via Init in IProviderConfiguration perhaps. " is 147.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "	//Currently this limits one's options to much to the current situation of providing only one serializer for serialization and deserialization " is 141.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "	//with no regard to state update or serializer changes. Maybe have this serialized as a JSON in props and read via a key? " is 121.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "	StorageSerializationPicker = new DefaultRelationalStoragePicker (this.ConfigureDeserializers (config' providerRuntime)' this.ConfigureSerializers (config' providerRuntime)); " is 173.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "	//NOTE: Currently there should be only one pair of providers given. That is' only UseJsonFormatPropertyName' UseXmlFormatPropertyName or UseBinaryFormatPropertyName. " is 165.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "		throw new ArgumentException ("Configuration error' only one serializer and deserializer should be given."' nameof (config)); " is 124.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "		StorageSerializationPicker.Deserializers.Add (new OrleansStorageDefaultBinaryDeserializer (this.serializationManager' UseBinaryFormatPropertyName)); " is 148.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "		StorageSerializationPicker.Serializers.Add (new OrleansStorageDefaultBinarySerializer (this.serializationManager' UseBinaryFormatPropertyName)); " is 144.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "	var connectionInvariant = config.Properties.ContainsKey (DataConnectionInvariantPropertyName) ? config.Properties [DataConnectionInvariantPropertyName] : DefaultAdoInvariantInvariantPropertyName; " is 195.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "		return Task.FromResult (Tuple.Create (selector.GetValue<string> ("QueryKey")' selector.GetValue<string> ("QueryText"))); " is 120.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,Init,The length of the statement  "	CurrentOperationalQueries = new RelationalStorageProviderQueries (queries.Single (i => i.Item1 == "WriteToStorageKey").Item2' queries.Single (i => i.Item1 == "ReadFromStorageKey").Item2' queries.Single (i => i.Item1 == "ClearStorageKey").Item2); " is 245.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "		Log.Verbose3 ((int)RelationalStorageProviderCodes.RelationalProviderClearing' LogString ("Clearing grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ())); " is 184.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "		var grainIdHash = HashPicker.PickHasher (ServiceId' Name' baseGrainType' grainReference' grainState).Hash (grainId.GetHashBytes ()); " is 132.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "		var grainTypeHash = HashPicker.PickHasher (ServiceId' Name' baseGrainType' grainReference' grainState).Hash (Encoding.UTF8.GetBytes (baseGrainType)); " is 149.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "			command.AddParameter ("GrainStateVersion"' !string.IsNullOrWhiteSpace (grainState.ETag) ? int.Parse (grainState.ETag' CultureInfo.InvariantCulture) : default(int?)); " is 165.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "		Log.Error ((int)RelationalStorageProviderCodes.RelationalProviderDeleteError' LogString ("Error clearing grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ()' ex.Message)' ex); " is 206.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "	var inconsistentStateException = CheckVersionInconsistency (OperationString' ServiceId' Name' storageVersion' grainState.ETag' baseGrainType' grainId.ToString ()); " is 163.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ClearStateAsync,The length of the statement  "		Log.Verbose3 ((int)RelationalStorageProviderCodes.RelationalProviderCleared' LogString ("Cleared grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ())); " is 182.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "		Log.Verbose3 ((int)RelationalStorageProviderCodes.RelationalProviderReading' LogString ("Reading grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ())); " is 182.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "		SerializationChoice choice = StorageSerializationPicker.PickDeserializer (ServiceId' Name' baseGrainType' grainReference' grainState' null); " is 140.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "			var errorString = LogString ("No deserializer found"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ()); " is 124.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "		var grainIdHash = HashPicker.PickHasher (ServiceId' Name' baseGrainType' grainReference' grainState).Hash (grainId.GetHashBytes ()); " is 132.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "		var grainTypeHash = HashPicker.PickHasher (ServiceId' Name' baseGrainType' grainReference' grainState).Hash (Encoding.UTF8.GetBytes (baseGrainType)); " is 149.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "			Log.Info ((int)RelationalStorageProviderCodes.RelationalProviderNoStateFound' LogString ("Null grain state read (default will be instantiated)"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ())); " is 216.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "			Log.Verbose3 ((int)RelationalStorageProviderCodes.RelationalProviderRead' LogString ("Read grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ())); " is 176.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The length of the statement  "		Log.Error ((int)RelationalStorageProviderCodes.RelationalProviderReadError' LogString ("Error reading grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ()' ex.Message)' ex); " is 203.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "		Log.Verbose3 ((int)RelationalStorageProviderCodes.RelationalProviderWriting' LogString ("Writing grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ())); " is 182.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "		var grainIdHash = HashPicker.PickHasher (ServiceId' Name' baseGrainType' grainReference' grainState).Hash (grainId.GetHashBytes ()); " is 132.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "		var grainTypeHash = HashPicker.PickHasher (ServiceId' Name' baseGrainType' grainReference' grainState).Hash (Encoding.UTF8.GetBytes (baseGrainType)); " is 149.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "			command.AddParameter ("GrainStateVersion"' !string.IsNullOrWhiteSpace (grainState.ETag) ? int.Parse (grainState.ETag' CultureInfo.InvariantCulture) : default(int?)); " is 165.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "			SerializationChoice serializer = StorageSerializationPicker.PickSerializer (ServiceId' Name' baseGrainType' grainReference' grainState); " is 136.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "			command.AddParameter ("PayloadBinary"' (byte[])(serializer.Serializer.Tag == UseBinaryFormatPropertyName ? serializer.Serializer.Serialize (data) : null)); " is 155.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "			command.AddParameter ("PayloadJson"' (string)(serializer.Serializer.Tag == UseJsonFormatPropertyName ? serializer.Serializer.Serialize (data) : null)); " is 151.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "			command.AddParameter ("PayloadXml"' (string)(serializer.Serializer.Tag == UseXmlFormatPropertyName ? serializer.Serializer.Serialize (data) : null)); " is 149.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "		Log.Error ((int)RelationalStorageProviderCodes.RelationalProviderWriteError' LogString ("Error writing grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ()' ex.Message)' ex); " is 204.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "	var inconsistentStateException = CheckVersionInconsistency (OperationString' ServiceId' Name' storageVersion' grainState.ETag' baseGrainType' grainId.ToString ()); " is 163.
Long Statement,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,WriteStateAsync,The length of the statement  "		Log.Verbose3 ((int)RelationalStorageProviderCodes.RelationalProviderWrote' LogString ("Wrote grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ())); " is 178.
Long Statement,Orleans.Storage,DefaultRelationalStoragePicker,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\StorageSerializationPicker.cs,PickDeserializer,The length of the statement  "	//If the tag has been given' try to pick that one and if not found' take the first on the list. This arrangement allows one to switch storage format more easily. " is 161.
Long Statement,Orleans.Providers.SqlServer,SqlStatisticsPublisher,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,Init,The length of the statement  "	orleansQueries = await RelationalOrleansQueries.CreateInstance (adoInvariant' config.Properties ["ConnectionString"]' this.grainReferenceConverter); " is 148.
Long Statement,Orleans.Providers.SqlServer,SqlStatisticsPublisher,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,Init,The length of the statement  "	orleansQueries = await RelationalOrleansQueries.CreateInstance (config.AdoInvariant' config.DataConnectionString' this.grainReferenceConverter); " is 144.
Long Statement,Orleans.Providers.SqlServer,SqlStatisticsPublisher,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,ReportStats,The length of the statement  "		logger.Verbose3 ("ReportStats called with {0} counters' name: {1}' id: {2}"' statsCounters.Count' siloOrClientName' id); " is 120.
Long Statement,Orleans.Providers.SqlServer,SqlStatisticsPublisher,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,ReportStats,The length of the statement  "			insertTasks.Add (orleansQueries.InsertStatisticsCountersAsync (deploymentId' hostName' siloOrClientName' id' counterBatch)); " is 124.
Magic Number,Orleans.Storage,AdoGrainKey,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,AdoGrainKey,The following statement contains a magic number: N1Key = BitConverter.ToInt64 (guidKeyBytes' 8);  
Magic Number,Orleans.Storage,AdoGrainKey,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid ((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));  
Magic Number,Orleans.Storage,AdoGrainKey,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid ((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));  
Magic Number,Orleans.Storage,AdoGrainKey,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid ((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));  
Magic Number,Orleans.Storage,AdoGrainKey,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid ((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));  
Magic Number,Orleans.Storage,AdoGrainKey,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid ((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));  
Magic Number,Orleans.Storage,AdoGrainKey,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid ((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));  
Magic Number,Orleans.Storage,AdoGrainKey,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid ((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));  
Magic Number,Orleans.Storage,AdoGrainKey,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid ((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));  
Magic Number,Orleans.Storage,AdoGrainKey,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid ((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));  
Magic Number,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The following statement contains a magic number: try {  	SerializationChoice choice = StorageSerializationPicker.PickDeserializer (ServiceId' Name' baseGrainType' grainReference' grainState' null);  	if (choice.Deserializer == null) {  		var errorString = LogString ("No deserializer found"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ());  		Log.Error ((int)RelationalStorageProviderCodes.RelationalProviderNoDeserializer' errorString);  		throw new InvalidOperationException (errorString);  	}  	var commandBehavior = choice.PreferStreaming ? CommandBehavior.SequentialAccess : CommandBehavior.Default;  	var grainStateType = grainState.State.GetType ();  	var grainIdHash = HashPicker.PickHasher (ServiceId' Name' baseGrainType' grainReference' grainState).Hash (grainId.GetHashBytes ());  	var grainTypeHash = HashPicker.PickHasher (ServiceId' Name' baseGrainType' grainReference' grainState).Hash (Encoding.UTF8.GetBytes (baseGrainType));  	var readRecords = (await Storage.ReadAsync (CurrentOperationalQueries.ReadFromStorage' (command => {  		command.AddParameter ("GrainIdHash"' grainIdHash);  		command.AddParameter ("GrainIdN0"' grainId.N0Key);  		command.AddParameter ("GrainIdN1"' grainId.N1Key);  		command.AddParameter ("GrainTypeHash"' grainTypeHash);  		command.AddParameter ("GrainTypeString"' baseGrainType);  		command.AddParameter ("GrainIdExtensionString"' grainId.StringKey);  		command.AddParameter ("ServiceId"' ServiceId);  	})' async (selector' resultSetCount' token) => {  		object storageState = null;  		int? version;  		if (choice.PreferStreaming) {  			//When streaming via ADO.NET' using CommandBehavior.SequentialAccess' the order of  			//the columns on how they are read needs to be exactly this.  			const int binaryColumnPositionInSelect = 0;  			const int xmlColumnPositionInSelect = 1;  			const int jsonColumnPositionInSelect = 2;  			var streamSelector = (DbDataReader)selector;  			if (!(await streamSelector.IsDBNullAsync (binaryColumnPositionInSelect))) {  				using (var downloadStream = streamSelector.GetStream (binaryColumnPositionInSelect' Storage)) {  					storageState = choice.Deserializer.Deserialize (downloadStream' grainStateType);  				}  			}  			if (!(await streamSelector.IsDBNullAsync (xmlColumnPositionInSelect))) {  				using (var downloadStream = streamSelector.GetTextReader (xmlColumnPositionInSelect)) {  					storageState = choice.Deserializer.Deserialize (downloadStream' grainStateType);  				}  			}  			if (!(await streamSelector.IsDBNullAsync (jsonColumnPositionInSelect))) {  				using (var downloadStream = streamSelector.GetTextReader (jsonColumnPositionInSelect)) {  					storageState = choice.Deserializer.Deserialize (downloadStream' grainStateType);  				}  			}  			version = await streamSelector.GetValueAsync<int?> ("Version");  		} else {  			//All but one of these should be null. All will be read and an appropriate deserializer picked.  			//NOTE: When streaming will be implemented' it is worthwhile to optimize this so that the defined  			//serializer will be picked and then streaming tried according to its tag.  			object payload;  			payload = selector.GetValueOrDefault<byte[]> ("PayloadBinary");  			if (payload == null) {  				payload = selector.GetValueOrDefault<string> ("PayloadXml");  			}  			if (payload == null) {  				payload = selector.GetValueOrDefault<string> ("PayloadJson");  			}  			if (payload != null) {  				storageState = choice.Deserializer.Deserialize (payload' grainStateType);  			}  			version = selector.GetValue<int?> ("Version");  		}  		return Tuple.Create (storageState' version.ToString (CultureInfo.InvariantCulture));  	}' CancellationToken.None' commandBehavior).ConfigureAwait (false)).SingleOrDefault ();  	object state = readRecords != null ? readRecords.Item1 : null;  	string etag = readRecords != null ? readRecords.Item2 : null;  	if (state == null) {  		Log.Info ((int)RelationalStorageProviderCodes.RelationalProviderNoStateFound' LogString ("Null grain state read (default will be instantiated)"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ()));  		state = Activator.CreateInstance (grainStateType);  	}  	grainState.State = state;  	grainState.ETag = etag;  	if (Log.IsVerbose3) {  		Log.Verbose3 ((int)RelationalStorageProviderCodes.RelationalProviderRead' LogString ("Read grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ()));  	}  } catch (Exception ex) {  	Log.Error ((int)RelationalStorageProviderCodes.RelationalProviderReadError' LogString ("Error reading grain state"' ServiceId' Name' grainState.ETag' baseGrainType' grainId.ToString ()' ex.Message)' ex);  	throw;  }  
Magic Number,Orleans.Storage,AdoNetStorageProvider,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\Provider\AdoNetStorageProvider.cs,ReadStateAsync,The following statement contains a magic number: if (choice.PreferStreaming) {  	//When streaming via ADO.NET' using CommandBehavior.SequentialAccess' the order of  	//the columns on how they are read needs to be exactly this.  	const int binaryColumnPositionInSelect = 0;  	const int xmlColumnPositionInSelect = 1;  	const int jsonColumnPositionInSelect = 2;  	var streamSelector = (DbDataReader)selector;  	if (!(await streamSelector.IsDBNullAsync (binaryColumnPositionInSelect))) {  		using (var downloadStream = streamSelector.GetStream (binaryColumnPositionInSelect' Storage)) {  			storageState = choice.Deserializer.Deserialize (downloadStream' grainStateType);  		}  	}  	if (!(await streamSelector.IsDBNullAsync (xmlColumnPositionInSelect))) {  		using (var downloadStream = streamSelector.GetTextReader (xmlColumnPositionInSelect)) {  			storageState = choice.Deserializer.Deserialize (downloadStream' grainStateType);  		}  	}  	if (!(await streamSelector.IsDBNullAsync (jsonColumnPositionInSelect))) {  		using (var downloadStream = streamSelector.GetTextReader (jsonColumnPositionInSelect)) {  			storageState = choice.Deserializer.Deserialize (downloadStream' grainStateType);  		}  	}  	version = await streamSelector.GetValueAsync<int?> ("Version");  } else {  	//All but one of these should be null. All will be read and an appropriate deserializer picked.  	//NOTE: When streaming will be implemented' it is worthwhile to optimize this so that the defined  	//serializer will be picked and then streaming tried according to its tag.  	object payload;  	payload = selector.GetValueOrDefault<byte[]> ("PayloadBinary");  	if (payload == null) {  		payload = selector.GetValueOrDefault<string> ("PayloadXml");  	}  	if (payload == null) {  		payload = selector.GetValueOrDefault<string> ("PayloadJson");  	}  	if (payload != null) {  		storageState = choice.Deserializer.Deserialize (payload' grainStateType);  	}  	version = selector.GetValue<int?> ("Version");  }  
Magic Number,Orleans.Providers.SqlServer,SqlStatisticsPublisher,F:\newReposMay17\dotnet_orleans\src\OrleansSQLUtils\Storage\SqlStatisticsPublisher.cs,ReportStats,The following statement contains a magic number: try {  	//This batching is done for two reasons:  	//1) For not to introduce a query large enough to be rejected.  	//2) Performance' though using a fixed constants likely will not give the optimal performance in every situation.  	const int maxBatchSizeInclusive = 200;  	var counterBatches = BatchCounters (statsCounters' maxBatchSizeInclusive);  	foreach (var counterBatch in counterBatches) {  		//The query template from which to retrieve the set of columns that are being inserted.  		insertTasks.Add (orleansQueries.InsertStatisticsCountersAsync (deploymentId' hostName' siloOrClientName' id' counterBatch));  	}  	await Task.WhenAll (insertTasks);  } catch (Exception ex) {  	if (logger != null && logger.IsVerbose)  		logger.Verbose ("ReportStats faulted: {0}"' ex.ToString ());  	foreach (var faultedTask in insertTasks.Where (t => t.IsFaulted)) {  		if (logger != null && logger.IsVerbose)  			logger.Verbose ("Faulted task exception: {0}"' faultedTask.ToString ());  	}  	throw;  }  
