Implementation smell,Namespace,Class,File,Method,Description
Long Statement,BenchmarkGrains.Ping,LoadGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\BenchmarkGrains\Ping\LoadGrain.cs,RunGeneration,The length of the statement  "            List<Pending> pendingWork = Enumerable.Range(run * conncurrent' conncurrent).Select(i => new Pending() { Grain = GrainFactory.GetGrain<IPingGrain>(i) }).ToList(); " is 162.
Empty Catch Block,BenchmarkGrains.Ping,LoadGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\BenchmarkGrains\Ping\LoadGrain.cs,ResolvePending,The method has an empty catch block.
Empty Catch Block,BenchmarkGrains.Transaction,LoadGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\BenchmarkGrains\Transaction\LoadGrain.cs,ResolvePending,The method has an empty catch block.
Magic Number,BenchmarkGrains.MapReduce,TransformGrain<TInput;TOutput>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\BenchmarkGrains\MapReduce\TransformGrain.cs,NotifyOfPendingWork,The following statement contains a magic number: Task.Run(async () =>                  {                      while (!this._proccessingStopped)                      {                          TInput itemToProcess;                          if (!this._input.TryDequeue(out itemToProcess))                          {                              await Task.Delay(7);                              continue;                          }                            var processed = this._processor.Process(itemToProcess);                          await Task.Factory.StartNew(                              async () => await this._target.SendAsync(processed)' CancellationToken.None' TaskCreationOptions.None' orleansTs);                      }                  });
Magic Number,BenchmarkGrains.Transaction,LoadGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\BenchmarkGrains\Transaction\LoadGrain.cs,RunGeneration,The following statement contains a magic number: int generated = run * transactions * 2;
Magic Number,BenchmarkGrains.Transaction,LoadGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\BenchmarkGrains\Transaction\LoadGrain.cs,StartTransaction,The following statement contains a magic number: await GrainFactory.GetGrain<ITransactionRootGrain>(Guid.Empty).Run(new List<int>() { index * 2' index * 2 + 1 });
Magic Number,BenchmarkGrains.Transaction,LoadGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\BenchmarkGrains\Transaction\LoadGrain.cs,StartTransaction,The following statement contains a magic number: await GrainFactory.GetGrain<ITransactionRootGrain>(Guid.Empty).Run(new List<int>() { index * 2' index * 2 + 1 });
