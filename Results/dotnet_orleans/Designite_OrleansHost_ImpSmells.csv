Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Orleans.Runtime.Host,WindowsServerHost,F:\newReposMay17\dotnet_orleans\src\OrleansHost\WindowsServerHost.cs,ParseArguments,Cyclomatic complexity of the method is 22
Long Statement,Orleans.Runtime.Host,WindowsServerHost,F:\newReposMay17\dotnet_orleans\src\OrleansHost\WindowsServerHost.cs,RunImpl,The length of the statement  "			ConsoleText.WriteStatus (string.Format ("Successfully started Orleans silo '{0}' as a {1} node."' SiloHost.Name' SiloHost.Type)); " is 129.
Long Statement,Orleans.Runtime.Host,WindowsServerHost,F:\newReposMay17\dotnet_orleans\src\OrleansHost\WindowsServerHost.cs,RunImpl,The length of the statement  "			ConsoleText.WriteError (string.Format ("Failed to start Orleans silo '{0}' as a {1} node."' SiloHost.Name' SiloHost.Type)); " is 123.
Magic Number,Orleans.Runtime.Host,WindowsServerHost,F:\newReposMay17\dotnet_orleans\src\OrleansHost\WindowsServerHost.cs,ParseArguments,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	string a = args [i];  	if (a.StartsWith ("-") || a.StartsWith ("/")) {  		switch (a.ToLowerInvariant ()) {  		case "/?":  		case "/help":  		case "-?":  		case "-help":  			// Query usage help  			return false;  		case "/debug":  			SiloHost.Debug = true;  			break;  		default:  			ConsoleText.WriteError ("Bad command line arguments supplied: " + a);  			return false;  		}  	} else if (a.Contains ("=")) {  		string[] split = a.Split ('=');  		if (String.IsNullOrEmpty (split [1])) {  			ConsoleText.WriteError ("Bad command line arguments supplied: " + a);  			return false;  		}  		switch (split [0].ToLowerInvariant ()) {  		case "deploymentid":  			SiloHost.DeploymentId = split [1];  			break;  		case "deploymentgroup":  			ConsoleText.WriteError ("Ignoring deprecated command line argument: " + a);  			break;  		default:  			ConsoleText.WriteError ("Bad command line arguments supplied: " + a);  			return false;  		}  	} // unqualified arguments below  	else if (argPos == 1) {  		SiloHost.Name = a;  		argPos++;  	} else if (argPos == 2) {  		SiloHost.ConfigFileName = a;  		argPos++;  	} else {  		// Too many command line arguments  		ConsoleText.WriteError ("Too many command line arguments supplied: " + a);  		return false;  	}  }  
Magic Number,Orleans.Runtime.Host,WindowsServerHost,F:\newReposMay17\dotnet_orleans\src\OrleansHost\WindowsServerHost.cs,ParseArguments,The following statement contains a magic number: if (a.StartsWith ("-") || a.StartsWith ("/")) {  	switch (a.ToLowerInvariant ()) {  	case "/?":  	case "/help":  	case "-?":  	case "-help":  		// Query usage help  		return false;  	case "/debug":  		SiloHost.Debug = true;  		break;  	default:  		ConsoleText.WriteError ("Bad command line arguments supplied: " + a);  		return false;  	}  } else if (a.Contains ("=")) {  	string[] split = a.Split ('=');  	if (String.IsNullOrEmpty (split [1])) {  		ConsoleText.WriteError ("Bad command line arguments supplied: " + a);  		return false;  	}  	switch (split [0].ToLowerInvariant ()) {  	case "deploymentid":  		SiloHost.DeploymentId = split [1];  		break;  	case "deploymentgroup":  		ConsoleText.WriteError ("Ignoring deprecated command line argument: " + a);  		break;  	default:  		ConsoleText.WriteError ("Bad command line arguments supplied: " + a);  		return false;  	}  } // unqualified arguments below  else if (argPos == 1) {  	SiloHost.Name = a;  	argPos++;  } else if (argPos == 2) {  	SiloHost.ConfigFileName = a;  	argPos++;  } else {  	// Too many command line arguments  	ConsoleText.WriteError ("Too many command line arguments supplied: " + a);  	return false;  }  
Magic Number,Orleans.Runtime.Host,WindowsServerHost,F:\newReposMay17\dotnet_orleans\src\OrleansHost\WindowsServerHost.cs,ParseArguments,The following statement contains a magic number: if (a.Contains ("=")) {  	string[] split = a.Split ('=');  	if (String.IsNullOrEmpty (split [1])) {  		ConsoleText.WriteError ("Bad command line arguments supplied: " + a);  		return false;  	}  	switch (split [0].ToLowerInvariant ()) {  	case "deploymentid":  		SiloHost.DeploymentId = split [1];  		break;  	case "deploymentgroup":  		ConsoleText.WriteError ("Ignoring deprecated command line argument: " + a);  		break;  	default:  		ConsoleText.WriteError ("Bad command line arguments supplied: " + a);  		return false;  	}  } // unqualified arguments below  else if (argPos == 1) {  	SiloHost.Name = a;  	argPos++;  } else if (argPos == 2) {  	SiloHost.ConfigFileName = a;  	argPos++;  } else {  	// Too many command line arguments  	ConsoleText.WriteError ("Too many command line arguments supplied: " + a);  	return false;  }  
Magic Number,Orleans.Runtime.Host,WindowsServerHost,F:\newReposMay17\dotnet_orleans\src\OrleansHost\WindowsServerHost.cs,ParseArguments,The following statement contains a magic number: if (argPos == 1) {  	SiloHost.Name = a;  	argPos++;  } else if (argPos == 2) {  	SiloHost.ConfigFileName = a;  	argPos++;  } else {  	// Too many command line arguments  	ConsoleText.WriteError ("Too many command line arguments supplied: " + a);  	return false;  }  
Magic Number,Orleans.Runtime.Host,WindowsServerHost,F:\newReposMay17\dotnet_orleans\src\OrleansHost\WindowsServerHost.cs,ParseArguments,The following statement contains a magic number: if (argPos == 2) {  	SiloHost.ConfigFileName = a;  	argPos++;  } else {  	// Too many command line arguments  	ConsoleText.WriteError ("Too many command line arguments supplied: " + a);  	return false;  }  
