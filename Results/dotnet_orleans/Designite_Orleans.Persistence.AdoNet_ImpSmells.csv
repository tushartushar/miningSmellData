Implementation smell,Namespace,Class,File,Method,Description
Long Method,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ReadStateAsync,The method has 108 lines of code.
Complex Method,Orleans.Persistence.AdoNet.Storage,RelationalStorageExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,Cyclomatic complexity of the method is 10
Long Parameter List,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,AdoNetGrainStorage,The method has 5 parameters. Parameters: logger' providerRuntime' options' clusterOptions' name
Long Parameter List,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,CheckVersionInconsistency,The method has 7 parameters. Parameters: operation' serviceId' providerName' storageVersion' grainVersion' normalizedGrainType' grainId
Long Parameter List,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,LogString,The method has 7 parameters. Parameters: operationProlog' serviceId' providerName' version' normalizedGrainType' grainId' exceptionMessage
Long Parameter List,Orleans.Storage,IStorageHasherPicker,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\IStorageHashPicker.cs,PickHasher,The method has 6 parameters. Parameters: serviceId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Storage,IStorageSerializationPicker,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\IStorageSerializationPicker.cs,PickDeserializer,The method has 6 parameters. Parameters: serviceId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Storage,IStorageSerializationPicker,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\IStorageSerializationPicker.cs,PickSerializer,The method has 6 parameters. Parameters: serviceId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Storage,StorageHasherPicker,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\StorageHasherPicker.cs,PickHasher,The method has 6 parameters. Parameters: serviceId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Storage,DefaultRelationalStoragePicker,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\StorageSerializationPicker.cs,PickDeserializer,The method has 6 parameters. Parameters: serviceId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Storage,DefaultRelationalStoragePicker,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\StorageSerializationPicker.cs,PickSerializer,The method has 6 parameters. Parameters: servideId' storageProviderInstanceName' grainType' grainReference' grainState' tag
Long Parameter List,Orleans.Persistence.AdoNet.Storage,DbExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbExtensions.cs,CreateParameter,The method has 6 parameters. Parameters: command' direction' parameterName' value' size' dbType
Long Parameter List,Orleans.Persistence.AdoNet.Storage,DbExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbExtensions.cs,AddParameter,The method has 6 parameters. Parameters: command' parameterName' value' direction' size' dbType
Long Parameter List,Orleans.Persistence.AdoNet.Storage,DbConstants,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbConstantsStore.cs,DbConstants,The method has 7 parameters. Parameters: startEscapeIndicator' endEscapeIndicator' unionAllSelectTemplate' isSynchronousAdoNetImplementation' supportsStreamNatively' supportsCommandCancellation' commandInterceptor
Long Parameter List,Orleans.Persistence.AdoNet.Storage,IRelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\IRelationalStorage.cs,ReadAsync,The method has 5 parameters. Parameters: query' parameterProvider' selector' cancellationToken' commandBehavior
Long Parameter List,Orleans.Persistence.AdoNet.Storage,RelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorage.cs,ReadAsync,The method has 5 parameters. Parameters: query' parameterProvider' selector' cancellationToken' commandBehavior
Long Parameter List,Orleans.Persistence.AdoNet.Storage,RelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorage.cs,ExecuteAsync,The method has 6 parameters. Parameters: query' parameterProvider' executor' selector' cancellationToken' commandBehavior
Long Parameter List,Orleans.Persistence.AdoNet.Storage,RelationalStorageExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The method has 7 parameters. Parameters: storage' tableName' parameters' cancellationToken' nameMap' onlyOnceColumns' useSqlParams
Long Identifier,Orleans.Persistence.AdoNet.Storage,CachedFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbConnectionFactory.cs,CachedFactory,The length of the parameter factoryAssemblyQualifiedNameKey is 31.
Long Identifier,Orleans.Persistence.AdoNet.Storage,CachedFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbConnectionFactory.cs,,The length of the parameter FactoryAssemblyQualifiedNameKey is 31.
Long Identifier,Orleans.Persistence.AdoNet.Storage,DbConstants,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbConstantsStore.cs,DbConstants,The length of the parameter isSynchronousAdoNetImplementation is 33.
Long Identifier,Orleans.Persistence.AdoNet.Storage,DbConstants,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbConstantsStore.cs,,The length of the parameter IsSynchronousAdoNetImplementation is 33.
Long Identifier,Orleans.Persistence.AdoNet.Storage,RelationalOrleansQueries,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalOrleansQueries.cs,,The length of the parameter InsertStatisticsMultiupdateColumns is 34.
Long Identifier,Orleans.Persistence.AdoNet.Storage,RelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorage.cs,,The length of the parameter isSynchronousAdoNetImplementation is 33.
Long Statement,Orleans.Configuration,AdoNetGrainStorageOptionsValidator,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Options\AdoNetGrainStorageOptions.cs,ValidateConfiguration,The length of the statement  "                throw new OrleansConfigurationException($"Invalid {nameof(AdoNetGrainStorageOptions)} values for {nameof(AdoNetGrainStorage)} \"{name}\". {nameof(options.Invariant)} is required."); " is 181.
Long Statement,Orleans.Configuration,AdoNetGrainStorageOptionsValidator,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Options\AdoNetGrainStorageOptions.cs,ValidateConfiguration,The length of the statement  "                throw new OrleansConfigurationException($"Invalid {nameof(AdoNetGrainStorageOptions)} values for {nameof(AdoNetGrainStorage)} \"{name}\". {nameof(options.ConnectionString)} is required."); " is 188.
Long Statement,Orleans.Configuration,AdoNetGrainStorageOptionsValidator,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Options\AdoNetGrainStorageOptions.cs,ValidateConfiguration,The length of the statement  "                throw new OrleansConfigurationException($"Invalid {nameof(AdoNetGrainStorageOptions)} values for {nameof(AdoNetGrainStorage)} \"{name}\". {nameof(options.UseXmlFormat)} and {nameof(options.UseJsonFormat)} cannot both be set to true"); " is 234.
Long Statement,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,ToString,The length of the statement  "            return string.Format($"{primaryKey}{(keyExtension != null ? GrainIdAndExtensionSeparator + keyExtension : string.Empty)}"); " is 123.
Long Statement,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The length of the statement  "            return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56)); " is 249.
Long Statement,Orleans.Storage,AdoNetGrainStorageFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,Create,The length of the statement  "            return ActivatorUtilities.CreateInstance<AdoNetGrainStorage>(services' Options.Create(optionsMonitor.Get(name))' name' clusterOptions); " is 135.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,Participate,The length of the statement  "            lifecycle.Subscribe(OptionFormattingUtilities.Name<AdoNetGrainStorage>(this.name)' this.options.InitStage' Init' Close); " is 120.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ClearStateAsync,The length of the statement  "                logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderClearing' LogString("Clearing grain state"' serviceId' this.name' grainState.ETag' baseGrainType' grainId.ToString())); " is 186.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ClearStateAsync,The length of the statement  "                var grainIdHash = HashPicker.PickHasher(serviceId' this.name' baseGrainType' grainReference' grainState).Hash(grainId.GetHashBytes()); " is 134.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ClearStateAsync,The length of the statement  "                var grainTypeHash = HashPicker.PickHasher(serviceId' this.name' baseGrainType' grainReference' grainState).Hash(Encoding.UTF8.GetBytes(baseGrainType)); " is 151.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ClearStateAsync,The length of the statement  "                    command.AddParameter("GrainStateVersion"' !string.IsNullOrWhiteSpace(grainState.ETag) ? int.Parse(grainState.ETag' CultureInfo.InvariantCulture) : default(int?)); " is 162.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ClearStateAsync,The length of the statement  "                }' (selector' resultSetCount' token) => Task.FromResult(selector.GetValue(0).ToString())' CancellationToken.None).ConfigureAwait(false)); " is 137.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ClearStateAsync,The length of the statement  "                logger.Error((int)RelationalStorageProviderCodes.RelationalProviderDeleteError' LogString("Error clearing grain state"' serviceId' this.name' grainState.ETag' baseGrainType' grainId.ToString()' ex.Message)' ex); " is 211.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ClearStateAsync,The length of the statement  "            var inconsistentStateException = CheckVersionInconsistency(OperationString' serviceId' this.name' storageVersion' grainState.ETag' baseGrainType' grainId.ToString()); " is 166.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ClearStateAsync,The length of the statement  "                logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderCleared' LogString("Cleared grain state"' serviceId' this.name' grainState.ETag' baseGrainType' grainId.ToString())); " is 184.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ReadStateAsync,The length of the statement  "                logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderReading' LogString("Reading grain state"' serviceId' this.name' grainState.ETag' baseGrainType' grainId.ToString())); " is 184.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ReadStateAsync,The length of the statement  "                SerializationChoice choice =StorageSerializationPicker.PickDeserializer(serviceId' this.name' baseGrainType' grainReference' grainState' null); " is 143.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ReadStateAsync,The length of the statement  "                    var errorString = LogString("No deserializer found"' serviceId' this.name' grainState.ETag' baseGrainType' grainId.ToString()); " is 127.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ReadStateAsync,The length of the statement  "                var grainIdHash = HashPicker.PickHasher(serviceId' this.name' baseGrainType' grainReference' grainState).Hash(grainId.GetHashBytes()); " is 134.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ReadStateAsync,The length of the statement  "                var grainTypeHash = HashPicker.PickHasher(serviceId' this.name' baseGrainType' grainReference' grainState).Hash(Encoding.UTF8.GetBytes(baseGrainType)); " is 151.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ReadStateAsync,The length of the statement  "                    logger.Info((int)RelationalStorageProviderCodes.RelationalProviderNoStateFound' LogString("Null grain state read (default will be instantiated)"' serviceId' this.name' grainState.ETag' baseGrainType' grainId.ToString())); " is 221.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ReadStateAsync,The length of the statement  "                    logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderRead' LogString("Read grain state"' serviceId' this.name' grainState.ETag' baseGrainType' grainId.ToString())); " is 178.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ReadStateAsync,The length of the statement  "                logger.Error((int)RelationalStorageProviderCodes.RelationalProviderReadError' LogString("Error reading grain state"' serviceId' this.name' grainState.ETag' baseGrainType' grainId.ToString()' ex.Message)' ex); " is 208.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "                logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderWriting' LogString("Writing grain state"' serviceId' this.name' grainState.ETag' baseGrainType' grainId.ToString())); " is 184.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "                var grainIdHash = HashPicker.PickHasher(serviceId' this.name' baseGrainType' grainReference' grainState).Hash(grainId.GetHashBytes()); " is 134.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "                var grainTypeHash = HashPicker.PickHasher(serviceId' this.name' baseGrainType' grainReference' grainState).Hash(Encoding.UTF8.GetBytes(baseGrainType)); " is 151.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "                    command.AddParameter("GrainStateVersion"' !string.IsNullOrWhiteSpace(grainState.ETag) ? int.Parse(grainState.ETag' CultureInfo.InvariantCulture) : default(int?)); " is 162.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "                    SerializationChoice serializer = StorageSerializationPicker.PickSerializer(serviceId' this.name' baseGrainType' grainReference' grainState); " is 140.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "                    command.AddParameter("PayloadBinary"' (byte[])(serializer.Serializer.Tag == BinaryFormatSerializerTag ? serializer.Serializer.Serialize(data) : null)); " is 151.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "                    command.AddParameter("PayloadJson"' (string)(serializer.Serializer.Tag == JsonFormatSerializerTag ? serializer.Serializer.Serialize(data) : null)); " is 147.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "                    command.AddParameter("PayloadXml"' (string)(serializer.Serializer.Tag == XmlFormatSerializerTag ? serializer.Serializer.Serialize(data) : null)); " is 145.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "                { return Task.FromResult(selector.GetNullableInt32("NewGrainStateVersion").ToString()); }' CancellationToken.None).ConfigureAwait(false); " is 137.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "                logger.Error((int)RelationalStorageProviderCodes.RelationalProviderWriteError' LogString("Error writing grain state"' serviceId' this.name' grainState.ETag' baseGrainType' grainId.ToString()' ex.Message)' ex); " is 209.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "            var inconsistentStateException = CheckVersionInconsistency(OperationString' serviceId' this.name' storageVersion' grainState.ETag' baseGrainType' grainId.ToString()); " is 166.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,WriteStateAsync,The length of the statement  "                logger.Trace((int)RelationalStorageProviderCodes.RelationalProviderWrote' LogString("Wrote grain state"' serviceId' this.name' grainState.ETag' baseGrainType' grainId.ToString())); " is 180.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,Init,The length of the statement  "            //NOTE: StorageSerializationPicker should be defined outside and given as a parameter in constructor or via Init in IProviderConfiguration perhaps. " is 147.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,Init,The length of the statement  "            //Currently this limits one's options to much to the current situation of providing only one serializer for serialization and deserialization " is 141.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,Init,The length of the statement  "            //with no regard to state update or serializer changes. Maybe have this serialized as a JSON in props and read via a key? " is 121.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,Init,The length of the statement  "            StorageSerializationPicker = new DefaultRelationalStoragePicker(this.ConfigureDeserializers(options' providerRuntime)' this.ConfigureSerializers(options' providerRuntime)); " is 172.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,Init,The length of the statement  "                $"Initialized storage provider: ServiceId={serviceId} ProviderName={this.name} Invariant={Storage.InvariantName} ConnectionString={ConfigUtilities.RedactConnectionStringInfo(Storage.ConnectionString)}."); " is 204.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,CheckVersionInconsistency,The length of the statement  "                return new InconsistentStateException($"Version conflict ({operation}): ServiceId={serviceId} ProviderName={providerName} GrainType={normalizedGrainType} GrainId={grainId} ETag={grainVersion}."); " is 195.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,LogString,The length of the statement  "            return $"{operationProlog}: ServiceId={serviceId} ProviderName={providerName} GrainType={normalizedGrainType} GrainId={grainId} ETag={version}{(exceptionMessage != null ? Exception + exceptionMessage : string.Empty)}."; " is 219.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ConfigureDeserializers,The length of the statement  "                var jsonSettings = OrleansJsonSerializer.UpdateSerializerSettings(OrleansJsonSerializer.GetDefaultSerializerSettings(typeResolver' providerRuntime.GrainFactory)' options.UseFullAssemblyNames' options.IndentJson' options.TypeNameHandling); " is 238.
Long Statement,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ConfigureSerializers,The length of the statement  "                var jsonSettings = OrleansJsonSerializer.UpdateSerializerSettings(OrleansJsonSerializer.GetDefaultSerializerSettings(typeResolver' providerRuntime.GrainFactory)' " is 161.
Long Statement,Orleans.Storage,OrleansStorageDefaultBinaryDeserializer,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\OrleansStorageDefaultBinaryDeserializer.cs,Deserialize,The length of the statement  "            throw new NotSupportedException($"{nameof(OrleansStorageDefaultBinaryDeserializer)} does not support stream deserialization."); " is 127.
Long Statement,Orleans.Storage,OrleansStorageDefaultBinarySerializer,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\OrleansStorageDefaultBinarySerializer.cs,Serialize,The length of the statement  "            throw new NotSupportedException($"{nameof(OrleansStorageDefaultBinarySerializer)} does not support stream deserialization."); " is 125.
Long Statement,Orleans.Storage,DefaultRelationalStoragePicker,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\StorageSerializationPicker.cs,PickDeserializer,The length of the statement  "            //If the tag has been given' try to pick that one and if not found' take the first on the list. This arrangement allows one to switch storage format more easily. " is 161.
Long Statement,Orleans.Hosting,SiloBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\SiloBuilderExtensions.cs,AddAdoNetGrainStorage,The length of the statement  "            return services.AddAdoNetGrainStorage(ProviderConstants.DEFAULT_STORAGE_PROVIDER_NAME' ob => ob.Configure(configureOptions)); " is 125.
Long Statement,Orleans.Hosting,SiloBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\SiloBuilderExtensions.cs,AddAdoNetGrainStorage,The length of the statement  "            services.TryAddSingleton<IGrainStorage>(sp => sp.GetServiceByName<IGrainStorage>(ProviderConstants.DEFAULT_STORAGE_PROVIDER_NAME)); " is 131.
Long Statement,Orleans.Hosting,SiloBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\SiloBuilderExtensions.cs,AddAdoNetGrainStorage,The length of the statement  "            services.AddTransient<IConfigurationValidator>(sp => new AdoNetGrainStorageOptionsValidator(sp.GetRequiredService<IOptionsMonitor<AdoNetGrainStorageOptions>>().Get(name)' name)); " is 178.
Long Statement,Orleans.Hosting,SiloBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\SiloBuilderExtensions.cs,AddAdoNetGrainStorage,The length of the statement  "                           .AddSingletonNamedService<ILifecycleParticipant<ISiloLifecycle>>(name' (s' n) => (ILifecycleParticipant<ISiloLifecycle>)s.GetRequiredServiceByName<IGrainStorage>(n)); " is 166.
Long Statement,Orleans.Persistence.AdoNet.Storage,DbConnectionFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbConnectionFactory.cs,GetFactory,The length of the statement  "                throw new InvalidOperationException($"Unable to find and/or load a candidate assembly for '{invariantName}' invariant name."' exc); " is 131.
Long Statement,Orleans.Persistence.AdoNet.Storage,DbConnectionFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbConnectionFactory.cs,GetFactory,The length of the statement  "                throw new InvalidOperationException($"Can't find database provider factory with '{invariantName}' invariant name. Please make sure that your ADO.Net provider package library is deployed with your application."); " is 211.
Long Statement,Orleans.Persistence.AdoNet.Storage,DbConnectionFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbConnectionFactory.cs,GetFactory,The length of the statement  "                throw new InvalidOperationException($"Unable to load type '{providerFactoryDefinition.Item2}' for '{invariantName}' invariant name."); " is 134.
Long Statement,Orleans.Persistence.AdoNet.Storage,DbConnectionFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbConnectionFactory.cs,GetFactory,The length of the statement  "            var prop = providerFactoryType.GetFields().SingleOrDefault(p => string.Equals(p.Name' "Instance"' StringComparison.OrdinalIgnoreCase) && p.IsStatic); " is 149.
Long Statement,Orleans.Persistence.AdoNet.Storage,DbConnectionFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbConnectionFactory.cs,GetFactory,The length of the statement  "                throw new InvalidOperationException($"Invalid provider type '{providerFactoryDefinition.Item2}' for '{invariantName}' invariant name."); " is 136.
Long Statement,Orleans.Persistence.AdoNet.Storage,DbConnectionFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbConnectionFactory.cs,CreateConnection,The length of the statement  "                throw new InvalidOperationException($"Database provider factory: '{invariantName}' did not return a connection object."); " is 121.
Long Statement,Orleans.Persistence.AdoNet.Storage,DbExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbExtensions.cs,GetValueOrDefaultAsync,The length of the statement  "            return (await record.IsDBNullAsync(ordinal).ConfigureAwait(false)) ? @default : (await record.GetFieldValueAsync<TValue>(ordinal).ConfigureAwait(false)); " is 153.
Long Statement,Orleans.Persistence.AdoNet.Storage,DbExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbExtensions.cs,ReflectionParameterProvider,The length of the statement  "                    parameter.ParameterName = nameMap != null && nameMap.ContainsKey(properties[i].Name) ? nameMap[property.Name] : properties[i].Name; " is 131.
Long Statement,Orleans.Persistence.AdoNet.Storage,Converters,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbStoredQueries.cs,GetReminderEntry,The length of the statement  "                        //GetValue<int> causes an InvalidCastException with oracle data provider. See https://github.com/dotnet/orleans/issues/3561 " is 123.
Long Statement,Orleans.Persistence.AdoNet.Storage,Converters,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbStoredQueries.cs,GetMembershipEntry,The length of the statement  "                //TODO: This is a bit of hack way to check in the current version if there's membership data or not' but if there's a start time' there's member.             " is 145.
Long Statement,Orleans.Persistence.AdoNet.Storage,Converters,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\DbStoredQueries.cs,GetSiloAddress,The length of the statement  "                //GetValue<int> causes an InvalidCastException with orcale data provider. See https://github.com/dotnet/orleans/issues/3561 " is 123.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalOrleansQueries,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalOrleansQueries.cs,CreateInstance,The length of the statement  "            var queries = await storage.ReadAsync(DbStoredQueries.GetQueriesKey' DbStoredQueries.Converters.GetQueryKeyAndValue' null); " is 123.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalOrleansQueries,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalOrleansQueries.cs,CreateInstance,The length of the statement  "            return new RelationalOrleansQueries(storage' new DbStoredQueries(queries.ToDictionary(q => q.Key' q => q.Value))' grainReferenceConverter); " is 139.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorage.cs,ReadAsync,The length of the statement  "            //If the query is something else that is not acceptable (e.g. an empty string)' there will an appropriate database exception. " is 125.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorage.cs,ReadAsync,The length of the statement  "            return (await ExecuteAsync(query' parameterProvider' ExecuteReaderAsync' selector' cancellationToken' commandBehavior).ConfigureAwait(false)).Item1; " is 148.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorage.cs,ExecuteAsync,The length of the statement  "            //If the query is something else that is not acceptable (e.g. an empty string)' there will an appropriate database exception. " is 125.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorage.cs,ExecuteAsync,The length of the statement  "            return (await ExecuteAsync(query' parameterProvider' ExecuteReaderAsync' (unit' id' c) => Task.FromResult(unit)' cancellationToken' commandBehavior).ConfigureAwait(false)).Item2; " is 178.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorage.cs,ExecuteReaderAsync,The length of the statement  "            using(var reader = await command.ExecuteReaderAsync(commandBehavior' cancellationToken).ConfigureAwait(continueOnCapturedContext: false)) " is 137.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorage.cs,ExecuteReaderAsync,The length of the statement  "                        cancellationRegistration = cancellationToken.Register(CommandCancellation' Tuple.Create(reader' command)' useSynchronizationContext: false); " is 140.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorage.cs,CommandCancellation,The length of the statement  "            //The MSDN documentation tells that DbCommand.Cancel() should not be called for SqlCommand if the reader has been closed " is 120.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorage.cs,CommandCancellation,The length of the statement  "            //despite the connection already closed. Source: https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.cancel(v=vs.110).aspx. " is 145.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorageExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "                columns = string.Join("'"' nameMap == null ? properties.Select(pn => string.Format("{0}{1}{2}"' startEscapeIndicator' pn.Name' endEscapeIndicator)) : properties.Select(pn => string.Format("{0}{1}{2}"' startEscapeIndicator' (nameMap.ContainsKey(pn.Name) ? nameMap[pn.Name] : pn.Name)' endEscapeIndicator))); " is 306.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorageExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "                            var parameterName = string.Format("@{0}"' (nameMap.ContainsKey(onlyOnceProperties[i].Name) ? nameMap[onlyOnceProperties[i].Name] : onlyOnceProperties[i].Name)); " is 160.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorageExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "                var multiProperties = onlyOnceColumns == null ? properties : properties.Where(pn => !onlyOnceColumns.Contains(pn.Name)).Select(pn => pn).ToArray(); " is 147.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorageExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorageExtensions.cs,ExecuteMultipleInsertIntoAsync,The length of the statement  "            var query = string.Format(insertIntoValuesTemplate' tableName' columns' string.Join(storageConsts.UnionAllSelectTemplate' values)); " is 131.
Long Statement,Orleans.Persistence.AdoNet.Storage,RelationalStorageExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Shared\Storage\RelationalStorageExtensions.cs,ReadAsync,The length of the statement  "            return storage.ReadAsync(query' parameterProvider' (record' i' cancellationToken) => Task.FromResult(selector(record))); " is 120.
Magic Number,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,AdoGrainKey,The following statement contains a magic number: N1Key = BitConverter.ToInt64(guidKeyBytes' 8);
Magic Number,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoGrainKey,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoGrainKey.cs,ToGuidKey,The following statement contains a magic number: return new Guid((uint)(n0Key & 0xffffffff)' (ushort)(n0Key >> 32)' (ushort)(n0Key >> 48)' (byte)n1Key' (byte)(n1Key >> 8)' (byte)(n1Key >> 16)' (byte)(n1Key >> 24)' (byte)(n1Key >> 32)' (byte)(n1Key >> 40)' (byte)(n1Key >> 48)' (byte)(n1Key >> 56));
Magic Number,Orleans.Storage,AdoNetGrainStorage,D:\research\architectureSmells\repos\dotnet_orleans\src\AdoNet\Orleans.Persistence.AdoNet\Storage\Provider\AdoNetGrainStorage.cs,ReadStateAsync,The following statement contains a magic number: var readRecords = (await Storage.ReadAsync(CurrentOperationalQueries.ReadFromStorage' (command =>                  {                      command.AddParameter("GrainIdHash"' grainIdHash);                      command.AddParameter("GrainIdN0"' grainId.N0Key);                      command.AddParameter("GrainIdN1"' grainId.N1Key);                      command.AddParameter("GrainTypeHash"' grainTypeHash);                      command.AddParameter("GrainTypeString"' baseGrainType);                      command.AddParameter("GrainIdExtensionString"' grainId.StringKey);                      command.AddParameter("ServiceId"' serviceId);                  })' async (selector' resultSetCount' token) =>                  {                      object storageState = null;                      int? version;                      if(choice.PreferStreaming)                      {                          //When streaming via ADO.NET' using CommandBehavior.SequentialAccess' the order of                          //the columns on how they are read needs to be exactly this.                          const int binaryColumnPositionInSelect = 0;                          const int xmlColumnPositionInSelect = 1;                          const int jsonColumnPositionInSelect = 2;                          var streamSelector = (DbDataReader)selector;                          if(!(await streamSelector.IsDBNullAsync(binaryColumnPositionInSelect)))                          {                              using(var downloadStream = streamSelector.GetStream(binaryColumnPositionInSelect' Storage))                              {                                  storageState = choice.Deserializer.Deserialize(downloadStream' grainState.Type);                              }                          }                            if(!(await streamSelector.IsDBNullAsync(xmlColumnPositionInSelect)))                          {                              using(var downloadStream = streamSelector.GetTextReader(xmlColumnPositionInSelect))                              {                                  storageState = choice.Deserializer.Deserialize(downloadStream' grainState.Type);                              }                          }                            if(!(await streamSelector.IsDBNullAsync(jsonColumnPositionInSelect)))                          {                              using(var downloadStream = streamSelector.GetTextReader(jsonColumnPositionInSelect))                              {                                  storageState = choice.Deserializer.Deserialize(downloadStream' grainState.Type);                              }                          }                            version = await streamSelector.GetValueAsync<int?>("Version");                      }                      else                      {                          //All but one of these should be null. All will be read and an appropriate deserializer picked.                          //NOTE: When streaming will be implemented' it is worthwhile to optimize this so that the defined                          //serializer will be picked and then streaming tried according to its tag.                          object payload;                          payload = selector.GetValueOrDefault<byte[]>("PayloadBinary");                          if(payload == null)                          {                              payload = selector.GetValueOrDefault<string>("PayloadXml");                          }                            if(payload == null)                          {                              payload = selector.GetValueOrDefault<string>("PayloadJson");                          }                            if(payload != null)                          {                              storageState = choice.Deserializer.Deserialize(payload' grainState.Type);                          }                            version = selector.GetNullableInt32("Version");                      }                        return Tuple.Create(storageState' version?.ToString(CultureInfo.InvariantCulture));                  }' CancellationToken.None' commandBehavior).ConfigureAwait(false)).SingleOrDefault();
