Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Orleans.Samples.Chirper.Client,ChirperClient,F:\newReposMay17\dotnet_orleans\Samples\Chirper\ChirperClient\ChirperClient.cs,ParseArgs,Cyclomatic complexity of the method is 16
Long Statement,Orleans.Samples.Chirper.Client,ChirperClient,F:\newReposMay17\dotnet_orleans\Samples\Chirper\ChirperClient\ChirperClient.cs,NewChirpArrived,The length of the statement  "		Console.WriteLine (@"New chirp from @{0} at {1} on {2}: {3}"' chirp.PublisherAlias' chirp.Timestamp.ToShortTimeString ()' chirp.Timestamp.ToShortDateString ()' chirp.Message); " is 175.
Magic Number,Orleans.Samples.Chirper.Client,ChirperClient,F:\newReposMay17\dotnet_orleans\Samples\Chirper\ChirperClient\ChirperClient.cs,Run,The following statement contains a magic number: try {  	var config = ClientConfiguration.LocalhostSilo ();  	GrainClient.Initialize (config);  	IChirperAccount account = GrainClient.GrainFactory.GetGrain<IChirperAccount> (UserId);  	publisher = account;  	List<ChirperMessage> chirps = await account.GetReceivedMessages (10);  	// Process the most recent chirps received  	foreach (ChirperMessage c in chirps) {  		this.NewChirpArrived (c);  	}  	if (Snapshot) {  		Console.WriteLine ("--- Press any key to exit ---");  		Console.ReadKey ();  	} else {  		// ... and then subscribe to receive any new chirps  		viewer = await GrainClient.GrainFactory.CreateObjectReference<IChirperViewer> (this);  		if (!this.IsPublisher)  			Console.WriteLine ("Listening for new chirps...");  		await account.ViewerConnect (viewer);  		// Sleeps forwever' so Ctrl-C to exit  		Thread.Sleep (-1);  	}  } catch (Exception exc) {  	Console.WriteLine ("Error connecting Chirper client for user={0}. Exception:{1}"' UserId' exc);  	ok = false;  }  
