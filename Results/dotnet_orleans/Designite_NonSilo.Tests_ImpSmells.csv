Implementation smell,Namespace,Class,File,Method,Description
Long Method,NonSilo.Tests.Membership,ClusterHealthMonitorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\ClusterHealthMonitorTests.cs,ClusterHealthMonitor_BasicScenario,The method has 123 lines of code.
Long Method,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The method has 121 lines of code.
Long Method,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Turn_Execution_Order_Loop,The method has 100 lines of code.
Complex Method,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_ActivityId_ExportToMessage,Cyclomatic complexity of the method is 8
Complex Method,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,Combine,Cyclomatic complexity of the method is 10
Complex Method,UnitTests.General,RangeBreakable,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,Remove,Cyclomatic complexity of the method is 8
Complex Method,NonSilo.Tests.Membership,ClusterHealthMonitorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\ClusterHealthMonitorTests.cs,ClusterHealthMonitor_BasicScenario,Cyclomatic complexity of the method is 16
Complex Method,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_Wait_Wrapped,Cyclomatic complexity of the method is 8
Complex Method,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_ClosureWorkItem_Wait,Cyclomatic complexity of the method is 8
Long Identifier,NonSilo.Tests.Membership,MembershipAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipAgentTests.cs,MembershipAgent_LifecycleStages_ValidateInitialConnectivity_Success,The length of the parameter clusterHealthMonitorTestAccessor is 32.
Long Identifier,NonSilo.Tests.Membership,MembershipAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipAgentTests.cs,MembershipAgent_LifecycleStages_ValidateInitialConnectivity_Failure,The length of the parameter clusterHealthMonitorTestAccessor is 32.
Long Identifier,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,OrderIrrelevantTest,The length of the parameter balancerResultsFromReversedInputs is 33.
Long Identifier,UnitTests.OrleansRuntime.Streams,RoundRobinSelectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\RoundRobinSelectorTests.cs,NextSelectionWontReSelectExistingSelectionsWithDuplicatesTest,The length of the parameter resourceSelectorWithDuplicates is 30.
Long Identifier,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,RequestContextProtectedInQueuedTasksTest,The length of the parameter nonAsyncCheckClearRequestContext is 32.
Long Statement,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineBlackBoxConsistencyTest,The length of the statement  "            Assert.True(capacityReached.IsSet' "Pipeline capacity not reached; the delay length probably is too short to be useful."); " is 122.
Long Statement,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,CheckPipelineState,The length of the statement  "            // a understood flaw of the current algorithm is that the capacity can be exceeded by one item. we've decided that this is acceptable and we allow it to happen. " is 160.
Long Statement,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_2,The length of the statement  "            Task<int> promise = AsyncExecutorWithRetries.ExecuteWithRetries(myFunc' maxRetries' maxRetries' successFilter' null' Constants.INFINITE_TIMESPAN); " is 146.
Long Statement,NonSilo.Tests,SiloHostBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SiloHostBuilderTests.cs,SiloHostBuilder_GrainCollectionOptionsForZeroSecondsAgeLimitTest,The length of the statement  "                .Configure<ClusterOptions>(options => { options.ClusterId = "GrainCollectionClusterId"; options.ServiceId = "GrainCollectionServiceId"; }) " is 138.
Long Statement,UnitTests.CodeGeneration,CodeGeneratorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CodeGeneratorTests.cs,TypeUtils_RawClassName_Generic_String_1,The length of the statement  "            string typeString = "GenericTestGrains.SimpleGenericGrain1`1[[System.Object' mscorlib' Version=4.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089]]"; " is 156.
Long Statement,UnitTests.CodeGeneration,CodeGeneratorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CodeGeneratorTests.cs,IsGrainMethod,The length of the statement  "            Assert.True(TypeUtils.IsGrainMethod(meth)' "Method " + meth.DeclaringType + "." + meth.Name + " should be a grain method"); " is 123.
Long Statement,UnitTests.CodeGeneration,CodeGeneratorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CodeGeneratorTests.cs,IsGrainMethod,The length of the statement  "            Assert.True(TypeUtils.IsGrainMethod(meth)' "Method " + meth.DeclaringType + "." + meth.Name + " should be a grain method"); " is 123.
Long Statement,UnitTests.CodeGeneration,CodeGeneratorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CodeGeneratorTests.cs,IsTaskGrainMethod,The length of the statement  "            Assert.True(TypeUtils.IsGrainMethod(meth)' "Method " + meth.DeclaringType + "." + meth.Name + " should be a grain method"); " is 123.
Long Statement,UnitTests.CodeGeneration,CodeGeneratorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CodeGeneratorTests.cs,IsTaskGrainMethod,The length of the statement  "            Assert.True(TypeUtils.IsGrainMethod(meth)' "Method " + meth.DeclaringType + "." + meth.Name + " should be a grain method"); " is 123.
Long Statement,UnitTests.CodeGeneration,CodeGeneratorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CodeGeneratorTests.cs,IsTaskGrainMethod,The length of the statement  "            Assert.True(TypeUtils.IsGrainMethod(meth)' "Method " + meth.DeclaringType + "." + meth.Name + " should be a grain method"); " is 123.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ID_IsSystem,The length of the statement  "            ActivationId testActivation = ActivationId.GetSystemActivation(testGrain' SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 2456)' 0)); " is 136.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,UniqueKeySerializationShouldReproduceAnIdenticalObject,The length of the statement  "                Assert.Equal(expected' actual); // UniqueKey.Serialize() and UniqueKey.Deserialize() failed to reproduce an identical object (case #1). " is 135.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,UniqueKeySerializationShouldReproduceAnIdenticalObject,The length of the statement  "                Assert.Equal(expected' actual); // UniqueKey.Serialize() and UniqueKey.Deserialize() failed to reproduce an identical object (case #2). " is 135.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,UniqueKeySerializationShouldReproduceAnIdenticalObject,The length of the statement  "                Assert.Equal(expected' actual); // UniqueKey.Serialize() and UniqueKey.Deserialize() failed to reproduce an identical object (case #3). " is 135.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ParsingUniqueKeyStringificationShouldReproduceAnIdenticalObject,The length of the statement  "            Assert.Equal(expected1' actual1); // UniqueKey.ToString() and UniqueKey.Parse() failed to reproduce an identical object (case 1). " is 129.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ParsingUniqueKeyStringificationShouldReproduceAnIdenticalObject,The length of the statement  "            Assert.Equal(expected3' actual3); // UniqueKey.ToString() and UniqueKey.Parse() failed to reproduce an identical object (case 3). " is 129.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ParsingUniqueKeyStringificationShouldReproduceAnIdenticalObject,The length of the statement  "            Assert.Equal(expected4' actual4); // UniqueKey.ToString() and UniqueKey.Parse() failed to reproduce an identical object (case 4). " is 129.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ParsingUniqueKeyStringificationShouldReproduceAnIdenticalObject,The length of the statement  "            Assert.Equal(expected5' actual5); // UniqueKey.ToString() and UniqueKey.Parse() failed to reproduce an identical object (case 5). " is 129.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,UniqueKeysShouldPreserveTheirPrimaryKeyValueIfItIsGuid,The length of the statement  "            Assert.Equal(expectedKey1' actualKey1); //"UniqueKey objects should preserve the value of their primary key (Guid case #1)."); " is 126.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,UniqueKeysShouldPreserveTheirPrimaryKeyValueIfItIsGuid,The length of the statement  "            Assert.Equal(expectedKeyExt1' actualKeyExt1); //"UniqueKey objects should preserve the value of their key extension (Guid case #1)."); " is 134.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,UniqueKeysShouldPreserveTheirPrimaryKeyValueIfItIsGuid,The length of the statement  "            Assert.Equal(expectedKey2' actualKey2); // "UniqueKey objects should preserve the value of their primary key (Guid case #2)."); " is 127.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,UniqueKeysShouldPreserveTheirPrimaryKeyValueIfItIsGuid,The length of the statement  "            Assert.Equal(expectedKeyExt2' actualKeyExt2); // "UniqueKey objects should preserve the value of their key extension (Guid case #2)."); " is 135.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,UniqueKeysShouldPreserveTheirPrimaryKeyValueIfItIsLong,The length of the statement  "            Assert.Equal(expectedKey' actualKey); // "UniqueKey objects should preserve the value of their primary key (long case)."); " is 122.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,UniqueKeysShouldPreserveTheirPrimaryKeyValueIfItIsLong,The length of the statement  "            Assert.Equal(expectedKeyExt' actualKeyExt); // "UniqueKey objects should preserve the value of their key extension (long case)."); " is 130.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ID_HashCorrectness,The length of the statement  "                Assert.Equal(referenceHash'  optimizedHash);  //  "Optimized hash value doesn't match the reference value for inputs {0}' {1}' {2}"' u1' u2' u3 " is 143.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,GrainReference_Test1,The length of the statement  "            grainRef = GrainReference.NewObserverGrainReference(observerGrainId' GuidId.GetNewGuidId()' this.environment.RuntimeClient.GrainReferenceRuntime); " is 146.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,GrainReference_Test1,The length of the statement  "            grainRef = GrainReference.NewObserverGrainReference(geoObserverGrainId' GuidId.GetNewGuidId()' this.environment.RuntimeClient.GrainReferenceRuntime); " is 149.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,TestGrainReference,The length of the statement  "            roundTripped = TestingUtils.RoundTripDotNetSerializer(grainRef' this.environment.GrainFactory' this.environment.SerializationManager); " is 134.
Long Statement,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,RoundTripGrainReferenceToKey,The length of the statement  "            GrainReference output = this.environment.Services.GetRequiredService<IGrainReferenceConverter>().GetGrainFromKeyString(str); " is 124.
Long Statement,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_ActivityId_ExportToMessage,The length of the statement  "            Assert.False(headers.ContainsKey(RequestContext.E2_E_TRACING_ACTIVITY_ID_HEADER)' "ActivityId should not be be present " + headers.ToStrings(separator: "'")); " is 158.
Long Statement,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_ActivityId_ExportToMessage,The length of the statement  "            Assert.True(headers.ContainsKey(RequestContext.E2_E_TRACING_ACTIVITY_ID_HEADER)' "ActivityId #1 should be present " + headers.ToStrings(separator: "'")); " is 153.
Long Statement,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_ActivityId_ExportToMessage,The length of the statement  "            Assert.Equal(activityId' RequestContextTestUtils.GetActivityId());  // "Original E2E ActivityId #1 should not have changed" " is 123.
Long Statement,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_ActivityId_ExportToMessage,The length of the statement  "            Assert.False(headers.ContainsKey(RequestContext.E2_E_TRACING_ACTIVITY_ID_HEADER)' "Null ActivityId should not be present " + headers.ToStrings(separator: "'")); " is 160.
Long Statement,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_ActivityId_ExportToMessage,The length of the statement  "            Assert.True(headers.ContainsKey(RequestContext.E2_E_TRACING_ACTIVITY_ID_HEADER)' "ActivityId #2 should be present " + headers.ToStrings(separator: "'")); " is 153.
Long Statement,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_ActivityId_ExportToMessage,The length of the statement  "            Assert.Equal(activityId2' RequestContextTestUtils.GetActivityId());  // "Original E2E ActivityId #2 should not have changed" " is 124.
Long Statement,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_ActivityId_ExportImport,The length of the statement  "            Assert.Equal(activityId' RequestContextTestUtils.GetActivityId());  // "Original E2E ActivityId #1 should not have changed" " is 123.
Long Statement,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_ActivityId_ExportImport,The length of the statement  "            Assert.Equal(activityId2' RequestContextTestUtils.GetActivityId()); // "Original E2E ActivityId #2 should not have changed" " is 123.
Long Statement,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,Combine,The length of the statement  "            // tell set2 about every node in set1 ... even if set1 and set2 overlap' ConsistentRingProvider should be able to handle " is 120.
Long Statement,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,VerifyRing,The length of the statement  "                Assert.True(fullring.Remove(r.GetMyRange())' string.Format("Couldn't find & break range {0} in {1}. Some other node already claimed responsibility."' r.GetMyRange()' fullring)); " is 177.
Long Statement,UnitTests.Serialization,InternalSerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\InternalSerializationTests.cs,RunGrainReferenceSerializationTest,The length of the statement  "            Assert.IsAssignableFrom(grainReference.GetType()' deserialized); //Deserialized GrainReference type should match original type " is 126.
Long Statement,UnitTests.Serialization,InternalSerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\InternalSerializationTests.cs,GetGrainReference,The length of the statement  "            // The type used in attributes will not be a constructed generic type' so if this is a constructed generic type then we need to " is 127.
Long Statement,UnitTests.Serialization,InternalSerializationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\InternalSerializationTests.cs,GetGrainReference,The length of the statement  "            var searchGrainType = originalGrainType.IsConstructedGenericType ? originalGrainType.GetGenericTypeDefinition() : originalGrainType; " is 132.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_DictionaryWithComparer,The length of the statement  "            Assert.Equal(source1["Hello"]' result1["hElLo"]); //Round trip for case insensitive string/string dictionary lost the custom comparer " is 133.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_DictionaryWithComparer,The length of the statement  "            Assert.Equal<DateTime>(source2[3]' result2[13]);  //Round trip for case insensitive int/DateTime dictionary lost the custom comparer" " is 133.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_HashSetWithComparer,The length of the statement  "            Assert.IsAssignableFrom(source1.GetType()' deserialized); //Type is wrong after round-trip of string hash set with comparer " is 123.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_SortedSetWithComparer,The length of the statement  "            Assert.IsAssignableFrom(source1.GetType()' deserialized); //Type is wrong after round-trip of string sorted set with comparer " is 125.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Array,The length of the statement  "            var source5 = Enumerable.Repeat(3' (environment.SerializationManager.LargeObjectSizeThreshold / sizeof(int)) + 1).ToArray(); " is 124.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The length of the statement  "            var result = Assert.IsAssignableFrom<HashSet<string>[][]>(deserialized); //Array of arrays of hash sets type is wrong on deserialization " is 136.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_UnserializableException,The length of the statement  "            Exception source = Assert.Throws<UnserializableException>((Action)(() => { throw new UnserializableException(message); })); " is 123.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_UnserializableException,The length of the statement  "            var result = Assert.IsAssignableFrom<Exception>(deserialized); //Type is wrong after round trip of unserializable exception " is 123.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_UnserializableException,The length of the statement  "            Assert.Contains(expectedMessage' result.Message); //Exception message is wrong after round trip of unserializable exception " is 123.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ObjectIdentity,The length of the statement  "            var result = Assert.IsAssignableFrom<Dictionary<string' List<string>>>(deserialized); //Type is wrong after round-trip of string/list dict " is 138.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Immutable,The length of the statement  "            Assert.Same(test2.Value' ((Immutable<List<int>>)raw).Value); //Deep copy of Immutable<> object made a copy instead of just copying the pointer " is 142.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Immutable,The length of the statement  "            Assert.IsAssignableFrom<EmbeddedImmutable>(raw); //Type is wrong after deep copy of type containing an Immutable<> field " is 120.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Immutable,The length of the statement  "            Assert.Same(test3.B.Value' ((EmbeddedImmutable)raw).B.Value); //Deep copy of embedded [Immutable] object made a copy instead of just copying the pointer " is 152.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_GrainBase_ViaStandardSerializer,The length of the statement  "            // System.Runtime.Serialization.SerializationException: Type 'Echo.Grains.EchoTaskGrain' in Assembly 'UnitTestGrains' Version=1.0.0.0' Culture=neutral' PublicKeyToken=070f47935e3ed133' is not marked as serializable. " is 215.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_GrainBase_ViaStandardSerializer,The length of the statement  "            var exc = Assert.Throws<SerializationException>(() => DotNetSerializationLoop(input' environment.SerializationManager)); " is 120.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ValidateDictionaryContent,The length of the statement  "                Assert.True(result.ContainsKey(pair.Key)' "Key " + pair.Key.ToString() + " is missing after round-trip of " + type + " dict"); " is 126.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ValidateSortedDictionary,The length of the statement  "                Assert.True(result.ContainsKey(pair.Key)); //Key " + pair.Key.ToString() + " is missing after round-trip of " + type + " sorted dict " is 132.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ValidateSortedDictionary,The length of the statement  "                Assert.Equal<V>(pair.Value' result[pair.Key]); //Key " + pair.Key.ToString() + " has wrong value after round-trip of " + type + " sorted dict " is 141.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ValidateSortedDictionary,The length of the statement  "                Assert.Equal<K>(sourceKeys.Current' resultKeys.Current); //Keys out of order after round-trip of " + type + " sorted dict " is 121.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ValidateSortedList,The length of the statement  "                Assert.True(result.ContainsKey(pair.Key)); //Key " + pair.Key.ToString() + " is missing after round-trip of " + type + " sorted list " is 132.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ValidateSortedList,The length of the statement  "                Assert.Equal<V>(pair.Value' result[pair.Key]); //Key " + pair.Key.ToString() + " has wrong value after round-trip of " + type + " sorted list " is 141.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ValidateSortedList,The length of the statement  "                Assert.Equal<K>(sourceKeys.Current' resultKeys.Current); //Keys out of order after round-trip of " + type + " sorted list " is 121.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ValidateArrayOfArrays,The length of the statement  "            var result = Assert.IsAssignableFrom<T[][]>(deserialized);  //Type is wrong after round-trip of " + type + " array of arrays" " is 125.
Long Statement,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ValidateArrayOfArrayOfArrays,The length of the statement  "            var result = Assert.IsAssignableFrom<T[][][]>(deserialized);  //Type is wrong after round-trip of " + type + " array of arrays" " is 127.
Long Statement,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_GrainMethodTaskReturnType,The length of the statement  "            Assert.NotNull(this.fixture.SerializationManager.GetSerializer(typeof(SerializerTestClass1))); //No serializer generated for return type of Task grain method " is 157.
Long Statement,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_GrainMethodTaskParamType,The length of the statement  "            Assert.NotNull(this.fixture.SerializationManager.GetSerializer(typeof(SerializerTestClass2))); //No serializer generated for parameter type of Task grain method " is 160.
Long Statement,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_GrainMethodTaskReturnOnlyType,The length of the statement  "            Assert.NotNull(this.fixture.SerializationManager.GetSerializer(typeof(SerializerTestClass3))); //No serializer generated for return type of parameterless Task grain method " is 171.
Long Statement,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_GrainMethodAsyncReturnType,The length of the statement  "            Assert.NotNull(this.fixture.SerializationManager.GetSerializer(typeof(SerializerTestClass4))); //No serializer generated for return type of Task grain method " is 157.
Long Statement,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_GrainMethodAsyncParamType,The length of the statement  "            Assert.NotNull(this.fixture.SerializationManager.GetSerializer(typeof(SerializerTestClass5))); //No serializer generated for parameter type of Task grain method " is 160.
Long Statement,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_GrainMethodAsyncReturnOnlyType,The length of the statement  "            Assert.NotNull(this.fixture.SerializationManager.GetSerializer(typeof(SerializerTestClass6))); //No serializer generated for return type of parameterless Task grain method " is 171.
Long Statement,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_AsyncObserverArgumentType,The length of the statement  "            Assert.NotNull(this.fixture.SerializationManager.GetSerializer(typeof(AsyncObserverArg))); //No serializer generated for argument type of async observer " is 152.
Long Statement,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_AsyncObservableArgumentType,The length of the statement  "            Assert.NotNull(this.fixture.SerializationManager.GetSerializer(typeof(AsyncObservableArg))); //No serializer generated for argument type of async observable " is 156.
Long Statement,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_AsyncStreamArgumentType,The length of the statement  "            Assert.NotNull(this.fixture.SerializationManager.GetSerializer(typeof(AsyncStreamArg))); //No serializer generated for argument type of async stream " is 148.
Long Statement,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_StreamSubscriptionHandleType,The length of the statement  "            Assert.NotNull(this.fixture.SerializationManager.GetSerializer(typeof(StreamSubscriptionHandleArg))); //No serializer generated for argument type of stream subscription handle " is 175.
Long Statement,UnitTests.Serialization,ILBasedExceptionSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedExceptionSerializerTests.cs,TestExceptionSerialization,The length of the statement  "            var actual = (ILExceptionSerializerTestException) this.environment.SerializationManager.Deserialize(null' reader.StreamReader); " is 127.
Long Statement,UnitTests.Serialization,ILBasedExceptionSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedExceptionSerializerTests.cs,ExceptionSerializer_UnknownException,The length of the statement  "            var knowsException = new ILBasedExceptionSerializer(this.serializerGenerator' new TypeSerializer(new CachedTypeResolver())); " is 124.
Long Statement,UnitTests.Serialization,ILBasedExceptionSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedExceptionSerializerTests.cs,ExceptionSerializer_UnknownException,The length of the statement  "            var doesNotKnowException = new ILBasedExceptionSerializer(this.serializerGenerator' new TestTypeSerializer(new CachedTypeResolver())); " is 134.
Long Statement,UnitTests.Serialization,ILBasedExceptionSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedExceptionSerializerTests.cs,ExceptionSerializer_UnknownException,The length of the statement  "            Assert.Equal(RuntimeTypeNameFormatter.Format(typeof(ILExceptionSerializerTestException))' actualDeserialized.OriginalTypeName); " is 127.
Long Statement,UnitTests.Serialization,SerializationOrderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationOrderTests.cs,SerializationOrder_VerifyExternalSerializersInvokedInOrder,The length of the statement  "            Assert.True(FakeSerializer1.SerializeCalled' "IExternalSerializer.Serialize should have been called on FakeSerializer1"); " is 121.
Long Statement,UnitTests.Serialization,SerializationOrderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationOrderTests.cs,SerializationOrder_VerifyExternalSerializersInvokedInOrder,The length of the statement  "            Assert.True(FakeSerializer1.DeserializeCalled' "IExternalSerializer.Deserialize should have been called on FakeSerializer1"); " is 125.
Long Statement,UnitTests.Serialization,SerializationOrderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationOrderTests.cs,SerializationOrder_VerifyExternalSerializersInvokedInOrder,The length of the statement  "            Assert.False(FakeSerializer2.SerializeCalled' "IExternalSerializer.Serialize should NOT have been called on FakeSerializer2"); " is 126.
Long Statement,UnitTests.Serialization,SerializationOrderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationOrderTests.cs,SerializationOrder_VerifyExternalSerializersInvokedInOrder,The length of the statement  "            Assert.False(FakeSerializer2.DeserializeCalled' "IExternalSerializer.Deserialize should NOT have been called on FakeSerializer2"); " is 130.
Long Statement,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_DateTime,The length of the statement  "            Assert.Equal(inputUnspecified.ToString(CultureInfo.InvariantCulture)' outputUnspecified.ToString(CultureInfo.InvariantCulture)); " is 128.
Long Statement,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_DateTimeOffset,The length of the statement  "            DateTimeOffset outputUnspecified = this.fixture.SerializationManager.RoundTripSerializationForTesting(inputUnspecified); " is 120.
Long Statement,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_RecursiveSerialization,The length of the statement  "            TestTypeA output1 = Orleans.TestingHost.Utils.TestingUtils.RoundTripDotNetSerializer(input' this.fixture.GrainFactory' this.fixture.SerializationManager); " is 154.
Long Statement,UnitTests.Serialization,TestTypeASerialization,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,Deserializer,The length of the statement  "                result.Collection = (ICollection<TestTypeA>)SerializationManager.DeserializeInner(typeof(ICollection<TestTypeA>)' context); " is 123.
Long Statement,UnitTests.Serialization,SerializerGenerationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializerGenerationTests.cs,SerializationTests_TypeWithInternalNestedClass,The length of the statement  "            Assert.NotNull(this.fixture.SerializationManager.GetSerializer(typeof(MyTypeWithAnInternalTypeField.MyInternalDependency))); " is 124.
Long Statement,NonSilo.Tests.Membership,ClusterHealthMonitorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\ClusterHealthMonitorTests.cs,ClusterHealthMonitor_BasicScenario,The length of the statement  "            while (probeCalls.TryDequeue(out var call)) Assert.Contains(testAccessor.MonitoredSilos' k => k.Key.Equals(call.Item1)); " is 120.
Long Statement,NonSilo.Tests.Membership,ClusterHealthMonitorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\ClusterHealthMonitorTests.cs,ClusterHealthMonitor_BasicScenario,The length of the statement  "            for (var expectedMissedProbes = 1; expectedMissedProbes <= clusterMembershipOptions.NumMissedProbesLimit; expectedMissedProbes++) " is 129.
Long Statement,NonSilo.Tests.Membership,MembershipAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipAgentTests.cs,MembershipAgent_LifecycleStages_ValidateInitialConnectivity_Failure,The length of the statement  "            var membershipAgentTestAccessor = ((MembershipAgent.ITestAccessor)this.agent).GetDateTime = () => dateTimes[dateTimeIndex++]; " is 125.
Long Statement,NonSilo.Tests.Membership,MembershipTableCleanupAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableCleanupAgentTests.cs,BasicScenario,The length of the statement  "            var options = new ClusterMembershipOptions { DefunctSiloCleanupPeriod = enabled ? new TimeSpan?(TimeSpan.FromMinutes(90)) : null' DefunctSiloExpiration = TimeSpan.FromDays(1) }; " is 177.
Long Statement,UnitTests.OrleansRuntime,AsyncSerialExecutorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\AsyncSerialExecutorTests.cs,Operation,The length of the statement  "            if (operationsInProgress > 0) Assert.True(false' $"1: Operation {opNumber} found {operationsInProgress} operationsInProgress."); " is 128.
Long Statement,UnitTests.OrleansRuntime,AsyncSerialExecutorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\AsyncSerialExecutorTests.cs,Operation,The length of the statement  "            if (operationsInProgress != 1) Assert.True(false' $"2: Operation {opNumber} found {operationsInProgress} operationsInProgress."); " is 129.
Long Statement,UnitTests.OrleansRuntime,AsyncSerialExecutorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\AsyncSerialExecutorTests.cs,Operation,The length of the statement  "            if (operationsInProgress != 1) Assert.True(false' $"3: Operation {opNumber} found {operationsInProgress} operationsInProgress."); " is 129.
Long Statement,UnitTests.OrleansRuntime,ExceptionsTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\ExceptionsTests.cs,SerializationTests_Exception_DotNet,The length of the statement  "            var activationAddress = ActivationAddress.NewActivationAddress(SiloAddressUtils.NewLocalSiloAddress(12345)' GrainId.NewId()); " is 125.
Long Statement,UnitTests.OrleansRuntime,ExceptionsTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\ExceptionsTests.cs,SerializationTests_Exception_DotNet,The length of the statement  "            var output = TestingUtils.RoundTripDotNetSerializer(original' this.fixture.GrainFactory' this.fixture.SerializationManager); " is 124.
Long Statement,UnitTests.OrleansRuntime,ExceptionsTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\ExceptionsTests.cs,SerializationTests_Exception_Orleans,The length of the statement  "            var activationAddress = ActivationAddress.NewActivationAddress(SiloAddressUtils.NewLocalSiloAddress(12345)' GrainId.NewId()); " is 125.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_MainTurnWait_Test,The length of the statement  "            this.orleansTaskScheduler = TestInternalHelper.InitializeSchedulerForTesting(new UnitTestSchedulingContext()' this.loggerFactory); " is 130.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Turn_Execution_Order,The length of the statement  "            // For example' you have a  long running main turn and in the middle it spawns a lot of short CWs (on Done promise) and StartNew.  " is 129.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Stopped_WorkItemGroup,The length of the statement  "            var scheduler = this.orleansTaskScheduler = TestInternalHelper.InitializeSchedulerForTesting(context' this.loggerFactory); " is 122.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The length of the statement  "            // For example' you have a long running main turn and in the middle it spawns a lot of short CWs (on Done promise) and StartNew.  " is 128.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The length of the statement  "            OrleansTaskScheduler masterScheduler = this.orleansTaskScheduler = TestInternalHelper.InitializeSchedulerForTesting(context' this.loggerFactory); " is 145.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The length of the statement  "            OrleansTaskScheduler orleansTaskScheduler = orleansTaskScheduler = TestInternalHelper.InitializeSchedulerForTesting(context' this.loggerFactory); " is 145.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_ContinueWith_1_Test,The length of the statement  "                    Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); }); " is 150.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The length of the statement  "                Task<int> task1 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); return 1; }); " is 170.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The length of the statement  "                Task<int> task2 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 2a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 2b"); return 2; }); " is 170.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The length of the statement  "                Task<int> task3 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 3a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 3b"); return 3; }); " is 170.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The length of the statement  "                Task<int> task4 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 4a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 4b"); return 4; }); " is 170.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The length of the statement  "            Assert.True(4000 <= ms && ms <= 5000' "Wait time out of range' expected between 4000 and 5000 milliseconds' was " + ms); " is 120.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_ContinueWith_2_OrleansSched,The length of the statement  "            this.orleansTaskScheduler = TestInternalHelper.InitializeSchedulerForTesting(new UnitTestSchedulingContext()' this.loggerFactory); " is 130.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_ContinueWith_2_OrleansSched,The length of the statement  "            Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); throw new ArgumentException(); }); " is 136.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_ContinueWith_1_Test,The length of the statement  "                Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(1000); n = n + 3; this.output.WriteLine("===> 1b"); }); " is 145.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_WhenAny,The length of the statement  "            Assert.True(task1.IsCompleted || task2.IsCompleted' "Task-1 Status = " + task1.Status + " Task-2 Status = " + task2.Status); " is 124.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Turn_Execution_Order_Loop,The length of the statement  "            // For example' you have a long running main turn and in the middle it spawns a lot of short CWs (on Done promise) and StartNew.  " is 128.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Turn_Execution_Order_Loop,The length of the statement  "                        Assert.False(executingChain[chainNum]' "Detected unexpected other execution on chain " + chainNum + " Task " + taskNum); " is 120.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Turn_Execution_Order_Loop,The length of the statement  "                            Assert.False(executingChain[chainNum]' "Detected unexpected other execution on chain " + chainNum + " Task " + taskNum); " is 120.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Turn_Execution_Order_Loop,The length of the statement  "                            Assert.Equal(taskNum - 1' stageComplete[chainNum]);  // "Detected unexpected execution stage on chain " + chainNum + " Task " + taskNum " is 135.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Turn_Execution_Order_Loop,The length of the statement  "                    // since resultHandle being complete doesn't directly imply that the final chain was completed (there's a chance for a race condition)' give a small chance for it to complete. " is 175.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,OrleansSched_Test1,The length of the statement  "            OrleansTaskScheduler orleansTaskScheduler = TestInternalHelper.InitializeSchedulerForTesting(context' this.loggerFactory); " is 122.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,OrleansSched_Test1_Bounce,The length of the statement  "            OrleansTaskScheduler orleansTaskScheduler = TestInternalHelper.InitializeSchedulerForTesting(context' this.loggerFactory); " is 122.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,Run_ActivationSched_Test1,The length of the statement  "            var grain = NonReentrentStressGrainWithoutState.Create(grainId' new GrainRuntime(Options.Create(new ClusterOptions())' silo' null' null' null' null' null' NullLoggerFactory.Instance)); " is 184.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,Run_ActivationSched_Test1,The length of the statement  "            await Task.Factory.StartNew(() => grain.OnActivateAsync()' CancellationToken.None' TaskCreationOptions.None' scheduler).Unwrap(); " is 129.
Long Statement,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,InitSchedulerLogging,The length of the statement  "            var loggerFactory = TestingUtils.CreateDefaultLoggerFactory(TestingUtils.CreateTraceFileName("Silo"' DateTime.Now.ToString("yyyyMMdd_hhmmss"))' filters); " is 153.
Empty Catch Block,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,DoDelay,The method has an empty catch block.
Magic Number,UnitTests,Async_TimingTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_TimingTests.cs,Async_Task_WithTimeout_Wait,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(2000);
Magic Number,UnitTests,Async_TimingTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_TimingTests.cs,Async_Task_WithTimeout_Wait,The following statement contains a magic number: TimeSpan sleepTime = TimeSpan.FromMilliseconds(4000);
Magic Number,UnitTests,Async_TimingTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_TimingTests.cs,Async_Task_WithTimeout_Wait,The following statement contains a magic number: TimeSpan delta = TimeSpan.FromMilliseconds(200);
Magic Number,UnitTests,Async_TimingTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_TimingTests.cs,Async_Task_WithTimeout_Wait,The following statement contains a magic number: Task<int> promise = Task<int>.Factory.StartNew(() =>                  {                      Thread.Sleep(sleepTime);                      return 5;                  }).WithTimeout(timeout);
Magic Number,UnitTests,Async_TimingTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_TimingTests.cs,Async_Task_WithTimeout_Await,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(2000);
Magic Number,UnitTests,Async_TimingTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_TimingTests.cs,Async_Task_WithTimeout_Await,The following statement contains a magic number: TimeSpan sleepTime = TimeSpan.FromMilliseconds(4000);
Magic Number,UnitTests,Async_TimingTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_TimingTests.cs,Async_Task_WithTimeout_Await,The following statement contains a magic number: TimeSpan delta = TimeSpan.FromMilliseconds(300);
Magic Number,UnitTests,Async_TimingTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_TimingTests.cs,Async_Task_WithTimeout_Await,The following statement contains a magic number: Task<int> promise = Task<int>.Factory.StartNew(() =>              {                  Thread.Sleep(sleepTime);                  return 5;              }).WithTimeout(timeout);
Magic Number,UnitTests,ConfigTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\ConfigTests.cs,Config_ParseTimeSpan,The following statement contains a magic number: ts = TimeSpan.FromSeconds(2);
Magic Number,UnitTests,ConfigTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\ConfigTests.cs,Config_ParseTimeSpan,The following statement contains a magic number: ts = TimeSpan.FromMinutes(3);
Magic Number,UnitTests,ConfigTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\ConfigTests.cs,Config_ParseTimeSpan,The following statement contains a magic number: ts = TimeSpan.FromHours(4);
Magic Number,UnitTests,ConfigTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\ConfigTests.cs,Config_ParseTimeSpan,The following statement contains a magic number: ts = TimeSpan.FromSeconds(5);
Magic Number,UnitTests,CounterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CounterTests.cs,Counter_SetValue,The following statement contains a magic number: int val = random.Next(1000000);
Magic Number,UnitTests,CounterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CounterTests.cs,Counter_IncrementBy,The following statement contains a magic number: int val = random.Next(1000000);
Magic Number,UnitTests,CounterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CounterTests.cs,Counter_IncrementBy,The following statement contains a magic number: Assert.Equal(val + 2' ctr.GetCurrentValue());
Magic Number,UnitTests,CounterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CounterTests.cs,Counter_IncrementFromMinInt,The following statement contains a magic number: Assert.Equal(val + 2' ctr.GetCurrentValue());
Magic Number,UnitTests,CounterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CounterTests.cs,Counter_IncrementFromMaxInt,The following statement contains a magic number: Assert.Equal(longVal + 2' ctr.GetCurrentValue());
Magic Number,UnitTests,CounterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\CounterTests.cs,Counter_DecrementBy,The following statement contains a magic number: int startValue = 10;
Magic Number,UnitTests,LruTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\LruTest.cs,LruCountTest,The following statement contains a magic number: const int maxSize = 10;
Magic Number,UnitTests,LruTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\LruTest.cs,LruCountTest,The following statement contains a magic number: Assert.Equal(2' target.Count);
Magic Number,UnitTests,LruTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\LruTest.cs,LruMaximumSizeTest,The following statement contains a magic number: const int maxSize = 10;
Magic Number,UnitTests,LruTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\LruTest.cs,LruMaximumSizeTest,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,UnitTests,LruTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\LruTest.cs,LruMaximumSizeTest,The following statement contains a magic number: i <= maxSize + 5
Magic Number,UnitTests,LruTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\LruTest.cs,LruMaximumSizeTest,The following statement contains a magic number: i <= 5
Magic Number,UnitTests,LruTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\LruTest.cs,LruUsageTest,The following statement contains a magic number: const int maxSize = 10;
Magic Number,UnitTests,LruTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\LruTest.cs,LruUsageTest,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,UnitTests.MessageCenterTests,AsynchAgentRestartTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsynchAgentRestartTest.cs,AgentRestart,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,UnitTests.MessageCenterTests,AsynchAgentRestartTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsynchAgentRestartTest.cs,AgentRestart,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,UnitTests.MessageCenterTests,AsynchAgentRestartTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsynchAgentRestartTest.cs,AgentRestart,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,UnitTests.MessageCenterTests,AsynchAgentRestartTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsynchAgentRestartTest.cs,AgentRestart,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,UnitTests.MessageCenterTests,AsynchAgentRestartTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsynchAgentRestartTest.cs,AgentStartWhileStarted,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,UnitTests.MessageCenterTests,AsynchAgentRestartTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsynchAgentRestartTest.cs,AgentStopWhileStopped,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,UnitTests.MessageCenterTests,AsynchAgentRestartTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsynchAgentRestartTest.cs,AgentStopWhileStopped,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineSimpleTest,The following statement contains a magic number: int step = 2000;
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineSimpleTest,The following statement contains a magic number: int epsilon = 200;
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineSimpleTest,The following statement contains a magic number: var pipeline = new AsyncPipeline(2);
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineSimpleTest,The following statement contains a magic number: pipeline.Add(done[2]);
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineSimpleTest,The following statement contains a magic number: Assert.True(3 * step - epsilon <= watch.ElapsedMilliseconds' $"{watch.ElapsedMilliseconds}ms");
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineSimpleTest,The following statement contains a magic number: Assert.True(watch.ElapsedMilliseconds <= 3 * step + epsilon' $"{watch.ElapsedMilliseconds}ms");
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineWaitTest,The following statement contains a magic number: Random rand = new Random(222);
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineWaitTest,The following statement contains a magic number: int numActions = 1000;
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineWaitTest,The following statement contains a magic number: Action action1 = (() =>                   {                      lock (this) started++;                      Thread.Sleep((int)(rand.NextDouble() * 100));                      lock (this) finished1++;                  });
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineWaitTest,The following statement contains a magic number: Action action2 = (() =>              {                  Thread.Sleep((int)(rand.NextDouble() * 100));                  lock (this) finished2++;              });
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineWaitTest,The following statement contains a magic number: var pipeline = new AsyncPipeline(10);
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineBlackBoxConsistencyTest,The following statement contains a magic number: const double variance = 0.1;
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineBlackBoxConsistencyTest,The following statement contains a magic number: Func<Task> monitorFunc =                  async () =>                  {                      var delay = TimeSpan.FromSeconds(5);                      while (tasksCompleted < expectedTasksCompleted)                      {                          output.WriteLine("test in progress: tasksCompleted = {0}."' tasksCompleted);                          await Task.Delay(delay);                      }                  };
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineBlackBoxConsistencyTest,The following statement contains a magic number: output.WriteLine(                  "Test finished in {0} sec' {1}% of target time {2} sec. Permitted variance is +/-{3}%"'                  actualSec'                  actualSec / targetTimeSec * 100'                  targetTimeSec'                  variance * 100);
Magic Number,UnitTests.AsyncPrimitivesTests,AsyncPipelineTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\AsyncPipelineTests.cs,AsyncPipelineBlackBoxConsistencyTest,The following statement contains a magic number: output.WriteLine(                  "Test finished in {0} sec' {1}% of target time {2} sec. Permitted variance is +/-{3}%"'                  actualSec'                  actualSec / targetTimeSec * 100'                  targetTimeSec'                  variance * 100);
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_1,The following statement contains a magic number: Func<int' Task<int>> myFunc = ((int funcCounter) =>              {                  // ReSharper disable AccessToModifiedClosure                  Assert.Equal(counter' funcCounter);                  this.output.WriteLine("Running for {0} time."' counter);                  counter++;                  if (counter == 5)                      return Task.FromResult(28);                  else                      throw new ArgumentException("Wrong arg!");                  // ReSharper restore AccessToModifiedClosure              });
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_1,The following statement contains a magic number: Func<int' Task<int>> myFunc = ((int funcCounter) =>              {                  // ReSharper disable AccessToModifiedClosure                  Assert.Equal(counter' funcCounter);                  this.output.WriteLine("Running for {0} time."' counter);                  counter++;                  if (counter == 5)                      return Task.FromResult(28);                  else                      throw new ArgumentException("Wrong arg!");                  // ReSharper restore AccessToModifiedClosure              });
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_1,The following statement contains a magic number: Task<int> promise = AsyncExecutorWithRetries.ExecuteWithRetries(myFunc' 10' 10' null' errorFilter);
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_1,The following statement contains a magic number: Task<int> promise = AsyncExecutorWithRetries.ExecuteWithRetries(myFunc' 10' 10' null' errorFilter);
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_1,The following statement contains a magic number: promise = AsyncExecutorWithRetries.ExecuteWithRetries(myFunc' 3' 3' null' errorFilter);
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_1,The following statement contains a magic number: promise = AsyncExecutorWithRetries.ExecuteWithRetries(myFunc' 3' 3' null' errorFilter);
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_2,The following statement contains a magic number: const int countLimit = 5;
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_2,The following statement contains a magic number: int maxRetries = 10;
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_2,The following statement contains a magic number: maxRetries = 3;
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_4,The following statement contains a magic number: int maxRetries = 5;
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_5,The following statement contains a magic number: Func<Exception' int' bool> errorFilter = ((Exception exc' int i) =>              {                  this.output.WriteLine("Running ERROR FILTER for {0} time."' i);                  Assert.Equal(lastIteration' i);                  if (i==0 || i==1)                      return true;                  else if (i == 2)                      throw exc;                  else                      return false;              });
Magic Number,NonSilo.Tests,Async_AsyncExecutorWithRetriesTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Async_AsyncExecutorWithRetriesTests.cs,Async_AsyncExecutorWithRetriesTest_5,The following statement contains a magic number: int maxRetries = 5;
Magic Number,NonSilo.Tests,ClientBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\ClientBuilderTests.cs,ClientBuilder_ServiceProviderTest,The following statement contains a magic number: var two = new MyService { Id = 2 };
Magic Number,NonSilo.Tests,ClientBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\ClientBuilderTests.cs,ClientBuilder_ServiceProviderTest,The following statement contains a magic number: builder.ConfigureServices(                  services =>                  {                      Interlocked.CompareExchange(ref registeredFirst[0]' 2' 0);                      services.AddSingleton(two);                  });
Magic Number,NonSilo.Tests,ClientBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\ClientBuilderTests.cs,ClientBuilder_ServiceProviderTest,The following statement contains a magic number: Assert.Equal(2' services.Count);
Magic Number,NonSilo.Tests,ClientBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\ClientBuilderTests.cs,ClientBuilder_ServiceProviderTest,The following statement contains a magic number: Assert.NotNull(services.FirstOrDefault(svc => svc.Id == 2));
Magic Number,NonSilo.Tests,ClientBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\ClientBuilderTests.cs,ClientBuilder_ServiceProviderTest,The following statement contains a magic number: Assert.Equal(2' client.ServiceProvider.GetRequiredService<MyService>().Id);
Magic Number,NonSilo.Tests,RuntimeTypeNameFormatterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\RuntimeTypeNameFormatterTests.cs,FormattedTypeNamesAreRecoverable,The following statement contains a magic number: var types = new[]              {                  typeof(NameValueCollection)'                  typeof(int)'                  typeof(int[])'                  typeof(int*[])'                  typeof(List<>)'                  typeof(List<int>)'                  typeof(List<int*[]>)'                  typeof(Inner<int['']>.InnerInner<string' List<int>>.Bottom['])'                  typeof(Inner<>.InnerInner<'>.Bottom)'                  typeof(RuntimeTypeNameFormatterTests)'                  typeof(TestGrainInterfaces.CircularStateTestState)'                  typeof(int).MakeByRefType()'                  typeof(Inner<int[]>.InnerInner<string' List<int>>.Bottom['])                      .MakePointerType()                      .MakePointerType()                      .MakeArrayType(10)                      .MakeByRefType()'                  typeof(NameValueCollection)              };
Magic Number,NonSilo.Tests,SiloHostBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SiloHostBuilderTests.cs,SiloHostBuilder_ServiceProviderTest,The following statement contains a magic number: var two = new MyService { Id = 2 };
Magic Number,NonSilo.Tests,SiloHostBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SiloHostBuilderTests.cs,SiloHostBuilder_ServiceProviderTest,The following statement contains a magic number: builder.ConfigureServices(                  services =>                      {                          Interlocked.CompareExchange(ref registeredFirst[0]' 2' 0);                          services.AddSingleton(two);                      });
Magic Number,NonSilo.Tests,SiloHostBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SiloHostBuilderTests.cs,SiloHostBuilder_ServiceProviderTest,The following statement contains a magic number: Assert.Equal(2' services.Count);
Magic Number,NonSilo.Tests,SiloHostBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SiloHostBuilderTests.cs,SiloHostBuilder_ServiceProviderTest,The following statement contains a magic number: Assert.NotNull(services.FirstOrDefault(svc => svc.Id == 2));
Magic Number,NonSilo.Tests,SiloHostBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SiloHostBuilderTests.cs,SiloHostBuilder_ServiceProviderTest,The following statement contains a magic number: Assert.Equal(2' silo.Services.GetRequiredService<MyService>().Id);
Magic Number,NonSilo.Tests,SiloHostBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SiloHostBuilderTests.cs,SiloHostBuilder_LoadSheddingValidatorPassesWhenLoadSheddingDisabled,The following statement contains a magic number: var builder = new SiloHostBuilder().ConfigureDefaults()                      .UseLocalhostClustering()                      .Configure<ClusterOptions>(options => options.ClusterId = "someClusterId")                      .Configure<EndpointOptions>(options => options.AdvertisedIPAddress = IPAddress.Loopback)                      .ConfigureServices(services => services.AddSingleton<IMembershipTable' NoOpMembershipTable>())                      .Configure<LoadSheddingOptions>(options =>                      {                          options.LoadSheddingEnabled = false;                          options.LoadSheddingLimit = 95;                      })                      .ConfigureServices(svcCollection =>                      {                          svcCollection.AddSingleton<FakeHostEnvironmentStatistics>();                          svcCollection.AddFromExisting<IHostEnvironmentStatistics' FakeHostEnvironmentStatistics>();                          svcCollection.AddTransient<IConfigurationValidator' LoadSheddingValidator>();                      });
Magic Number,NonSilo.Tests,SiloHostBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SiloHostBuilderTests.cs,SiloHostBuilder_LoadSheddingValidatorAbove100ShouldFail,The following statement contains a magic number: Assert.Throws<OrleansConfigurationException>(() =>                      new SiloHostBuilder()                          .ConfigureDefaults()                          .UseLocalhostClustering()                          .Configure<ClusterOptions>(options => options.ClusterId = "someClusterId")                          .Configure<EndpointOptions>(options => options.AdvertisedIPAddress = IPAddress.Loopback)                          .ConfigureServices(services => services.AddSingleton<IMembershipTable' NoOpMembershipTable>())                          .Configure<LoadSheddingOptions>(options =>                          {                              options.LoadSheddingEnabled = true;                              options.LoadSheddingLimit = 101;                          })                          .ConfigureServices(svcCollection =>                          {                              svcCollection.AddSingleton<FakeHostEnvironmentStatistics>();                              svcCollection.AddFromExisting<IHostEnvironmentStatistics' FakeHostEnvironmentStatistics>();                              svcCollection.AddTransient<IConfigurationValidator' LoadSheddingValidator>();                          })                          .Build());
Magic Number,NonSilo.Tests,SiloHostBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SiloHostBuilderTests.cs,SiloHostBuilder_LoadSheddingValidatorFailsWithNoRegisteredHostEnvironmentStatistics,The following statement contains a magic number: Assert.Throws<OrleansConfigurationException>(() =>                  new SiloHostBuilder()                      .ConfigureDefaults()                      .UseLocalhostClustering()                      .Configure<ClusterOptions>(options => options.ClusterId = "someClusterId")                      .Configure<EndpointOptions>(options => options.AdvertisedIPAddress = IPAddress.Loopback)                      .ConfigureServices(services => services.AddSingleton<IMembershipTable' NoOpMembershipTable>())                      .Configure<LoadSheddingOptions>(options =>                      {                          options.LoadSheddingEnabled = true;                          options.LoadSheddingLimit = 95;                      }).ConfigureServices(svcCollection =>                      {                          svcCollection.AddTransient<IConfigurationValidator' LoadSheddingValidator>();                      })                      .Build());
Magic Number,NonSilo.Tests,SiloHostBuilderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SiloHostBuilderTests.cs,SiloHostBuilder_LoadSheddingValidatorPasses,The following statement contains a magic number: var builder = new SiloHostBuilder()                  .ConfigureDefaults()                  .UseLocalhostClustering()                  .Configure<ClusterOptions>(options => options.ClusterId = "someClusterId")                  .Configure<EndpointOptions>(options => options.AdvertisedIPAddress = IPAddress.Loopback)                  .ConfigureServices(services => services.AddSingleton<IMembershipTable' NoOpMembershipTable>())                  .Configure<LoadSheddingOptions>(options =>                  {                      options.LoadSheddingEnabled = true;                      options.LoadSheddingLimit = 95;                  })                  .ConfigureServices(svcCollection =>                  {                      svcCollection.AddSingleton<FakeHostEnvironmentStatistics>();                      svcCollection.AddFromExisting<IHostEnvironmentStatistics' FakeHostEnvironmentStatistics>();                      svcCollection.AddTransient<IConfigurationValidator' LoadSheddingValidator>();                  });
Magic Number,UnitTests.General,CounterStatisticTest,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\CounterStatisticTests.cs,TestMultithreadedCorrectness,The following statement contains a magic number: int numOfIterations = 1000000;
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,SiloAddressGetUniformHashCodes,The following statement contains a magic number: int numberofHash = 3;
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,SiloAddressGetUniformHashCodes,The following statement contains a magic number: var siloAddress = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 8080)' 26);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,SiloAddressGetUniformHashCodes,The following statement contains a magic number: var siloAddress = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 8080)' 26);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ID_IsSystem,The following statement contains a magic number: ActivationId testActivation = ActivationId.GetSystemActivation(testGrain' SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 2456)' 0));
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,UniqueKeySerializationShouldReproduceAnIdenticalObject,The following statement contains a magic number: var kx = random.Next().ToString(CultureInfo.InvariantCulture) + new String('*'' 400);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,GrainIdShouldEncodeAndDecodePrimaryKeyGuidCorrectly,The following statement contains a magic number: const int repeat = 100;
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,UniqueKeysShouldPreserveTheirPrimaryKeyValueIfItIsLong,The following statement contains a magic number: var expectedKey = unchecked((long)((((ulong)((uint)n1)) << 32) | ((uint)n2)));
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ID_HashCorrectness,The following statement contains a magic number: int testCount = 1000;
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ID_HashCorrectness,The following statement contains a magic number: byte[] byteData = new byte[24];
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ID_HashCorrectness,The following statement contains a magic number: ulong u2 = BitConverter.ToUInt64(byteData' 8);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ID_HashCorrectness,The following statement contains a magic number: ulong u3 = BitConverter.ToUInt64(byteData' 16);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ID_Intern_FindOrCreate_derived_class,The following statement contains a magic number: var r2 = interner.FindOrCreate(2' _ => obj2);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ID_Intern_FindOrCreate_derived_class,The following statement contains a magic number: var r3 = interner.FindOrCreate(2' _ => obj3);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,ID_Intern_FindOrCreate_derived_class,The following statement contains a magic number: var r5 = interner.FindOrCreate(2' _ => obj1);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,Interning_SiloAddress,The following statement contains a magic number: SiloAddress a1 = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 1111)' 12345);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,Interning_SiloAddress,The following statement contains a magic number: SiloAddress a1 = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 1111)' 12345);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,Interning_SiloAddress,The following statement contains a magic number: SiloAddress a2 = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 1111)' 12345);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,Interning_SiloAddress,The following statement contains a magic number: SiloAddress a2 = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 1111)' 12345);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,Interning_SiloAddress2,The following statement contains a magic number: SiloAddress a1 = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 1111)' 12345);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,Interning_SiloAddress2,The following statement contains a magic number: SiloAddress a1 = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 1111)' 12345);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,Interning_SiloAddress2,The following statement contains a magic number: SiloAddress a2 = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 2222)' 12345);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,Interning_SiloAddress2,The following statement contains a magic number: SiloAddress a2 = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 2222)' 12345);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,Interning_SiloAddress_Serialization,The following statement contains a magic number: SiloAddress a1 = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 1111)' 12345);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,Interning_SiloAddress_Serialization,The following statement contains a magic number: SiloAddress a1 = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 1111)' 12345);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,SiloAddress_ToFrom_ParsableString,The following statement contains a magic number: SiloAddress address1 = SiloAddressUtils.NewLocalSiloAddress(12345);
Magic Number,UnitTests.General,Identifiertests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\Identifiertests.cs,GrainReference_Test1,The following statement contains a magic number: GrainId systemTragetGrainId = GrainId.NewSystemTargetGrainIdByTypeCode(2);
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_MultiThreads_ExportToMessage,The following statement contains a magic number: const int NumLoops = 50;
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_Basic,The following statement contains a magic number: const int NumLoops = 1000;
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_Basic,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      CallContext.LogicalSetData(name1' str);                        await Task.Delay(10);                        Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-"+str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_Dictionary,The following statement contains a magic number: const int NumLoops = 1000;
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_Dictionary,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      var dict2 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Equal(data1' dict2[name1]);  // "LCC.GetData-Task.Run-Get-" + str                      Assert.Same(dict' dict2);  // "Same object LCC.GetData-Task.Run-Get" + str                        var dict3 = new Dictionary<string' string>();                      dict3[name1] = str;                      CallContext.LogicalSetData(name1' dict3);                        await Task.Delay(10);                        var result3 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Equal(str' result3[name1]);  // "LCC.GetData-Task.Run-Set-" + str                      Assert.Same(dict3' result3);  // "Same object LCC.GetData-Task.Run-Set-" + str                      Assert.NotSame(dict2' result3);  // "Different object LCC.GetData-Task.Run-Set-" + str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_CrossThread,The following statement contains a magic number: const int NumLoops = 1000;
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_CrossThread,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      await Task.Delay(5);                      Assert.Equal(data1' CallContext.LogicalGetData(name1));  // "LCC.GetData-Main"                      await Task.Delay(5);                      CallContext.LogicalSetData(name1' str);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-2-" + str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_CrossThread,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      await Task.Delay(5);                      Assert.Equal(data1' CallContext.LogicalGetData(name1));  // "LCC.GetData-Main"                      await Task.Delay(5);                      CallContext.LogicalSetData(name1' str);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-2-" + str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_CrossThread,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      await Task.Delay(5);                      Assert.Equal(data1' CallContext.LogicalGetData(name1));  // "LCC.GetData-Main"                      await Task.Delay(5);                      CallContext.LogicalSetData(name1' str);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-2-" + str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_CrossThread,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      await Task.Delay(5);                      Assert.Equal(data1' CallContext.LogicalGetData(name1));  // "LCC.GetData-Main"                      await Task.Delay(5);                      CallContext.LogicalSetData(name1' str);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' CallContext.LogicalGetData(name1));  // "LCC.GetData-Task.Run-2-" + str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_CrossThread_Dictionary,The following statement contains a magic number: const int NumLoops = 1000;
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_CrossThread_Dictionary,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      var result1 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict' result1);  // "Same object LCC.GetData-Task.Run-Get" + str                      Assert.Equal(data1' result1[name1]);  // "LCC.GetData-Task.Run-Get-" + str                        await Task.Delay(5);                        var dict2 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict' dict2);  // "Same object LCC.GetData-Task.Run-Get" + str                      Assert.Equal(data1' dict2[name1]);  // "LCC.GetData-Task.Run-Get-" + str                        // Set New Dictionary                      var dict3 = new Dictionary<string' string>();                      dict3[name1] = str;                      CallContext.LogicalSetData(name1' dict3);                        var result3 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict3' result3);  // "Same object LCC.GetData-Task.Run-Set-1-" + str                      Assert.Equal(str' result3[name1]);  // "LCC.GetData-Task.Run-Set-" + str                        await Task.Delay(5);                        result3 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict3' result3);  // "Same object LCC.GetData-Task.Run-Set-1-" + str                      Assert.Equal(str' result3[name1]);  // "LCC.GetData-Task.Run-Set-" + str                        await Task.Delay(5);                      result3 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict3' result3);  // "Same object LCC.GetData-Task.Run-Set-2-" + str                      Assert.Equal(str' result3[name1]);  // "LCC.GetData-Task.Run-Set-" + str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_CrossThread_Dictionary,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      var result1 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict' result1);  // "Same object LCC.GetData-Task.Run-Get" + str                      Assert.Equal(data1' result1[name1]);  // "LCC.GetData-Task.Run-Get-" + str                        await Task.Delay(5);                        var dict2 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict' dict2);  // "Same object LCC.GetData-Task.Run-Get" + str                      Assert.Equal(data1' dict2[name1]);  // "LCC.GetData-Task.Run-Get-" + str                        // Set New Dictionary                      var dict3 = new Dictionary<string' string>();                      dict3[name1] = str;                      CallContext.LogicalSetData(name1' dict3);                        var result3 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict3' result3);  // "Same object LCC.GetData-Task.Run-Set-1-" + str                      Assert.Equal(str' result3[name1]);  // "LCC.GetData-Task.Run-Set-" + str                        await Task.Delay(5);                        result3 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict3' result3);  // "Same object LCC.GetData-Task.Run-Set-1-" + str                      Assert.Equal(str' result3[name1]);  // "LCC.GetData-Task.Run-Set-" + str                        await Task.Delay(5);                      result3 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict3' result3);  // "Same object LCC.GetData-Task.Run-Set-2-" + str                      Assert.Equal(str' result3[name1]);  // "LCC.GetData-Task.Run-Set-" + str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,LCC_CrossThread_Dictionary,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      var result1 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict' result1);  // "Same object LCC.GetData-Task.Run-Get" + str                      Assert.Equal(data1' result1[name1]);  // "LCC.GetData-Task.Run-Get-" + str                        await Task.Delay(5);                        var dict2 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict' dict2);  // "Same object LCC.GetData-Task.Run-Get" + str                      Assert.Equal(data1' dict2[name1]);  // "LCC.GetData-Task.Run-Get-" + str                        // Set New Dictionary                      var dict3 = new Dictionary<string' string>();                      dict3[name1] = str;                      CallContext.LogicalSetData(name1' dict3);                        var result3 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict3' result3);  // "Same object LCC.GetData-Task.Run-Set-1-" + str                      Assert.Equal(str' result3[name1]);  // "LCC.GetData-Task.Run-Set-" + str                        await Task.Delay(5);                        result3 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict3' result3);  // "Same object LCC.GetData-Task.Run-Set-1-" + str                      Assert.Equal(str' result3[name1]);  // "LCC.GetData-Task.Run-Set-" + str                        await Task.Delay(5);                      result3 = (Dictionary<string' string>)CallContext.LogicalGetData(name1);                      Assert.Same(dict3' result3);  // "Same object LCC.GetData-Task.Run-Set-2-" + str                      Assert.Equal(str' result3[name1]);  // "LCC.GetData-Task.Run-Set-" + str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_CrossThread,The following statement contains a magic number: const int NumLoops = 1000;
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_CrossThread,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      await Task.Delay(5);                      Assert.Equal(data1' RequestContext.Get(name1));  // "RC.GetData-Task.Run-0"                      await Task.Delay(5);                      // Set New value                      RequestContext.Set(name1' str);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-2-" + str                      await Task.Delay(5);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-3-" + str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_CrossThread,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      await Task.Delay(5);                      Assert.Equal(data1' RequestContext.Get(name1));  // "RC.GetData-Task.Run-0"                      await Task.Delay(5);                      // Set New value                      RequestContext.Set(name1' str);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-2-" + str                      await Task.Delay(5);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-3-" + str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_CrossThread,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      await Task.Delay(5);                      Assert.Equal(data1' RequestContext.Get(name1));  // "RC.GetData-Task.Run-0"                      await Task.Delay(5);                      // Set New value                      RequestContext.Set(name1' str);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-2-" + str                      await Task.Delay(5);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-3-" + str                  });
Magic Number,UnitTests.General,RequestContextTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RequestContextTestsNonSiloRequired.cs,RequestContext_CrossThread,The following statement contains a magic number: promises[i] = Task.Run(async () =>                  {                      await Task.Delay(5);                      Assert.Equal(data1' RequestContext.Get(name1));  // "RC.GetData-Task.Run-0"                      await Task.Delay(5);                      // Set New value                      RequestContext.Set(name1' str);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-1-" + str                      await Task.Delay(5);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-2-" + str                      await Task.Delay(5);                      Assert.Equal(str' RequestContext.Get(name1));  // "RC.GetData-Task.Run-3-" + str                  });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Failures,The following statement contains a magic number: TestChurn(new int[] { count - 1' count - 2 }' new int[] { });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Failures,The following statement contains a magic number: TestChurn(new int[] { count / 2 }' new int[] { });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Failures,The following statement contains a magic number: TestChurn(new int[] { count / 2' 1 + count / 2 }' new int[] { });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Failures,The following statement contains a magic number: TestChurn(new int[] { count / 2' 1 + count / 2 }' new int[] { });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Failures,The following statement contains a magic number: TestChurn(new int[] { 1' count - 2 }' new int[] { });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Joins,The following statement contains a magic number: TestChurn(new int[] { }' new int[] { count - 1' count - 2 });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Joins,The following statement contains a magic number: TestChurn(new int[] { }' new int[] { count / 2 });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Joins,The following statement contains a magic number: TestChurn(new int[] { }' new int[] { count / 2' 1 + count / 2 });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Joins,The following statement contains a magic number: TestChurn(new int[] { }' new int[] { count / 2' 1 + count / 2 });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Joins,The following statement contains a magic number: TestChurn(new int[] { }' new int[] { 1' count - 2 });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Mixed,The following statement contains a magic number: TestChurn(new int[] { count - 2 }' new int[] { count - 1 });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Mixed,The following statement contains a magic number: TestChurn(new int[] { count - 1 }' new int[] { count - 2 });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Mixed,The following statement contains a magic number: TestChurn(new int[] { count / 2 }' new int[] { 1 + count / 2 });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Mixed,The following statement contains a magic number: TestChurn(new int[] { count / 2 }' new int[] { 1 + count / 2 });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Mixed,The following statement contains a magic number: TestChurn(new int[] { 1 + count / 2 }' new int[] { count / 2 });
Magic Number,UnitTests.General,RingTests_Standalone,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\RingTests_Standalone.cs,RingStandalone_Mixed,The following statement contains a magic number: TestChurn(new int[] { 1 + count / 2 }' new int[] { count / 2 });
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ComplexClass,The following statement contains a magic number: expected.Int = 89;
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ComplexClass,The following statement contains a magic number: expected.NonSerializedInt = 39;
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ComplexClass,The following statement contains a magic number: expected.SetObsoleteInt(38);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ComplexAccessibleClass,The following statement contains a magic number: var expected = new AnotherConcreteClass              {                  Int = 89'                  AnotherString = Guid.NewGuid().ToString()'                  NonSerializedInt = 39'                  Enum = SomeAbstractClass.SomeEnum.Something'              };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ComplexAccessibleClass,The following statement contains a magic number: var expected = new AnotherConcreteClass              {                  Int = 89'                  AnotherString = Guid.NewGuid().ToString()'                  NonSerializedInt = 39'                  Enum = SomeAbstractClass.SomeEnum.Something'              };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ComplexAccessibleClass,The following statement contains a magic number: expected.SetObsoleteInt(38);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Type,The following statement contains a magic number: expected = 8.GetType();
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ComplexStruct,The following statement contains a magic number: var expected = new SomeStruct(10) { Id = Guid.NewGuid()' PublicValue = 6' ValueWithPrivateGetter = 7 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ComplexStruct,The following statement contains a magic number: var expected = new SomeStruct(10) { Id = Guid.NewGuid()' PublicValue = 6' ValueWithPrivateGetter = 7 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ComplexStruct,The following statement contains a magic number: var expected = new SomeStruct(10) { Id = Guid.NewGuid()' PublicValue = 6' ValueWithPrivateGetter = 7 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ComplexStruct,The following statement contains a magic number: expected.SetValueWithPrivateSetter(8);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ComplexStruct,The following statement contains a magic number: expected.SetPrivateValue(9);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_BasicDictionaries,The following statement contains a magic number: source2[3] = DateTime.Now;
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_BasicDictionaries,The following statement contains a magic number: source2[27] = DateTime.Now.AddHours(2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_BasicDictionaries,The following statement contains a magic number: source2[27] = DateTime.Now.AddHours(2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ReadOnlyDictionary,The following statement contains a magic number: source2[3] = DateTime.Now;
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ReadOnlyDictionary,The following statement contains a magic number: source2[27] = DateTime.Now.AddHours(2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ReadOnlyDictionary,The following statement contains a magic number: source2[27] = DateTime.Now.AddHours(2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_DictionaryWithComparer,The following statement contains a magic number: source2[3] = DateTime.Now;
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_DictionaryWithComparer,The following statement contains a magic number: source2[27] = DateTime.Now.AddHours(2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_DictionaryWithComparer,The following statement contains a magic number: source2[27] = DateTime.Now.AddHours(2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_DictionaryWithComparer,The following statement contains a magic number: Assert.Equal<DateTime>(source2[3]' result2[13]);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_DictionaryWithComparer,The following statement contains a magic number: Assert.Equal<DateTime>(source2[3]' result2[13]);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_TypeWithOnDeserializedHook,The following statement contains a magic number: var input = new TypeWithOnDeserializedHook              {                  Int = 5              };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Array,The following statement contains a magic number: var source1 = new int[] { 1' 3' 5 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Array,The following statement contains a magic number: var source1 = new int[] { 1' 3' 5 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Array,The following statement contains a magic number: var source3 = new sbyte[] { 1' 3' 5 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Array,The following statement contains a magic number: var source3 = new sbyte[] { 1' 3' 5 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Array,The following statement contains a magic number: var source4 = new byte[] { 1' 3' 5 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Array,The following statement contains a magic number: var source4 = new byte[] { 1' 3' 5 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Array,The following statement contains a magic number: var source5 = Enumerable.Repeat(3' (environment.SerializationManager.LargeObjectSizeThreshold / sizeof(int)) + 1).ToArray();
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source3 = new HashSet<string>[3][];
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source3[0] = new HashSet<string>[2];
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source3[1] = new HashSet<string>[3];
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source3[2] = new HashSet<string>[1];
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source3[1][2] = new HashSet<string>();
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source3[2][0] = new HashSet<string>();
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source3[1][2].Add("and another");
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source3[2][0].Add("but not yet another");
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: Assert.Equal(3' result.Length);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: Assert.Equal(2' result[0][0].Count);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: Assert.Single(result[1][2]);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: Assert.Single(result[2][0]);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source4 = new GrainReference[3][];
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source4[0] = new GrainReference[2];
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source4[1] = new GrainReference[3];
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source4[2] = new GrainReference[1];
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source4[1][2] = environment.InternalGrainFactory.GetGrain(GrainId.NewId());
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source4[2][0] = environment.InternalGrainFactory.GetGrain(GrainId.NewId());
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: var source5 = new GrainReference[32][];
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrays,The following statement contains a magic number: source5[i] = new GrainReference[64];
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source1 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 }' new[] { 17' 13' 11' 7' 5' 3' 2 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source2 = new[] { new[] { 1' 3 }' new[] { 10' 20 }' new[] { 17' 13' 11' 7' 5 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source2 = new[] { new[] { 1' 3 }' new[] { 10' 20 }' new[] { 17' 13' 11' 7' 5 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source2 = new[] { new[] { 1' 3 }' new[] { 10' 20 }' new[] { 17' 13' 11' 7' 5 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source2 = new[] { new[] { 1' 3 }' new[] { 10' 20 }' new[] { 17' 13' 11' 7' 5 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source2 = new[] { new[] { 1' 3 }' new[] { 10' 20 }' new[] { 17' 13' 11' 7' 5 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source2 = new[] { new[] { 1' 3 }' new[] { 10' 20 }' new[] { 17' 13' 11' 7' 5 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source2 = new[] { new[] { 1' 3 }' new[] { 10' 20 }' new[] { 17' 13' 11' 7' 5 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source2 = new[] { new[] { 1' 3 }' new[] { 10' 20 }' new[] { 17' 13' 11' 7' 5 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source3 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source3 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source3 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source3 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ArrayOfArrayOfArrays,The following statement contains a magic number: var source3 = new[] { new[] { 1' 3' 5 }' new[] { 10' 20' 30 } };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Unrecognized,The following statement contains a magic number: var test1 = new Unrecognized { A = 3' B = 27 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Unrecognized,The following statement contains a magic number: var test1 = new Unrecognized { A = 3' B = 27 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Unrecognized,The following statement contains a magic number: Assert.Equal(3' result.A);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Unrecognized,The following statement contains a magic number: Assert.Equal(27' result.B);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Unrecognized,The following statement contains a magic number: var test2 = new Unrecognized[3];
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Unrecognized,The following statement contains a magic number: test2[i] = new Unrecognized { A = i' B = 2 * i };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Unrecognized,The following statement contains a magic number: i < 3
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Unrecognized,The following statement contains a magic number: Assert.Equal(3' result2.Length);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Unrecognized,The following statement contains a magic number: Assert.Equal(2 * j' result2[j].B);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Unrecognized,The following statement contains a magic number: j < 3
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Immutable,The following statement contains a magic number: var test1 = new ImmutableType(3' 27);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Immutable,The following statement contains a magic number: var test1 = new ImmutableType(3' 27);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Immutable,The following statement contains a magic number: i < 3
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Immutable,The following statement contains a magic number: var test3 = new EmbeddedImmutable("test"' 1' 2' 3' 4);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Immutable,The following statement contains a magic number: var test3 = new EmbeddedImmutable("test"' 1' 2' 3' 4);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Immutable,The following statement contains a magic number: var test3 = new EmbeddedImmutable("test"' 1' 2' 3' 4);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_Uri_Multithreaded,The following statement contains a magic number: Parallel.For(0' 50' i =>              {                  Uri test1 = new Uri("http://www.microsoft.com/" + i);                  object raw = environment.SerializationManager.DeepCopy(test1);                  Assert.IsAssignableFrom<Uri>(raw); //Type is wrong after deep copy of Uri                  Assert.Same(test1' raw); //Deep copy made a copy instead of just copying the pointer                    object deserialized = OrleansSerializationLoop(environment.SerializationManager' test1);                  Assert.IsAssignableFrom<Uri>(deserialized); //Type is wrong after round-trip of Uri                  Uri result = (Uri)deserialized;                  Assert.Equal(test1' result); //Wrong contents after round-trip of Uri              });
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: byte[] array2 = { 2' 3 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: byte[] array2 = { 2' 3 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: byte[] array3 = { 4' 5' 6 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: byte[] array3 = { 4' 5' 6 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: byte[] array3 = { 4' 5' 6 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: byte[] array4 = { 7' 8' 9' 10 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: byte[] array4 = { 7' 8' 9' 10 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: byte[] array4 = { 7' 8' 9' 10 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: byte[] array4 = { 7' 8' 9' 10 };
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: List<ArraySegment<byte>> actual1 = ByteArrayBuilder.BuildSegmentListWithLengthLimit(underTest' 0' 2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: List<ArraySegment<byte>> actual2 = ByteArrayBuilder.BuildSegmentListWithLengthLimit(underTest' 2' 2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: List<ArraySegment<byte>> actual2 = ByteArrayBuilder.BuildSegmentListWithLengthLimit(underTest' 2' 2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: List<ArraySegment<byte>> actual3 = ByteArrayBuilder.BuildSegmentListWithLengthLimit(underTest' 4' 2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: List<ArraySegment<byte>> actual3 = ByteArrayBuilder.BuildSegmentListWithLengthLimit(underTest' 4' 2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: List<ArraySegment<byte>> actual4 = ByteArrayBuilder.BuildSegmentListWithLengthLimit(underTest' 6' 2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: List<ArraySegment<byte>> actual4 = ByteArrayBuilder.BuildSegmentListWithLengthLimit(underTest' 6' 2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: List<ArraySegment<byte>> actual5 = ByteArrayBuilder.BuildSegmentListWithLengthLimit(underTest' 8' 2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: List<ArraySegment<byte>> actual5 = ByteArrayBuilder.BuildSegmentListWithLengthLimit(underTest' 8' 2);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: Assert.Equal(2' actual3[0].Count);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: Assert.Equal(2' actual4[0].Count);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: Assert.Equal(2' actual5[0].Offset);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,Serialize_ValidateBuildSegmentListWithLengthLimit,The following statement contains a magic number: Assert.Equal(2' actual5[0].Count);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ISerializable_CallbackOrder_Class,The following statement contains a magic number: Assert.Equal(3' input.Contexts.Count);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ISerializable_CallbackOrder_Class,The following statement contains a magic number: Assert.Equal(3' result.Contexts.Count);
Magic Number,UnitTests.Serialization,BuiltInSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\BuiltInSerializerTests.cs,ISerializable_CallbackOrder_Struct,The following statement contains a magic number: Assert.Equal(2' result.Contexts.Count);
Magic Number,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_CustomCopier,The following statement contains a magic number: var original = new ClassWithCustomCopier() {IntProperty = 5' StringProperty = "Hello"};
Magic Number,UnitTests.Serialization,CustomSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\CustomSerializerTests.cs,Serialize_CustomSerializer,The following statement contains a magic number: var original = new ClassWithCustomSerializer() { IntProperty = -3' StringProperty = "Goodbye" };
Magic Number,UnitTests.Serialization,ILSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedSerializerTests.cs,ILSerializer_AllowCopiedFieldsToDifferFromSerializedFields,The following statement contains a magic number: var input = new FieldTest              {                  One = 1'                  Two = 2'                  Three = 3              };
Magic Number,UnitTests.Serialization,ILSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedSerializerTests.cs,ILSerializer_AllowCopiedFieldsToDifferFromSerializedFields,The following statement contains a magic number: var input = new FieldTest              {                  One = 1'                  Two = 2'                  Three = 3              };
Magic Number,UnitTests.Serialization,ILSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedSerializerTests.cs,ILSerializer_AllowCopiedFieldsToDifferFromSerializedFields,The following statement contains a magic number: Assert.Equal(2' copy.Two);
Magic Number,UnitTests.Serialization,ILSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedSerializerTests.cs,ILSerializer_AllowCopiedFieldsToDifferFromSerializedFields,The following statement contains a magic number: Assert.Equal(2' deserialized.Two);
Magic Number,UnitTests.Serialization,ILSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedSerializerTests.cs,ILSerializer_AllowCopiedFieldsToDifferFromSerializedFields,The following statement contains a magic number: Assert.Equal(3' deserialized.Three);
Magic Number,UnitTests.Serialization,ILSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedSerializerTests.cs,ILSerializer_NonSerializedFields,The following statement contains a magic number: var input = new FieldTest              {                  One = 1'                  Two = 2'                  NonSerializedInt = 1098              };
Magic Number,UnitTests.Serialization,ILSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedSerializerTests.cs,ILSerializer_NonSerializedFields,The following statement contains a magic number: var input = new FieldTest              {                  One = 1'                  Two = 2'                  NonSerializedInt = 1098              };
Magic Number,UnitTests.Serialization,ILSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedSerializerTests.cs,ILSerializer_SerializesObjectWithHooks,The following statement contains a magic number: Assert.Equal(2' input.Contexts.Count);
Magic Number,UnitTests.Serialization,ILSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedSerializerTests.cs,ILSerializer_SerializesObjectWithHooks,The following statement contains a magic number: Assert.Equal(2' result.Contexts.Count);
Magic Number,UnitTests.Serialization,ILSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\ILBasedSerializerTests.cs,ILSerializer_SerializesStructWithHooks,The following statement contains a magic number: Assert.Equal(2' result.Contexts.Count);
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,MessageTest_BinaryRoundTrip,The following statement contains a magic number: RunTest(1000);
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,MessageTest_TtlUpdatedOnAccess,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(500));
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,MessageTest_TtlUpdatedOnAccess,The following statement contains a magic number: Assert.InRange(message.TimeToLive.Value' TimeSpan.FromMilliseconds(-1000)' TimeSpan.FromMilliseconds(900));
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,MessageTest_TtlUpdatedOnAccess,The following statement contains a magic number: Assert.InRange(message.TimeToLive.Value' TimeSpan.FromMilliseconds(-1000)' TimeSpan.FromMilliseconds(900));
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,MessageTest_TtlUpdatedOnSerialization,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(500));
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,MessageTest_TtlUpdatedOnSerialization,The following statement contains a magic number: Assert.InRange(message.TimeToLive.Value' TimeSpan.FromMilliseconds(-1000)' TimeSpan.FromMilliseconds(900));
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,MessageTest_TtlUpdatedOnSerialization,The following statement contains a magic number: Assert.InRange(message.TimeToLive.Value' TimeSpan.FromMilliseconds(-1000)' TimeSpan.FromMilliseconds(900));
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,DeserializeFakeMessage,The following statement contains a magic number: Span<byte> lengthFields = stackalloc byte[8];
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,DeserializeFakeMessage,The following statement contains a magic number: BinaryPrimitives.WriteInt32LittleEndian(lengthFields.Slice(4)' bodySize);
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,RunTest,The following statement contains a magic number: InvokeMethodRequest request = new InvokeMethodRequest(0' 2' 0' null);
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,RunTest,The following statement contains a magic number: resp.SendingSilo = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 200)' 0);
Magic Number,UnitTests.Serialization,MessageSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\MessageSerializerTests.cs,RunTest,The following statement contains a magic number: resp.TargetSilo = SiloAddress.New(new IPEndPoint(IPAddress.Loopback' 300)' 0);
Magic Number,UnitTests.Serialization,OrleansJsonSerializerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\OrleansJsonSerializerTests.cs,ToString,The following statement contains a magic number: var result = new StringBuilder(bytes.Length * 2);
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple,The following statement contains a magic number: var input = new List<ValueTuple<int>> { ValueTuple.Create(1)' ValueTuple.Create(100) };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple2,The following statement contains a magic number: var input = new List<ValueTuple<int' int>> { ValueTuple.Create(1' 2)' ValueTuple.Create(100' 200) };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple2,The following statement contains a magic number: var input = new List<ValueTuple<int' int>> { ValueTuple.Create(1' 2)' ValueTuple.Create(100' 200) };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple2,The following statement contains a magic number: var input = new List<ValueTuple<int' int>> { ValueTuple.Create(1' 2)' ValueTuple.Create(100' 200) };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple3,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int>>              {                  ValueTuple.Create(1' 2' 3)'                  ValueTuple.Create(100' 200' 300)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple3,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int>>              {                  ValueTuple.Create(1' 2' 3)'                  ValueTuple.Create(100' 200' 300)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple3,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int>>              {                  ValueTuple.Create(1' 2' 3)'                  ValueTuple.Create(100' 200' 300)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple3,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int>>              {                  ValueTuple.Create(1' 2' 3)'                  ValueTuple.Create(100' 200' 300)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple3,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int>>              {                  ValueTuple.Create(1' 2' 3)'                  ValueTuple.Create(100' 200' 300)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple4,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4)'                  ValueTuple.Create(100' 200' 300' 400)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple4,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4)'                  ValueTuple.Create(100' 200' 300' 400)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple4,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4)'                  ValueTuple.Create(100' 200' 300' 400)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple4,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4)'                  ValueTuple.Create(100' 200' 300' 400)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple4,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4)'                  ValueTuple.Create(100' 200' 300' 400)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple4,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4)'                  ValueTuple.Create(100' 200' 300' 400)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple4,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4)'                  ValueTuple.Create(100' 200' 300' 400)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple5,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5)'                  ValueTuple.Create(100' 200' 300' 400' 500)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple5,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5)'                  ValueTuple.Create(100' 200' 300' 400' 500)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple5,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5)'                  ValueTuple.Create(100' 200' 300' 400' 500)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple5,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5)'                  ValueTuple.Create(100' 200' 300' 400' 500)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple5,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5)'                  ValueTuple.Create(100' 200' 300' 400' 500)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple5,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5)'                  ValueTuple.Create(100' 200' 300' 400' 500)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple5,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5)'                  ValueTuple.Create(100' 200' 300' 400' 500)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple5,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5)'                  ValueTuple.Create(100' 200' 300' 400' 500)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple5,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5)'                  ValueTuple.Create(100' 200' 300' 400' 500)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple6,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple6,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple6,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple6,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple6,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple6,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple6,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple6,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple6,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple6,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple6,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple7,The following statement contains a magic number: var input = new List<ValueTuple<int' int' int' int' int' int' int>>              {                  ValueTuple.Create(1' 2' 3' 4' 5' 6' 7)'                  ValueTuple.Create(100' 200' 300' 400' 500' 600' 700)              };
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple8,The following statement contains a magic number: var valueTuple = ValueTuple.Create(1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple8,The following statement contains a magic number: var valueTuple = ValueTuple.Create(1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple8,The following statement contains a magic number: var valueTuple = ValueTuple.Create(1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple8,The following statement contains a magic number: var valueTuple = ValueTuple.Create(1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple8,The following statement contains a magic number: var valueTuple = ValueTuple.Create(1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple8,The following statement contains a magic number: var valueTuple = ValueTuple.Create(1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,UnitTests.Serialization,SerializationTestsDifferentTypes,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Serialization\SerializationTests.DifferentTypes.cs,SerializationTests_ValueTuple8,The following statement contains a magic number: var valueTuple = ValueTuple.Create(1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,NonSilo.Tests.General,TypeCodeOverrideTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\TypeCodeOverrideTests.cs,Override_MethodId_Test,The following statement contains a magic number: Assert.Equal(14142' methodId);
Magic Number,NonSilo.Tests.General,TypeCodeOverrideTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\TypeCodeOverrideTests.cs,Override_MethodId_Test,The following statement contains a magic number: Assert.Equal(-14142' methodId);
Magic Number,NonSilo.Tests.General,TypeCodeOverrideTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\TypeCodeOverrideTests.cs,Override_InterfaceId_Test,The following statement contains a magic number: Assert.Equal(6548972' interfaceId);
Magic Number,NonSilo.Tests.General,TypeCodeOverrideTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\TypeCodeOverrideTests.cs,Override_InterfaceId_Test,The following statement contains a magic number: Assert.Equal(-6548972' interfaceId);
Magic Number,UnitTests.UtilsTests,UtilsTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\UtilsTests.cs,ToGatewayUriTest,The following statement contains a magic number: var ipv4 = new IPEndPoint(IPAddress.Any' 11111);
Magic Number,UnitTests.UtilsTests,UtilsTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\UtilsTests.cs,ToGatewayUriTest,The following statement contains a magic number: var ipv4silo = SiloAddress.New(ipv4' 100);
Magic Number,UnitTests.UtilsTests,UtilsTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\UtilsTests.cs,ToGatewayUriTest,The following statement contains a magic number: var ipv6 = new IPEndPoint(IPAddress.IPv6Any' 11111);
Magic Number,UnitTests.UtilsTests,UtilsTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\General\UtilsTests.cs,ToGatewayUriTest,The following statement contains a magic number: var ipv6silo = SiloAddress.New(ipv6' 100);
Magic Number,NonSilo.Tests.Membership,ClusterHealthMonitorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\ClusterHealthMonitorTests.cs,Until,The following statement contains a magic number: await Task.Delay(10);
Magic Number,NonSilo.Tests.Membership,ClusterHealthMonitorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\ClusterHealthMonitorTests.cs,Until,The following statement contains a magic number: !condition() && (maxTimeout -= 10) > 0
Magic Number,NonSilo.Tests.Membership,ClusterHealthMonitorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\ClusterHealthMonitorTests.cs,StopLifecycle,The following statement contains a magic number: await Task.Delay(15);
Magic Number,NonSilo.Tests.Membership,MembershipAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipAgentTests.cs,MembershipAgent_UpdateIAmAlive,The following statement contains a magic number: await Until(() => updateCounter == 2);
Magic Number,NonSilo.Tests.Membership,MembershipAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipAgentTests.cs,MembershipAgent_UpdateIAmAlive,The following statement contains a magic number: await Until(() => updateCounter == 3);
Magic Number,NonSilo.Tests.Membership,MembershipAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipAgentTests.cs,MembershipAgent_UpdateIAmAlive,The following statement contains a magic number: Assert.Equal(3' updateCounter);
Magic Number,NonSilo.Tests.Membership,MembershipAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipAgentTests.cs,MembershipAgent_LifecycleStages_ValidateInitialConnectivity_Failure,The following statement contains a magic number: var dateTimes = new DateTime[] { DateTime.UtcNow' DateTime.UtcNow.AddMinutes(8) };
Magic Number,NonSilo.Tests.Membership,MembershipAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipAgentTests.cs,Until,The following statement contains a magic number: await Task.Delay(10);
Magic Number,NonSilo.Tests.Membership,MembershipAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipAgentTests.cs,Until,The following statement contains a magic number: !condition() && (maxTimeout -= 10) > 0
Magic Number,NonSilo.Tests.Membership,MembershipAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipAgentTests.cs,StopLifecycle,The following statement contains a magic number: await Task.Delay(15);
Magic Number,NonSilo.Tests.Membership,MembershipTableCleanupAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableCleanupAgentTests.cs,BasicScenario,The following statement contains a magic number: var options = new ClusterMembershipOptions { DefunctSiloCleanupPeriod = enabled ? new TimeSpan?(TimeSpan.FromMinutes(90)) : null' DefunctSiloExpiration = TimeSpan.FromDays(1) };
Magic Number,NonSilo.Tests.Membership,MembershipTableCleanupAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableCleanupAgentTests.cs,BasicScenario,The following statement contains a magic number: await Task.Delay(15);
Magic Number,NonSilo.Tests.Membership,MembershipTableCleanupAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableCleanupAgentTests.cs,Until,The following statement contains a magic number: await Task.Delay(10);
Magic Number,NonSilo.Tests.Membership,MembershipTableCleanupAgentTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableCleanupAgentTests.cs,Until,The following statement contains a magic number: !condition() && (maxTimeout -= 10) > 0
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_NewCluster,The following statement contains a magic number: var membershipTable = new InMemoryMembershipTable(new TableVersion(123' "123"));
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_ExistingCluster,The following statement contains a magic number: var membershipTable = new InMemoryMembershipTable(new TableVersion(123' "123")' otherSilos);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,BasicScenarioTest,The following statement contains a magic number: Assert.True(calls.Count >= 2);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,BasicScenarioTest,The following statement contains a magic number: calls = membershipTable.Calls.Skip(2).ToList();
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,BasicScenarioTest,The following statement contains a magic number: await Task.Delay(10);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_Restarted,The following statement contains a magic number: var membershipTable = new InMemoryMembershipTable(new TableVersion(123' "123")' otherSilos);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_Restarted,The following statement contains a magic number: Assert.True(calls.Count >= 2);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_Restarted,The following statement contains a magic number: calls = membershipTable.Calls.Skip(2).ToList();
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_Superseded,The following statement contains a magic number: var membershipTable = new InMemoryMembershipTable(new TableVersion(123' "123")' otherSilos);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_AlreadyDeclaredDead,The following statement contains a magic number: var membershipTable = new InMemoryMembershipTable(new TableVersion(123' "123")' otherSilos);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_DeclaredDead_AfterJoining,The following statement contains a magic number: var membershipTable = new InMemoryMembershipTable(new TableVersion(123' "123")' otherSilos);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_TrySuspectOrKill_ButIAmKill,The following statement contains a magic number: var membershipTable = new InMemoryMembershipTable(new TableVersion(123' "123")' otherSilos);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_TrySuspectOrKill_AlreadyDead,The following statement contains a magic number: var membershipTable = new InMemoryMembershipTable(new TableVersion(123' "123")' otherSilos);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_TrySuspectOrKill_DeclareDead_SmallCluster,The following statement contains a magic number: var membershipTable = new InMemoryMembershipTable(new TableVersion(123' "123")' otherSilos);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_TrySuspectOrKill_DeclareDead_LargerCluster,The following statement contains a magic number: var membershipTable = new InMemoryMembershipTable(new TableVersion(123' "123")' otherSilos);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_TrySuspectOrKill_DeclareDead_LargerCluster,The following statement contains a magic number: entry.AddSuspector(otherSilos[2].SiloAddress' DateTime.UtcNow);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_TrySuspectOrKill_DeclareDead_LargerCluster,The following statement contains a magic number: entry.AddSuspector(otherSilos[2].SiloAddress' DateTime.UtcNow);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_TrySuspectOrKill_DeclareDead_LargerCluster,The following statement contains a magic number: entry.AddSuspector(otherSilos[3].SiloAddress' DateTime.UtcNow);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_TrySuspectOrKill_DeclareDead_LargerCluster,The following statement contains a magic number: entry.AddSuspector(otherSilos[4].SiloAddress' DateTime.UtcNow);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_Refresh,The following statement contains a magic number: var membershipTable = new InMemoryMembershipTable(new TableVersion(123' "123")' otherSilos);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_Refresh,The following statement contains a magic number: await Task.Delay(10);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_Refresh,The following statement contains a magic number: await Task.Delay(10);
Magic Number,NonSilo.Tests.Membership,MembershipTableManagerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableManagerTests.cs,MembershipTableManager_Refresh,The following statement contains a magic number: await Task.Delay(10);
Magic Number,NonSilo.Tests.Membership,MembershipTableSnapshotTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\Membership\MembershipTableSnapshotTests.cs,Table,The following statement contains a magic number: return new MembershipTableData(entryList' new TableVersion(12' "test"));
Magic Number,UnitTests.OrleansRuntime,AsyncSerialExecutorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\AsyncSerialExecutorTests.cs,AsyncSerialExecutorTests_Small,The following statement contains a magic number: tasks.Add(executor.AddNext(() => Operation(2)));
Magic Number,UnitTests.OrleansRuntime,AsyncSerialExecutorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\AsyncSerialExecutorTests.cs,AsyncSerialExecutorTests_Small,The following statement contains a magic number: tasks.Add(executor.AddNext(() => Operation(3)));
Magic Number,UnitTests.OrleansRuntime,AsyncSerialExecutorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\AsyncSerialExecutorTests.cs,AsyncSerialExecutorTests_SerialSubmit,The following statement contains a magic number: i < 10
Magic Number,UnitTests.OrleansRuntime,AsyncSerialExecutorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\AsyncSerialExecutorTests.cs,AsyncSerialExecutorTests_ParallelSubmit,The following statement contains a magic number: i < 10
Magic Number,UnitTests.OrleansRuntime,AsyncSerialExecutorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\AsyncSerialExecutorTests.cs,Operation,The following statement contains a magic number: var delay = random.NextTimeSpan(TimeSpan.FromSeconds(2));
Magic Number,UnitTests.OrleansRuntime,ExceptionsTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\ExceptionsTests.cs,SerializationTests_Exception_DotNet,The following statement contains a magic number: var activationAddress = ActivationAddress.NewActivationAddress(SiloAddressUtils.NewLocalSiloAddress(12345)' GrainId.NewId());
Magic Number,UnitTests.OrleansRuntime,ExceptionsTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\ExceptionsTests.cs,SerializationTests_Exception_Orleans,The following statement contains a magic number: var activationAddress = ActivationAddress.NewActivationAddress(SiloAddressUtils.NewLocalSiloAddress(12345)' GrainId.NewId());
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseMoreResourcesThanBucketsTest,The following statement contains a magic number: const int resourceCount = 99;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseMoreResourcesThanBucketsTest,The following statement contains a magic number: const int bucketCount = 10;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseMoreResourcesThanBuckets2Test,The following statement contains a magic number: const int resourceCount = 100;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseMoreResourcesThanBuckets2Test,The following statement contains a magic number: const int bucketCount = 30;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseLessResourcesThanBucketsTest,The following statement contains a magic number: const int bucketCount = 99;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseLessResourcesThanBucketsTest,The following statement contains a magic number: const int resourceCount = 10;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseLessResourcesThanBuckets2Test,The following statement contains a magic number: const int bucketCount = 100;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseLessResourcesThanBuckets2Test,The following statement contains a magic number: const int resourceCount = 30;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseResourcesMatchBucketsTest,The following statement contains a magic number: const int bucketCount = 100;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseResourcesMatchBucketsTest,The following statement contains a magic number: const int resourceCount = 100;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseResourcesDevisibleByBucketsTest,The following statement contains a magic number: const int resourceCount = 100;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseResourcesDevisibleByBucketsTest,The following statement contains a magic number: const int bucketCount = 10;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseRangedTest,The following statement contains a magic number: const int MaxResourceCount = 20;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,IdealCaseRangedTest,The following statement contains a magic number: const int MaxBucketCount = 20;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,HalfBucketsActiveTest,The following statement contains a magic number: const int resourceCount = 99;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,HalfBucketsActiveTest,The following statement contains a magic number: const int bucketCount = 10;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,HalfBucketsActiveTest,The following statement contains a magic number: const int activeBucketCount = bucketCount/2;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,OrderIrrelevantTest,The following statement contains a magic number: const int resourceCount = 99;
Magic Number,UnitTests.OrleansRuntime.Streams,BestFitBalancerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\BestFitBalancerTests.cs,OrderIrrelevantTest,The following statement contains a magic number: const int bucketCount = 10;
Magic Number,UnitTests.OrleansRuntime.Streams,SubscriptionMarkerTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\OrleansRuntime\Streams\SubscriptionMarkerTests.cs,MarkAsExplicitSubscriptionTest,The following statement contains a magic number: byte[] guidBytes = Enumerable.Range(0' 16).Select(i => (byte)0xff).ToArray();
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Test,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>                  {                      for (int i = 0; i < 10; i++)                      {                          Task.Factory.StartNew(() =>                           {                              // ReSharper disable AccessToModifiedClosure                              this.output.WriteLine("Starting " + i + " in Context=" + RuntimeContext.Current);                               Assert.False(insideTask' $"Starting new task when I am already inside task of iteration {n}");                              insideTask = true;                              int k = n;                               Thread.Sleep(100);                               n = k + 1;                              insideTask = false;                              // ReSharper restore AccessToModifiedClosure                          }).Ignore();                      }                  })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Test,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>                  {                      for (int i = 0; i < 10; i++)                      {                          Task.Factory.StartNew(() =>                           {                              // ReSharper disable AccessToModifiedClosure                              this.output.WriteLine("Starting " + i + " in Context=" + RuntimeContext.Current);                               Assert.False(insideTask' $"Starting new task when I am already inside task of iteration {n}");                              insideTask = true;                              int k = n;                               Thread.Sleep(100);                               n = k + 1;                              insideTask = false;                              // ReSharper restore AccessToModifiedClosure                          }).Ignore();                      }                  })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Test,The following statement contains a magic number: Thread.Sleep(1500);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Test,The following statement contains a magic number: Assert.Equal(10'  n);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_WaitTest,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>                  {                      var task1 = Task.Factory.StartNew(() =>                       {                          this.output.WriteLine("Starting 1");                           Assert.False(insideTask' $"Starting new task when I am already inside task of iteration {n}");                          insideTask = true;                          this.output.WriteLine("===> 1a");                           Thread.Sleep(1000); n = n + 3;                          this.output.WriteLine("===> 1b");                          insideTask = false;                      });                      var task2 = Task.Factory.StartNew(() =>                      {                          this.output.WriteLine("Starting 2");                          Assert.False(insideTask' $"Starting new task when I am already inside task of iteration {n}");                          insideTask = true;                          this.output.WriteLine("===> 2a");                          task1.Wait();                          this.output.WriteLine("===> 2b");                          n = n * 5;                          this.output.WriteLine("===> 2c");                          insideTask = false;                          result.SetResult(true);                      });                      task1.Ignore();                      task2.Ignore();                  })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_WaitTest,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>                  {                      var task1 = Task.Factory.StartNew(() =>                       {                          this.output.WriteLine("Starting 1");                           Assert.False(insideTask' $"Starting new task when I am already inside task of iteration {n}");                          insideTask = true;                          this.output.WriteLine("===> 1a");                           Thread.Sleep(1000); n = n + 3;                          this.output.WriteLine("===> 1b");                          insideTask = false;                      });                      var task2 = Task.Factory.StartNew(() =>                      {                          this.output.WriteLine("Starting 2");                          Assert.False(insideTask' $"Starting new task when I am already inside task of iteration {n}");                          insideTask = true;                          this.output.WriteLine("===> 2a");                          task1.Wait();                          this.output.WriteLine("===> 2b");                          n = n * 5;                          this.output.WriteLine("===> 2c");                          insideTask = false;                          result.SetResult(true);                      });                      task1.Ignore();                      task2.Ignore();                  })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_WaitTest,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>                  {                      var task1 = Task.Factory.StartNew(() =>                       {                          this.output.WriteLine("Starting 1");                           Assert.False(insideTask' $"Starting new task when I am already inside task of iteration {n}");                          insideTask = true;                          this.output.WriteLine("===> 1a");                           Thread.Sleep(1000); n = n + 3;                          this.output.WriteLine("===> 1b");                          insideTask = false;                      });                      var task2 = Task.Factory.StartNew(() =>                      {                          this.output.WriteLine("Starting 2");                          Assert.False(insideTask' $"Starting new task when I am already inside task of iteration {n}");                          insideTask = true;                          this.output.WriteLine("===> 2a");                          task1.Wait();                          this.output.WriteLine("===> 2b");                          n = n * 5;                          this.output.WriteLine("===> 2c");                          insideTask = false;                          result.SetResult(true);                      });                      task1.Ignore();                      task2.Ignore();                  })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_WaitTest,The following statement contains a magic number: var timeoutLimit = TimeSpan.FromMilliseconds(1500);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_WaitTest,The following statement contains a magic number: Assert.Equal(15'  n);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_MainTurnWait_Test,The following statement contains a magic number: var promise = Task.Factory.StartNew(() =>              {                  Thread.Sleep(1000);              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Turn_Execution_Order,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  this.mainDone = false;                  this.stageNum1 = this.stageNum2 = 0;                    Task task1 = Task.Factory.StartNew(() => SubProcess1(11));                  Task task2 = task1.ContinueWith((_) => SubProcess1(12));                  Task task3 = task2.ContinueWith((_) => SubProcess1(13));                  Task task4 = task3.ContinueWith((_) => { SubProcess1(14); result1.SetResult(true); });                  task4.Ignore();                    Task task21 = Task.CompletedTask.ContinueWith((_) => SubProcess2(21));                  Task task22 = task21.ContinueWith((_) => { SubProcess2(22); result2.SetResult(true); });                  task22.Ignore();                    Thread.Sleep(TimeSpan.FromSeconds(1));                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Turn_Execution_Order,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  this.mainDone = false;                  this.stageNum1 = this.stageNum2 = 0;                    Task task1 = Task.Factory.StartNew(() => SubProcess1(11));                  Task task2 = task1.ContinueWith((_) => SubProcess1(12));                  Task task3 = task2.ContinueWith((_) => SubProcess1(13));                  Task task4 = task3.ContinueWith((_) => { SubProcess1(14); result1.SetResult(true); });                  task4.Ignore();                    Task task21 = Task.CompletedTask.ContinueWith((_) => SubProcess2(21));                  Task task22 = task21.ContinueWith((_) => { SubProcess2(22); result2.SetResult(true); });                  task22.Ignore();                    Thread.Sleep(TimeSpan.FromSeconds(1));                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Turn_Execution_Order,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  this.mainDone = false;                  this.stageNum1 = this.stageNum2 = 0;                    Task task1 = Task.Factory.StartNew(() => SubProcess1(11));                  Task task2 = task1.ContinueWith((_) => SubProcess1(12));                  Task task3 = task2.ContinueWith((_) => SubProcess1(13));                  Task task4 = task3.ContinueWith((_) => { SubProcess1(14); result1.SetResult(true); });                  task4.Ignore();                    Task task21 = Task.CompletedTask.ContinueWith((_) => SubProcess2(21));                  Task task22 = task21.ContinueWith((_) => { SubProcess2(22); result2.SetResult(true); });                  task22.Ignore();                    Thread.Sleep(TimeSpan.FromSeconds(1));                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Turn_Execution_Order,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  this.mainDone = false;                  this.stageNum1 = this.stageNum2 = 0;                    Task task1 = Task.Factory.StartNew(() => SubProcess1(11));                  Task task2 = task1.ContinueWith((_) => SubProcess1(12));                  Task task3 = task2.ContinueWith((_) => SubProcess1(13));                  Task task4 = task3.ContinueWith((_) => { SubProcess1(14); result1.SetResult(true); });                  task4.Ignore();                    Task task21 = Task.CompletedTask.ContinueWith((_) => SubProcess2(21));                  Task task22 = task21.ContinueWith((_) => { SubProcess2(22); result2.SetResult(true); });                  task22.Ignore();                    Thread.Sleep(TimeSpan.FromSeconds(1));                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Turn_Execution_Order,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  this.mainDone = false;                  this.stageNum1 = this.stageNum2 = 0;                    Task task1 = Task.Factory.StartNew(() => SubProcess1(11));                  Task task2 = task1.ContinueWith((_) => SubProcess1(12));                  Task task3 = task2.ContinueWith((_) => SubProcess1(13));                  Task task4 = task3.ContinueWith((_) => { SubProcess1(14); result1.SetResult(true); });                  task4.Ignore();                    Task task21 = Task.CompletedTask.ContinueWith((_) => SubProcess2(21));                  Task task22 = task21.ContinueWith((_) => { SubProcess2(22); result2.SetResult(true); });                  task22.Ignore();                    Thread.Sleep(TimeSpan.FromSeconds(1));                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Turn_Execution_Order,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  this.mainDone = false;                  this.stageNum1 = this.stageNum2 = 0;                    Task task1 = Task.Factory.StartNew(() => SubProcess1(11));                  Task task2 = task1.ContinueWith((_) => SubProcess1(12));                  Task task3 = task2.ContinueWith((_) => SubProcess1(13));                  Task task4 = task3.ContinueWith((_) => { SubProcess1(14); result1.SetResult(true); });                  task4.Ignore();                    Task task21 = Task.CompletedTask.ContinueWith((_) => SubProcess2(21));                  Task task22 = task21.ContinueWith((_) => { SubProcess2(22); result2.SetResult(true); });                  task22.Ignore();                    Thread.Sleep(TimeSpan.FromSeconds(1));                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Turn_Execution_Order,The following statement contains a magic number: await result1.Task.WithTimeout(TimeSpan.FromSeconds(3));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Turn_Execution_Order,The following statement contains a magic number: await result2.Task.WithTimeout(TimeSpan.FromSeconds(3));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Turn_Execution_Order,The following statement contains a magic number: Assert.Equal(14' this.stageNum1);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Turn_Execution_Order,The following statement contains a magic number: Assert.Equal(22' this.stageNum2);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Stopped_WorkItemGroup,The following statement contains a magic number: Task<Task> ScheduleTask() => Task.Factory.StartNew(                  state =>                  {                      CheckScheduler(state);                        return Task.Factory.StartNew(                          async s =>                          {                              CheckScheduler(s);                              await Task.Delay(50);                              CheckScheduler(s);                          }'                          state).Unwrap();                  }'                  "some state"'                  CancellationToken.None'                  TaskCreationOptions.DenyChildAttach'                  workItemGroup.TaskScheduler);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Stopped_WorkItemGroup,The following statement contains a magic number: var resultTask = await Task.WhenAny(taskAfterStopped' Task.Delay(TimeSpan.FromSeconds(10)));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Stopped_WorkItemGroup,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(300));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Stopped_WorkItemGroup,The following statement contains a magic number: resultTask = await Task.WhenAny(taskAfterStopped' Task.Delay(TimeSpan.FromSeconds(10)));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: masterScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        // Execution chain #1                      Log(4' "Wrapper Task Id=" + Task.CurrentId + " creating Task chain");                      Task task1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#11 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #11"                          SubProcess1(11);                      });                      Task task2 = task1.ContinueWith((Task task) =>                      {                          Log(6' "#12 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #12"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(12);                      });                      Task task3 = task2.ContinueWith(task =>                      {                          Log(7' "#13 Inside continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #13"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(13);                      });                      finalTask1 = task3.ContinueWith(task =>                      {                          Log(8' "#14 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #14"                          if (task.IsFaulted) throw task.Exception.Flatten();                          SubProcess1(14);                          result1.SetResult(true);                      });                        // Execution chain #2                      Log(9' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise2 = Task.Factory.StartNew(() =>                      {                          Log(10' "#21 Inside sub-Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #21"                          SubProcess2(21);                      });                      finalPromise2 = promise2.ContinueWith((_) =>                      {                          Log(11' "#22 Inside final continuation Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #22"                          SubProcess2(22);                          result2.SetResult(true);                      });                      finalPromise2.Ignore();                        Log(12' "Wrapper Task Id=" + Task.CurrentId + " sleeping #2");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(13' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(14' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(15' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(16' "Finished Outer ClosureWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Log(17' "Waiting for ClosureWorkItem to spawn wrapper Task");
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: i < 5 * WaitFactor
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Log(18' "Waiting for wrapper Task Id=" + wrapper.Id + " to complete");
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: bool finished = wrapper.Wait(TimeSpan.FromSeconds(4 * WaitFactor));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Log(19' "Done waiting for wrapper Task Id=" + wrapper.Id + " Finished=" + finished);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Log(20' "Waiting for TaskWorkItem to complete");
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Thread.Sleep(1000 * WaitFactor);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: i < 15 * WaitFactor
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Log(21' "Done waiting for TaskWorkItem to complete MainDone=" + this.mainDone);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Log(22' "Waiting for final task #1 to complete");
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: bool ok = finalTask1.Wait(TimeSpan.FromSeconds(4 * WaitFactor));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Log(23' "Done waiting for final task #1 complete Ok=" + ok);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Log(24' "Waiting for final promise #2 to complete");
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: finalPromise2.Wait(TimeSpan.FromSeconds(4 * WaitFactor));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Log(25' "Done waiting for final promise #2");
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Assert.Equal(14' this.stageNum1);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_Turn_Execution_Order,The following statement contains a magic number: Assert.Equal(22' this.stageNum2);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Log(1' "Outer ClosureWorkItem " + Task.CurrentId + " starting");                  Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #0"                    Log(2' "Starting wrapper Task");                  wrapper = Task.Factory.StartNew(() =>                  {                      Log(3' "Inside wrapper Task Id=" + Task.CurrentId);                      Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                        Log(4' "Wrapper Task " + Task.CurrentId + " creating AC chain");                      Task promise1 = Task.Factory.StartNew(() =>                      {                          Log(5' "#1 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #1"                          SubProcess1(1);                      });                      Task promise2 = promise1.ContinueWith((_) =>                      {                          Log(6' "#2 Inside AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #2"                          SubProcess1(2);                      });                      finalPromise = promise2.ContinueWith((_) =>                      {                          Log(7' "#3 Inside final AC Task Id=" + Task.CurrentId);                          Assert.Equal(activationScheduler'  TaskScheduler.Current);  // "TaskScheduler.Current #3"                          SubProcess1(3);                          result.SetResult(true);                      });                      finalPromise.Ignore();                        Log(8' "Wrapper Task Id=" + Task.CurrentId + " sleeping");                      Thread.Sleep(TimeSpan.FromSeconds(1));                        Log(9' "Wrapper Task Id=" + Task.CurrentId + " finished");                  });                    Log(10' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " sleeping");                  Thread.Sleep(TimeSpan.FromSeconds(1));                  Log(11' "Outer ClosureWorkItem Task Id=" + Task.CurrentId + " awake");                    Log(12' "Finished Outer TaskWorkItem Task Id=" + wrapper.Id);                  this.mainDone = true;              })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: Log(13' "Waiting for ClosureWorkItem to spawn wrapper Task");
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: i < 5 * WaitFactor
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: Log(14' "Waiting for wrapper Task Id=" + wrapper.Id + " to complete");
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: bool finished = wrapper.Wait(TimeSpan.FromSeconds(4 * WaitFactor));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: Log(15' "Done waiting for wrapper Task Id=" + wrapper.Id + " Finished=" + finished);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: Log(16' "Waiting for TaskWorkItem to complete");
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: Thread.Sleep(1000 * WaitFactor);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: i < 15 * WaitFactor
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: Log(17' "Done waiting for TaskWorkItem to complete MainDone=" + this.mainDone);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: Log(18' "Waiting for final AC promise to complete");
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: finalPromise.Wait(TimeSpan.FromSeconds(4 * WaitFactor));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: Log(19' "Done waiting for final promise");
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_Current_TaskScheduler,The following statement contains a magic number: Assert.Equal(3' this.stageNum1);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_ContinueWith_1_Test,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>                  {                      Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); });                      Task task2 = task1.ContinueWith((_) => { n = n * 5; this.output.WriteLine("===> 2"); });                      Task task3 = task2.ContinueWith((_) => { n = n / 5; this.output.WriteLine("===> 3"); });                      Task task4 = task3.ContinueWith((_) => { n = n - 2; this.output.WriteLine("===> 4"); result.SetResult(true); });                      task4.Ignore();                  })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_ContinueWith_1_Test,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>                  {                      Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); });                      Task task2 = task1.ContinueWith((_) => { n = n * 5; this.output.WriteLine("===> 2"); });                      Task task3 = task2.ContinueWith((_) => { n = n / 5; this.output.WriteLine("===> 3"); });                      Task task4 = task3.ContinueWith((_) => { n = n - 2; this.output.WriteLine("===> 4"); result.SetResult(true); });                      task4.Ignore();                  })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_ContinueWith_1_Test,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>                  {                      Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); });                      Task task2 = task1.ContinueWith((_) => { n = n * 5; this.output.WriteLine("===> 2"); });                      Task task3 = task2.ContinueWith((_) => { n = n / 5; this.output.WriteLine("===> 3"); });                      Task task4 = task3.ContinueWith((_) => { n = n - 2; this.output.WriteLine("===> 4"); result.SetResult(true); });                      task4.Ignore();                  })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_AC_ContinueWith_1_Test,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>                  {                      Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); });                      Task task2 = task1.ContinueWith((_) => { n = n * 5; this.output.WriteLine("===> 2"); });                      Task task3 = task2.ContinueWith((_) => { n = n / 5; this.output.WriteLine("===> 3"); });                      Task task4 = task3.ContinueWith((_) => { n = n - 2; this.output.WriteLine("===> 4"); result.SetResult(true); });                      task4.Ignore();                  })' context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Task<int> task1 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); return 1; });                  Task<int> task2 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 2a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 2b"); return 2; });                  Task<int> task3 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 3a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 3b"); return 3; });                  Task<int> task4 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 4a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 4b"); return 4; });                  tasks = new Task<int>[] {task1' task2' task3' task4};                  result.SetResult(true);              })'context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Task<int> task1 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); return 1; });                  Task<int> task2 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 2a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 2b"); return 2; });                  Task<int> task3 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 3a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 3b"); return 3; });                  Task<int> task4 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 4a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 4b"); return 4; });                  tasks = new Task<int>[] {task1' task2' task3' task4};                  result.SetResult(true);              })'context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Task<int> task1 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); return 1; });                  Task<int> task2 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 2a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 2b"); return 2; });                  Task<int> task3 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 3a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 3b"); return 3; });                  Task<int> task4 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 4a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 4b"); return 4; });                  tasks = new Task<int>[] {task1' task2' task3' task4};                  result.SetResult(true);              })'context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Task<int> task1 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); return 1; });                  Task<int> task2 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 2a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 2b"); return 2; });                  Task<int> task3 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 3a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 3b"); return 3; });                  Task<int> task4 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 4a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 4b"); return 4; });                  tasks = new Task<int>[] {task1' task2' task3' task4};                  result.SetResult(true);              })'context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Task<int> task1 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); return 1; });                  Task<int> task2 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 2a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 2b"); return 2; });                  Task<int> task3 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 3a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 3b"); return 3; });                  Task<int> task4 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 4a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 4b"); return 4; });                  tasks = new Task<int>[] {task1' task2' task3' task4};                  result.SetResult(true);              })'context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Task<int> task1 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); return 1; });                  Task<int> task2 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 2a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 2b"); return 2; });                  Task<int> task3 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 3a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 3b"); return 3; });                  Task<int> task4 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 4a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 4b"); return 4; });                  tasks = new Task<int>[] {task1' task2' task3' task4};                  result.SetResult(true);              })'context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The following statement contains a magic number: this.orleansTaskScheduler.QueueWorkItem(new ClosureWorkItem(() =>              {                  Task<int> task1 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 1b"); return 1; });                  Task<int> task2 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 2a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 2b"); return 2; });                  Task<int> task3 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 3a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 3b"); return 3; });                  Task<int> task4 = Task<int>.Factory.StartNew(() => { this.output.WriteLine("===> 4a"); Thread.Sleep(OneSecond); n = n + 3; this.output.WriteLine("===> 4b"); return 4; });                  tasks = new Task<int>[] {task1' task2' task3' task4};                  result.SetResult(true);              })'context);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The following statement contains a magic number: bool ok = promise.Wait(TimeSpan.FromSeconds(8));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The following statement contains a magic number: Assert.Equal(12'  n);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The following statement contains a magic number: Assert.True(4000 <= ms && ms <= 5000' "Wait time out of range' expected between 4000 and 5000 milliseconds' was " + ms);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_JoinAll,The following statement contains a magic number: Assert.True(4000 <= ms && ms <= 5000' "Wait time out of range' expected between 4000 and 5000 milliseconds' was " + ms);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_SchedulingContext,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  CheckRuntimeContext(context);                    // ReSharper disable AccessToModifiedClosure                  Task task1 = Task.Factory.StartNew(() =>                  {                      this.output.WriteLine("===> 1a ");                      CheckRuntimeContext(context);                      Thread.Sleep(1000);                       n = n + 3;                      this.output.WriteLine("===> 1b");                      CheckRuntimeContext(context);                  });                  Task task2 = task1.ContinueWith(task =>                  {                      this.output.WriteLine("===> 2");                      CheckRuntimeContext(context);                      n = n * 5;                   });                  Task task3 = task2.ContinueWith(task =>                   {                      this.output.WriteLine("===> 3");                      n = n / 5;                      CheckRuntimeContext(context);                  });                  Task task4 = task3.ContinueWith(task =>                   {                      this.output.WriteLine("===> 4");                       n = n - 2;                      result.SetResult(true);                      CheckRuntimeContext(context);                  });                  // ReSharper restore AccessToModifiedClosure                  endOfChain = task4.ContinueWith(task =>                  {                      this.output.WriteLine("Done Faulted={0}"' task.IsFaulted);                      CheckRuntimeContext(context);                      Assert.False(task.IsFaulted' "Faulted with Exception=" + task.Exception);                  });              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_SchedulingContext,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  CheckRuntimeContext(context);                    // ReSharper disable AccessToModifiedClosure                  Task task1 = Task.Factory.StartNew(() =>                  {                      this.output.WriteLine("===> 1a ");                      CheckRuntimeContext(context);                      Thread.Sleep(1000);                       n = n + 3;                      this.output.WriteLine("===> 1b");                      CheckRuntimeContext(context);                  });                  Task task2 = task1.ContinueWith(task =>                  {                      this.output.WriteLine("===> 2");                      CheckRuntimeContext(context);                      n = n * 5;                   });                  Task task3 = task2.ContinueWith(task =>                   {                      this.output.WriteLine("===> 3");                      n = n / 5;                      CheckRuntimeContext(context);                  });                  Task task4 = task3.ContinueWith(task =>                   {                      this.output.WriteLine("===> 4");                       n = n - 2;                      result.SetResult(true);                      CheckRuntimeContext(context);                  });                  // ReSharper restore AccessToModifiedClosure                  endOfChain = task4.ContinueWith(task =>                  {                      this.output.WriteLine("Done Faulted={0}"' task.IsFaulted);                      CheckRuntimeContext(context);                      Assert.False(task.IsFaulted' "Faulted with Exception=" + task.Exception);                  });              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_SchedulingContext,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  CheckRuntimeContext(context);                    // ReSharper disable AccessToModifiedClosure                  Task task1 = Task.Factory.StartNew(() =>                  {                      this.output.WriteLine("===> 1a ");                      CheckRuntimeContext(context);                      Thread.Sleep(1000);                       n = n + 3;                      this.output.WriteLine("===> 1b");                      CheckRuntimeContext(context);                  });                  Task task2 = task1.ContinueWith(task =>                  {                      this.output.WriteLine("===> 2");                      CheckRuntimeContext(context);                      n = n * 5;                   });                  Task task3 = task2.ContinueWith(task =>                   {                      this.output.WriteLine("===> 3");                      n = n / 5;                      CheckRuntimeContext(context);                  });                  Task task4 = task3.ContinueWith(task =>                   {                      this.output.WriteLine("===> 4");                       n = n - 2;                      result.SetResult(true);                      CheckRuntimeContext(context);                  });                  // ReSharper restore AccessToModifiedClosure                  endOfChain = task4.ContinueWith(task =>                  {                      this.output.WriteLine("Done Faulted={0}"' task.IsFaulted);                      CheckRuntimeContext(context);                      Assert.False(task.IsFaulted' "Faulted with Exception=" + task.Exception);                  });              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_SchedulingContext,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  CheckRuntimeContext(context);                    // ReSharper disable AccessToModifiedClosure                  Task task1 = Task.Factory.StartNew(() =>                  {                      this.output.WriteLine("===> 1a ");                      CheckRuntimeContext(context);                      Thread.Sleep(1000);                       n = n + 3;                      this.output.WriteLine("===> 1b");                      CheckRuntimeContext(context);                  });                  Task task2 = task1.ContinueWith(task =>                  {                      this.output.WriteLine("===> 2");                      CheckRuntimeContext(context);                      n = n * 5;                   });                  Task task3 = task2.ContinueWith(task =>                   {                      this.output.WriteLine("===> 3");                      n = n / 5;                      CheckRuntimeContext(context);                  });                  Task task4 = task3.ContinueWith(task =>                   {                      this.output.WriteLine("===> 4");                       n = n - 2;                      result.SetResult(true);                      CheckRuntimeContext(context);                  });                  // ReSharper restore AccessToModifiedClosure                  endOfChain = task4.ContinueWith(task =>                  {                      this.output.WriteLine("Done Faulted={0}"' task.IsFaulted);                      CheckRuntimeContext(context);                      Assert.False(task.IsFaulted' "Faulted with Exception=" + task.Exception);                  });              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_SchedulingContext,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  CheckRuntimeContext(context);                    // ReSharper disable AccessToModifiedClosure                  Task task1 = Task.Factory.StartNew(() =>                  {                      this.output.WriteLine("===> 1a ");                      CheckRuntimeContext(context);                      Thread.Sleep(1000);                       n = n + 3;                      this.output.WriteLine("===> 1b");                      CheckRuntimeContext(context);                  });                  Task task2 = task1.ContinueWith(task =>                  {                      this.output.WriteLine("===> 2");                      CheckRuntimeContext(context);                      n = n * 5;                   });                  Task task3 = task2.ContinueWith(task =>                   {                      this.output.WriteLine("===> 3");                      n = n / 5;                      CheckRuntimeContext(context);                  });                  Task task4 = task3.ContinueWith(task =>                   {                      this.output.WriteLine("===> 4");                       n = n - 2;                      result.SetResult(true);                      CheckRuntimeContext(context);                  });                  // ReSharper restore AccessToModifiedClosure                  endOfChain = task4.ContinueWith(task =>                  {                      this.output.WriteLine("Done Faulted={0}"' task.IsFaulted);                      CheckRuntimeContext(context);                      Assert.False(task.IsFaulted' "Faulted with Exception=" + task.Exception);                  });              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests.cs,Sched_Task_SchedulingContext,The following statement contains a magic number: bool finished = result.Task.Wait(TimeSpan.FromSeconds(2));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_SimpleFifoTest,The following statement contains a magic number: Task task1 = new Task(() => { Thread.Sleep(1000); n = n + 5; });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_SimpleFifoTest,The following statement contains a magic number: Task task1 = new Task(() => { Thread.Sleep(1000); n = n + 5; });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_SimpleFifoTest,The following statement contains a magic number: Task task2 = new Task(() => { n = n * 3; });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_SimpleFifoTest,The following statement contains a magic number: Thread.Sleep(1500);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_SimpleFifoTest,The following statement contains a magic number: Assert.Equal(15' n);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_NewTask_ContinueWith_Wrapped,The following statement contains a magic number: bool ok = wrapped.Unwrap().Wait(TimeSpan.FromSeconds(2));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_SubTaskExecutionSequencing,The following statement contains a magic number: Action action = () =>              {                  LogContext("WorkItem-task " + Task.CurrentId);                    for (int i = 0; i < 10; i++)                  {                      int id = -1;                      Task.Factory.StartNew(() =>                      {                          id = Task.CurrentId.HasValue ? (int)Task.CurrentId : -1;                            // ReSharper disable AccessToModifiedClosure                          LogContext("Sub-task " + id + " n=" + n);                          int k = n;                          this.output.WriteLine("Sub-task " + id + " sleeping");                          Thread.Sleep(100);                          this.output.WriteLine("Sub-task " + id + " awake");                          n = k + 1;                          // ReSharper restore AccessToModifiedClosure                      })                      .ContinueWith(tsk =>                      {                          LogContext("Sub-task " + id + "-ContinueWith");                            this.output.WriteLine("Sub-task " + id + " Done");                      });                  }              };
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_SubTaskExecutionSequencing,The following statement contains a magic number: Action action = () =>              {                  LogContext("WorkItem-task " + Task.CurrentId);                    for (int i = 0; i < 10; i++)                  {                      int id = -1;                      Task.Factory.StartNew(() =>                      {                          id = Task.CurrentId.HasValue ? (int)Task.CurrentId : -1;                            // ReSharper disable AccessToModifiedClosure                          LogContext("Sub-task " + id + " n=" + n);                          int k = n;                          this.output.WriteLine("Sub-task " + id + " sleeping");                          Thread.Sleep(100);                          this.output.WriteLine("Sub-task " + id + " awake");                          n = k + 1;                          // ReSharper restore AccessToModifiedClosure                      })                      .ContinueWith(tsk =>                      {                          LogContext("Sub-task " + id + "-ContinueWith");                            this.output.WriteLine("Sub-task " + id + " Done");                      });                  }              };
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_SubTaskExecutionSequencing,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(2));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_SubTaskExecutionSequencing,The following statement contains a magic number: Assert.Equal(10' n);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_ContinueWith_1_Test,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  // ReSharper disable AccessToModifiedClosure                  Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(1000); n = n + 3; this.output.WriteLine("===> 1b"); });                  Task task2 = task1.ContinueWith(task => { n = n * 5; this.output.WriteLine("===> 2"); });                  Task task3 = task2.ContinueWith(task => { n = n / 5; this.output.WriteLine("===> 3"); });                  Task task4 = task3.ContinueWith(task => { n = n - 2; this.output.WriteLine("===> 4"); result.SetResult(true); });                  // ReSharper restore AccessToModifiedClosure                  task4.ContinueWith(task =>                  {                      this.output.WriteLine("Done Faulted={0}"' task.IsFaulted);                      Assert.False(task.IsFaulted' "Faulted with Exception=" + task.Exception);                  });              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_ContinueWith_1_Test,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  // ReSharper disable AccessToModifiedClosure                  Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(1000); n = n + 3; this.output.WriteLine("===> 1b"); });                  Task task2 = task1.ContinueWith(task => { n = n * 5; this.output.WriteLine("===> 2"); });                  Task task3 = task2.ContinueWith(task => { n = n / 5; this.output.WriteLine("===> 3"); });                  Task task4 = task3.ContinueWith(task => { n = n - 2; this.output.WriteLine("===> 4"); result.SetResult(true); });                  // ReSharper restore AccessToModifiedClosure                  task4.ContinueWith(task =>                  {                      this.output.WriteLine("Done Faulted={0}"' task.IsFaulted);                      Assert.False(task.IsFaulted' "Faulted with Exception=" + task.Exception);                  });              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_ContinueWith_1_Test,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  // ReSharper disable AccessToModifiedClosure                  Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(1000); n = n + 3; this.output.WriteLine("===> 1b"); });                  Task task2 = task1.ContinueWith(task => { n = n * 5; this.output.WriteLine("===> 2"); });                  Task task3 = task2.ContinueWith(task => { n = n / 5; this.output.WriteLine("===> 3"); });                  Task task4 = task3.ContinueWith(task => { n = n - 2; this.output.WriteLine("===> 4"); result.SetResult(true); });                  // ReSharper restore AccessToModifiedClosure                  task4.ContinueWith(task =>                  {                      this.output.WriteLine("Done Faulted={0}"' task.IsFaulted);                      Assert.False(task.IsFaulted' "Faulted with Exception=" + task.Exception);                  });              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_ContinueWith_1_Test,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  // ReSharper disable AccessToModifiedClosure                  Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(1000); n = n + 3; this.output.WriteLine("===> 1b"); });                  Task task2 = task1.ContinueWith(task => { n = n * 5; this.output.WriteLine("===> 2"); });                  Task task3 = task2.ContinueWith(task => { n = n / 5; this.output.WriteLine("===> 3"); });                  Task task4 = task3.ContinueWith(task => { n = n - 2; this.output.WriteLine("===> 4"); result.SetResult(true); });                  // ReSharper restore AccessToModifiedClosure                  task4.ContinueWith(task =>                  {                      this.output.WriteLine("Done Faulted={0}"' task.IsFaulted);                      Assert.False(task.IsFaulted' "Faulted with Exception=" + task.Exception);                  });              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_ContinueWith_1_Test,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  // ReSharper disable AccessToModifiedClosure                  Task task1 = Task.Factory.StartNew(() => { this.output.WriteLine("===> 1a"); Thread.Sleep(1000); n = n + 3; this.output.WriteLine("===> 1b"); });                  Task task2 = task1.ContinueWith(task => { n = n * 5; this.output.WriteLine("===> 2"); });                  Task task3 = task2.ContinueWith(task => { n = n / 5; this.output.WriteLine("===> 3"); });                  Task task4 = task3.ContinueWith(task => { n = n - 2; this.output.WriteLine("===> 4"); result.SetResult(true); });                  // ReSharper restore AccessToModifiedClosure                  task4.ContinueWith(task =>                  {                      this.output.WriteLine("Done Faulted={0}"' task.IsFaulted);                      Assert.False(task.IsFaulted' "Faulted with Exception=" + task.Exception);                  });              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_ContinueWith_1_Test,The following statement contains a magic number: var timeoutLimit = TimeSpan.FromSeconds(2);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_WhenAny,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  task1 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-1 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);  // "TaskScheduler.Current=" + TaskScheduler.Current                      pause1.WaitOne();                      this.output.WriteLine("Task-1 Done");                      return 1;                  });                  task2 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-2 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);                      pause2.WaitOne();                      this.output.WriteLine("Task-2 Done");                      return 2;                  });                    join = Task.WhenAny(task1' task2' Task.Delay(TimeSpan.FromSeconds(2)));                    finish.SetResult(true);              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_WhenAny,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  task1 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-1 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);  // "TaskScheduler.Current=" + TaskScheduler.Current                      pause1.WaitOne();                      this.output.WriteLine("Task-1 Done");                      return 1;                  });                  task2 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-2 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);                      pause2.WaitOne();                      this.output.WriteLine("Task-2 Done");                      return 2;                  });                    join = Task.WhenAny(task1' task2' Task.Delay(TimeSpan.FromSeconds(2)));                    finish.SetResult(true);              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_WhenAny_Timeout,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  task1 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-1 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);                      pause1.WaitOne();                      this.output.WriteLine("Task-1 Done");                      return 1;                  });                  task2 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-2 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);                      pause2.WaitOne();                      this.output.WriteLine("Task-2 Done");                      return 2;                  });                    join = Task.WhenAny(task1' task2' Task.Delay(TimeSpan.FromSeconds(2)));                    finish.SetResult(true);              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_WhenAny_Timeout,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  task1 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-1 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);                      pause1.WaitOne();                      this.output.WriteLine("Task-1 Done");                      return 1;                  });                  task2 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-2 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);                      pause2.WaitOne();                      this.output.WriteLine("Task-2 Done");                      return 2;                  });                    join = Task.WhenAny(task1' task2' Task.Delay(TimeSpan.FromSeconds(2)));                    finish.SetResult(true);              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_WhenAny_Busy_Timeout,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  task1 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-1 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);                      int num1 = 1;                      while (!pause1.Task.Result) // Infinite busy loop                      {                          num1 = Random.Next();                      }                      this.output.WriteLine("Task-1 Done");                      return num1;                  });                  task2 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-2 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);                      int num2 = 2;                      while (!pause2.Task.Result) // Infinite busy loop                      {                          num2 = Random.Next();                      }                      this.output.WriteLine("Task-2 Done");                      return num2;                  });                    join = Task.WhenAny(task1' task2' Task.Delay(TimeSpan.FromSeconds(2)));                    finish.SetResult(true);              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_WhenAny_Busy_Timeout,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  task1 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-1 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);                      int num1 = 1;                      while (!pause1.Task.Result) // Infinite busy loop                      {                          num1 = Random.Next();                      }                      this.output.WriteLine("Task-1 Done");                      return num1;                  });                  task2 = Task<int>.Factory.StartNew(() =>                  {                      this.output.WriteLine("Task-2 Started");                      Assert.Equal(scheduler' TaskScheduler.Current);                      int num2 = 2;                      while (!pause2.Task.Result) // Infinite busy loop                      {                          num2 = Random.Next();                      }                      this.output.WriteLine("Task-2 Done");                      return num2;                  });                    join = Task.WhenAny(task1' task2' Task.Delay(TimeSpan.FromSeconds(2)));                    finish.SetResult(true);              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Task_Run,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  task1 = Task.Run(() =>                  {                      this.output.WriteLine("Task-1 Started");                      Assert.NotEqual(scheduler' TaskScheduler.Current);                      pause1.WaitOne();                      this.output.WriteLine("Task-1 Done");                      return 1;                  });                  task2 = Task.Run(() =>                  {                      this.output.WriteLine("Task-2 Started");                      Assert.NotEqual(scheduler' TaskScheduler.Current);                      pause2.WaitOne();                      this.output.WriteLine("Task-2 Done");                      return 2;                  });                    join = Task.WhenAll(task1' task2).ContinueWith(t =>                  {                      this.output.WriteLine("Join Started");                      if (t.IsFaulted) throw t.Exception;                      Assert.Equal(scheduler' TaskScheduler.Current);                      this.output.WriteLine("Join Done");                  });                    finish.SetResult(true);              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Task_Run_Delay,The following statement contains a magic number: Task wrapper = new Task(() =>              {                  task1 = Task.Run(() =>                  {                      this.output.WriteLine("Task-1 Started");                      Assert.NotEqual(scheduler' TaskScheduler.Current);                      Task.Delay(1);                      Assert.NotEqual(scheduler' TaskScheduler.Current);                      pause1.WaitOne();                      this.output.WriteLine("Task-1 Done");                      return 1;                  });                  task2 = Task.Run(() =>                  {                      this.output.WriteLine("Task-2 Started");                      Assert.NotEqual(scheduler' TaskScheduler.Current);                      Task.Delay(1);                      Assert.NotEqual(scheduler' TaskScheduler.Current);                      pause2.WaitOne();                      this.output.WriteLine("Task-2 Done");                      return 2;                  });                    join = Task.WhenAll(task1' task2).ContinueWith(t =>                  {                      this.output.WriteLine("Join Started");                      if (t.IsFaulted) throw t.Exception;                      Assert.Equal(scheduler' TaskScheduler.Current);                      this.output.WriteLine("Join Done");                  });                    finish.SetResult(true);              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Task_Delay,The following statement contains a magic number: Task wrapper = new Task(async () =>              {                  Assert.Equal(scheduler' TaskScheduler.Current);                  await DoDelay(1);                  Assert.Equal(scheduler' TaskScheduler.Current);                  await DoDelay(2);                  Assert.Equal(scheduler' TaskScheduler.Current);              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Turn_Execution_Order_Loop,The following statement contains a magic number: const int NumChains = 100;
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Turn_Execution_Order_Loop,The following statement contains a magic number: const int ChainLength = 3;
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Turn_Execution_Order_Loop,The following statement contains a magic number: int sleepTime = TestConstants.random.Next(100);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Turn_Execution_Order_Loop,The following statement contains a magic number: TimeSpan waitCheckTime = TimeSpan.FromMilliseconds(150 * ChainLength * NumChains * WaitFactor);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,ActivationSched_Turn_Execution_Order_Loop,The following statement contains a magic number: await taskChainEnds[i].WithTimeout(TimeSpan.FromMilliseconds(10));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerAdvancedTests_Set2,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerAdvancedTests_Set2.cs,Run_ActivationSched_Test1,The following statement contains a magic number: var silo = new MockSiloDetails              {                  SiloAddress = SiloAddressUtils.NewLocalSiloAddress(23)              };
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Async_Task_Start_OrleansTaskScheduler,The following statement contains a magic number: int expected = 2;
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Async_Task_Start_ActivationTaskScheduler,The following statement contains a magic number: int expected = 2;
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_SimpleFifoTest,The following statement contains a magic number: IWorkItem item1 = new ClosureWorkItem(() => { n = n + 5; });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_SimpleFifoTest,The following statement contains a magic number: IWorkItem item2 = new ClosureWorkItem(() => { n = n * 3; });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_SimpleFifoTest,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_SimpleFifoTest,The following statement contains a magic number: Assert.Equal(15' n);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_TplFifoTest,The following statement contains a magic number: Task task1 = new Task(() => { Thread.Sleep(1000); n = n + 5; });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_TplFifoTest,The following statement contains a magic number: Task task1 = new Task(() => { Thread.Sleep(1000); n = n + 5; });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_TplFifoTest,The following statement contains a magic number: Task task2 = new Task(() => { n = n * 3; });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_TplFifoTest,The following statement contains a magic number: await Task.WhenAll(task1' task2).WithTimeout(TimeSpan.FromSeconds(5));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_TplFifoTest,The following statement contains a magic number: Assert.Equal(15' n);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_1,The following statement contains a magic number: await task1.WithTimeout(TimeSpan.FromMilliseconds(100));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_1,The following statement contains a magic number: await task2.WithTimeout(TimeSpan.FromMilliseconds(100));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_2,The following statement contains a magic number: await task1.WithTimeout(TimeSpan.FromMilliseconds(100));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_2,The following statement contains a magic number: await task2.WithTimeout(TimeSpan.FromMilliseconds(100));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_Wrapped,The following statement contains a magic number: Task wrapper1 = new Task(() =>              {                  task1.Start(this.scheduler);                  task1.WaitWithThrow(TimeSpan.FromSeconds(10));              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_Wrapped,The following statement contains a magic number: Task wrapper2 = new Task(() =>              {                  task2.Start(this.scheduler);                  task2.WaitWithThrow(TimeSpan.FromSeconds(10));              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_Wrapped,The following statement contains a magic number: await wrapper1.WithTimeout(TimeSpan.FromSeconds(10));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_Wrapped,The following statement contains a magic number: await wrapper2.WithTimeout(TimeSpan.FromSeconds(10));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_Wait_Wrapped,The following statement contains a magic number: const int NumTasks = 100;
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_Wait_Wrapped,The following statement contains a magic number: bool ok = wrappers[i].Wait(TimeSpan.FromMilliseconds(NumTasks * 150 * 2));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_Wait_Wrapped,The following statement contains a magic number: bool ok = wrappers[i].Wait(TimeSpan.FromMilliseconds(NumTasks * 150 * 2));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_Wait_Wrapped,The following statement contains a magic number: bool ok = tasks[i].Wait(TimeSpan.FromMilliseconds(NumTasks * 150 * 2));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartTask_Wait_Wrapped,The following statement contains a magic number: bool ok = tasks[i].Wait(TimeSpan.FromMilliseconds(NumTasks * 150 * 2));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_ClosureWorkItem_Wait,The following statement contains a magic number: const int NumTasks = 10;
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_ClosureWorkItem_Wait,The following statement contains a magic number: workItems[i] = new ClosureWorkItem(() =>                  {                      this.output.WriteLine("Inside ClosureWorkItem-" + taskNum);                      tasks[taskNum].Start(this.scheduler);                      bool ok = tasks[taskNum].Wait(TimeSpan.FromMilliseconds(NumTasks * 100));                      Assert.True(ok' "Wait completed successfully inside ClosureWorkItem-" + taskNum);                  });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_ClosureWorkItem_Wait,The following statement contains a magic number: bool ok = tasks[i].Wait(TimeSpan.FromMilliseconds(NumTasks * 150));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_NewTask_ContinueWith_Wrapped_OrleansTaskScheduler,The following statement contains a magic number: Task wrapped = new Task(() =>              {                  this.output.WriteLine("#0 - new Task - SynchronizationContext.Current={0} TaskScheduler.Current={1}"'                      SynchronizationContext.Current' TaskScheduler.Current);                    Task t0 = new Task(() =>                  {                      this.output.WriteLine("#1 - new Task - SynchronizationContext.Current={0} TaskScheduler.Current={1}"'                          SynchronizationContext.Current' TaskScheduler.Current);                      Assert.Equal(this.scheduler' TaskScheduler.Current);  // "TaskScheduler.Current #1"                  });                  Task t1 = t0.ContinueWith(task =>                  {                      Assert.False(task.IsFaulted' "Task #1 Faulted=" + task.Exception);                        this.output.WriteLine("#2 - new Task - SynchronizationContext.Current={0} TaskScheduler.Current={1}"'                          SynchronizationContext.Current' TaskScheduler.Current);                      Assert.Equal(this.scheduler' TaskScheduler.Current);  // "TaskScheduler.Current #2"                  });                  t0.Start(this.scheduler);                  bool ok = t1.Wait(TimeSpan.FromSeconds(15));                  if (!ok) throw new TimeoutException();              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_NewTask_ContinueWith_Wrapped_OrleansTaskScheduler,The following statement contains a magic number: bool finished = wrapped.Wait(TimeSpan.FromSeconds(30));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_NewTask_ContinueWith_TaskScheduler,The following statement contains a magic number: t1.WaitWithThrow(TimeSpan.FromSeconds(30));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_StartNew_ContinueWith_TaskScheduler,The following statement contains a magic number: t1.WaitWithThrow(TimeSpan.FromSeconds(30));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_SubTaskExecutionSequencing,The following statement contains a magic number: Action closure = () =>              {                  LogContext("ClosureWorkItem-task " + Task.CurrentId);                    for (int i = 0; i < 10; i++)                  {                      int id = -1;                      Action action = () =>                      {                          id = Task.CurrentId.HasValue ? (int)Task.CurrentId : -1;                            // ReSharper disable AccessToModifiedClosure                          LogContext("Sub-task " + id + " n=" + n);                            int k = n;                          this.output.WriteLine("Sub-task " + id + " sleeping");                          Thread.Sleep(100);                          this.output.WriteLine("Sub-task " + id + " awake");                          n = k + 1;                          // ReSharper restore AccessToModifiedClosure                      };                      Task.Factory.StartNew(action).ContinueWith(tsk =>                      {                          LogContext("Sub-task " + id + "-ContinueWith");                            this.output.WriteLine("Sub-task " + id + " Done");                          if (Interlocked.Increment(ref numCompleted[0]) == 10)                          {                              finished.SetResult(0);                          }                      });                  }              };
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_SubTaskExecutionSequencing,The following statement contains a magic number: Action closure = () =>              {                  LogContext("ClosureWorkItem-task " + Task.CurrentId);                    for (int i = 0; i < 10; i++)                  {                      int id = -1;                      Action action = () =>                      {                          id = Task.CurrentId.HasValue ? (int)Task.CurrentId : -1;                            // ReSharper disable AccessToModifiedClosure                          LogContext("Sub-task " + id + " n=" + n);                            int k = n;                          this.output.WriteLine("Sub-task " + id + " sleeping");                          Thread.Sleep(100);                          this.output.WriteLine("Sub-task " + id + " awake");                          n = k + 1;                          // ReSharper restore AccessToModifiedClosure                      };                      Task.Factory.StartNew(action).ContinueWith(tsk =>                      {                          LogContext("Sub-task " + id + "-ContinueWith");                            this.output.WriteLine("Sub-task " + id + " Done");                          if (Interlocked.Increment(ref numCompleted[0]) == 10)                          {                              finished.SetResult(0);                          }                      });                  }              };
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_SubTaskExecutionSequencing,The following statement contains a magic number: Action closure = () =>              {                  LogContext("ClosureWorkItem-task " + Task.CurrentId);                    for (int i = 0; i < 10; i++)                  {                      int id = -1;                      Action action = () =>                      {                          id = Task.CurrentId.HasValue ? (int)Task.CurrentId : -1;                            // ReSharper disable AccessToModifiedClosure                          LogContext("Sub-task " + id + " n=" + n);                            int k = n;                          this.output.WriteLine("Sub-task " + id + " sleeping");                          Thread.Sleep(100);                          this.output.WriteLine("Sub-task " + id + " awake");                          n = k + 1;                          // ReSharper restore AccessToModifiedClosure                      };                      Task.Factory.StartNew(action).ContinueWith(tsk =>                      {                          LogContext("Sub-task " + id + "-ContinueWith");                            this.output.WriteLine("Sub-task " + id + " Done");                          if (Interlocked.Increment(ref numCompleted[0]) == 10)                          {                              finished.SetResult(0);                          }                      });                  }              };
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_SubTaskExecutionSequencing,The following statement contains a magic number: await Task.WhenAny(Task.Delay(TimeSpan.FromSeconds(10))' finished.Task);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_SubTaskExecutionSequencing,The following statement contains a magic number: Assert.Equal(10' n);
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_RequestContext_NewTask_ContinueWith,The following statement contains a magic number: Task t0 = new Task(() =>              {                  this.output.WriteLine("#0 - new Task - SynchronizationContext.Current={0} TaskScheduler.Current={1} Thread={2}"'                      SynchronizationContext.Current' TaskScheduler.Current' Thread.CurrentThread.ManagedThreadId);                    Assert.Equal(val' RequestContext.Get(key));  // "RequestContext.Get #0"                    Task t1 = new Task(() =>                  {                      this.output.WriteLine("#1 - new Task - SynchronizationContext.Current={0} TaskScheduler.Current={1} Thread={2}"'                          SynchronizationContext.Current' TaskScheduler.Current' Thread.CurrentThread.ManagedThreadId);                      Assert.Equal(val' RequestContext.Get(key));  // "RequestContext.Get #1"                  });                  Task t2 = t1.ContinueWith(task =>                  {                      Assert.False(task.IsFaulted' "Task #1 FAULTED=" + task.Exception);                        this.output.WriteLine("#2 - new Task - SynchronizationContext.Current={0} TaskScheduler.Current={1} Thread={2}"'                          SynchronizationContext.Current' TaskScheduler.Current' Thread.CurrentThread.ManagedThreadId);                      Assert.Equal(val' RequestContext.Get(key));  // "RequestContext.Get #2"                  });                  t1.Start(this.scheduler);                  t2.WaitWithThrow(TimeSpan.FromSeconds(5));              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_Task_RequestContext_NewTask_ContinueWith,The following statement contains a magic number: t0.WaitWithThrow(TimeSpan.FromSeconds(10));
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_AC_RequestContext_StartNew_ContinueWith,The following statement contains a magic number: Task t0 = Task.Factory.StartNew(() =>              {                  this.output.WriteLine("#0 - new Task - SynchronizationContext.Current={0} TaskScheduler.Current={1}"'                      SynchronizationContext.Current' TaskScheduler.Current);                    Assert.Equal(val' RequestContext.Get(key));  // "RequestContext.Get #0"                    Task t1 = Task.Factory.StartNew(() =>                  {                      this.output.WriteLine("#1 - new Task - SynchronizationContext.Current={0} TaskScheduler.Current={1}"'                          SynchronizationContext.Current' TaskScheduler.Current);                      Assert.Equal(val' RequestContext.Get(key));  // "RequestContext.Get #1"                  });                  Task t2 = t1.ContinueWith((_) =>                  {                      this.output.WriteLine("#2 - new Task - SynchronizationContext.Current={0} TaskScheduler.Current={1}"'                          SynchronizationContext.Current' TaskScheduler.Current);                      Assert.Equal(val' RequestContext.Get(key));  // "RequestContext.Get #2"                  });                  t2.Wait(TimeSpan.FromSeconds(5));              });
Magic Number,UnitTests.SchedulerTests,OrleansTaskSchedulerBasicTests,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\SchedulerTests\OrleansTaskSchedulerBasicTests.cs,Sched_AC_RequestContext_StartNew_ContinueWith,The following statement contains a magic number: t0.Wait(TimeSpan.FromSeconds(10));
Magic Number,UnitTests.TesterInternal,TestInternalHelper,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\TestInternalHelper.cs,InitializeSchedulerForTesting,The following statement contains a magic number: services.Configure<SchedulingOptions>(options =>              {                  options.MaxActiveThreads = 4;                  options.DelayWarningThreshold = TimeSpan.FromMilliseconds(100);                  options.ActivationSchedulingQuantum = TimeSpan.FromMilliseconds(100);                  options.TurnWarningLengthThreshold = TimeSpan.FromMilliseconds(100);                  options.StoppedActivationWarningInterval = TimeSpan.FromMilliseconds(200);              });
Magic Number,UnitTests.TesterInternal,TestInternalHelper,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\TestInternalHelper.cs,InitializeSchedulerForTesting,The following statement contains a magic number: services.Configure<SchedulingOptions>(options =>              {                  options.MaxActiveThreads = 4;                  options.DelayWarningThreshold = TimeSpan.FromMilliseconds(100);                  options.ActivationSchedulingQuantum = TimeSpan.FromMilliseconds(100);                  options.TurnWarningLengthThreshold = TimeSpan.FromMilliseconds(100);                  options.StoppedActivationWarningInterval = TimeSpan.FromMilliseconds(200);              });
Magic Number,UnitTests.TesterInternal,TestInternalHelper,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\TestInternalHelper.cs,InitializeSchedulerForTesting,The following statement contains a magic number: services.Configure<SchedulingOptions>(options =>              {                  options.MaxActiveThreads = 4;                  options.DelayWarningThreshold = TimeSpan.FromMilliseconds(100);                  options.ActivationSchedulingQuantum = TimeSpan.FromMilliseconds(100);                  options.TurnWarningLengthThreshold = TimeSpan.FromMilliseconds(100);                  options.StoppedActivationWarningInterval = TimeSpan.FromMilliseconds(200);              });
Magic Number,UnitTests.TesterInternal,TestInternalHelper,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\TestInternalHelper.cs,InitializeSchedulerForTesting,The following statement contains a magic number: services.Configure<SchedulingOptions>(options =>              {                  options.MaxActiveThreads = 4;                  options.DelayWarningThreshold = TimeSpan.FromMilliseconds(100);                  options.ActivationSchedulingQuantum = TimeSpan.FromMilliseconds(100);                  options.TurnWarningLengthThreshold = TimeSpan.FromMilliseconds(100);                  options.StoppedActivationWarningInterval = TimeSpan.FromMilliseconds(200);              });
Magic Number,UnitTests.TesterInternal,TestInternalHelper,D:\research\architectureSmells\repos\dotnet_orleans\test\NonSilo.Tests\TestInternalHelper.cs,InitializeSchedulerForTesting,The following statement contains a magic number: services.Configure<SchedulingOptions>(options =>              {                  options.MaxActiveThreads = 4;                  options.DelayWarningThreshold = TimeSpan.FromMilliseconds(100);                  options.ActivationSchedulingQuantum = TimeSpan.FromMilliseconds(100);                  options.TurnWarningLengthThreshold = TimeSpan.FromMilliseconds(100);                  options.StoppedActivationWarningInterval = TimeSpan.FromMilliseconds(200);              });
