Implementation smell,Namespace,Class,File,Method,Description
Long Method,Orleans.CodeGenerator,RoslynCodeGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\RoslynCodeGenerator.cs,GenerateCode,The method has 144 lines of code.
Complex Method,Orleans.CodeGenerator,GrainReferenceGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\GrainReferenceGenerator.cs,GenerateInvokeMethods,Cyclomatic complexity of the method is 10
Complex Method,Orleans.CodeGenerator,GrainReferenceGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\GrainReferenceGenerator.cs,GetInvokeOptions,Cyclomatic complexity of the method is 8
Complex Method,Orleans.CodeGenerator,RoslynCodeGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\RoslynCodeGenerator.cs,GenerateCode,Cyclomatic complexity of the method is 23
Complex Method,Orleans.CodeGenerator,RoslynCodeGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\RoslynCodeGenerator.cs,AddSerializationTypes,Cyclomatic complexity of the method is 17
Complex Method,Orleans.CodeGenerator,SerializerGenerationManager,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerationManager.cs,RecordType,Cyclomatic complexity of the method is 16
Long Identifier,Orleans.CodeGenerator,GrainReferenceGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\GrainReferenceGenerator.cs,,The length of the parameter CheckGrainObserverParamInternalExpression is 41.
Long Identifier,Orleans.CodeGenerator,FieldInfoMember,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerator.cs,GetGetter,The length of the parameter serializationContextExpression is 30.
Long Statement,Orleans.CodeGenerator,FeaturePopulatorGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\FeaturePopulatorGenerator.cs,GenerateSyntax,The length of the statement  "                                .AddMembers(GeneratePopulateMethod(features.GrainInterfaces)' GeneratePopulateMethod(features.GrainClasses)' GeneratePopulateMethod(features.Serializers)) " is 154.
Long Statement,Orleans.CodeGenerator,FeaturePopulatorGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\FeaturePopulatorGenerator.cs,GenerateSyntax,The length of the statement  "                      .AddArgumentListArguments(SF.AttributeArgument(SF.TypeOfExpression(SF.ParseTypeName(NamespaceName + "." + className)))))); " is 122.
Long Statement,Orleans.CodeGenerator,FeaturePopulatorGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\FeaturePopulatorGenerator.cs,GeneratePopulateMethod,The length of the statement  "            var interfaceMethod = TypeUtils.Method((IFeaturePopulator<GrainInterfaceFeature> _) => _.Populate(default(GrainInterfaceFeature))); " is 131.
Long Statement,Orleans.CodeGenerator,FeaturePopulatorGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\FeaturePopulatorGenerator.cs,GeneratePopulateMethod,The length of the statement  "            var interfaceMethod = TypeUtils.Method((IFeaturePopulator<GrainClassFeature> _) => _.Populate(default(GrainClassFeature))); " is 123.
Long Statement,Orleans.CodeGenerator,FeaturePopulatorGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\FeaturePopulatorGenerator.cs,GeneratePopulateMethod,The length of the statement  "            var interfaceMethod = TypeUtils.Method((IFeaturePopulator<SerializerFeature> _) => _.Populate(default(SerializerFeature))); " is 123.
Long Statement,Orleans.CodeGenerator,FeaturePopulatorGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\FeaturePopulatorGenerator.cs,GeneratePopulateMethod,The length of the statement  "            var addSerializerTypeMethod = TypeUtils.Method((SerializerFeature _) => _.AddSerializerType(default(Type)' default(Type))); " is 123.
Long Statement,Orleans.CodeGenerator,RoslynCodeGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\RoslynCodeGenerator.cs,GenerateAndLoadForAssemblies,The length of the statement  "                    $"Exception generating code for input assemblies {string.Join("'"' assemblyList.Select(asm => asm.GetName().FullName))}\nException: {LogFormatter.PrintException(exception)}"; " is 174.
Long Statement,Orleans.CodeGenerator,RoslynCodeGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\RoslynCodeGenerator.cs,GenerateCode,The length of the statement  "            foreach (var attribute in knownAssemblies.SelectMany(asm => asm.GetCustomAttributes<ConsiderForCodeGenerationAttribute>())) " is 123.
Long Statement,Orleans.CodeGenerator,RoslynCodeGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\RoslynCodeGenerator.cs,GenerateCode,The length of the statement  "                if (attribute.ThrowOnFailure && !this.serializableTypes.IsTypeRecorded(attribute.Type) && !this.serializableTypes.IsTypeIgnored(attribute.Type)) " is 144.
Long Statement,Orleans.CodeGenerator,RoslynCodeGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\RoslynCodeGenerator.cs,GenerateCode,The length of the statement  "            var compilationUnit = SF.CompilationUnit().AddAttributeLists(attributeDeclarations.ToArray()).AddMembers(members.ToArray()); " is 124.
Long Statement,Orleans.CodeGenerator,RoslynCodeGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\RoslynCodeGenerator.cs,GenerateSerializers,The length of the statement  "                serializerNamespaceMembers.Add(SerializerGenerator.GenerateClass(generatedSerializerName' toGen' encounteredType => this.serializableTypes.RecordType(encounteredType' targetAssembly))); " is 185.
Long Statement,Orleans.CodeGenerator,RoslynCodeGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\RoslynCodeGenerator.cs,GenerateSerializers,The length of the statement  "                var qualifiedSerializerName = serializerNamespaceName + '.' + generatedSerializerName + GetGenericTypeSuffix(toGen.GetGenericArguments().Length); " is 145.
Long Statement,Orleans.CodeGenerator,RoslynCodeGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\RoslynCodeGenerator.cs,CompileAssembly,The length of the statement  "            var method = typeof(CSharpCompilationOptions).GetMethod("WithTopLevelBinderFlags"' BindingFlags.NonPublic | BindingFlags.Instance); " is 131.
Long Statement,Orleans.CodeGenerator,SerializerGenerationManager,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerationManager.cs,RecordType,The length of the statement  "                    "Skipping serializer generation for nested type {0}. If this type is used frequently' you may wish to consider making it non-nested."' " is 134.
Long Statement,Orleans.CodeGenerator,SerializerGenerationManager,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerationManager.cs,RecordType,The length of the statement  "                                  "If you use arguments of this type a lot' consider submitting a pull request to https://github.com/dotnet/orleans/ to add a custom serializer for it."; " is 151.
Long Statement,Orleans.CodeGenerator,SerializerGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerator.cs,GenerateConstructor,The length of the statement  "                        SF.AssignmentExpression(SyntaxKind.SimpleAssignmentExpression' SF.IdentifierName(field.GetterFieldName)' getterInvoke))); " is 121.
Long Statement,Orleans.CodeGenerator,SerializerGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerator.cs,GenerateConstructor,The length of the statement  "                            SF.AssignmentExpression(SyntaxKind.SimpleAssignmentExpression' SF.IdentifierName(field.SetterFieldName)' getValueSetterInvoke))); " is 129.
Long Statement,Orleans.CodeGenerator,SerializerGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerator.cs,GenerateConstructor,The length of the statement  "                            SF.AssignmentExpression(SyntaxKind.SimpleAssignmentExpression' SF.IdentifierName(field.SetterFieldName)' getReferenceSetterInvoke))); " is 133.
Long Statement,Orleans.CodeGenerator,SerializerGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerator.cs,GenerateDeserializerMethod,The length of the statement  "                var typedResult = SF.ParenthesizedExpression(SF.CastExpression(typeof(IOnDeserialized).GetTypeSyntax()' resultVariable)); " is 121.
Long Statement,Orleans.CodeGenerator,SerializerGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerator.cs,GenerateDeserializerMethod,The length of the statement  "                var invokeOnDeserialized = onDeserializedMethod.Invoke(typedResult).AddArgumentListArguments(SF.Argument(contextParameter)); " is 124.
Long Statement,Orleans.CodeGenerator.Utilities,SyntaxFactoryExtensions,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\Utilities\SyntaxFactoryExtensions.cs,GetDeclarationSyntax,The length of the statement  "              syntax = syntax.WithTypeParameterList(SyntaxFactory.TypeParameterList().AddParameters(method.GetTypeParameterListSyntax())); " is 124.
Complex Conditional,Orleans.CodeGenerator,SerializerGenerationManager,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerationManager.cs,RecordType,The conditional expression  "t.IsGenericParameter || processedTypes.Contains(t) || typesToProcess.Contains(t)                  || typesToIgnore.Contains(t)                  || typeof (Exception).GetTypeInfo().IsAssignableFrom(t)                  || typeof (Delegate).GetTypeInfo().IsAssignableFrom(t)                  || typeof (Task<>).GetTypeInfo().IsAssignableFrom(t)"  is complex.
Complex Conditional,Orleans.CodeGenerator,SerializerGenerationManager,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerationManager.cs,RecordType,The conditional expression  "t.IsInterface || t.IsAbstract || t == typeof (object) || t == typeof (void)                  || GrainInterfaceUtils.IsTaskType(t)"  is complex.
Empty Catch Block,Orleans.CodeGenerator,SerializerGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\SerializerGenerator.cs,GetEmptyConstructor,The method has an empty catch block.
Magic Number,Orleans.CodeGenerator,FeaturePopulatorGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\FeaturePopulatorGenerator.cs,GenerateSyntax,The following statement contains a magic number: var className = CodeGeneratorCommon.ClassPrefix + Guid.NewGuid().ToString("N").Substring(0' 10) + ClassSuffix;
Magic Number,Orleans.CodeGenerator,RoslynCodeGenerator,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\RoslynCodeGenerator.cs,CompileAssembly,The following statement contains a magic number: options = (CSharpCompilationOptions)method.Invoke(options' new object[] { 1u << 26 });
Magic Number,Orleans.CodeGenerator.Utilities,SyntaxFactoryExtensions,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\Utilities\SyntaxFactoryExtensions.cs,GetBindingFlagsParenthesizedExpressionSyntax,The following statement contains a magic number: if (bindingFlags.Length < 2)              {                  throw new ArgumentOutOfRangeException(                      "bindingFlags"'                       string.Format("Can't create parenthesized binary expression with {0} arguments"' bindingFlags.Length));              }
Magic Number,Orleans.CodeGenerator.Utilities,SyntaxFactoryExtensions,C:\repos\dotnet_orleans\src\Orleans.CodeGeneration\Utilities\SyntaxFactoryExtensions.cs,GetBindingFlagsParenthesizedExpressionSyntax,The following statement contains a magic number: for (var i = 2; i < bindingFlags.Length; i++)              {                  bindingFlagsBinaryExpression = SyntaxFactory.BinaryExpression(                      operationKind'                      bindingFlagsBinaryExpression'                      flags.Member(bindingFlags[i].ToString()));              }
