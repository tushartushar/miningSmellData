Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,RunMain,Cyclomatic complexity of the method is 17
Long Statement,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,CreateGrainClientAssembly,The length of the statement  "		var generator = (GrainClientGenerator)appDomain.CreateInstanceAndUnwrap (assembly.FullName' typeof(GrainClientGenerator).FullName); " is 131.
Long Statement,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,CreateGrainClient,The length of the statement  "	var grainAssembly = (Path.GetFileName (options.InputAssembly.FullName) != "Orleans.dll") ? Assembly.LoadFrom (options.InputAssembly.FullName) : Assembly.Load (assemblyName); " is 173.
Long Statement,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,PrintUsage,The length of the statement  "	Console.WriteLine ("Usage: ClientGenerator.exe /in:<grain assembly filename> /out:<fileName for output file> /r:<reference assemblies>"); " is 137.
Long Statement,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,PrintUsage,The length of the statement  "	Console.WriteLine ("       ClientGenerator.exe @<arguments fileName> - Arguments will be read and processed from this file."); " is 126.
Long Statement,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,PrintUsage,The length of the statement  "	Console.WriteLine ("Example: ClientGenerator.exe /in:MyGrain.dll /out:C:\\OrleansSample\\MyGrain\\obj\\Debug\\MyGrain.orleans.g.cs /r:Orleans.dll;..\\MyInterfaces\\bin\\Debug\\MyInterfaces.dll"); " is 195.
Long Statement,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,CheckPathNotEndsWith,The length of the statement  "	CheckPath (path' p => !p.EndsWith (str' StringComparison.InvariantCultureIgnoreCase)' string.Format ("Cannot end with '{0}'"' str)); " is 132.
Magic Number,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,RunMain,The following statement contains a magic number: try {  	var options = new CodeGenOptions ();  	// STEP 1 : Parse parameters  	if (args.Length == 1 && args [0].StartsWith ("@")) {  		// Read command line args from file  		string arg = args [0];  		string argsFile = arg.Trim ('"').Substring (1).Trim ('"');  		Console.WriteLine ("Orleans-CodeGen - Reading code-gen params from file={0}"' argsFile);  		AssertWellFormed (argsFile' true);  		args = File.ReadAllLines (argsFile);  	}  	int i = 1;  	foreach (string a in args) {  		string arg = a.Trim ('"').Trim ().Trim ('"');  		if (GrainClientGeneratorFlags.Verbose)  			Console.WriteLine ("Orleans-CodeGen - arg #{0}={1}"' i++' arg);  		if (string.IsNullOrEmpty (arg) || string.IsNullOrWhiteSpace (arg))  			continue;  		if (arg.StartsWith ("/")) {  			if (arg.StartsWith ("/reference:") || arg.StartsWith ("/r:")) {  				// list of references passed from from project file. separator =';'  				string refstr = arg.Substring (arg.IndexOf (':') + 1);  				string[] references = refstr.Split (';');  				foreach (string rp in references) {  					AssertWellFormed (rp' true);  					options.ReferencedAssemblies.Add (rp);  				}  			} else if (arg.StartsWith ("/in:")) {  				var infile = arg.Substring (arg.IndexOf (':') + 1);  				AssertWellFormed (infile);  				options.InputAssembly = new FileInfo (infile);  			} else if (arg.StartsWith ("/out:")) {  				var outfile = arg.Substring (arg.IndexOf (':') + 1);  				AssertWellFormed (outfile' false);  				options.OutputFileName = outfile;  			}  		} else {  			Console.WriteLine ();  			PrintUsage ();  			return 1;  		}  	}  	// STEP 2 : Validate and calculate unspecified parameters  	if (options.InputAssembly == null) {  		Console.WriteLine ("ERROR: Orleans-CodeGen - no input file specified.");  		return 2;  	}  	if (String.IsNullOrEmpty (options.OutputFileName)) {  		Console.WriteLine ("ERROR: Orleans-Codegen - no output filename specified");  		return 2;  	}  	// STEP 3 : Dump useful info for debugging  	Console.WriteLine ();  	if (options.ReferencedAssemblies != null) {  		Console.WriteLine ("Orleans-CodeGen - Using referenced libraries:");  		foreach (string assembly in options.ReferencedAssemblies)  			Console.WriteLine ("\t{0} => {1}"' Path.GetFileName (assembly)' assembly);  	}  	// STEP 5 : Finally call code generation  	if (!CreateGrainClientAssembly (options))  		return -1;  	// DONE!  	return 0;  } catch (Exception ex) {  	Console.WriteLine ("-- Code-gen FAILED -- \n{0}"' LogFormatter.PrintException (ex));  	return 3;  }  
Magic Number,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,RunMain,The following statement contains a magic number: try {  	var options = new CodeGenOptions ();  	// STEP 1 : Parse parameters  	if (args.Length == 1 && args [0].StartsWith ("@")) {  		// Read command line args from file  		string arg = args [0];  		string argsFile = arg.Trim ('"').Substring (1).Trim ('"');  		Console.WriteLine ("Orleans-CodeGen - Reading code-gen params from file={0}"' argsFile);  		AssertWellFormed (argsFile' true);  		args = File.ReadAllLines (argsFile);  	}  	int i = 1;  	foreach (string a in args) {  		string arg = a.Trim ('"').Trim ().Trim ('"');  		if (GrainClientGeneratorFlags.Verbose)  			Console.WriteLine ("Orleans-CodeGen - arg #{0}={1}"' i++' arg);  		if (string.IsNullOrEmpty (arg) || string.IsNullOrWhiteSpace (arg))  			continue;  		if (arg.StartsWith ("/")) {  			if (arg.StartsWith ("/reference:") || arg.StartsWith ("/r:")) {  				// list of references passed from from project file. separator =';'  				string refstr = arg.Substring (arg.IndexOf (':') + 1);  				string[] references = refstr.Split (';');  				foreach (string rp in references) {  					AssertWellFormed (rp' true);  					options.ReferencedAssemblies.Add (rp);  				}  			} else if (arg.StartsWith ("/in:")) {  				var infile = arg.Substring (arg.IndexOf (':') + 1);  				AssertWellFormed (infile);  				options.InputAssembly = new FileInfo (infile);  			} else if (arg.StartsWith ("/out:")) {  				var outfile = arg.Substring (arg.IndexOf (':') + 1);  				AssertWellFormed (outfile' false);  				options.OutputFileName = outfile;  			}  		} else {  			Console.WriteLine ();  			PrintUsage ();  			return 1;  		}  	}  	// STEP 2 : Validate and calculate unspecified parameters  	if (options.InputAssembly == null) {  		Console.WriteLine ("ERROR: Orleans-CodeGen - no input file specified.");  		return 2;  	}  	if (String.IsNullOrEmpty (options.OutputFileName)) {  		Console.WriteLine ("ERROR: Orleans-Codegen - no output filename specified");  		return 2;  	}  	// STEP 3 : Dump useful info for debugging  	Console.WriteLine ();  	if (options.ReferencedAssemblies != null) {  		Console.WriteLine ("Orleans-CodeGen - Using referenced libraries:");  		foreach (string assembly in options.ReferencedAssemblies)  			Console.WriteLine ("\t{0} => {1}"' Path.GetFileName (assembly)' assembly);  	}  	// STEP 5 : Finally call code generation  	if (!CreateGrainClientAssembly (options))  		return -1;  	// DONE!  	return 0;  } catch (Exception ex) {  	Console.WriteLine ("-- Code-gen FAILED -- \n{0}"' LogFormatter.PrintException (ex));  	return 3;  }  
Magic Number,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,RunMain,The following statement contains a magic number: try {  	var options = new CodeGenOptions ();  	// STEP 1 : Parse parameters  	if (args.Length == 1 && args [0].StartsWith ("@")) {  		// Read command line args from file  		string arg = args [0];  		string argsFile = arg.Trim ('"').Substring (1).Trim ('"');  		Console.WriteLine ("Orleans-CodeGen - Reading code-gen params from file={0}"' argsFile);  		AssertWellFormed (argsFile' true);  		args = File.ReadAllLines (argsFile);  	}  	int i = 1;  	foreach (string a in args) {  		string arg = a.Trim ('"').Trim ().Trim ('"');  		if (GrainClientGeneratorFlags.Verbose)  			Console.WriteLine ("Orleans-CodeGen - arg #{0}={1}"' i++' arg);  		if (string.IsNullOrEmpty (arg) || string.IsNullOrWhiteSpace (arg))  			continue;  		if (arg.StartsWith ("/")) {  			if (arg.StartsWith ("/reference:") || arg.StartsWith ("/r:")) {  				// list of references passed from from project file. separator =';'  				string refstr = arg.Substring (arg.IndexOf (':') + 1);  				string[] references = refstr.Split (';');  				foreach (string rp in references) {  					AssertWellFormed (rp' true);  					options.ReferencedAssemblies.Add (rp);  				}  			} else if (arg.StartsWith ("/in:")) {  				var infile = arg.Substring (arg.IndexOf (':') + 1);  				AssertWellFormed (infile);  				options.InputAssembly = new FileInfo (infile);  			} else if (arg.StartsWith ("/out:")) {  				var outfile = arg.Substring (arg.IndexOf (':') + 1);  				AssertWellFormed (outfile' false);  				options.OutputFileName = outfile;  			}  		} else {  			Console.WriteLine ();  			PrintUsage ();  			return 1;  		}  	}  	// STEP 2 : Validate and calculate unspecified parameters  	if (options.InputAssembly == null) {  		Console.WriteLine ("ERROR: Orleans-CodeGen - no input file specified.");  		return 2;  	}  	if (String.IsNullOrEmpty (options.OutputFileName)) {  		Console.WriteLine ("ERROR: Orleans-Codegen - no output filename specified");  		return 2;  	}  	// STEP 3 : Dump useful info for debugging  	Console.WriteLine ();  	if (options.ReferencedAssemblies != null) {  		Console.WriteLine ("Orleans-CodeGen - Using referenced libraries:");  		foreach (string assembly in options.ReferencedAssemblies)  			Console.WriteLine ("\t{0} => {1}"' Path.GetFileName (assembly)' assembly);  	}  	// STEP 5 : Finally call code generation  	if (!CreateGrainClientAssembly (options))  		return -1;  	// DONE!  	return 0;  } catch (Exception ex) {  	Console.WriteLine ("-- Code-gen FAILED -- \n{0}"' LogFormatter.PrintException (ex));  	return 3;  }  
Magic Number,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,RunMain,The following statement contains a magic number: if (options.InputAssembly == null) {  	Console.WriteLine ("ERROR: Orleans-CodeGen - no input file specified.");  	return 2;  }  
Magic Number,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,RunMain,The following statement contains a magic number: return 2;  
Magic Number,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,RunMain,The following statement contains a magic number: if (String.IsNullOrEmpty (options.OutputFileName)) {  	Console.WriteLine ("ERROR: Orleans-Codegen - no output filename specified");  	return 2;  }  
Magic Number,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,RunMain,The following statement contains a magic number: return 2;  
Magic Number,Orleans.CodeGeneration,GrainClientGenerator,F:\newReposMay17\dotnet_orleans\src\ClientGenerator\ClientGenerator.cs,RunMain,The following statement contains a magic number: return 3;  
