Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Recurse,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Transactions.TestKit.Consistency,ConsistencyTestHarness,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestHarness.cs,CheckConsistency,Cyclomatic complexity of the method is 21
Complex Method,Orleans.Transactions.TestKit,TransactionAttributionGrainExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Grains\ITransactionAttributionGrain.cs,GetTransactionAttributionGrain,Cyclomatic complexity of the method is 8
Complex Method,Orleans.Transactions.TestKit,TransactionRecoveryTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionRecoveryTestsRunner.cs,ValidateResults,Cyclomatic complexity of the method is 11
Long Parameter List,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Run,The method has 5 parameters. Parameters: options' depth' stack' maxgrain' stopAfter
Long Parameter List,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Recurse,The method has 8 parameters. Parameters: options' depth' stack' random' count' parallel' maxgrain' stopAfter
Long Parameter List,Orleans.Transactions.TestKit.Consistency,ConsistencyTestHarness,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestHarness.cs,ConsistencyTestHarness,The method has 7 parameters. Parameters: grainFactory' numGrains' seed' avoidDeadlocks' avoidTimeouts' readWrite' tolerateUnknownExceptions
Long Parameter List,Orleans.Transactions.TestKit.Consistency,IConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\IConsistencyTestGrain.cs,Run,The method has 5 parameters. Parameters: options' depth' stack' max' stopAfter
Long Parameter List,Orleans.Transactions.TestKit,FaultInjectionAzureTableTransactionStateStorage<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionAzureTableTransactionStateStorage.cs,Store,The method has 5 parameters. Parameters: expectedETag' metadata' statesToPrepare' commitUpTo' abortAfter
Long Parameter List,Orleans.Transactions.TestKit,FaultInjectionTransactionManager<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionReource.cs,FaultInjectionTransactionManager,The method has 6 parameters. Parameters: faultInjector' faultInjectionControl' tm' activationContext' logger' grainRuntime
Long Parameter List,Orleans.Transactions.TestKit,FaultInjectionTransactionManager<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionReource.cs,PrepareAndCommit,The method has 5 parameters. Parameters: transactionId' accessCount' timeStamp' writeParticipants' totalParticipants
Long Parameter List,Orleans.Transactions.TestKit,FaultInjectionTransactionalResource<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionReource.cs,FaultInjectionTransactionalResource,The method has 6 parameters. Parameters: faultInjector' faultInjectionControl' tResource' activationContext' logger' grainRuntime
Long Parameter List,Orleans.Transactions.TestKit,ConsistencyTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ConsistencyTransactionTestRunner.cs,RandomizedConsistency,The method has 5 parameters. Parameters: numGrains' scale' avoidDeadlocks' avoidTimeouts' readwrite
Long Parameter List,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,TransactionalStateStorageTestRunner,The method has 5 parameters. Parameters: stateStorageFactory' stateFactory' grainFactory' testOutput' assertConfig
Long Identifier,Orleans.Transactions.TestKit,FaultInjectionTransactionalStateFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionStateAttribute.cs,Create,The length of the parameter deactivationTransactionalState is 30.
Long Identifier,Orleans.Transactions.TestKit,TransactionTestRunnerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TransactionTestRunnerBase.cs,RandomTestGrain,The length of the parameter transactionTestGrainClassNames is 30.
Long Identifier,Orleans.Transactions.TestKit,TransactionTestRunnerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TransactionTestRunnerBase.cs,RandomTestGrain,The length of the parameter transactionTestGrainClassNames is 30.
Long Statement,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Recurse,The length of the statement  "            logger.LogTrace($"g{MyNumber} {TransactionContext.CurrentTransactionId} {stack} Recurse {count} {(parallel ? "par" : "seq")}"); " is 127.
Long Statement,Orleans.Transactions.TestKit,FaultInjectionAzureTableTransactionStateStorageFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionAzureTableTransactionStateStorage.cs,Create,The length of the statement  "            var azureFactory = ActivatorUtilities.CreateInstance<AzureTableTransactionalStateStorageFactory>(services' name' optionsMonitor.Get(name)); " is 139.
Long Statement,Orleans.Transactions.TestKit,FaultInjectionTransactionManager<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionReource.cs,PrepareAndCommit,The length of the statement  "                this.logger.Info($"Grain {this.context.GrainInstance} injected fault before transaction {transactionId} PrepareAndCommit' " + " is 125.
Long Statement,Orleans.Transactions.TestKit,FaultInjectionTransactionManager<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionReource.cs,PrepareAndCommit,The length of the statement  "            var result = await this.tm.PrepareAndCommit(transactionId' accessCount' timeStamp' writeParticipants' totalParticipants); " is 121.
Long Statement,Orleans.Transactions.TestKit,FaultInjectionTransactionManager<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionReource.cs,PrepareAndCommit,The length of the statement  "            if (this.faultInjectionControl?.FaultInjectionPhase == TransactionFaultInjectPhase.AfterPrepareAndCommit && this.faultInjectionControl.FaultInjectionType == FaultInjectionType.Deactivation) " is 189.
Long Statement,Orleans.Transactions.TestKit,FaultInjectionTransactionManager<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionReource.cs,PrepareAndCommit,The length of the statement  "                this.logger.Info($"Grain {this.context.GrainInstance} deactivating after transaction {transactionId} PrepareAndCommit"); " is 120.
Long Statement,Orleans.Transactions.TestKit,FaultInjectionTransactionalState<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionState.cs,SetupResourceFactory,The length of the statement  "            context.RegisterResourceFactory<ITransactionalResource>(stateName' () => new FaultInjectionTransactionalResource<TState>(this.faultInjector' FaultInjectionControl' new TransactionalResource<TState>(queue)' context' logger'  grainRuntime)); " is 239.
Long Statement,Orleans.Transactions.TestKit,FaultInjectionTransactionalState<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionState.cs,SetupResourceFactory,The length of the statement  "            context.RegisterResourceFactory<ITransactionManager>(stateName' () => new FaultInjectionTransactionManager<TState>(this.faultInjector' FaultInjectionControl' new TransactionManager<TState>(queue)' context' logger' grainRuntime)); " is 229.
Long Statement,Orleans.Transactions.TestKit,FaultInjectionTransactionalStateFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionStateAttribute.cs,Create,The length of the statement  "            TransactionalState<TState> transactionalState = ActivatorUtilities.CreateInstance<TransactionalState<TState>>(this.context.ActivationServices' new TransactionalStateConfiguration(config)' this.context); " is 202.
Long Statement,Orleans.Transactions.TestKit,FaultInjectionTransactionalStateFactory,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionStateAttribute.cs,Create,The length of the statement  "            FaultInjectionTransactionalState<TState> deactivationTransactionalState = ActivatorUtilities.CreateInstance<FaultInjectionTransactionalState<TState>>(this.context.ActivationServices' transactionalState' this.context); " is 217.
Long Statement,Orleans.Transactions.TestKit,FaultInjectionTransactionalStateAttributeMapper,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\FaultInjectionTransactionStateAttribute.cs,Create,The length of the statement  "            IFaultInjectionTransactionalStateFactory factory = context.ActivationServices.GetRequiredService<IFaultInjectionTransactionalStateFactory>(); " is 141.
Long Statement,Orleans.Transactions.TestKit,SiloBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\HostingExtensions.cs,UseControlledFaultInjectionTransactionState,The length of the statement  "            services.AddSingleton<IAttributeToFactoryMapper<FaultInjectionTransactionalStateAttribute>' FaultInjectionTransactionalStateAttributeMapper>(); " is 143.
Long Statement,Orleans.Transactions.TestKit,SiloBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\HostingExtensions.cs,AddFaultInjectionAzureTableTransactionalStateStorage,The length of the statement  "            return builder.AddFaultInjectionAzureTableTransactionalStateStorage(ProviderConstants.DEFAULT_STORAGE_PROVIDER_NAME' configureOptions); " is 135.
Long Statement,Orleans.Transactions.TestKit,SiloBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\HostingExtensions.cs,AddFaultInjectionAzureTableTransactionalStateStorage,The length of the statement  "            return builder.ConfigureServices(services => services.AddFaultInjectionAzureTableTransactionalStateStorage(name' ob => ob.Configure(configureOptions))); " is 152.
Long Statement,Orleans.Transactions.TestKit,SiloBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\HostingExtensions.cs,AddFaultInjectionAzureTableTransactionalStateStorage,The length of the statement  "            services.TryAddSingleton<ITransactionalStateStorageFactory>(sp => sp.GetServiceByName<ITransactionalStateStorageFactory>(ProviderConstants.DEFAULT_STORAGE_PROVIDER_NAME)); " is 171.
Long Statement,Orleans.Transactions.TestKit,SiloBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\HostingExtensions.cs,AddFaultInjectionAzureTableTransactionalStateStorage,The length of the statement  "            services.AddSingletonNamedService<ITransactionalStateStorageFactory>(name' FaultInjectionAzureTableTransactionStateStorageFactory.Create); " is 138.
Long Statement,Orleans.Transactions.TestKit,SiloBuilderExtensions,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\ControlledInjection\HostingExtensions.cs,AddFaultInjectionAzureTableTransactionalStateStorage,The length of the statement  "            services.AddSingletonNamedService<ILifecycleParticipant<ISiloLifecycle>>(name' (s' n) => (ILifecycleParticipant<ISiloLifecycle>)s.GetRequiredServiceByName<ITransactionalStateStorageFactory>(n)); " is 194.
Long Statement,Orleans.Transactions.TestKit,ConsistencyTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ConsistencyTransactionTestRunner.cs,RandomizedConsistency,The length of the statement  "            var harness = new ConsistencyTestHarness(grainFactory' numGrains' random.Next()' avoidDeadlocks' avoidTimeouts' readwrite' StorageErrorInjectionActive); " is 152.
Long Statement,Orleans.Transactions.TestKit,ControlledFaultInjectionTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ControlledFaultInjectionTransactionTestRunner.cs,SingleGrainWriteTransaction,The length of the statement  "            IFaultInjectionTransactionTestGrain grain = this.grainFactory.GetGrain<IFaultInjectionTransactionTestGrain>(Guid.NewGuid()); " is 124.
Long Statement,Orleans.Transactions.TestKit,ControlledFaultInjectionTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ControlledFaultInjectionTransactionTestRunner.cs,MultiGrainWriteTransaction_FaultInjection,The length of the statement  "            var faultInjectionControl = new FaultInjectionControl() { FaultInjectionPhase = injectionPhase' FaultInjectionType = injectionType }; " is 133.
Long Statement,Orleans.Transactions.TestKit,ControlledFaultInjectionTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ControlledFaultInjectionTransactionTestRunner.cs,MultiGrainWriteTransaction_FaultInjection,The length of the statement  "            IFaultInjectionTransactionCoordinatorGrain coordinator = this.grainFactory.GetGrain<IFaultInjectionTransactionCoordinatorGrain>(Guid.NewGuid()); " is 144.
Long Statement,Orleans.Transactions.TestKit,ControlledFaultInjectionTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ControlledFaultInjectionTransactionTestRunner.cs,MultiGrainWriteTransaction_FaultInjection,The length of the statement  "            if (injectionPhase == TransactionFaultInjectPhase.BeforeConfirm || injectionPhase == TransactionFaultInjectPhase.AfterConfirm) " is 126.
Long Statement,Orleans.Transactions.TestKit,ControlledFaultInjectionTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ControlledFaultInjectionTransactionTestRunner.cs,MultiGrainWriteTransaction_FaultInjection,The length of the statement  "                if (injectionPhase == TransactionFaultInjectPhase.BeforeConfirm || injectionPhase == TransactionFaultInjectPhase.AfterConfirm) " is 126.
Long Statement,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,MakeParticipantId,The length of the statement  "                                    // (GrainReference) grainFactory.GetGrain<ITransactionTestGrain>(Guid.NewGuid()' TransactionTestConstants.SingleStateTransactionalGrain)' " is 137.
Long Statement,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,PrepareOne,The length of the statement  "            etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate }' null' null); " is 122.
Long Statement,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ConfirmOne,The length of the statement  "                etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate }' null' null); " is 122.
Long Statement,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,CancelOne,The length of the statement  "            etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate }' null' null); " is 122.
Long Statement,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ReplaceOne,The length of the statement  "            etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate1 }' null' null); " is 123.
Long Statement,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ReplaceOne,The length of the statement  "            etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate2 }' null' null); " is 123.
Long Statement,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ConfirmOneAndCancelOne,The length of the statement  "            etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate1' pendingstate2 }' null' null); " is 138.
Long Statement,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The length of the statement  "            etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate1' pendingstate2' pendingstate3a' pendingstate4a}' null' null); " is 169.
Long Statement,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The length of the statement  "            etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate3b' pendingstate4b' pendingstate5' pendingstate6' pendingstate7' pendingstate8 }' 6' null); " is 197.
Long Statement,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The length of the statement  "            etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate1' pendingstate2' pendingstate3a' pendingstate4a' pendingstate5' pendingstate6' pendingstate7' pendingstate8 }' null' null); " is 230.
Long Statement,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The length of the statement  "            etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate3b' pendingstate4b }' 3' 4); " is 134.
Long Statement,Orleans.Transactions.TestKit,TransactionRecoveryTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionRecoveryTestsRunner.cs,TransactionWillRecoverAfterRandomSiloFailure,The length of the statement  "                .Select(grainId => new ExpectedGrainActivity(grainId' TestGrain<ITransactionalBitArrayGrain>(transactionTestGrainClassName' grainId))) " is 134.
Long Statement,Orleans.Transactions.TestKit,TransactionRecoveryTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionRecoveryTestsRunner.cs,TransactionWillRecoverAfterRandomSiloFailure,The length of the statement  "            this.Log($"Warmup transaction succeeded. {(gracefulShutdown ? "Stopping" : "Killing")} silo {siloToTerminate.SiloAddress} ({siloToTerminate.Name}) and continuing"); " is 164.
Long Statement,Orleans.Transactions.TestKit,TransactionRecoveryTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionRecoveryTestsRunner.cs,TransactionWillRecoverAfterRandomSiloFailure,The length of the statement  "            await TestingUtils.WaitUntilAsync(lastTry => CheckTxResult(transactionGroupsRef' getIndex' lastTry)' RecoveryTimeout' RetryDelay); " is 130.
Long Statement,Orleans.Transactions.TestKit,TransactionRecoveryTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionRecoveryTestsRunner.cs,RunAllTxReportFailed,The length of the statement  "                List<ExpectedGrainActivity>[] failedGroups = tasks.Select((task' i) => new { task' i }).Where(t => t.task.IsFaulted).Select(t => transactionGroups[t.i]).ToArray(); " is 163.
Long Statement,Orleans.Transactions.TestKit,TransactionRecoveryTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionRecoveryTestsRunner.cs,RunAllTxReportFailed,The length of the statement  "                this.Log($"Some transactions failed. Index: {index}. {failedGroups.Length} out of {tasks.Count} failed. Failed groups: {string.Join("' "' failedGroups.Select(transactionGroup => string.Join(":"' transactionGroup.Select(a => a.GrainId))))}"); " is 241.
Long Statement,Orleans.Transactions.TestKit,TransactionRecoveryTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionRecoveryTestsRunner.cs,SetBit,The length of the statement  "                await this.grainFactory.GetGrain<ITransactionCoordinatorGrain>(Guid.NewGuid()).MultiGrainSetBit(grains.Select(v => v.Grain).ToList()' index); " is 141.
Long Statement,Orleans.Transactions.TestKit,TransactionTestRunnerBase,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TransactionTestRunnerBase.cs,TestGrain,The length of the statement  "            return grainFactory.GetGrain<TGrainInterface>(id' $"{typeof(TGrainInterface).Namespace}.{transactionTestGrainClassName}"); " is 122.
Complex Conditional,Orleans.Transactions.TestKit,ConsistencyTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ConsistencyTransactionTestRunner.cs,RandomizedConsistency,The conditional expression  "!StorageErrorInjectionActive                  && avoidDeadlocks                  && (readwrite == ReadWriteDetermination.PerGrain || readwrite == ReadWriteDetermination.PerTransaction)"  is complex.
Empty Catch Block,Orleans.Transactions.TestKit,GrainFaultTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GrainFaultTransactionTestRunner.cs,TestAfterDustSettles,The method has an empty catch block.
Empty Catch Block,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,WrongEtags,The method has an empty catch block.
Empty Catch Block,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,WrongEtags,The method has an empty catch block.
Magic Number,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Run,The following statement contains a magic number: switch (random.Next(2))                  {                      case 0:                          return await Recurse(options' depth' stack' random' 10' ! options.AvoidDeadlocks' maxgrain' stopAfter);                      case 1:                          return await Recurse(options' depth' stack' random' 10' false' maxgrain' stopAfter);                      case 2:                          return await Recurse(options' depth' stack' random' 3' false' maxgrain' stopAfter);                  }
Magic Number,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Run,The following statement contains a magic number: switch (random.Next(2))                  {                      case 0:                          return await Recurse(options' depth' stack' random' 10' ! options.AvoidDeadlocks' maxgrain' stopAfter);                      case 1:                          return await Recurse(options' depth' stack' random' 10' false' maxgrain' stopAfter);                      case 2:                          return await Recurse(options' depth' stack' random' 3' false' maxgrain' stopAfter);                  }
Magic Number,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Run,The following statement contains a magic number: switch (random.Next(2))                  {                      case 0:                          return await Recurse(options' depth' stack' random' 10' ! options.AvoidDeadlocks' maxgrain' stopAfter);                      case 1:                          return await Recurse(options' depth' stack' random' 10' false' maxgrain' stopAfter);                      case 2:                          return await Recurse(options' depth' stack' random' 3' false' maxgrain' stopAfter);                  }
Magic Number,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Run,The following statement contains a magic number: switch (random.Next(2))                  {                      case 0:                          return await Recurse(options' depth' stack' random' 10' ! options.AvoidDeadlocks' maxgrain' stopAfter);                      case 1:                          return await Recurse(options' depth' stack' random' 10' false' maxgrain' stopAfter);                      case 2:                          return await Recurse(options' depth' stack' random' 3' false' maxgrain' stopAfter);                  }
Magic Number,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Run,The following statement contains a magic number: switch (random.Next(2))                  {                      case 0:                          return await Recurse(options' depth' stack' random' 10' ! options.AvoidDeadlocks' maxgrain' stopAfter);                      case 1:                          return await Recurse(options' depth' stack' random' 10' false' maxgrain' stopAfter);                      case 2:                          return await Recurse(options' depth' stack' random' 3' false' maxgrain' stopAfter);                  }
Magic Number,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Run,The following statement contains a magic number: var whethertoreadorwrite =                    (options.ReadWrite == ReadWriteDetermination.PerTransaction) ? new Random(options.RandomSeed + txhash)                  : (options.ReadWrite == ReadWriteDetermination.PerGrain) ? new Random(options.RandomSeed + txhash * 10000 + MyNumber)                  : random;
Magic Number,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Run,The following statement contains a magic number: switch (whethertoreadorwrite.Next(4))                  {                      case 0:                          logger.LogTrace($"g{MyNumber} {TransactionContext.CurrentTransactionId} {stack} Write");                          return await Write();                      default:                          logger.LogTrace($"g{MyNumber} {TransactionContext.CurrentTransactionId} {stack} Read");                          return await Read();                  }
Magic Number,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Write,The following statement contains a magic number: return data.PerformUpdate((state) =>              {                  var observe = new Observation[2];                  observe[0] = new Observation()                  {                      ExecutingTx = txid'                      WriterTx = state.WriterTx'                      Grain = MyNumber'                      SeqNo = state.SeqNo                  };                  state.WriterTx = txid;                  state.SeqNo++;                  observe[1] = new Observation()                  {                      ExecutingTx = txid'                      WriterTx = state.WriterTx'                      Grain = MyNumber'                      SeqNo = state.SeqNo                  };                  return observe;              });
Magic Number,Orleans.Transactions.TestKit.Consistency,ConsistencyTestHarness,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestHarness.cs,ConsistencyTestHarness,The following statement contains a magic number: this.options = new ConsistencyTestOptions()              {                  AvoidDeadlocks = avoidDeadlocks'                  ReadWrite = readWrite'                  MaxDepth = 5'                  NumGrains = numGrains'                  RandomSeed = seed'                  AvoidTimeouts = avoidTimeouts'                  GrainOffset = (DateTime.UtcNow.Ticks & 0xFFFFFFFF) * ConsistencyTestOptions.MaxGrains'              };
Magic Number,Orleans.Transactions.TestKit.Consistency,ConsistencyTestHarness,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestHarness.cs,RunRandomTransactionSequence,The following statement contains a magic number: var stopAfter = options.AvoidTimeouts ? DateTime.UtcNow + TimeSpan.FromSeconds(22) : DateTime.MaxValue;
Magic Number,Orleans.Transactions.TestKit,RandomErrorInjector,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\RandomInjection\RandomErrorInjector.cs,RandomErrorInjector,The following statement contains a magic number: conflictProbability = injectionProbability / 5;
Magic Number,Orleans.Transactions.TestKit,RandomErrorInjector,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\RandomInjection\RandomErrorInjector.cs,RandomErrorInjector,The following statement contains a magic number: beforeProbability = 2 * injectionProbability / 5;
Magic Number,Orleans.Transactions.TestKit,RandomErrorInjector,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\RandomInjection\RandomErrorInjector.cs,RandomErrorInjector,The following statement contains a magic number: beforeProbability = 2 * injectionProbability / 5;
Magic Number,Orleans.Transactions.TestKit,RandomErrorInjector,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\RandomInjection\RandomErrorInjector.cs,RandomErrorInjector,The following statement contains a magic number: afterProbability = 2 * injectionProbability / 5;
Magic Number,Orleans.Transactions.TestKit,RandomErrorInjector,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\FaultInjection\RandomInjection\RandomErrorInjector.cs,RandomErrorInjector,The following statement contains a magic number: afterProbability = 2 * injectionProbability / 5;
Magic Number,Orleans.Transactions.TestKit,RemoteCommitService,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Grains\RemoteCommitService.cs,Pass,The following statement contains a magic number: await Task.Delay(30);
Magic Number,Orleans.Transactions.TestKit,RemoteCommitService,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Grains\RemoteCommitService.cs,Fail,The following statement contains a magic number: await Task.Delay(30);
Magic Number,Orleans.Transactions.TestKit,RemoteCommitService,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Grains\RemoteCommitService.cs,Throw,The following statement contains a magic number: await Task.Delay(30);
Magic Number,Orleans.Transactions.TestKit,TransactionCoordinatorGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Grains\TransactionCoordinatorGrain.cs,OrphanCallTransaction,The following statement contains a magic number: Task t = grain.Add(1000);
Magic Number,Orleans.Transactions.TestKit,ConsistencyTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ConsistencyTransactionTestRunner.cs,RandomizedConsistency,The following statement contains a magic number: var random = new Random(scale + numGrains * 1000 + (avoidDeadlocks ? 666 : 333) + ((int)readwrite) * 123976);
Magic Number,Orleans.Transactions.TestKit,ConsistencyTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ConsistencyTransactionTestRunner.cs,RandomizedConsistency,The following statement contains a magic number: var random = new Random(scale + numGrains * 1000 + (avoidDeadlocks ? 666 : 333) + ((int)readwrite) * 123976);
Magic Number,Orleans.Transactions.TestKit,ConsistencyTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ConsistencyTransactionTestRunner.cs,RandomizedConsistency,The following statement contains a magic number: var random = new Random(scale + numGrains * 1000 + (avoidDeadlocks ? 666 : 333) + ((int)readwrite) * 123976);
Magic Number,Orleans.Transactions.TestKit,ConsistencyTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ConsistencyTransactionTestRunner.cs,RandomizedConsistency,The following statement contains a magic number: var random = new Random(scale + numGrains * 1000 + (avoidDeadlocks ? 666 : 333) + ((int)readwrite) * 123976);
Magic Number,Orleans.Transactions.TestKit,ConsistencyTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ConsistencyTransactionTestRunner.cs,RandomizedConsistency,The following statement contains a magic number: var tolerateGenericTimeouts = StorageErrorInjectionActive || (scale >= 3 && !avoidTimeouts);
Magic Number,Orleans.Transactions.TestKit,ControlledFaultInjectionTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ControlledFaultInjectionTransactionTestRunner.cs,SingleGrainReadTransaction,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,ControlledFaultInjectionTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ControlledFaultInjectionTransactionTestRunner.cs,SingleGrainWriteTransaction,The following statement contains a magic number: const int delta = 5;
Magic Number,Orleans.Transactions.TestKit,ControlledFaultInjectionTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ControlledFaultInjectionTransactionTestRunner.cs,MultiGrainWriteTransaction_FaultInjection,The following statement contains a magic number: const int setval = 5;
Magic Number,Orleans.Transactions.TestKit,ControlledFaultInjectionTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ControlledFaultInjectionTransactionTestRunner.cs,MultiGrainWriteTransaction_FaultInjection,The following statement contains a magic number: const int addval = 7;
Magic Number,Orleans.Transactions.TestKit,ControlledFaultInjectionTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ControlledFaultInjectionTransactionTestRunner.cs,MultiGrainWriteTransaction_FaultInjection,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(30));
Magic Number,Orleans.Transactions.TestKit,ControlledFaultInjectionTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\ControlledFaultInjectionTransactionTestRunner.cs,MultiGrainWriteTransaction_FaultInjection,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(30));
Magic Number,Orleans.Transactions.TestKit,DisabledTransactionsTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\DisabledTransactionsTestRunner.cs,TransactionGrainsThrowWhenTransactions,The following statement contains a magic number: const int delta = 5;
Magic Number,Orleans.Transactions.TestKit,DisabledTransactionsTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\DisabledTransactionsTestRunner.cs,MultiTransactionGrainsThrowWhenTransactions,The following statement contains a magic number: const int delta = 5;
Magic Number,Orleans.Transactions.TestKit,GoldenPathTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GoldenPathTransactionTestRunner.cs,SingleGrainWriteTransaction,The following statement contains a magic number: const int delta = 5;
Magic Number,Orleans.Transactions.TestKit,GoldenPathTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GoldenPathTransactionTestRunner.cs,MultiGrainWriteTransaction,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,GoldenPathTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GoldenPathTransactionTestRunner.cs,MultiGrainReadWriteTransaction,The following statement contains a magic number: const int delta = 5;
Magic Number,Orleans.Transactions.TestKit,GoldenPathTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GoldenPathTransactionTestRunner.cs,RepeatGrainReadWriteTransaction,The following statement contains a magic number: const int repeat = 10;
Magic Number,Orleans.Transactions.TestKit,GoldenPathTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GoldenPathTransactionTestRunner.cs,RepeatGrainReadWriteTransaction,The following statement contains a magic number: const int delta = 5;
Magic Number,Orleans.Transactions.TestKit,GoldenPathTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GoldenPathTransactionTestRunner.cs,RepeatGrainReadWriteTransaction,The following statement contains a magic number: int expected = delta * (int)Math.Pow(2'i+1);
Magic Number,Orleans.Transactions.TestKit,GoldenPathTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GoldenPathTransactionTestRunner.cs,MultiWriteToSingleGrainTransaction,The following statement contains a magic number: const int delta = 5;
Magic Number,Orleans.Transactions.TestKit,GoldenPathTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GoldenPathTransactionTestRunner.cs,MultiWriteToSingleGrainTransaction,The following statement contains a magic number: const int concurrentWrites = 3;
Magic Number,Orleans.Transactions.TestKit,GoldenPathTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GoldenPathTransactionTestRunner.cs,RWRWTest,The following statement contains a magic number: const int delta = 5;
Magic Number,Orleans.Transactions.TestKit,GoldenPathTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GoldenPathTransactionTestRunner.cs,WRWRTest,The following statement contains a magic number: const int delta = 5;
Magic Number,Orleans.Transactions.TestKit,GrainFaultTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GrainFaultTransactionTestRunner.cs,AbortTransactionOnExceptions,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,GrainFaultTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GrainFaultTransactionTestRunner.cs,MultiGrainAbortTransactionOnExceptions,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,GrainFaultTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GrainFaultTransactionTestRunner.cs,AbortTransactionExceptionInnerExceptionOnlyContainsOneRootCauseException,The following statement contains a magic number: const int throwGrainCount = 3;
Magic Number,Orleans.Transactions.TestKit,GrainFaultTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GrainFaultTransactionTestRunner.cs,AbortTransactionExceptionInnerExceptionOnlyContainsOneRootCauseException,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,GrainFaultTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GrainFaultTransactionTestRunner.cs,AbortTransactionOnOrphanCalls,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,GrainFaultTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\GrainFaultTransactionTestRunner.cs,TestAfterDustSettles,The following statement contains a magic number: int tries = 2;
Magic Number,Orleans.Transactions.TestKit,TocFaultTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TocFaultTransactionTestRunner.cs,MultiGrainWriteTransactionWithCommitFailure,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,TocFaultTransactionTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TocFaultTransactionTestRunner.cs,MultiGrainWriteTransactionWithCommitException,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,TocGoldenPathTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TOCGoldenPathTestRunner.cs,MultiGrainWriteTransaction,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,StoreWithoutChanges,The following statement contains a magic number: var cr = MakeCommitRecords(2' 2);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,StoreWithoutChanges,The following statement contains a magic number: var cr = MakeCommitRecords(2' 2);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,WrongEtags,The following statement contains a magic number: var cr = MakeCommitRecords(2'2);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,WrongEtags,The following statement contains a magic number: var cr = MakeCommitRecords(2'2);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,WrongEtags,The following statement contains a magic number: var metadata2 = new TransactionalStateMetaData() { TimeStamp = now2' CommitRecords = MakeCommitRecords(3'3) };
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,WrongEtags,The following statement contains a magic number: var metadata2 = new TransactionalStateMetaData() { TimeStamp = now2' CommitRecords = MakeCommitRecords(3'3) };
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,PrepareOne,The following statement contains a magic number: var expectedState = this.stateFactory(123);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ConfirmOne,The following statement contains a magic number: var expectedState = this.stateFactory(123);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,CancelOne,The following statement contains a magic number: var pendingstate = MakePendingState(1' this.stateFactory(123)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ReplaceOne,The following statement contains a magic number: var expectedState1 = this.stateFactory(123);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ReplaceOne,The following statement contains a magic number: var expectedState2 = this.stateFactory(456);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ConfirmOneAndCancelOne,The following statement contains a magic number: var expectedState = this.stateFactory(123);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ConfirmOneAndCancelOne,The following statement contains a magic number: var pendingstate2 = MakePendingState(2' this.stateFactory(456)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ConfirmOneAndCancelOne,The following statement contains a magic number: var pendingstate2 = MakePendingState(2' this.stateFactory(456)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,PrepareMany,The following statement contains a magic number: expectedStates.Add(this.stateFactory(i * 1000));
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ConfirmMany,The following statement contains a magic number: expectedStates.Add(this.stateFactory(i * 1000));
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,CancelMany,The following statement contains a magic number: expectedStates.Add(this.stateFactory(i * 1000));
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ReplaceMany,The following statement contains a magic number: expectedStates1.Add(this.stateFactory(i * 1000 + 1));
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ReplaceMany,The following statement contains a magic number: expectedStates2.Add(this.stateFactory(i * 1000));
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate1 = MakePendingState(1' this.stateFactory(11)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate2 = MakePendingState(2' this.stateFactory(22)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate2 = MakePendingState(2' this.stateFactory(22)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate3a = MakePendingState(3' this.stateFactory(333)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate3a = MakePendingState(3' this.stateFactory(333)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate4a = MakePendingState(4' this.stateFactory(444)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate4a = MakePendingState(4' this.stateFactory(444)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate3b = MakePendingState(3' this.stateFactory(33)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate3b = MakePendingState(3' this.stateFactory(33)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate4b = MakePendingState(4' this.stateFactory(44)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate4b = MakePendingState(4' this.stateFactory(44)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate5 = MakePendingState(5' this.stateFactory(55)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate5 = MakePendingState(5' this.stateFactory(55)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var expectedState6 = this.stateFactory(66);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate6 = MakePendingState(6' expectedState6' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var expectedState7 = this.stateFactory(77);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate7 = MakePendingState(7' expectedState7' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var expectedState8 = this.stateFactory(88);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: var pendingstate8 = MakePendingState(8' expectedState8' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate3b' pendingstate4b' pendingstate5' pendingstate6' pendingstate7' pendingstate8 }' 6' null);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: loadresponse.CommittedSequenceId.Should().Be(6);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: loadresponse.PendingStates.Count.Should().Be(2);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: loadresponse.PendingStates[0].SequenceId.Should().Be(7);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,GrowingBatch,The following statement contains a magic number: loadresponse.PendingStates[1].SequenceId.Should().Be(8);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate1 = MakePendingState(1' this.stateFactory(11)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate2 = MakePendingState(2' this.stateFactory(22)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate2 = MakePendingState(2' this.stateFactory(22)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate3a = MakePendingState(3' this.stateFactory(333)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate3a = MakePendingState(3' this.stateFactory(333)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate4a = MakePendingState(4' this.stateFactory(444)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate4a = MakePendingState(4' this.stateFactory(444)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate5 = MakePendingState(5' this.stateFactory(55)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate5 = MakePendingState(5' this.stateFactory(55)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate6 = MakePendingState(6' this.stateFactory(66)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate6 = MakePendingState(6' this.stateFactory(66)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate7 = MakePendingState(7' this.stateFactory(77)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate7 = MakePendingState(7' this.stateFactory(77)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate8 = MakePendingState(8' this.stateFactory(88)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate8 = MakePendingState(8' this.stateFactory(88)' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var expectedState3b = this.stateFactory(33);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate3b = MakePendingState(3' expectedState3b' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var expectedState4b = this.stateFactory(44);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: var pendingstate4b = MakePendingState(4' expectedState4b' false);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate3b' pendingstate4b }' 3' 4);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: etag = await stateStorage.Store(etag' metadata' new List<PendingTransactionState<TState>>() { pendingstate3b' pendingstate4b }' 3' 4);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: loadresponse.CommittedSequenceId.Should().Be(3);
Magic Number,Orleans.Transactions.TestKit,TransactionalStateStorageTestRunner<TState>,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionalStateStorageTestRunner.cs,ShrinkingBatch,The following statement contains a magic number: loadresponse.PendingStates[0].SequenceId.Should().Be(4);
Magic Number,Orleans.Transactions.TestKit,TransactionConcurrencyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionConcurrencyTestRunner.cs,SingleSharedGrainTest,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,TransactionConcurrencyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionConcurrencyTestRunner.cs,SingleSharedGrainTest,The following statement contains a magic number: actual.FirstOrDefault().ShouldBeEquivalentTo(expected * 2);
Magic Number,Orleans.Transactions.TestKit,TransactionConcurrencyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionConcurrencyTestRunner.cs,TransactionChainTest,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,TransactionConcurrencyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionConcurrencyTestRunner.cs,TransactionChainTest,The following statement contains a magic number: actual.FirstOrDefault().ShouldBeEquivalentTo(expected*2);
Magic Number,Orleans.Transactions.TestKit,TransactionConcurrencyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionConcurrencyTestRunner.cs,TransactionChainTest,The following statement contains a magic number: actual.FirstOrDefault().ShouldBeEquivalentTo(expected*2);
Magic Number,Orleans.Transactions.TestKit,TransactionConcurrencyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionConcurrencyTestRunner.cs,TransactionChainTest,The following statement contains a magic number: actual.FirstOrDefault().ShouldBeEquivalentTo(expected*2);
Magic Number,Orleans.Transactions.TestKit,TransactionConcurrencyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionConcurrencyTestRunner.cs,TransactionTreeTest,The following statement contains a magic number: const int expected = 5;
Magic Number,Orleans.Transactions.TestKit,TransactionConcurrencyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionConcurrencyTestRunner.cs,TransactionTreeTest,The following statement contains a magic number: actual.FirstOrDefault().ShouldBeEquivalentTo(expected*2);
Magic Number,Orleans.Transactions.TestKit,TransactionConcurrencyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionConcurrencyTestRunner.cs,TransactionTreeTest,The following statement contains a magic number: actual.FirstOrDefault().ShouldBeEquivalentTo(expected*2);
Magic Number,Orleans.Transactions.TestKit,TransactionRecoveryTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionRecoveryTestsRunner.cs,TransactionWillRecoverAfterRandomSiloFailure,The following statement contains a magic number: List<ExpectedGrainActivity> txGrains = Enumerable.Range(0' concurrent * 2)                  .Select(i => Guid.NewGuid())                  .Select(grainId => new ExpectedGrainActivity(grainId' TestGrain<ITransactionalBitArrayGrain>(transactionTestGrainClassName' grainId)))                  .ToList();
Magic Number,Orleans.Transactions.TestKit,TransactionRecoveryTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionRecoveryTestsRunner.cs,TransactionWillRecoverAfterRandomSiloFailure,The following statement contains a magic number: List<ExpectedGrainActivity>[] transactionGroups = txGrains                  .Select((txGrain' i) => new { index = i' value = txGrain })                  .GroupBy(v => v.index / 2)                  .Select(g => g.Select(i => i.value).ToList())                  .ToArray();
Magic Number,Orleans.Transactions.TestKit,TransactionRecoveryTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionRecoveryTestsRunner.cs,TransactionWillRecoverAfterRandomSiloFailure,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(2));
Magic Number,Orleans.Transactions.TestKit,TransactionRecoveryTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\TestRunners\TransactionRecoveryTestsRunner.cs,TransactionWillRecoverAfterRandomSiloFailure,The following statement contains a magic number: var complete = await Task.WhenAny(succeeding' Task.Delay(TimeSpan.FromSeconds(30)));
Magic Number,Orleans.Transactions.TestKit.Correctnesss,BitArrayState,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Grains\MultiStateTransactionalBitArrayGrain.cs,ToString,The following statement contains a magic number: builder.Append(Reverse(Convert.ToString(v' 2)).PadRight(BitsInInt' '0'));
Missing Default,Orleans.Transactions.TestKit.Consistency,ConsistencyTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\src\Orleans.Transactions.TestkitBase\Consistency\ConsistencyTestGrain.cs,Run,The following switch statement is missing a default case: switch (random.Next(2))                  {                      case 0:                          return await Recurse(options' depth' stack' random' 10' ! options.AvoidDeadlocks' maxgrain' stopAfter);                      case 1:                          return await Recurse(options' depth' stack' random' 10' false' maxgrain' stopAfter);                      case 2:                          return await Recurse(options' depth' stack' random' 3' false' maxgrain' stopAfter);                  }
