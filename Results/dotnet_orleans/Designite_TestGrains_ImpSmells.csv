Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,UnitTests.Grains,MultipleConstructorsSimpleGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\MultipleConstructorsSimpleGrain.cs,,The length of the parameter MultipleConstructorsSimpleGrainPrefix is 37.
Long Identifier,UnitTests.Grains,MultipleConstructorsSimpleGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\MultipleConstructorsSimpleGrain.cs,,The length of the parameter ValueUsedByParameterlessConstructor is 35.
Long Identifier,UnitTests.Grains,ExplicitlyRegisteredSimpleDIGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SimpleDIGrain.cs,ExplicitlyRegisteredSimpleDIGrain,The length of the parameter numberOfReleasedInstancesBeforeThisActivation is 45.
Long Identifier,UnitTests.Grains,ExplicitlyRegisteredSimpleDIGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SimpleDIGrain.cs,,The length of the parameter numberOfReleasedInstancesBeforeThisActivation is 45.
Long Statement,UnitTests.Grains,CaterpillarGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\MethodInterceptionGrain.cs,Invoke,The length of the statement  "            if (ctx.ImplementationMethod.DeclaringType.IsInterface) throw new Exception("ImplementationMethod is an interface method"); " is 123.
Long Statement,UnitTests.Grains,CaterpillarGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\MethodInterceptionGrain.cs,Invoke,The length of the statement  "                    throw new Exception($"Expected method tags to be equal to request context tag: RequestContext: {tag} Interface: {ifaceTag} Implementation: {implTag}"); " is 151.
Long Statement,UnitTests.Grains,MultipleSubscriptionConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\MultipleSubscriptionConsumerGrain.cs,GetNumberConsumed,The length of the statement  "                Utils.EnumerableToString(consumedMessageCounts' kvp => String.Format("Consumer: {0} -> count: {1}"' kvp.Key.HandleId.ToString()' kvp.Value.ToString())))); " is 154.
Long Statement,UnitTests.Grains,MultipleSubscriptionConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\MultipleSubscriptionConsumerGrain.cs,GetNumberConsumed,The length of the statement  "            return Task.FromResult(consumedMessageCounts.ToDictionary(kvp => kvp.Key' kvp => Tuple.Create(kvp.Value.Item1.Value' kvp.Value.Item2.Value))); " is 142.
Long Statement,UnitTests.Grains,ObserverManager<TAddress;TObserver>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ObserverManager.cs,Subscribe,The length of the statement  "                    this.log.LogDebug(this.logPrefix + ": Updating entry for {0}/{1}. {2} total subscribers."' address' observer' this.observers.Count); " is 132.
Long Statement,UnitTests.Grains,ObserverManager<TAddress;TObserver>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ObserverManager.cs,Subscribe,The length of the statement  "                    this.log.LogDebug(this.logPrefix + ": Adding entry for {0}/{1}. {2} total subscribers after add."' address' observer' this.observers.Count); " is 140.
Long Statement,UnitTests.Grains,ObserverManager<TAddress;TObserver>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ObserverManager.cs,Unsubscribe,The length of the statement  "            this.log.LogDebug(this.logPrefix + ": Removed entry for {0}. {1} total subscribers after remove."' subscriber' this.observers.Count); " is 133.
Long Statement,UnitTests.Grains,ObserverManager<TAddress;TObserver>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ObserverManager.cs,Notify,The length of the statement  "                        this.log.LogDebug(this.logPrefix + ": Removing defunct entry for {0}. {1} total subscribers after remove."' observer' this.observers.Count); " is 140.
Long Statement,UnitTests.Grains,ObserverManager<TAddress;TObserver>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ObserverManager.cs,Notify,The length of the statement  "                        this.log.LogDebug(this.logPrefix + ": Removing defunct entry for {0}. {1} total subscribers after remove."' observer' this.observers.Count); " is 140.
Long Statement,UnitTests.Grains,RequestContextTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\RequestContextTestGrain.cs,E2ELegacyActivityId,The length of the statement  "            if (!RequestContext.PropagateActivityId) throw new InvalidOperationException("ActivityId propagation is not enabled on silo."); " is 127.
Long Statement,UnitTests.Grains,DIGrainWithInjectedServices,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SimpleDIGrain.cs,AssertCanResolveSameServiceInstances,The length of the statement  "            if (!ReferenceEquals(this.ServiceProvider.GetRequiredService<IInjectedService>()' this.injectedService)) throw new Exception("singleton not equal"); " is 148.
Long Statement,UnitTests.Grains,DIGrainWithInjectedServices,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SimpleDIGrain.cs,AssertCanResolveSameServiceInstances,The length of the statement  "            if (!ReferenceEquals(this.ServiceProvider.GetRequiredService<IInjectedScopedService>()' this.injectedScopedService)) throw new Exception("scoped not equal"); " is 157.
Long Statement,UnitTests.Grains,DIGrainWithInjectedServices,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SimpleDIGrain.cs,AssertCanResolveSameServiceInstances,The length of the statement  "            if (!ReferenceEquals(this.ServiceProvider.GetRequiredService<IGrainActivationContext>()' this.grainActivationContext)) throw new Exception("scoped grain activation context not equal"); " is 184.
Long Statement,UnitTests.Grains,SimpleGenericGrain<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SimpleGenericGrain.cs,CompareGrainReferences,The length of the statement  "                throw new Exception(String.Format("Case_3: 2 grain references are different' while should have been the same: gr1={0}' gr2={1}"' thisReference' clientReference)); " is 162.
Long Statement,UnitTests.Grains,SlowObserver<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SlowConsumingGrains\SlowConsumingGrain.cs,OnNextAsync,The length of the statement  "            this.slowConsumingGrain.ConsumerHandle = await this.slowConsumingGrain.ConsumerHandle.ResumeAsync(this.slowConsumingGrain.ConsumerObserver' token); " is 147.
Long Statement,UnitTests.Grains,SlowObserver<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SlowConsumingGrains\SlowConsumingGrain.cs,OnNextAsync,The length of the statement  "            this.logger.Info($"Consumer {this.GetHashCode()} OnNextAsync() received item {item.ToString()}' with NumConsumed {NumConsumed}"); " is 129.
Long Statement,UnitTests.Grains,StatelessWorkerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\StatelessWorkerGrain.cs,LongCall,The length of the statement  "                    logger.Info($"Start {LogFormatter.PrintDate(start)}' stop {LogFormatter.PrintDate(stop)}' duration {stop - start}. #act {count}"); " is 130.
Long Statement,Orleans.SqlUtils.StorageProvider.GrainClasses,CustomerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AdoNet\CustomerGrain.cs,SetRandomState,The length of the statement  "            State.BirthDate = new DateTime(_random.Next(40) + 1970' _random.Next(12) + 1'  _random.Next(28) + 1' 0' 0' 0' DateTimeKind.Utc); " is 128.
Long Statement,TestGrains,GeneratedEventCollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\GeneratedEventCollectorGrain.cs,OnNextAsync,The length of the statement  "            logger.Info("Received {Count} generated event.  Accumulated {Accumulated} events so far."' items.Count' this.accumulated); " is 122.
Long Statement,TestGrains,GeneratedEventCollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\GeneratedEventCollectorGrain.cs,OnNextAsync,The length of the statement  "            return reporter.ReportResult(this.GetPrimaryKey()' GeneratedStreamTestConstants.StreamProviderName' StreamNamespace' this.accumulated); " is 135.
Long Statement,TestGrains,GeneratedEventReporterGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\GeneratedEventReporterGrain.cs,ReportResult,The length of the statement  "            logger.Info("ReportResult. StreamProvider: {0}' StreamNamespace: {1}' StreamGuid: {2}' Count: {3}"' streamProvider' streamNamespace' streamGuid' count); " is 152.
Long Statement,TestGrains,ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain.cs,OnNextAsync,The length of the statement  "                logger.Info("Checkpointing: StreamGuid: {0}' StreamNamespace: {1}' SequenceToken: {2}' Accumulator: {3}."' State.StreamGuid' State.StreamNamespace' sequenceToken' State.Accumulator); " is 182.
Long Statement,TestGrains,ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain.cs,OnNextAsync,The length of the statement  "            logger.Info("Final checkpointing: StreamGuid: {0}' StreamNamespace: {1}' SequenceToken: {2}' Accumulator: {3}."' State.StreamGuid' State.StreamNamespace' sequenceToken' State.Accumulator); " is 188.
Long Statement,TestGrains,ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain.cs,OnNextAsync,The length of the statement  "            await reporter.ReportResult(this.GetPrimaryKey()' GeneratedStreamTestConstants.StreamProviderName' StreamNamespace' State.Accumulator); " is 135.
Long Statement,TestGrains,ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain.cs,OnErrorAsync,The length of the statement  "            logger.Info("Received an error on stream. StreamGuid: {0}' StreamNamespace: {1}' Exception: {2}."' State.StreamGuid' State.StreamNamespace' ex); " is 144.
Long Statement,TestGrains,ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain.cs,InjectFault,The length of the statement  "            logger.Info("InjectingFault: StreamGuid: {0}' StreamNamespace: {1}' SequenceToken: {2}' Accumulator: {3}."' State.StreamGuid' State.StreamNamespace' State.RecoveryToken' State.Accumulator); " is 189.
Long Statement,TestGrains,ImplicitSubscription_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_RecoverableStream_CollectorGrain.cs,OnNextAsync,The length of the statement  "                logger.Info("Checkpointing: StreamGuid: {0}' StreamNamespace: {1}' SequenceToken: {2}' Accumulator: {3}."' State.StreamGuid' State.StreamNamespace' sequenceToken' State.Accumulator); " is 182.
Long Statement,TestGrains,ImplicitSubscription_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_RecoverableStream_CollectorGrain.cs,OnNextAsync,The length of the statement  "            logger.Info("Final checkpointing: StreamGuid: {0}' StreamNamespace: {1}' SequenceToken: {2}' Accumulator: {3}."' State.StreamGuid' State.StreamNamespace' sequenceToken' State.Accumulator); " is 188.
Long Statement,TestGrains,ImplicitSubscription_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_RecoverableStream_CollectorGrain.cs,OnNextAsync,The length of the statement  "            await reporter.ReportResult(this.GetPrimaryKey()' GeneratedStreamTestConstants.StreamProviderName' StreamNamespace' State.Accumulator); " is 135.
Long Statement,TestGrains,ImplicitSubscription_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_RecoverableStream_CollectorGrain.cs,OnErrorAsync,The length of the statement  "            logger.Info("Received an error on stream. StreamGuid: {0}' StreamNamespace: {1}' Exception: {2}."' State.StreamGuid' State.StreamNamespace' ex); " is 144.
Long Statement,TestGrains,ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain.cs,OnNextAsync,The length of the statement  "                logger.Info("Checkpointing: StreamGuid: {0}' StreamNamespace: {1}' SequenceToken: {2}' Accumulator: {3}."' State.StreamGuid' State.StreamNamespace' sequenceToken' State.Accumulator); " is 182.
Long Statement,TestGrains,ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain.cs,OnNextAsync,The length of the statement  "            logger.Info("Final checkpointing: StreamGuid: {0}' StreamNamespace: {1}' SequenceToken: {2}' Accumulator: {3}."' State.StreamGuid' State.StreamNamespace' sequenceToken' State.Accumulator); " is 188.
Long Statement,TestGrains,ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain.cs,OnNextAsync,The length of the statement  "            await reporter.ReportResult(this.GetPrimaryKey()' GeneratedStreamTestConstants.StreamProviderName' StreamNamespace' State.Accumulator); " is 135.
Long Statement,TestGrains,ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain.cs,OnErrorAsync,The length of the statement  "            logger.Info("Received an error on stream. StreamGuid: {0}' StreamNamespace: {1}' Exception: {2}."' State.StreamGuid' State.StreamNamespace' ex); " is 144.
Long Statement,TestGrains,ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain.cs,InjectFault,The length of the statement  "            logger.Info("InjectingFault: StreamGuid: {0}' StreamNamespace: {1}' SequenceToken: {2}' Accumulator: {3}."' State.StreamGuid' State.StreamNamespace' State.RecoveryToken' State.Accumulator); " is 189.
Long Statement,TestGrains,MyGrainState,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\LogTestGrain.cs,ToString,The length of the statement  "            return string.Format("A={0} B={1} R={{{2}}}"' A' B' string.Join("' "' Reservations.Select(kvp => string.Format("{0}:{1}"' kvp.Key' kvp.Value)))); " is 145.
Long Statement,TestGrains,LogTestGrainCustomStorage,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\LogTestGrainVariations.cs,GetStorageGrain,The length of the statement  "                storagegrain = GrainFactory.GetGrain<ILogTestGrain>(this.GetPrimaryKeyLong()' "TestGrains.LogTestGrainSharedStateStorage"); " is 123.
Long Statement,TestGrains,LogTestGrainCustomStoragePrimaryCluster,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\LogTestGrainVariations.cs,ReadStateFromStorage,The length of the statement  "            return Task.FromResult(new KeyValuePair<int' MyGrainState>(version' (MyGrainState)this.serializationManager.DeepCopy(state))); " is 126.
Long Statement,TestGrains,StreamCheckpoint<TState>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\StreamCheckpoint.cs,IsDuplicate,The length of the statement  "            // If all we have is the start token' then we've not processed the first event' so we should process any event at or after the start token. " is 139.
Long Statement,UnitTests.Grains.ProgrammaticSubscribe,SubscribeGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ProgrammaticSubscribe\SubscribeGrain.cs,CanGetSubscriptionManager,The length of the statement  "            return Task.FromResult(this.ServiceProvider.GetServiceByName<IStreamProvider>(providerName).TryGetStreamSubscrptionManager(out manager)); " is 137.
Complex Conditional,UnitTests.Grains,ChainedGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ChainedGrain.cs,Validate,The conditional expression  "(nextIsSet && State.Next != null) || (!nextIsSet && State.Next == null)"  is complex.
Magic Number,UnitTests.Grains,AsyncSimpleGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AsyncSimpleGrain.cs,GetAxB_Async,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,UnitTests.Grains,AsyncSimpleGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AsyncSimpleGrain.cs,GetAxB_Async,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,UnitTests.Grains,AsyncSimpleGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AsyncSimpleGrain.cs,SetA_Async,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,UnitTests.Grains,AsyncSimpleGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AsyncSimpleGrain.cs,SetB_Async,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,UnitTests.Grains,AsyncSimpleGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AsyncSimpleGrain.cs,IncrementA_Async,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,UnitTests.Grains,AsyncSimpleGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AsyncSimpleGrain.cs,GetA_Async,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,UnitTests.Grains,CatalogTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\CatalogTestGrain.cs,OnActivateAsync,The following statement contains a magic number: return Task.Delay(TimeSpan.FromMilliseconds(50));
Magic Number,UnitTests.Grains,ClusterTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ClusterTestGrains.cs,EnableStreamNotifications,The following statement contains a magic number: Guid guid = new Guid((int) this.GetPrimaryKeyLong()' 0' 0' new byte[8]);
Magic Number,UnitTests.Grains,ConcreteGrainWith2GenericInterfaces,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ConcreteGrainsWithGenericInterfaces.cs,MapT2U,The following statement contains a magic number: return Task.FromResult(Convert.ToString(T * 10' 10));
Magic Number,UnitTests.Grains,ConcreteGrainWith2GenericInterfaces,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ConcreteGrainsWithGenericInterfaces.cs,MapT2U,The following statement contains a magic number: return Task.FromResult(Convert.ToString(T * 10' 10));
Magic Number,UnitTests.Grains,ConcreteGrainWith2GenericInterfaces,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ConcreteGrainsWithGenericInterfaces.cs,Transform,The following statement contains a magic number: T = T * 10;
Magic Number,UnitTests.Grains,ConcurrentGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ConcurrentGrain.cs,B,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,UnitTests.Grains,ConcurrentGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ConcurrentGrain.cs,ModifyReturnList_Test,The following statement contains a magic number: return Task<List<int>>.Factory.StartNew(() =>              {                  // just do a lot of modifications of the list                  for (int i = 0; i < 10; i++)                  {                      if (m_list.Count < 1000)                          m_list.Add(i);                  }                  for (int i = 0; i < 5; i++)                  {                      m_list.RemoveAt(0);                  }                  return m_list;              });
Magic Number,UnitTests.Grains,ConcurrentGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ConcurrentGrain.cs,ModifyReturnList_Test,The following statement contains a magic number: return Task<List<int>>.Factory.StartNew(() =>              {                  // just do a lot of modifications of the list                  for (int i = 0; i < 10; i++)                  {                      if (m_list.Count < 1000)                          m_list.Add(i);                  }                  for (int i = 0; i < 5; i++)                  {                      m_list.RemoveAt(0);                  }                  return m_list;              });
Magic Number,UnitTests.Grains,ConcurrentGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ConcurrentGrain.cs,ModifyReturnList_Test,The following statement contains a magic number: return Task<List<int>>.Factory.StartNew(() =>              {                  // just do a lot of modifications of the list                  for (int i = 0; i < 10; i++)                  {                      if (m_list.Count < 1000)                          m_list.Add(i);                  }                  for (int i = 0; i < 5; i++)                  {                      m_list.RemoveAt(0);                  }                  return m_list;              });
Magic Number,UnitTests.Grains,ConcurrentReentrantGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ConcurrentGrain.cs,TailCall_Resolve,The following statement contains a magic number: resolver.SetResult(7);
Magic Number,UnitTests.Grains,ConcurrentReentrantGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ConcurrentGrain.cs,TailCall_Resolve,The following statement contains a magic number: return Task.FromResult(8);
Magic Number,UnitTests.Grains,DeadlockGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\DeadlockGrain.cs,CallNext,The following statement contains a magic number: bool call_1 = (currCallIndex % 2) == 1;
Magic Number,UnitTests.Grains,LongRunningTaskGrain<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\GenericGrains.cs,CallOtherCancellationTokenCallbackResolve,The following statement contains a magic number: await Task.Delay(300);
Magic Number,UnitTests.Grains,LivenessTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\LivenessTestGrain.cs,OnActivateAsync,The following statement contains a magic number: this.GetPrimaryKeyLong() == -2
Magic Number,UnitTests.Grains,LivenessTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\LivenessTestGrain.cs,StartTimer,The following statement contains a magic number: base.RegisterTimer(TimerTick' null' TimeSpan.Zero' TimeSpan.FromSeconds(10));
Magic Number,UnitTests.Grains,MessageSerializationGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\MessageSerializationGrain.cs,SendUndeserializableToOtherSilo,The following statement contains a magic number: await otherGrain.SendUndeserializable(new UndeserializableType(35));
Magic Number,UnitTests.Grains,GrainCallFilterTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\MethodInterceptionGrain.cs,CallWithBadInterceptors,The following statement contains a magic number: this.context.Arguments[2] = false;
Magic Number,UnitTests.Grains,FeaturePopulatorCodeGenTestClass,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\MultipleGenericParameterInterfaceImpl.cs,Product,The following statement contains a magic number: await Task.Delay(100);
Magic Number,UnitTests.Grains,MayInterleavePredicateGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ReentrantGrain.cs,MayInterleave,The following statement contains a magic number: req.Arguments.Length == 2
Magic Number,UnitTests.Grains,ReentrantSelfManagedGrain1,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ReentrantGrain.cs,Ping,The following statement contains a magic number: foo > 100000
Magic Number,UnitTests.Grains,NonReentrantSelfManagedGrain1,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ReentrantGrain.cs,Ping,The following statement contains a magic number: foo > 100000
Magic Number,UnitTests.Grains,SampleStreaming_ProducerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SampleStreamingGrain.cs,StartPeriodicProducing,The following statement contains a magic number: producerTimer = base.RegisterTimer(TimerCallback' null' TimeSpan.Zero' TimeSpan.FromMilliseconds(10));
Magic Number,UnitTests.Grains,SimpleObserverableGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SimpleObserverableGrain.cs,SimpleObserverableGrain,The following statement contains a magic number: EventDelay = 1000;
Magic Number,UnitTests.Grains,SimpleObserverableGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SimpleObserverableGrain.cs,SimpleObserverableGrain,The following statement contains a magic number: this.Observers = new ObserverManager<ISimpleGrainObserver>(TimeSpan.FromMinutes(5)' logger' "observers");
Magic Number,UnitTests.Grains,SpecializedSimpleGenericGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\SpecializedSimpleGenericGrain.cs,Transform,The following statement contains a magic number: Value = Value * 2.0;
Magic Number,UnitTests.Grains,StatelessWorkerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\StatelessWorkerGrain.cs,LongCall,The following statement contains a magic number: RegisterTimer(TimerCallback' resolver' TimeSpan.FromSeconds(2)' TimeSpan.FromMilliseconds(-1));
Magic Number,UnitTests.Grains,StatelessWorkerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\StatelessWorkerGrain.cs,GetCallStats,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,UnitTests.Grains,StreamInterceptionGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\StreamInterceptionGrain.cs,Invoke,The following statement contains a magic number: this.lastStreamValue *= 2;
Magic Number,Orleans.SqlUtils.StorageProvider.GrainClasses,CustomerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AdoNet\CustomerGrain.cs,SetRandomState,The following statement contains a magic number: State.BirthDate = new DateTime(_random.Next(40) + 1970' _random.Next(12) + 1'  _random.Next(28) + 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Orleans.SqlUtils.StorageProvider.GrainClasses,CustomerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AdoNet\CustomerGrain.cs,SetRandomState,The following statement contains a magic number: State.BirthDate = new DateTime(_random.Next(40) + 1970' _random.Next(12) + 1'  _random.Next(28) + 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Orleans.SqlUtils.StorageProvider.GrainClasses,CustomerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AdoNet\CustomerGrain.cs,SetRandomState,The following statement contains a magic number: State.BirthDate = new DateTime(_random.Next(40) + 1970' _random.Next(12) + 1'  _random.Next(28) + 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Orleans.SqlUtils.StorageProvider.GrainClasses,CustomerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AdoNet\CustomerGrain.cs,SetRandomState,The following statement contains a magic number: State.BirthDate = new DateTime(_random.Next(40) + 1970' _random.Next(12) + 1'  _random.Next(28) + 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Orleans.SqlUtils.StorageProvider.GrainClasses,CustomerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\AdoNet\CustomerGrain.cs,SetRandomState,The following statement contains a magic number: State.Gender = _random.Next(2);
Magic Number,TestGrains,PersonGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\EventSourcing\PersonGrain.cs,RunTentativeConfirmedStateTest,The following statement contains a magic number: AssertEqual(2' TentativeVersion);
Magic Number,TestGrains,PersonGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\EventSourcing\PersonGrain.cs,RunTentativeConfirmedStateTest,The following statement contains a magic number: await Task.Delay(20);
Magic Number,TestGrains,PersonGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\EventSourcing\PersonGrain.cs,RunTentativeConfirmedStateTest,The following statement contains a magic number: Version == 2
Magic Number,TestGrains,PersonGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\EventSourcing\PersonGrain.cs,RunTentativeConfirmedStateTest,The following statement contains a magic number: i < 10
Magic Number,TestGrains,PersonGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\EventSourcing\PersonGrain.cs,RunTentativeConfirmedStateTest,The following statement contains a magic number: AssertEqual(2' Version);
Magic Number,TestGrains,PersonGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\EventSourcing\PersonGrain.cs,RunTentativeConfirmedStateTest,The following statement contains a magic number: AssertEqual(2' TentativeVersion);
Magic Number,TestGrains,ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain.cs,OnNextAsync,The following statement contains a magic number: State.Accumulator == 32 && !Faults.FaultCleared
Magic Number,TestGrains,ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain.cs,OnNextAsync,The following statement contains a magic number: State.Accumulator%10 != 0
Magic Number,TestGrains,FaultsState,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_NonTransientError_RecoverableStream_CollectorGrain.cs,FaultsState,The following statement contains a magic number: on33rdMessageFault = new FireOnNthTry(33);
Magic Number,TestGrains,ImplicitSubscription_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_RecoverableStream_CollectorGrain.cs,OnNextAsync,The following statement contains a magic number: State.Accumulator % 10 != 0
Magic Number,TestGrains,ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\ImplicitSubscription_TransientError_RecoverableStream_CollectorGrain.cs,OnNextAsync,The following statement contains a magic number: State.Accumulator%10 != 0
Magic Number,TestGrains,LogTestGrainCustomStoragePrimaryCluster,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\LogTestGrainVariations.cs,OnActivateAsync,The following statement contains a magic number: await Task.Run(async () =>              {                  await Task.Delay(10);              });
Magic Number,UnitTests.Grains.Batching,BatchingStreamBatchingTestConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\StreamBatchingTestConsumerGrain.cs,OnNextBatch,The following statement contains a magic number: await Task.Delay(500);
Magic Number,UnitTests.GrainInterfaces,TestPlacementStrategyFixedSiloDirector,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\TestPlacementStrategyFixedSiloDirector.cs,OnAddActivation,The following statement contains a magic number: var oddTick = DateTime.UtcNow.Ticks % 2 == 1;
Magic Number,UnitTests.GrainInterfaces,TestPlacementStrategyFixedSiloDirector,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestGrains\TestPlacementStrategyFixedSiloDirector.cs,OnAddActivation,The following statement contains a magic number: switch (((TestCustomPlacementStrategy)strategy).Scenario)              {                  case CustomPlacementScenario.FixedSilo:                      return Task.FromResult(silos[silos.Length - 2]); // second from last silos.                    case CustomPlacementScenario.ExcludeOne:                      return Task.FromResult(oddTick ? silos[0] : silos[silos.Length - 1]); // randomly return first or last silos                    case CustomPlacementScenario.RequestContextBased:                      var index = (int)target.RequestContextData[TARGET_SILO_INDEX];                      return Task.FromResult(silos[index]);                    default:                      throw new InvalidOperationException(); // should never get here' only to make compiler happy              }
