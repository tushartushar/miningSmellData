Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AdventureGrains,PlayerGrain,D:\research\architectureSmells\repos\dotnet_orleans\Samples\2.0\Adventure\AdventureGrains\PlayerGrain.cs,Play,Cyclomatic complexity of the method is 11
Complex Method,AdventureGrains,RoomGrain,D:\research\architectureSmells\repos\dotnet_orleans\Samples\2.0\Adventure\AdventureGrains\RoomGrain.cs,Description,Cyclomatic complexity of the method is 8
Magic Number,AdventureGrains,MonsterGrain,D:\research\architectureSmells\repos\dotnet_orleans\Samples\2.0\Adventure\AdventureGrains\MonsterGrain.cs,OnActivateAsync,The following statement contains a magic number: RegisterTimer((_) => Move()' null' TimeSpan.FromSeconds(150)' TimeSpan.FromMinutes(150));
Magic Number,AdventureGrains,MonsterGrain,D:\research\architectureSmells\repos\dotnet_orleans\Samples\2.0\Adventure\AdventureGrains\MonsterGrain.cs,OnActivateAsync,The following statement contains a magic number: RegisterTimer((_) => Move()' null' TimeSpan.FromSeconds(150)' TimeSpan.FromMinutes(150));
Magic Number,AdventureGrains,MonsterGrain,D:\research\architectureSmells\repos\dotnet_orleans\Samples\2.0\Adventure\AdventureGrains\MonsterGrain.cs,Move,The following statement contains a magic number: var rand = new Random().Next(0' 4);
Magic Number,AdventureGrains,PlayerGrain,D:\research\architectureSmells\repos\dotnet_orleans\Samples\2.0\Adventure\AdventureGrains\PlayerGrain.cs,CheckAlive,The following statement contains a magic number: var room = GrainFactory.GetGrain<IRoomGrain>(-2);
Missing Default,AdventureGrains,PlayerGrain,D:\research\architectureSmells\repos\dotnet_orleans\Samples\2.0\Adventure\AdventureGrains\PlayerGrain.cs,Play,The following switch statement is missing a default case: switch (verb)              {                  case "look":                      return await this.roomGrain.Description(myInfo);                    case "go":                      if (words.Length == 1)                          return "Go where?";                      return await Go(words[1]);                    case "north":                  case "south":                  case "east":                  case "west":                      return await Go(verb);                    case "kill":                      if (words.Length == 1)                          return "Kill what?";                      var target = command.Substring(verb.Length + 1);                      return await Kill(target);                    case "drop":                      thing = FindMyThing(Rest(words));                      return await Drop(thing);                    case "take":                      thing = await roomGrain.FindThing(Rest(words));                      return await Take(thing);                    case "inv":                  case "inventory":                      return "You are carrying: " + string.Join(" "' things.Select(x => x.Name));                    case "end":                      return "";              }
