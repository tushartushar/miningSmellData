Implementation smell,Namespace,Class,File,Method,Description
Long Method,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,MissingActivation_Runner,The method has 119 lines of code.
Long Method,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The method has 124 lines of code.
Long Method,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The method has 257 lines of code.
Complex Method,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,MissingActivation_Runner,Cyclomatic complexity of the method is 11
Complex Method,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,getSilosToFail,Cyclomatic complexity of the method is 12
Complex Method,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ValidateClusterRaceResults,Cyclomatic complexity of the method is 11
Complex Method,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,Cyclomatic complexity of the method is 9
Complex Method,UnitTests.Streaming,MultipleStreamsTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\MultipleStreamsTestRunner.cs,StreamTest_MultipleStreams_ManyDifferent_ManyProducerGrainsManyConsumerGrains,Cyclomatic complexity of the method is 8
Long Parameter List,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,Do_FanOut_Stress,The method has 5 parameters. Parameters: numLoops' blockSize' timeout' doNonReentrant' doAC
Long Parameter List,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,SetStoredValue,The method has 6 parameters. Parameters: providerName' providerTypeFullName' grainType' grain' fieldName' newValue
Long Parameter List,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,AddAndCheck,The method has 5 parameters. Parameters: block' dataAdapter' first' last' sequenceNumber
Long Parameter List,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,AddAndCheck,The method has 5 parameters. Parameters: block' dataAdapter' message' first' last
Long Parameter List,UnitTests.StreamingTests,ConsumerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewConsumerProxy,The method has 5 parameters. Parameters: streamId' streamProvider' targets' logger' grainFactory
Long Parameter List,UnitTests.StreamingTests,ConsumerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewConsumerGrainsAsync,The method has 6 parameters. Parameters: streamId' streamProvider' logger' grainFactory' grainIds' grainCount
Long Parameter List,UnitTests.StreamingTests,ConsumerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewProducerConsumerGrainsAsync,The method has 6 parameters. Parameters: streamId' streamProvider' logger' grainIds' useReentrantGrain' grainFactory
Long Parameter List,UnitTests.StreamingTests,ConsumerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewConsumerClientObjectsAsync,The method has 5 parameters. Parameters: streamId' streamProvider' logger' client' consumerCount
Long Parameter List,UnitTests.StreamingTests,ProducerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewProducerProxy,The method has 5 parameters. Parameters: targets' streamId' streamProvider' streamNamespace' logger
Long Parameter List,UnitTests.StreamingTests,ProducerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewProducerGrainsAsync,The method has 7 parameters. Parameters: streamId' streamProvider' streamNamespace' logger' grainFactory' grainIds' grainCount
Long Parameter List,UnitTests.StreamingTests,ProducerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewProducerConsumerGrainsAsync,The method has 6 parameters. Parameters: streamId' streamProvider' logger' grainIds' useReentrantGrain' grainFactory
Long Parameter List,UnitTests.StreamingTests,ProducerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewProducerClientObjectsAsync,The method has 6 parameters. Parameters: streamId' streamProvider' streamNamespace' logger' client' producersCount
Long Parameter List,UnitTests.StreamingTests,StreamTestUtils,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestUtils.cs,LogStartTest,The method has 5 parameters. Parameters: testName' streamId' streamProviderName' logger' siloHost
Long Parameter List,UnitTests.StreamingTests,StreamTestUtils,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestUtils.cs,CheckPubSubCounts,The method has 8 parameters. Parameters: client' output' when' expectedPublisherCount' expectedConsumerCount' streamId' streamProviderName' streamNamespace
Long Parameter List,UnitTests.StreamingTests,StreamTestUtils,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestUtils.cs,Assert_AreEqual,The method has 5 parameters. Parameters: output' expected' actual' msg' args
Long Parameter List,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,AssertIsInRange,The method has 6 parameters. Parameters: val' lowerLimit' upperLimit' grain' reminderName' sleepFor
Long Identifier,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,MissingActivation_WithoutDirectoryLazyDeregistration_MultiSilo,The length of the parameter directoryLazyDeregistrationDelay is 32.
Long Identifier,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,,The length of the parameter MockStorageProviderNameLowerCase is 32.
Long Identifier,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,getSilosToFail,The length of the parameter reminderTableGrainPrimaryDirectoryAddress is 41.
Long Identifier,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,,The length of the parameter SMS_STREAM_PROVIDER_NAME_DO_NOT_OPTIMIZE_FOR_IMMUTABLE_DATA is 59.
Long Identifier,UnitTests.StreamingTests,StreamTestUtils,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestUtils.cs,,The length of the parameter AZURE_QUEUE_STREAM_PROVIDER_NAME is 32.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldCollectIdleActivations,The length of the statement  "            logger.Info("IdleActivationCollectorShouldCollectIdleActivations: grains activated; waiting {0} sec (activation GC idle timeout is {1} sec)."' WAIT_TIME.TotalSeconds' DEFAULT_IDLE_TIMEOUT.TotalSeconds); " is 202.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyActivations,The length of the statement  "            int activationsCreated = await TestUtils.GetActivationCount(this.testCluster.GrainFactory' idleGrainTypeName) + await TestUtils.GetActivationCount(this.testCluster.GrainFactory' busyGrainTypeName); " is 197.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyActivations,The length of the statement  "            logger.Info("ActivationCollectorShouldNotCollectBusyActivations: grains activated; waiting {0} sec (activation GC idle timeout is {1} sec)."' WAIT_TIME.TotalSeconds' DEFAULT_IDLE_TIMEOUT.TotalSeconds); " is 201.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ManualCollectionShouldNotCollectBusyActivations,The length of the statement  "            int activationsCreated = await TestUtils.GetActivationCount(this.testCluster.GrainFactory' idleGrainTypeName) + await TestUtils.GetActivationCount(this.testCluster.GrainFactory' busyGrainTypeName); " is 197.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ManualCollectionShouldNotCollectBusyActivations,The length of the statement  "            logger.Info("ManualCollectionShouldNotCollectBusyActivations: grains activated; waiting {0} sec (activation GC idle timeout is {1} sec)."' shortIdleTimeout.TotalSeconds' DEFAULT_IDLE_TIMEOUT.TotalSeconds); " is 205.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ManualCollectionShouldNotCollectBusyActivations,The length of the statement  "            logger.Info("ManualCollectionShouldNotCollectBusyActivations: triggering manual collection (timespan is {0} sec)."'  everything.TotalSeconds); " is 142.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ManualCollectionShouldNotCollectBusyActivations,The length of the statement  "            logger.Info("ManualCollectionShouldNotCollectBusyActivations: waiting {0} sec (activation GC idle timeout is {1} sec)."' WAIT_TIME.TotalSeconds' DEFAULT_IDLE_TIMEOUT.TotalSeconds); " is 180.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldCollectIdleActivationsSpecifiedInPerTypeConfiguration,The length of the statement  "            logger.Info("ActivationCollectorShouldCollectIdleActivationsSpecifiedInPerTypeConfiguration: activating {0} grains."' grainCount); " is 130.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldCollectIdleActivationsSpecifiedInPerTypeConfiguration,The length of the statement  "            logger.Info("ActivationCollectorShouldCollectIdleActivationsSpecifiedInPerTypeConfiguration: grains activated; waiting {0} sec (activation GC idle timeout is {1} sec)."' WAIT_TIME.TotalSeconds' DEFAULT_IDLE_TIMEOUT.TotalSeconds); " is 229.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyActivationsSpecifiedInPerTypeConfiguration,The length of the statement  "            logger.Info("ActivationCollectorShouldNotCollectBusyActivationsSpecifiedInPerTypeConfiguration: activating {0} busy grains."' busyGrainCount); " is 142.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyActivationsSpecifiedInPerTypeConfiguration,The length of the statement  "            logger.Info("ActivationCollectorShouldNotCollectBusyActivationsSpecifiedInPerTypeConfiguration: activating {0} idle grains."' idleGrainCount); " is 142.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyActivationsSpecifiedInPerTypeConfiguration,The length of the statement  "            int activationsCreated = await TestUtils.GetActivationCount(this.testCluster.GrainFactory' idleGrainTypeName) + await TestUtils.GetActivationCount(this.testCluster.GrainFactory' busyGrainTypeName); " is 197.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyActivationsSpecifiedInPerTypeConfiguration,The length of the statement  "            logger.Info("IdleActivationCollectorShouldNotCollectBusyActivations: grains activated; waiting {0} sec (activation GC idle timeout is {1} sec)."' WAIT_TIME.TotalSeconds' DEFAULT_IDLE_TIMEOUT.TotalSeconds); " is 205.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The length of the statement  "            // the purpose of this test is to determine whether idle stateless worker activations are properly identified by the activation collector. " is 138.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The length of the statement  "            //   2. activate a set of grains by sending a burst of messages to each one. the purpose of the burst is to ensure that multiple activations are used.  " is 150.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The length of the statement  "            //   4. periodically send a message to each grain' ensuring that only one activation remains busy. each time we check the activation id and compare it against the activation id returned by the previous grain call. initially' these may not be identical but as the other activations become idle and are collected' there will be only one activation servicing these calls. " is 368.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The length of the statement  "                IStatelessWorkerActivationCollectorTestGrain1 g = this.testCluster.GrainFactory.GetGrain<IStatelessWorkerActivationCollectorTestGrain1>(Guid.NewGuid()); " is 152.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The length of the statement  "                    // identify the activation and record whether it matches the activation ID last reported. it probably won't match in the beginning but should always converge on a match as other activations get collected. " is 204.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The length of the statement  "                this.logger.Info("ActivationCollectorShouldNotCollectBusyStatelessWorkers: activating {0} stateless worker grains (run #{1})."' grainCount' i); " is 143.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The length of the statement  "                        // having the activation delay will ensure that one activation cannot serve all requests that we send to it' making it so that additional activations will be created. " is 166.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The length of the statement  "                Assert.True(activationsCreated > grainCount' string.Format("more than {0} activations should have been created; got {1} instead"' grainCount' activationsCreated)); " is 163.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The length of the statement  "                this.logger.Info("ActivationCollectorShouldNotCollectBusyStatelessWorkers: grains activated; sending heartbeat to {0} stateless worker grains."' grainCount); " is 157.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The length of the statement  "                this.logger.Info("ActivationCollectorShouldNotCollectBusyStatelessWorkers: grains activated; waiting {0} sec (activation GC idle timeout is {1} sec)."' WAIT_TIME.TotalSeconds' DEFAULT_IDLE_TIMEOUT.TotalSeconds); " is 211.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The length of the statement  "                    Assert.True(matched[index]' string.Format("activation ID of final subsequent heartbeats did not match for grain {0}"' grains[index])); " is 134.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCauseMessageLoss,The length of the statement  "            int activationsCreated = await TestUtils.GetActivationCount(this.testCluster.GrainFactory' idleGrainTypeName) + await TestUtils.GetActivationCount(this.testCluster.GrainFactory' busyGrainTypeName); " is 197.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCauseMessageLoss,The length of the statement  "            logger.Info("ActivationCollectorShouldNotCauseMessageLoss: grains activated; waiting {0} sec (activation GC idle timeout is {1} sec)."' WAIT_TIME.TotalSeconds' DEFAULT_IDLE_TIMEOUT.TotalSeconds); " is 195.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldCollectByCollectionSpecificAgeLimitForTwelveSeconds,The length of the statement  "                ICollectionSpecificAgeLimitForTenSecondsActivationGcTestGrain g = this.testCluster.GrainFactory.GetGrain<ICollectionSpecificAgeLimitForTenSecondsActivationGcTestGrain>(Guid.NewGuid()); " is 184.
Long Statement,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldCollectByCollectionSpecificAgeLimitForTwelveSeconds,The length of the statement  "            logger.Info("ActivationCollectorShouldCollectByCollectionSpecificAgeLimit: grains activated; waiting {0} sec (activation GC idle timeout is {1} sec)."' WAIT_TIME.TotalSeconds' DEFAULT_IDLE_TIMEOUT.TotalSeconds); " is 211.
Long Statement,UnitTests.ActivationsLifeCycleTests,SiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,Configure,The length of the statement  "                    .ConfigureServices(services => services.Where(s => s.ServiceType == typeof(IConfigurationValidator)).ToList().ForEach(s => services.Remove(s))); " is 144.
Long Statement,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTest_Stress_3_Reentrant,The length of the statement  "            var a = this.testCluster.GrainFactory.GetGrain<ICollectionTestGrain>(1' "UnitTests.Grains.ReentrantCollectionTestGrain"); " is 121.
Long Statement,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTest_Stress_4_Timer,The length of the statement  "            var a = this.testCluster.GrainFactory.GetGrain<ICollectionTestGrain>(1' "UnitTests.Grains.ReentrantCollectionTestGrain"); " is 121.
Long Statement,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdle_NonExistentActivation_Runner,The length of the statement  "                output.WriteLine("\nThe 1st call after DeactivateSelf has NOT thrown any exception as expected' since forwardCount is {0}.\n"' forwardCount); " is 141.
Long Statement,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdle_NonExistentActivation_Runner,The length of the statement  "                output.WriteLine("\nThe 1st call after DeactivateSelf has thrown Non-existent activation exception as expected' since forwardCount is {0}.\n"' forwardCount); " is 157.
Long Statement,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,PickGrainInNonPrimary,The length of the statement  "                SiloAddress primaryForGrain = (await TestUtils.GetDetailedGrainReport(this.testCluster.InternalGrainFactory' grainId' this.testCluster.Primary)).PrimaryForGrain; " is 161.
Long Statement,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,PickGrainInNonPrimary,The length of the statement  "                this.output.WriteLine("\nCreated grain with key {0} whose primary directory owner is silo {1} and which was activated on silo {2}\n"' i' primaryForGrain.ToLongString()' siloHostingActivation); " is 192.
Long Statement,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,PickGrainInNonPrimary,The length of the statement  "            Assert.True(false' "Could not find a grain that activates on a non-primary silo' and has the partition be also managed by a non-primary silo"); " is 143.
Long Statement,UnitTests.ActivationsLifeCycleTests,ClientConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,Configure,The length of the statement  "                clientBuilder.Configure<StaticGatewayListProviderOptions>(options => { options.Gateways = options.Gateways.Take(1).ToList(); }); " is 128.
Long Statement,UnitTests.ActivationsLifeCycleTests,LazyDeregistrationDelaySiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,Configure,The length of the statement  "                hostBuilder.Configure<GrainDirectoryOptions>(options => options.LazyDeregistrationDelay = TimeSpan.FromMilliseconds(5000)); " is 123.
Long Statement,UnitTests,DeadlockDetectionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DeadlockDetectionTests.cs,NonReentrantGrain_WithMessageInterleavesPredicate_StreamItemDelivery_WhenPredicateReturnsFalse,The length of the statement  "            this.runner.NonReentrantGrain_WithMessageInterleavesPredicate_StreamItemDelivery_WhenPredicateReturnsFalse(performDeadlockDetection: true); " is 139.
Long Statement,UnitTests,DisabledCallChainReentrancyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DisabledCallChainReentrancyTestRunner.cs,NonReentrantGrain,The length of the statement  "            INonReentrantGrain nonreentrant = this.grainFactory.GetGrain<INonReentrantGrain>(OrleansTestingBase.GetRandomGrainId()); " is 120.
Long Statement,UnitTests,DisabledCallChainReentrancyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DisabledCallChainReentrancyTestRunner.cs,NonReentrantGrain_WithMessageInterleavesPredicate_StreamItemDelivery_WhenPredicateReturnsFalse,The length of the statement  "                Assert.True(deadlock' "Non-reentrant grain should deadlock on stream item delivery to itself when CanInterleave predicate returns false"); " is 138.
Long Statement,UnitTests,DisabledCallChainReentrancyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DisabledCallChainReentrancyTestRunner.cs,NonReentrantGrain_WithMessageInterleavesPredicate_StreamItemDelivery_WhenPredicateReturnsFalse,The length of the statement  "                Assert.True(timeout' "Non-reentrant grain should timeout on stream item delivery to itself when CanInterleave predicate returns false"); " is 136.
Long Statement,UnitTests,DisabledCallChainReentrancyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DisabledCallChainReentrancyTestRunner.cs,NonReentrantGrain_WithMessageInterleavesPredicate_StreamItemDelivery_WhenPredicateReturnsFalse,The length of the statement  "            this.logger.Info("Reentrancy NonReentrantGrain_WithMessageInterleavesPredicate_StreamItemDelivery_WhenPredicateReturnsFalse Test finished OK."); " is 144.
Long Statement,UnitTests,DisabledCallChainReentrancyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DisabledCallChainReentrancyTestRunner.cs,NonReentrantGrain_WithMayInterleavePredicate_WhenPredicateReturnsFalse,The length of the statement  "            this.logger.Info("Reentrancy NonReentrantGrain_WithMayInterleavePredicate_WhenPredicateReturnsFalse Test finished OK."); " is 120.
Long Statement,UnitTests,DisabledCallChainReentrancyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DisabledCallChainReentrancyTestRunner.cs,UnorderedNonReentrantGrain,The length of the statement  "            IUnorderedNonReentrantGrain unonreentrant = this.grainFactory.GetGrain<IUnorderedNonReentrantGrain>(OrleansTestingBase.GetRandomGrainId()); " is 139.
Long Statement,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,NonReentrantGrain_WithMayInterleavePredicate_WhenPredicateReturnsTrue,The length of the statement  "            this.fixture.Logger.Info("Reentrancy NonReentrantGrain_WithMayInterleavePredicate_WhenPredicateReturnsTrue Test finished OK."); " is 127.
Long Statement,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,NonReentrantGrain_WithMayInterleavePredicate_StreamItemDelivery_WhenPredicateReturnsTrue,The length of the statement  "            this.fixture.Logger.Info("Reentrancy NonReentrantGrain_WithMayInterleavePredicate_StreamItemDelivery_WhenPredicateReturnsTrue Test finished OK."); " is 146.
Long Statement,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,NonReentrantGrain_WithMayInterleavePredicate_WhenPredicateThrows,The length of the statement  "            this.fixture.Logger.Info("Reentrancy NonReentrantGrain_WithMayInterleavePredicate_WhenPredicateThrows Test finished OK."); " is 122.
Long Statement,UnitTests,RetryOperation,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RetryHelper.cs,Sigmoid,The length of the statement  "            return TimeSpan.FromMilliseconds(Convert.ToInt32(Math.Round((1 / (1 + Math.Exp(-retryAttempt + 3))) * MaxDurationInSeconds)) * 1000); " is 133.
Long Statement,UnitTests,RetryHelper,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RetryHelper.cs,RetryOnExceptionAsync,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(maxAttempts)' $"The count of {maxAttempts} needs to be at least {MinAttempts}."); " is 126.
Long Statement,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The length of the statement  "            Assert.True(stopwatch.Elapsed >= timeout.Multiply(0.9)' "Waited less than " + timeout.Multiply(0.9) + ". Waited " + stopwatch.Elapsed); " is 135.
Long Statement,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The length of the statement  "            Assert.True(stopwatch.Elapsed <= timeout.Multiply(3.5)' "Waited longer than " + timeout.Multiply(3.5) + ". Waited " + stopwatch.Elapsed); " is 137.
Long Statement,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The length of the statement  "            Assert.True(stopwatch.Elapsed <= timeout.Multiply(0.1)' "Waited longer than " + timeout.Multiply(0.1) + ". Waited " + stopwatch.Elapsed); " is 137.
Long Statement,UnitTests.StorageTests,ErrorInjectionStorageProvider,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ErrorInjectionStorageProvider.cs,WriteStateAsync,The length of the statement  "            logger.Info(0' "WriteStateAsync for {grainType} {grainReference} ErrorInjection={errorInjection}"' grainType' grainReference' ErrorInjection); " is 142.
Long Statement,UnitTests.StorageTests,LocalStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\LocalStoreTests.cs,Store_Delete,The length of the statement  "            output.WriteLine("Write returned Etag={0} after {1} {2}"' eTag' sw.Elapsed' StorageProviderUtils.PrintOneWrite(keys' data' eTag)); " is 130.
Long Statement,UnitTests.StorageTests,LocalStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\LocalStoreTests.cs,Store_Delete,The length of the statement  "            output.WriteLine("Read returned {0} after {1}"' StorageProviderUtils.PrintOneWrite(keys' storedData' eTag)' sw.Elapsed); " is 120.
Long Statement,UnitTests.StorageTests,LocalStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\LocalStoreTests.cs,Store_Delete,The length of the statement  "            Assert.True(storedData.Count == 0' $"Should get no data from Re-Read but got: {StorageProviderUtils.PrintData(storedData)}"); " is 125.
Long Statement,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The length of the statement  "            providerState = GetStateForStorageProviderInUse(providerName' typeof(MockStorageProvider).FullName); // update provider state " is 125.
Long Statement,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Error_Handled_Read,The length of the statement  "            IPersistenceUserHandledErrorGrain grain = this.HostedCluster.GrainFactory.GetGrain<IPersistenceUserHandledErrorGrain>(guid); " is 124.
Long Statement,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Error_Handled_Write,The length of the statement  "            IPersistenceUserHandledErrorGrain grain = this.HostedCluster.GrainFactory.GetGrain<IPersistenceUserHandledErrorGrain>(guid); " is 124.
Long Statement,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Error_NotHandled_Write,The length of the statement  "            IPersistenceUserHandledErrorGrain grain = this.HostedCluster.GrainFactory.GetGrain<IPersistenceUserHandledErrorGrain>(guid); " is 124.
Long Statement,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Loop_Read,The length of the statement  "                SetStoredValue(MockStorageProviderName1' typeof(MockStorageProvider).FullName' grainType' grain' "Field1"' expectedVal); // Update state data behind grain " is 154.
Long Statement,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Serialize_GrainState_DeepCopy,The length of the statement  "            // NOTE: This test requires Silo to be running & Client init so that grain references can be resolved before serialization. " is 123.
Long Statement,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Serialize_GrainState_DeepCopy_Stress,The length of the statement  "                tasks.Add(Task.Run(() => { var other = this.HostedCluster.SerializationManager.RoundTripSerializationForTesting(states[idx]); })); " is 130.
Long Statement,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,NonReentrentStressGrainWithoutState,The length of the statement  "            INonReentrentStressGrainWithoutState grain1 = this.HostedCluster.GrainFactory.GetGrain<INonReentrentStressGrainWithoutState>(id1); " is 130.
Long Statement,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,NonReentrentGrain_Task_Delay,The length of the statement  "            INonReentrentStressGrainWithoutState grain1 = this.HostedCluster.GrainFactory.GetGrain<INonReentrentStressGrainWithoutState>(id1); " is 130.
Long Statement,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,ResetMockStorageProvidersHistory,The length of the statement  "            var mockStorageProviders = new[] { MockStorageProviderName1' MockStorageProviderName2' MockStorageProviderNameLowerCase }; " is 122.
Long Statement,UnitTests.StorageTests,SiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Configure,The length of the statement  "                    hostBuilder.AddTestStorageProvider(MockStorageProviderName1' (sp' name) => ActivatorUtilities.CreateInstance<MockStorageProvider>(sp' name)); " is 141.
Long Statement,UnitTests.StorageTests,SiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Configure,The length of the statement  "                    hostBuilder.AddTestStorageProvider(MockStorageProviderName2' (sp' name) => ActivatorUtilities.CreateInstance<MockStorageProvider>(sp' name)); " is 141.
Long Statement,UnitTests.StorageTests,SiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Configure,The length of the statement  "                    hostBuilder.AddTestStorageProvider(MockStorageProviderNameLowerCase' (sp' name) => ActivatorUtilities.CreateInstance<MockStorageProvider>(sp' name)); " is 149.
Long Statement,UnitTests.StorageTests,SiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Configure,The length of the statement  "                    hostBuilder.AddTestStorageProvider(ErrorInjectorProviderName' (sp' name) => ActivatorUtilities.CreateInstance<ErrorInjectionStorageProvider>(sp)); " is 146.
Long Statement,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The length of the statement  "            var gatewayManager = new GatewayManager(Options.Create(new GatewayOptions())' listProvider' NullLoggerFactory.Instance' null); " is 126.
Long Statement,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The length of the statement  "            // The following needed to be changed as the gateway manager now round-robins through the available gateways' rather than " is 121.
Long Statement,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,FailureTest,The length of the statement  "            logger.Info("FailureTest {0}' Code {1}' Stopping silos: {2}"' numOfFailures' failCode' Utils.EnumerableToString(failures' handle => handle.SiloAddress.ToString())); " is 164.
Long Statement,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,getSilosToFail,The length of the statement  "            SiloAddress reminderTableGrainPrimaryDirectoryAddress = (await TestUtils.GetDetailedGrainReport(this.HostedCluster.InternalGrainFactory' tableGrainId' this.HostedCluster.Primary)).PrimaryForGrain; " is 196.
Long Statement,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,getSilosToFail,The length of the statement  "            var addresses = (await TestUtils.GetDetailedGrainReport(this.HostedCluster.InternalGrainFactory' tableGrainId' this.HostedCluster.GetSiloForAddress(reminderTableGrainPrimaryDirectoryAddress))).LocalDirectoryActivationAddresses; " is 227.
Long Statement,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,LoadAwareGrainShouldNotAttemptToCreateActivationsOnOverloadedSilo,The length of the statement  "                "A grain instantiated with the load-aware placement strategy should not attempt to create activations on an overloaded silo."); " is 127.
Long Statement,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,LoadAwareGrainShouldNotAttemptToCreateActivationsOnBusySilos,The length of the statement  "                "A grain instantiated with the load-aware placement strategy should not attempt to create activations on a busy silo."); " is 120.
Long Statement,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,AddTestGrains,The length of the statement  "                IActivationCountBasedPlacementTestGrain grain = this.GrainFactory.GetGrain<IActivationCountBasedPlacementTestGrain>(Guid.NewGuid()); " is 132.
Long Statement,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,RandomlyPlacedGrainShouldPlaceActivationsRandomly,The length of the statement  "            logger.Info("********************** Starting the test RandomlyPlacedGrainShouldPlaceActivationsRandomly ******************************"); " is 137.
Long Statement,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,RandomlyPlacedGrainShouldPlaceActivationsRandomly,The length of the statement  "                "Grains should be on different silos' but they are on " + Utils.EnumerableToString(placesAsArray.ToArray())); // will randomly fail one in a million times if RNG is good :-) " is 173.
Long Statement,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,PreferLocalPlacedGrainShouldPlaceActivationsLocally_TwoHops,The length of the statement  "            logger.Info("********************** Starting the test PreferLocalPlacedGrainShouldPlaceActivationsLocally ******************************"); " is 139.
Long Statement,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,PreferLocalPlacedGrainShouldPlaceActivationsLocally_TwoHops,The length of the statement  "            var preferLocalGrainPlaces = preferLocalGrainKeys.Select(key => this.GrainFactory.GetGrain<IPreferLocalPlacementTestGrain>(key).GetRuntimeInstanceId().Result).ToList(); " is 168.
Long Statement,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,PreferLocalPlacedGrainShouldPlaceActivationsLocally_TwoHops,The length of the statement  "                Assert.Equal(random' preferLocal);  //"Grains should be on the same silos' but they are on " + random + " and " + preferLocal " is 125.
Long Statement,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,LocallyPlacedGrainShouldCreateActivationsOnLocalSilo,The length of the statement  "            logger.Info("********************** Starting the test LocallyPlacedGrainShouldCreateActivationsOnLocalSilo ******************************"); " is 140.
Long Statement,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,PreferLocalPlacementGrain_ShouldMigrateWhenHostSiloKilled,The length of the statement  "            Assert.NotEqual(expected' newActual);  // "PreferLocalPlacement strategy should recreate activations on other silo if local fails." " is 131.
Long Statement,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,PreferLocalPlacementGrain_ShouldNotMigrateWhenOtherSiloKilled,The length of the statement  "            Assert.Equal(expected' newActual);  // "PreferLocalPlacement strategy should not move activations when other non-hosting silo fails." " is 133.
Long Statement,UnitTests.General,LoadSheddingTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\LoadSheddingTest.cs,LoadSheddingBasic,The length of the statement  "            ISimpleGrain grain = this.fixture.GrainFactory.GetGrain<ISimpleGrain>(random.Next()' SimpleGrain.SimpleGrainNamePrefix); " is 120.
Long Statement,UnitTests.General,LoadSheddingTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\LoadSheddingTest.cs,LoadSheddingComplex,The length of the statement  "            ISimpleGrain grain = this.fixture.GrainFactory.GetGrain<ISimpleGrain>(random.Next()' SimpleGrain.SimpleGrainNamePrefix); " is 120.
Long Statement,UnitTests.General,RequestContextTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,RequestContext_ActivityId_RC_None_E2E,The length of the statement  "            Assert.Null(RequestContext.Get(RequestContext.E2_E_TRACING_ACTIVITY_ID_HEADER));  // "No ActivityId context should be set" " is 122.
Long Statement,UnitTests.General,RequestContextTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,RequestContext_ActivityId_RC_None_E2E,The length of the statement  "                Assert.Null(RequestContext.Get(RequestContext.E2_E_TRACING_ACTIVITY_ID_HEADER));  // "No ActivityId context should be set" " is 122.
Long Statement,UnitTests.General,RequestContextTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,ClientInvokeCallback_SetActivityId,The length of the statement  "            RequestContext.Clear(); // Need this to clear out any old ActivityId value cached in RequestContext. Code optimization in RequestContext does not unset entry if Trace.CorrelationManager.ActivityId == Guid.Empty [which is the "normal" case] " is 239.
Long Statement,UnitTests.General,Halo_RequestContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,ContextTester,The length of the statement  "            output.WriteLine("ExplicitId={0}' ContextId={2}' ManagedThreadId={1}"' i' Thread.CurrentThread.ManagedThreadId' contextId); " is 123.
Long Statement,UnitTests.General,Halo_RequestContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,FrameworkContextVerification,The length of the statement  "                output.WriteLine("Inner' in loop {0}' Explicit Id={2}' ContextId={3}' ManagedThreadId={1}"' i' Thread.CurrentThread.ManagedThreadId' id' contextId); " is 148.
Long Statement,UnitTests.General,Halo_CallContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,ContextTester,The length of the statement  "            output.WriteLine("ExplicitId={0}' ContextId={2}' ManagedThreadId={1}"' i' Thread.CurrentThread.ManagedThreadId' contextId); " is 123.
Long Statement,UnitTests.General,Halo_CallContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,FrameworkContextVerification,The length of the statement  "                output.WriteLine("Inner' in loop {0}' Explicit Id={2}' ContextId={3}' ManagedThreadId={1}"' i' Thread.CurrentThread.ManagedThreadId' id' contextId); " is 148.
Long Statement,UnitTests.General,TestClientInvokeCallback,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,OnInvoke,The length of the statement  "            // (NOT YET AVAILABLE) Method name is available from: <c>grainReference.GetMethodName(request.InterfaceId' request.MethodId)</c> " is 128.
Long Statement,UnitTests.General,TestClientInvokeCallback,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,OnInvoke,The length of the statement  "            // PrimaryKey is availabe from: <c>grainReference.GrainId.GetPrimaryKeyLong()</c> or <c>grainReference.GrainId.GetPrimaryKey()</c> depending on key type. " is 153.
Long Statement,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,CreationRace,The length of the statement  "            // We use two objects to coordinate client threads and the main thread. coordWakeup is an object that is used to signal the coordinator " is 135.
Long Statement,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,CreationRace,The length of the statement  "                // A client thread takes a list of tupes<int' int> as argument. The list is an ordered sequence of grains to invoke. tuple.item2 " is 128.
Long Statement,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,CreationRace,The length of the statement  "                // is the grainId. tuple.item1 is never used (this should probably be cleaned up' but I don't want to break anything :). " is 120.
Long Statement,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,CreationRace,The length of the statement  "                // Given a config file' create client starts a client in a new appdomain. We also create a thread on which the client will run. " is 127.
Long Statement,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,CreationRace,The length of the statement  "            // We run numGrains iterations of the experiment. The coordinator thread calls the function "WaitForWorkers" in order to wait " is 125.
Long Statement,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,CreationRace,The length of the statement  "            // Once the clients threads have finished calling the grain the appropriate number of times' we wait for them to write out their results. " is 137.
Long Statement,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The length of the statement  "            WriteLog("Counts: Cluster 0 => Owned={0} Requested={1} Doubtful={2} Cached={3}"' base_own0' base_requested0' base_doubtful0' base_cached0); " is 139.
Long Statement,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The length of the statement  "            WriteLog("Counts: Cluster 1 => Owned={0} Requested={1} Doubtful={2} Cached={3}"' base_own1' base_requested1' base_doubtful1' base_cached1); " is 139.
Long Statement,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The length of the statement  "            AssertEqual(numGrains' cached0 + cached1 - base_cached0 - base_cached1' "Expecting All Owned have a cached in the other cluster"); " is 130.
Long Statement,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,GetGrainsInClusterWithStatus,The length of the statement  "                WriteLog("Returning: Silo {0} State = {1} Count = {2}"' silo.SiloAddress' status.HasValue ? status.Value.ToString() : "ANY"' (grains.Count - totalSoFar)); " is 154.
Long Statement,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,GetGrainsInClusterWithStatus,The length of the statement  "            WriteLog("Returning: Cluster {0} State = {1} Count = {2}"' clusterId' status.HasValue ? status.Value.ToString() : "ANY"' grains.Count); " is 135.
Long Statement,Tests.GeoClusterTests,SiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,Configure,The length of the statement  "                hostBuilder.Configure<MultiClusterOptions>(options => options.GlobalSingleInstanceRetryInterval = TimeSpan.FromSeconds(5)); " is 123.
Long Statement,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,StartClustersIfNeeded,The length of the statement  "                MultiCluster.WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1)); " is 147.
Long Statement,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,AssertSameList,The length of the statement  "            Comparison<IMultiClusterGatewayInfo> comparer = (x' y) => x.SiloAddress.Endpoint.ToString().CompareTo(y.SiloAddress.Endpoint.ToString()); " is 137.
Long Statement,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The length of the statement  "            var portsA = Clusters[clusterA].Cluster.GetActiveSilos().OrderBy(x => x.SiloAddress).Select(x => x.SiloAddress.Endpoint.Port).ToArray(); " is 136.
Long Statement,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The length of the statement  "            var portsB = Clusters[clusterB].Cluster.GetActiveSilos().OrderBy(x => x.SiloAddress).Select(x => x.SiloAddress.Endpoint.Port).ToArray(); " is 136.
Long Statement,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The length of the statement  "                            string.Join("'"' activegateways.Where(g => g.ClusterId == clusterA).Select(g => g.SiloAddress.Endpoint.Port).OrderBy(x => x))); " is 127.
Long Statement,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The length of the statement  "                            string.Join("'"' activegateways.Where(g => g.ClusterId == clusterB).Select(g => g.SiloAddress.Endpoint.Port).OrderBy(x => x))); " is 127.
Long Statement,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The length of the statement  "            var target = Clusters[clusterB].Cluster.GetActiveSilos().Where(h => h.SiloAddress.Endpoint.Port == portsB[1]).FirstOrDefault(); " is 127.
Long Statement,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The length of the statement  "                            string.Join("'"' activegateways.Where(g => g.ClusterId == clusterA).Select(g => g.SiloAddress.Endpoint.Port).OrderBy(x => x))); " is 127.
Long Statement,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The length of the statement  "                            string.Join("'"' activegateways.Where(g => g.ClusterId == clusterB).Select(g => g.SiloAddress.Endpoint.Port).OrderBy(x => x))); " is 127.
Long Statement,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The length of the statement  "            target = Clusters[clusterA].Cluster.GetActiveSilos().Where(h => h.SiloAddress.Endpoint.Port == portsA[1]).FirstOrDefault(); " is 123.
Long Statement,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The length of the statement  "                            string.Join("'"' activegateways.Where(g => g.ClusterId == clusterA).Select(g => g.SiloAddress.Endpoint.Port).OrderBy(x => x))); " is 127.
Long Statement,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The length of the statement  "                            string.Join("'"' activegateways.Where(g => g.ClusterId == clusterB).Select(g => g.SiloAddress.Endpoint.Port).OrderBy(x => x))); " is 127.
Long Statement,Tests.GeoClusterTests,TestingClusterHost,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,NewCluster,The length of the statement  "                WriteLog("Cluster {0} started. [{1}]"' clusterId' string.Join(" "' testCluster.GetActiveSilos().Select(s => s.ToString()))); " is 124.
Long Statement,Tests.GeoClusterTests,TestSiloBuilderConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,Configure,The length of the statement  "                hostBuilder.AddAzureTableGrainStorage("AzureStore"' builder => builder.Configure<IOptions<ClusterOptions>>((options' silo) => " is 125.
Long Statement,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,StartClustersAndClients,The length of the statement  "            WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1)); " is 134.
Long Statement,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanup,The length of the statement  "                WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1)); " is 134.
Long Statement,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The length of the statement  "                WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1)); " is 134.
Long Statement,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test2,The length of the statement  "            output.WriteLine("\n\n*** Silo1 range: {0}.\n*** The whole ring with 1 silo is:\n{1}\n\n"' ring.GetMyRange()' ring.ToString()); " is 127.
Long Statement,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test2,The length of the statement  "                output.WriteLine("\n\n*** Silo1 range: {0}. \n*** The whole ring with {1} silos is:\n{2}\n\n"' range.ToCompactString()' i + 1' ring.ToString()); " is 144.
Long Statement,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test3,The length of the statement  "            Dictionary<SiloAddress' List<IRingRangeInternal>> allAgentRanges = new Dictionary<SiloAddress' List<IRingRangeInternal>>(); " is 123.
Long Statement,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test3,The length of the statement  "            output.WriteLine("Expected average range per silo is: {0:0.00}%' expected #queues per silo is: {1:0.00}' expected #queues per agent is: {2:0.000}."' " is 148.
Long Statement,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test3,The length of the statement  "                queueHistogram.Values.Select(list => list.Sum()).ToList().Min()' queueHistogram.Values.Select(list => list.Sum()).ToList().Max()); " is 130.
Long Statement,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,SetupTestAndPickGrain,The length of the statement  "                var report = await TestUtils.GetDetailedGrainReport(this.hostedCluster.InternalGrainFactory' clientId' hostedCluster.Primary); " is 126.
Long Statement,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateRowInParallel,The length of the statement  "            var insertions = Task.WhenAll(Enumerable.Range(1' 20).Select(async i => { try { return await membershipTable.InsertRow(data' newTableVer); } catch { return false; } })); " is 169.
Long Statement,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateRowInParallel,The length of the statement  "                    try { done = await membershipTable.UpdateRow(updatedRow.Item1' updatedRow.Item2' tableVersion); } catch { done = false; } " is 121.
Long Statement,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateIAmAlive,The length of the statement  "            // compare that the value is close to what we passed in' but not exactly' as the underlying store can set its own precision settings " is 132.
Long Statement,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateIAmAlive,The length of the statement  "            // (ie: in SQL Server this is defined as datetime2(3)' so we don't expect precision to account for less than 0.001s values) " is 123.
Long Statement,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateIAmAlive,The length of the statement  "            Assert.True((amAliveTime - member.Item1.IAmAliveTime).Duration() < TimeSpan.FromMilliseconds(50)' (amAliveTime - member.Item1.IAmAliveTime).Duration().ToString()); " is 163.
Long Statement,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,FirstMessageWithSequenceNumberTest,The length of the statement  "            Assert.Equal(block.NewestMessageIndex' block.GetIndexOfFirstMessageLessThanOrEqualTo(new EventSequenceTokenV2(sequenceNumber - 2))); " is 132.
Long Statement,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,FirstMessageWithSequenceNumberTest,The length of the statement  "            Assert.Equal(block.NewestMessageIndex - 1' block.GetIndexOfFirstMessageLessThanOrEqualTo(new EventSequenceTokenV2(sequenceNumber - 3))); " is 136.
Long Statement,UnitTests.OrleansRuntime.Streams,FixedSizeBufferTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\FixedSizeBufferTests.cs,EmptyBlockGetSegmentTooLargeBvt,The length of the statement  "            Assert.False(buffer.TryGetSegment(TestBlockSize + 1' out segment)' "Should not be able to get segement that is bigger than block."); " is 132.
Long Statement,UnitTests.OrleansRuntime.Streams,FixedSizeBufferTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\FixedSizeBufferTests.cs,FillBlockTestBvt,The length of the statement  "                Assert.True(buffer.TryGetSegment(1' out segment)' String.Format("Should be able to get {0}th segement of size 1."' i + 1)); " is 123.
Long Statement,UnitTests.OrleansRuntime.Streams,FixedSizeBufferTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\FixedSizeBufferTests.cs,FillBlockTestBvt,The length of the statement  "            Assert.False(buffer.TryGetSegment(1' out segment)' String.Format("Should be able to get {0}th segement of size 1."' TestBlockSize + 1)); " is 136.
Long Statement,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,GoldenPathTest,The length of the statement  "            var evictionStrategy = new ChronologicalEvictionStrategy(NullLogger.Instance' new TimePurgePredicate(TimeSpan.FromMinutes(5)' TimeSpan.FromMinutes(10))' null' null); " is 165.
Long Statement,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,CacheDrainTest,The length of the statement  "            var evictionStrategy = new ChronologicalEvictionStrategy(NullLogger.Instance' new TimePurgePredicate(TimeSpan.FromMinutes(5)' TimeSpan.FromMinutes(10))' null' null); " is 165.
Long Statement,UnitTests.OrleansRuntime.Streams,CachedMessageConverter,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,ToCachedMessage,The length of the statement  "                    StreamNamespace = streamPosition.StreamIdentity.Namespace != null ? string.Intern(streamPosition.StreamIdentity.Namespace) : null' " is 130.
Long Statement,UnitTests.StuckGrainTests,StuckGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\StuckGrainTests.cs,StuckGrainTest_Basic,The length of the statement  "            Assert.False(await cleaner.IsActivated(id)' "Grain activation is supposed be garbage collected' but it is still running."); " is 123.
Long Statement,UnitTests.StorageTests.Relational,CommonStorageTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\CommonStorageTests.cs,PersistenceStorage_WriteReadWriteReadStatesInParallel,The length of the statement  "            var grainStates = Enumerable.Range(StartOfRange' CountOfRange).Select(i => this.GetTestReferenceAndState(string.Format(grainIdTemplate' i)' null)).ToList(); " is 156.
Long Statement,UnitTests.StorageTests.Relational,CommonStorageTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\CommonStorageTests.cs,PersistenceStorage_WriteDuplicateFailsWithInconsistentStateException,The length of the statement  "            var exception = await Record.ExceptionAsync(() => Store_WriteRead(grainTypeName' grainReference' grainState)).ConfigureAwait(false); " is 132.
Long Statement,UnitTests.StorageTests.Relational,CommonStorageTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\CommonStorageTests.cs,PersistenceStorage_WriteInconsistentFailsWithInconsistentStateException,The length of the statement  "            var exception = await Record.ExceptionAsync(() => Store_WriteRead(grainTypeName' inconsistentState.Item1' inconsistentState.Item2)).ConfigureAwait(false); " is 154.
Long Statement,UnitTests.StorageTests.Relational,CommonStorageTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\CommonStorageTests.cs,GetTestReferenceAndState,The length of the statement  "            return Tuple.Create(this.grainFactory.GetGrain(GrainId.GetGrainId(UniqueKey.NewKey(grainId' UniqueKey.Category.Grain)))' new GrainState<TestState1> { State = new TestState1()' ETag = version }); " is 194.
Long Statement,UnitTests.StorageTests.Relational,CommonStorageTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\CommonStorageTests.cs,GetTestReferenceAndState,The length of the statement  "            return Tuple.Create(this.grainFactory.GetGrain(GrainId.FromParsableString(GrainId.GetGrainId(RandomUtilities.NormalGrainTypeCode' grainId).ToParsableString()))' new GrainState<TestState1> { State = new TestState1()' ETag = version }); " is 234.
Long Statement,UnitTests.StorageTests.Relational,RandomUtilities,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\RandomUtilities.cs,GetRandom,The length of the statement  "                    return ((Func<object' T>)randomGenerator)(Tuple.Create(range ?? new Range<long>(SymbolsDefaultCount' SymbolsDefaultCount)' symbols)); " is 133.
Long Statement,UnitTests.StorageTests.Relational,RandomUtilities,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\RandomUtilities.cs,GetRandomGrainReference,The length of the statement  "                return func(grainFactory' typeof(TGrainGeneric)' keyExtension' Tuple.Create(new Range<long>(SymbolsDefaultCount' SymbolsDefaultCount)' symbols)); " is 145.
Long Statement,UnitTests.StorageTests.Relational,RandomUtilities,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\RandomUtilities.cs,GetRandomGrainReference,The length of the statement  "                return func(grainFactory' typeof(TGrainGeneric)' keyExtension' Tuple.Create(new Range<long>(symbolCount' symbolCount)' symbolSet)); " is 131.
Long Statement,UnitTests.Streaming,MultipleStreamsTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\MultipleStreamsTestRunner.cs,Heading,The length of the statement  "            logger.Info("\n\n************************ {0}_{1}_{2} ********************************* \n\n"' streamProviderName' testNumber' testName); " is 137.
Long Statement,UnitTests.Streaming,StreamProvidersTests_ProviderConfigNotLoaded,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamProvidersTests.cs,ProvidersTests_ConfigNotLoaded,The length of the statement  "            IStreaming_ConsumerGrain consumer = this.HostedCluster.GrainFactory.GetGrain<IStreaming_ConsumerGrain>(Guid.NewGuid()' grainFullName); " is 134.
Long Statement,UnitTests.Streaming,StreamProvidersTests_ProviderConfigLoaded,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamProvidersTests.cs,ProvidersTests_ProviderWrongName,The length of the statement  "            IStreaming_ConsumerGrain consumer = this.grainFactory.GetGrain<IStreaming_ConsumerGrain>(Guid.NewGuid()' grainFullName); " is 120.
Long Statement,UnitTests.Streaming,SiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamProvidersTests.cs,Configure,The length of the statement  "                        .AddSimpleMessageStreamProvider("SMSProviderDoNotOptimizeForImmutableData"' options => options.OptimizeForImmutableData = false) " is 128.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,Heading,The length of the statement  "            logger.Info("\n\n************************ {0} {1}_{2} ********************************* \n\n"' testNumber' streamProviderName' testName); " is 137.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_01_OneProducerGrainOneConsumerGrain,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client); " is 120.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_01_OneProducerGrainOneConsumerGrain,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client); " is 126.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_01_OneProducerGrainOneConsumerGrain,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client); " is 126.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_01_OneProducerGrainOneConsumerGrain,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client); " is 120.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_02_OneProducerGrainOneConsumerClient,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client); " is 126.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_02_OneProducerGrainOneConsumerClient,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client); " is 126.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_03_OneProducerClientOneConsumerGrain,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client); " is 120.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_03_OneProducerClientOneConsumerGrain,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client); " is 120.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_05_ManyDifferent_ManyProducerGrainsManyConsumerGrains,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client' null' Many); " is 132.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_05_ManyDifferent_ManyProducerGrainsManyConsumerGrains,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client' null' Many); " is 138.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_06_ManyDifferent_ManyProducerGrainManyConsumerClients,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client' null' Many); " is 138.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_07_ManyDifferent_ManyProducerClientsManyConsumerGrains,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client' null' Many); " is 132.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_07_ManyDifferent_ManyProducerClientsManyConsumerGrains,The length of the statement  "            producer = await ProducerProxy.NewProducerClientObjectsAsync(streamId' streamProviderName' null' logger' this.client' Many); " is 124.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_08_ManyDifferent_ManyProducerClientsManyConsumerClients,The length of the statement  "            producer = await ProducerProxy.NewProducerClientObjectsAsync(streamId' streamProviderName' null' logger' this.client' Many); " is 124.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_09_ManySame_ManyProducerGrainsManyConsumerGrains,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client' producerGrainIds); " is 144.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_09_ManySame_ManyProducerGrainsManyConsumerGrains,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client' consumerGrainIds); " is 138.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_10_ManySame_ManyConsumerGrainsManyProducerGrains,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client' consumerGrainIds); " is 138.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_10_ManySame_ManyConsumerGrainsManyProducerGrains,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client' producerGrainIds); " is 144.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_11_ManySame_ManyProducerGrainsManyConsumerClients,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client' producerGrainIds); " is 144.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_12_ManySame_ManyProducerClientsManyConsumerGrains,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client' consumerGrainIds); " is 138.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_12_ManySame_ManyProducerClientsManyConsumerGrains,The length of the statement  "            producer = await ProducerProxy.NewProducerClientObjectsAsync(streamId' streamProviderName' null' logger' this.client' Many); " is 124.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_13_SameGrain_ConsumerFirstProducerLater,The length of the statement  "            this.consumer = await ConsumerProxy.NewProducerConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' grainIds' useReentrantGrain' this.client); " is 157.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_13_SameGrain_ConsumerFirstProducerLater,The length of the statement  "            this.producer = await ProducerProxy.NewProducerConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' grainIds' useReentrantGrain' this.client); " is 157.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_14_SameGrain_ProducerFirstConsumerLater,The length of the statement  "            this.producer = await ProducerProxy.NewProducerConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' grainIds' useReentrantGrain' this.client); " is 157.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_14_SameGrain_ProducerFirstConsumerLater,The length of the statement  "            this.consumer = await ConsumerProxy.NewProducerConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' grainIds' useReentrantGrain' this.client); " is 157.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_15_ConsumeAtProducersRequest,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client); " is 126.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_Create_OneProducerGrainOneConsumerGrain,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client); " is 120.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_Create_OneProducerGrainOneConsumerGrain,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client); " is 126.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_16_Deactivation_OneProducerGrainOneConsumerGrain,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client' consumerGrainIds); " is 138.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_16_Deactivation_OneProducerGrainOneConsumerGrain,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client' producerGrainIds); " is 144.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_16_Deactivation_OneProducerGrainOneConsumerGrain,The length of the statement  "            this.consumer = await ConsumerProxy.NewConsumerGrainsAsync(streamId' this.streamProviderName' this.logger' this.client' consumerGrainIds); " is 138.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_16_Deactivation_OneProducerGrainOneConsumerGrain,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamId' this.streamProviderName' null' this.logger' this.client' producerGrainIds); " is 144.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_19_ConsumerImplicitlySubscribedToProducerClient,The length of the statement  "            producer = await ProducerProxy.NewProducerClientObjectsAsync(streamGuid' streamProviderName' "TestNamespace1"' logger' this.client); " is 132.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_19_ConsumerImplicitlySubscribedToProducerClient,The length of the statement  "            this.consumer = ConsumerProxy.NewConsumerGrainAsync_WithoutBecomeConsumer(streamGuid' this.logger' this.client' consumerTypeName); " is 130.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_19_ConsumerImplicitlySubscribedToProducerClient,The length of the statement  "                    0 < await TestUtils.GetActivationCount(this.client' consumerTypeName) && await this.CheckCounters(this.producer' this.consumer' false); " is 135.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_20_ConsumerImplicitlySubscribedToProducerGrain,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamGuid' this.streamProviderName' "TestNamespace1"' this.logger' this.client); " is 140.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_20_ConsumerImplicitlySubscribedToProducerGrain,The length of the statement  "            this.consumer = ConsumerProxy.NewConsumerGrainAsync_WithoutBecomeConsumer(streamGuid' this.logger' this.client' consumerTypeName); " is 130.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_20_ConsumerImplicitlySubscribedToProducerGrain,The length of the statement  "                    0 < await TestUtils.GetActivationCount(this.client' consumerTypeName) && await this.CheckCounters(this.producer' this.consumer' false); " is 135.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_21_GenericConsumerImplicitlySubscribedToProducerGrain,The length of the statement  "            string consumerTypeName = "UnitTests.Grains.Streaming_ImplicitlySubscribedGenericConsumerGrain";//typeof(Streaming_ImplicitlySubscribedGenericConsumerGrain).FullName; " is 166.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_21_GenericConsumerImplicitlySubscribedToProducerGrain,The length of the statement  "            this.producer = await ProducerProxy.NewProducerGrainsAsync(streamGuid' this.streamProviderName' "TestNamespace1"' this.logger' this.client); " is 140.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_21_GenericConsumerImplicitlySubscribedToProducerGrain,The length of the statement  "            this.consumer = ConsumerProxy.NewConsumerGrainAsync_WithoutBecomeConsumer(streamGuid' this.logger' this.client' consumerTypeName); " is 130.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_21_GenericConsumerImplicitlySubscribedToProducerGrain,The length of the statement  "                    0 < await TestUtils.GetActivationCount(this.client' consumerTypeName) && await this.CheckCounters(this.producer' this.consumer' false); " is 135.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,StreamTest_22_TestImmutabilityDuringStreaming,The length of the statement  "            await consumerSameSilo.SubscribeToStream(itemProducer.GetPrimaryKey()' SMS_STREAM_PROVIDER_NAME_DO_NOT_OPTIMIZE_FOR_IMMUTABLE_DATA); " is 132.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,BasicTestAsync,The length of the statement  "            logger.Info("\n** Test {0} BasicTestAsync: producerCount={1}' consumerCount={2}.\n"' testNumber' producerCount' consumerCount); " is 127.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,CheckCounters,The length of the statement  "            logger.Info("Test {0} CheckCounters: numProduced = {1}' expectConsumed = {2}' numConsumed = {3}"' testNumber' numProduced' expectConsumed' numConsumed); " is 152.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,CheckCounters,The length of the statement  "                Assert.Equal(expectConsumed'  numConsumed); // String.Format("expectConsumed = {0}' numConsumed = {1}"' expectConsumed' numConsumed)); " is 134.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,AssertProducerCount,The length of the statement  "                var actualCount = await StreamTestUtils.GetStreamPubSub(this.client).ProducerCount(streamId' providerName' StreamTestsConstants.DefaultStreamNamespace); " is 152.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,AssertProducerCount,The length of the statement  "                logger.Info("StreamingTestRunner.AssertProducerCount: expected={0} actual (SMSStreamRendezvousGrain.ProducerCount)={1} streamId={2}"' expectedCount' actualCount' streamId); " is 172.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,CheckGrainsDeactivated,The length of the statement  "                "Test {testNumber} CheckGrainsDeactivated: {type}ActivationCount = {activationCount}' Expected{type}ActivationCount = {expectActivationCount}"'  " is 143.
Long Statement,UnitTests.StreamingTests,SingleStreamTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\SingleStreamTestRunner.cs,CheckGrainsDeactivated,The length of the statement  "                Assert.Equal(expectActivationCount'  activationCount); // String.Format("Expected{0}ActivationCount = {1}' {0}ActivationCount = {2}"' str' expectActivationCount' activationCount)); " is 180.
Long Statement,UnitTests.StreamingTests,ConsumerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewConsumerGrainsAsync,The length of the statement  "            logger.Info("ConsumerProxy.NewConsumerGrainsAsync: multiplexing {0} consumer grains for stream {1}."' grainCount' streamId); " is 124.
Long Statement,UnitTests.StreamingTests,ConsumerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewProducerConsumerGrainsAsync,The length of the statement  "            logger.Info("ConsumerProxy.NewProducerConsumerGrainsAsync: multiplexing {0} consumer grains for stream {1}."' grainCount' streamId); " is 132.
Long Statement,UnitTests.StreamingTests,ConsumerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewConsumerClientObjectsAsync,The length of the statement  "            logger.Info("ConsumerProxy.NewConsumerClientObjectsAsync: multiplexing {0} consumer client objects for stream {1}."' consumerCount' streamId); " is 142.
Long Statement,UnitTests.StreamingTests,ProducerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewProducerGrainsAsync,The length of the statement  "            logger.Info("ProducerProxy.NewProducerGrainsAsync: multiplexing {0} producer grains for stream {1}."' grainCount' streamId); " is 124.
Long Statement,UnitTests.StreamingTests,ProducerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewProducerConsumerGrainsAsync,The length of the statement  "            logger.Info("ConsumerProxy.NewProducerConsumerGrainsAsync: multiplexing {0} producer grains for stream {1}."' grainCount' streamId); " is 132.
Long Statement,UnitTests.StreamingTests,ProducerProxy,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,NewProducerClientObjectsAsync,The length of the statement  "            logger.Info("ProducerProxy.NewProducerClientObjectsAsync: multiplexing {0} producer client objects for stream {1}."' producersCount' streamId); " is 143.
Long Statement,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_LongKey_GrainStorage_Read_Write,The length of the statement  "            IGrainStorageTestGrain_LongKey grain = this.GrainFactory.GetGrain<IGrainStorageTestGrain_LongKey>(id' this.grainNamespace); " is 123.
Long Statement,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_Generic_GrainStorage_Read_Write,The length of the statement  "            IGrainStorageGenericGrain<int> grain = this.GrainFactory.GetGrain<IGrainStorageGenericGrain<int>>(id' this.grainNamespace); " is 123.
Long Statement,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_NestedGeneric_GrainStorage_Read_Write,The length of the statement  "            IGrainStorageGenericGrain<List<int>> grain = this.GrainFactory.GetGrain<IGrainStorageGenericGrain<List<int>>>(id' this.grainNamespace); " is 135.
Long Statement,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_Generic_GrainStorage_DiffTypes,The length of the statement  "            IGrainStorageGenericGrain<int> grain1 = this.GrainFactory.GetGrain<IGrainStorageGenericGrain<int>>(id1' this.grainNamespace); " is 125.
Long Statement,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_Generic_GrainStorage_DiffTypes,The length of the statement  "            IGrainStorageGenericGrain<string> grain2 = this.GrainFactory.GetGrain<IGrainStorageGenericGrain<string>>(id2' this.grainNamespace); " is 131.
Long Statement,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_Generic_GrainStorage_DiffTypes,The length of the statement  "            IGrainStorageGenericGrain<double> grain3 = this.GrainFactory.GetGrain<IGrainStorageGenericGrain<double>>(id3' this.grainNamespace); " is 131.
Virtual Method Call from Constructor,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTableTestsBase,The constructor "MembershipTableTestsBase" calls a virtual method "GetAdoInvariant".
Virtual Method Call from Constructor,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTableTestsBase,The constructor "MembershipTableTestsBase" calls a virtual method "CreateMembershipTable".
Virtual Method Call from Constructor,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTableTestsBase,The constructor "MembershipTableTestsBase" calls a virtual method "CreateGatewayListProvider".
Virtual Method Call from Constructor,UnitTests.RemindersTest,ReminderTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RemindersTest\ReminderTableTestsBase.cs,ReminderTableTestsBase,The constructor "ReminderTableTestsBase" calls a virtual method "CreateRemindersTable".
Empty Catch Block,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Read_Error,The method has an empty catch block.
Empty Catch Block,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Read_Error,The method has an empty catch block.
Empty Catch Block,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The method has an empty catch block.
Empty Catch Block,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The method has an empty catch block.
Empty Catch Block,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The method has an empty catch block.
Empty Catch Block,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The method has an empty catch block.
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorForceCollection,The following statement contains a magic number: const int grainCount = 1000;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorForceCollection,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorForceCollection,The following statement contains a magic number: await grain.ForceActivationCollection(TimeSpan.FromSeconds(4));
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorForceCollection,The following statement contains a magic number: await grain.ForceActivationCollection(TimeSpan.FromSeconds(4));
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldCollectIdleActivations,The following statement contains a magic number: const int grainCount = 1000;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyActivations,The following statement contains a magic number: const int idleGrainCount = 500;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyActivations,The following statement contains a magic number: const int busyGrainCount = 500;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ManualCollectionShouldNotCollectBusyActivations,The following statement contains a magic number: const int idleGrainCount = 500;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ManualCollectionShouldNotCollectBusyActivations,The following statement contains a magic number: const int busyGrainCount = 500;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ManualCollectionShouldNotCollectBusyActivations,The following statement contains a magic number: TimeSpan everything = TimeSpan.FromMinutes(10);
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldCollectIdleActivationsSpecifiedInPerTypeConfiguration,The following statement contains a magic number: var defaultCollectionAgeLimit = WAIT_TIME.Multiply(2);
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldCollectIdleActivationsSpecifiedInPerTypeConfiguration,The following statement contains a magic number: const int grainCount = 1000;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyActivationsSpecifiedInPerTypeConfiguration,The following statement contains a magic number: var defaultCollectionAgeLimit = WAIT_TIME.Multiply(2);
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyActivationsSpecifiedInPerTypeConfiguration,The following statement contains a magic number: const int idleGrainCount = 500;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyActivationsSpecifiedInPerTypeConfiguration,The following statement contains a magic number: const int busyGrainCount = 500;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The following statement contains a magic number: const int burstLength = 1000;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The following statement contains a magic number: Func<int' Task> workFunc =                  async index =>                  {                      // (part of) 4. periodically send a message to each grain...                        // take a grain and call Delay to keep it busy.                      IStatelessWorkerActivationCollectorTestGrain1 g = grains[index];                      await g.Delay(DEFAULT_IDLE_TIMEOUT.Divide(2));                      // identify the activation and record whether it matches the activation ID last reported. it probably won't match in the beginning but should always converge on a match as other activations get collected.                      string aid = await g.IdentifyActivation();                      logger.Info("ActivationCollectorShouldNotCollectBusyStatelessWorkers: identified {0}"' aid);                      matched[index] = aid == activationIds[index];                      activationIds[index] = aid;                  };
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The following statement contains a magic number: tasks0.Add(g.Delay(TimeSpan.FromMilliseconds(10)));
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCollectBusyStatelessWorkers,The following statement contains a magic number: i < 2
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCauseMessageLoss,The following statement contains a magic number: const int busyGrainCount = 500;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldNotCauseMessageLoss,The following statement contains a magic number: const int burstCount = 100;
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldCollectByCollectionSpecificAgeLimitForTwelveSeconds,The following statement contains a magic number: var waitTime = TimeSpan.FromSeconds(30);
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldCollectByCollectionSpecificAgeLimitForTwelveSeconds,The following statement contains a magic number: var defaultCollectionAge = waitTime.Multiply(2);
Magic Number,UnitTests.ActivationsLifeCycleTests,ActivationCollectorTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,ActivationCollectorShouldCollectByCollectionSpecificAgeLimitForTwelveSeconds,The following statement contains a magic number: const int grainCount = 1000;
Magic Number,UnitTests.ActivationsLifeCycleTests,SiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\ActivationCollectorTests.cs,Configure,The following statement contains a magic number: hostBuilder.Configure<GrainCollectionOptions>(options =>                  {                      options.CollectionAge = collectionAgeLimit;                      options.CollectionQuantum = quantum;                      options.ClassSpecificCollectionAge = new Dictionary<string' TimeSpan>                      {                          [typeof(IdleActivationGcTestGrain2).FullName] = DEFAULT_IDLE_TIMEOUT'                          [typeof(BusyActivationGcTestGrain2).FullName] = DEFAULT_IDLE_TIMEOUT'                          [typeof(CollectionSpecificAgeLimitForTenSecondsActivationGcTestGrain).FullName] = TimeSpan.FromSeconds(12)'                      };                  });
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTestInside_Basic,The following statement contains a magic number: var b = this.testCluster.GrainFactory.GetGrain<ICollectionTestGrain>(2);
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTestInside_Basic,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTestInside_Basic,The following statement contains a magic number: var age = a.GetOtherAge().WaitForResultWithThrow(TimeSpan.FromMilliseconds(2000));
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTestInside_Basic,The following statement contains a magic number: Assert.True(age.TotalMilliseconds < 2000' "Should be newly activated grain");
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTest_Stress_1,The following statement contains a magic number: i < 30
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTest_Stress_2_NonReentrant,The following statement contains a magic number: Task t1 = Task.Run(async () =>              {                  List<Task> tasks = new List<Task>();                  for (int i = 0; i < 100; i++)                  {                      tasks.Add(a.IncrCounter());                  }                  await Task.WhenAll(tasks);              });
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTest_Stress_3_Reentrant,The following statement contains a magic number: Task t1 = Task.Run(async () =>              {                  List<Task> tasks = new List<Task>();                  for (int i = 0; i < 100; i++)                  {                      tasks.Add(a.IncrCounter());                  }                  await Task.WhenAll(tasks);              });
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTest_Stress_4_Timer,The following statement contains a magic number: await a.StartTimer(TimeSpan.FromMilliseconds(5)' TimeSpan.FromMilliseconds(100));
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTest_Stress_4_Timer,The following statement contains a magic number: await a.StartTimer(TimeSpan.FromMilliseconds(5)' TimeSpan.FromMilliseconds(100));
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTest_Stress_4_Timer,The following statement contains a magic number: i < 10
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTest_Stress_5,The following statement contains a magic number: Task t1 = Task.Run(async () =>              {                  List<Task> tasks = new List<Task>();                  for (int i = 0; i < 100; i++)                  {                      tasks.Add(a.IncrCounter());                  }                  await Task.WhenAll(tasks);              });
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdleTest_Stress_11,The following statement contains a magic number: i < 100
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdle_NonExistentActivation_Runner,The following statement contains a magic number: var builder = new TestClusterBuilder(2);
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,DeactivateOnIdle_NonExistentActivation_Runner,The following statement contains a magic number: await Task.Delay(3000);
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,PickGrainInNonPrimary,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,PickGrainInNonPrimary,The following statement contains a magic number: i % 30 == 29
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,PickGrainInNonPrimary,The following statement contains a magic number: i % 30 == 29
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,PickGrainInNonPrimary,The following statement contains a magic number: i < 500
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,MissingActivation_WithoutDirectoryLazyDeregistration_MultiSilo,The following statement contains a magic number: var builder = new TestClusterBuilder(2);
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,MissingActivation_WithoutDirectoryLazyDeregistration_MultiSilo,The following statement contains a magic number: i < 10
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,MissingActivation_WithDirectoryLazyDeregistration_SingleSilo,The following statement contains a magic number: var lazyDeregistrationDelay = TimeSpan.FromMilliseconds(5000);
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,MissingActivation_WithDirectoryLazyDeregistration_SingleSilo,The following statement contains a magic number: i < 10
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,MissingActivation_WithoutDirectoryLazyDeregistration_MultiSilo_SecondaryFirst,The following statement contains a magic number: var builder = new TestClusterBuilder(2);
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,MissingActivation_Runner,The following statement contains a magic number: i < 10
Magic Number,UnitTests.ActivationsLifeCycleTests,DeactivateOnIdleTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,MissingActivation_Runner,The following statement contains a magic number: TimeSpan pause = lazyDeregistrationDelay.Multiply(2);
Magic Number,UnitTests.ActivationsLifeCycleTests,LazyDeregistrationDelaySiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ActivationsLifeCycleTests\DeactivateOnIdleTests.cs,Configure,The following statement contains a magic number: hostBuilder.Configure<GrainDirectoryOptions>(options => options.LazyDeregistrationDelay = TimeSpan.FromMilliseconds(5000));
Magic Number,UnitTests,DisabledCallChainReentrancyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DisabledCallChainReentrancyTestRunner.cs,NonReentrantGrain,The following statement contains a magic number: timeout = !nonreentrant.Two().Wait(2000);
Magic Number,UnitTests,DisabledCallChainReentrancyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DisabledCallChainReentrancyTestRunner.cs,NonReentrantGrain_WithMessageInterleavesPredicate_StreamItemDelivery_WhenPredicateReturnsFalse,The following statement contains a magic number: timeout = !grain.PushToStream("foo").Wait(2000);
Magic Number,UnitTests,DisabledCallChainReentrancyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DisabledCallChainReentrancyTestRunner.cs,NonReentrantGrain_WithMayInterleavePredicate_WhenPredicateReturnsFalse,The following statement contains a magic number: timeout = !grain.Two().Wait(2000);
Magic Number,UnitTests,DisabledCallChainReentrancyTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DisabledCallChainReentrancyTestRunner.cs,UnorderedNonReentrantGrain,The following statement contains a magic number: timeout = !unonreentrant.Two().Wait(2000);
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,ReentrantGrain,The following statement contains a magic number: Assert.True(reentrant.Two().Wait(2000)' "Grain should reenter");
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,NonReentrantGrain_WithMayInterleavePredicate_WhenPredicateReturnsTrue,The following statement contains a magic number: Assert.True(grain.TwoReentrant().Wait(2000)' "Grain should reenter when MayInterleave predicate returns true");
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,NonReentrantGrain_WithMayInterleavePredicate_StreamItemDelivery_WhenPredicateReturnsTrue,The following statement contains a magic number: grain.PushToStream("reentrant").Wait(2000);
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,NonReentrantGrain_WithMayInterleavePredicate_WhenPredicateThrows,The following statement contains a magic number: grain.Exceptional().Wait(2000);
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,Reentrancy_Deadlock_1,The following statement contains a magic number: grain1.SetDestination(2).Wait();
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,Reentrancy_Deadlock_1,The following statement contains a magic number: done.Add(grain1.Ping(15));
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,Reentrancy_Deadlock_1,The following statement contains a magic number: var grain2 = this.fixture.GrainFactory.GetGrain<IReentrantSelfManagedGrain>(2);
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,Reentrancy_Deadlock_1,The following statement contains a magic number: done.Add(grain2.Ping(15));
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,Reentrancy_Deadlock_2,The following statement contains a magic number: grain1.SetDestination(2).Wait();
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,Reentrancy_Deadlock_2,The following statement contains a magic number: var grain2 = this.fixture.GrainFactory.GetGrain<INonReentrantSelfManagedGrain>(2);
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,Reentrancy_Deadlock_2,The following statement contains a magic number: done.Add(grain1.Ping(15));
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,Reentrancy_Deadlock_2,The following statement contains a magic number: done.Add(grain2.Ping(15));
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,NonReentrantFanOut,The following statement contains a magic number: await grain.CallOtherLongRunningTask(target' 2' TimeSpan.FromSeconds(1));
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,NonReentrantFanOut,The following statement contains a magic number: await Assert.ThrowsAsync<TimeoutException>(                  () => target.FanOutOtherLongRunningTask(grain' 2' TimeSpan.FromSeconds(10)' 5));
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,NonReentrantFanOut,The following statement contains a magic number: await Assert.ThrowsAsync<TimeoutException>(                  () => target.FanOutOtherLongRunningTask(grain' 2' TimeSpan.FromSeconds(10)' 5));
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,NonReentrantFanOut,The following statement contains a magic number: await Assert.ThrowsAsync<TimeoutException>(                  () => target.FanOutOtherLongRunningTask(grain' 2' TimeSpan.FromSeconds(10)' 5));
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_Task_Stress_Reentrant,The following statement contains a magic number: const int numLoops = 5;
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_Task_Stress_Reentrant,The following statement contains a magic number: const int blockSize = 10;
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_Task_Stress_Reentrant,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromSeconds(40);
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_Task_Stress_NonReentrant,The following statement contains a magic number: const int numLoops = 5;
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_Task_Stress_NonReentrant,The following statement contains a magic number: const int blockSize = 10;
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_Task_Stress_NonReentrant,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromSeconds(40);
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_AC_Stress_Reentrant,The following statement contains a magic number: const int numLoops = 5;
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_AC_Stress_Reentrant,The following statement contains a magic number: const int blockSize = 10;
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_AC_Stress_Reentrant,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromSeconds(40);
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_AC_Stress_NonReentrant,The following statement contains a magic number: const int numLoops = 5;
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_AC_Stress_NonReentrant,The following statement contains a magic number: const int blockSize = 10;
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,FanOut_AC_Stress_NonReentrant,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromSeconds(40);
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,Do_FanOut_Task_Join,The following statement contains a magic number: const int num = 10;
Magic Number,UnitTests,ReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\ReentrancyTests.cs,Do_FanOut_AC_Join,The following statement contains a magic number: const int num = 10;
Magic Number,UnitTests,RetryOperation,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RetryHelper.cs,Sigmoid,The following statement contains a magic number: const int MaxDurationInSeconds = 50;
Magic Number,UnitTests,RetryOperation,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RetryHelper.cs,Sigmoid,The following statement contains a magic number: return TimeSpan.FromMilliseconds(Convert.ToInt32(Math.Round((1 / (1 + Math.Exp(-retryAttempt + 3))) * MaxDurationInSeconds)) * 1000);
Magic Number,UnitTests,RetryOperation,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RetryHelper.cs,Sigmoid,The following statement contains a magic number: return TimeSpan.FromMilliseconds(Convert.ToInt32(Math.Round((1 / (1 + Math.Exp(-retryAttempt + 3))) * MaxDurationInSeconds)) * 1000);
Magic Number,UnitTests,RetryOperation,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RetryHelper.cs,LinearWithTenMilliseconds,The following statement contains a magic number: return TimeSpan.FromMilliseconds(retryAttempt * 10);
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(1000);
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The following statement contains a magic number: Task promise = grain.LongMethod((int)timeout.Multiply(4).TotalMilliseconds);
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The following statement contains a magic number: finished = promise.Wait(timeout.Multiply(3));
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The following statement contains a magic number: Assert.True(stopwatch.Elapsed >= timeout.Multiply(0.9)' "Waited less than " + timeout.Multiply(0.9) + ". Waited " + stopwatch.Elapsed);
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The following statement contains a magic number: Assert.True(stopwatch.Elapsed >= timeout.Multiply(0.9)' "Waited less than " + timeout.Multiply(0.9) + ". Waited " + stopwatch.Elapsed);
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The following statement contains a magic number: Assert.True(stopwatch.Elapsed <= timeout.Multiply(3.5)' "Waited longer than " + timeout.Multiply(3.5) + ". Waited " + stopwatch.Elapsed);
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The following statement contains a magic number: Assert.True(stopwatch.Elapsed <= timeout.Multiply(3.5)' "Waited longer than " + timeout.Multiply(3.5) + ". Waited " + stopwatch.Elapsed);
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The following statement contains a magic number: Assert.True(stopwatch.Elapsed <= timeout.Multiply(0.1)' "Waited longer than " + timeout.Multiply(0.1) + ". Waited " + stopwatch.Elapsed);
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,Timeout_LongMethod,The following statement contains a magic number: Assert.True(stopwatch.Elapsed <= timeout.Multiply(0.1)' "Waited longer than " + timeout.Multiply(0.1) + ". Waited " + stopwatch.Elapsed);
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,CallThatShouldHaveBeenDroppedNotExecutedTest,The following statement contains a magic number: var responseTimeout = TimeSpan.FromSeconds(2);
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,CallThatShouldHaveBeenDroppedNotExecutedTest,The following statement contains a magic number: var delay = TimeSpan.FromSeconds(5);
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,CallThatShouldHaveBeenDroppedNotExecutedTest,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(100));
Magic Number,UnitTests,TimeoutTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimeoutTests.cs,CallThatShouldHaveBeenDroppedNotExecutedTest,The following statement contains a magic number: var secondCall = target.LongRunningTask(2' TimeSpan.Zero);
Magic Number,UnitTests.ConcurrencyTests,ConcurrencyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ConcurrencyTests.cs,ConcurrencyTest_ReadOnly,The following statement contains a magic number: i < 5
Magic Number,UnitTests.ConcurrencyTests,ConcurrencyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ConcurrencyTests.cs,ConcurrencyTest_ModifyReturnList,The following statement contains a magic number: Task<List<int>>[] ll = new Task<List<int>>[20];
Magic Number,UnitTests.ConcurrencyTests,ConcurrencyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ConcurrencyTests.cs,ConcurrencyTest_ModifyReturnList,The following statement contains a magic number: i < 2000
Magic Number,UnitTests.ConcurrencyTests,SiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\ConcurrencyTests.cs,Configure,The following statement contains a magic number: hostBuilder.Configure<SchedulingOptions>(options => options.MaxActiveThreads = 2);
Magic Number,UnitTests.StorageTests,HierarchicalKeyStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\HierarchicalKeyStoreTests.cs,HKS_2Key_Read_Write,The following statement contains a magic number: var store = new HierarchicalKeyStore(2);
Magic Number,UnitTests.StorageTests,HierarchicalKeyStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\HierarchicalKeyStoreTests.cs,HKS_3Key_Read_Write,The following statement contains a magic number: data[ValueName2] = testName + 2;
Magic Number,UnitTests.StorageTests,HierarchicalKeyStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\HierarchicalKeyStoreTests.cs,HKS_3Key_Read_Write,The following statement contains a magic number: data[ValueName3] = testName + 3;
Magic Number,UnitTests.StorageTests,HierarchicalKeyStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\HierarchicalKeyStoreTests.cs,HKS_3Key_Read_Write,The following statement contains a magic number: var store = new HierarchicalKeyStore(3);
Magic Number,UnitTests.StorageTests,HierarchicalKeyStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\HierarchicalKeyStoreTests.cs,HKS_Read_PartialKey,The following statement contains a magic number: data[ValueName2] = testName + 2;
Magic Number,UnitTests.StorageTests,HierarchicalKeyStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\HierarchicalKeyStoreTests.cs,HKS_Read_PartialKey,The following statement contains a magic number: data[ValueName3] = testName + 3;
Magic Number,UnitTests.StorageTests,LocalStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\LocalStoreTests.cs,Store_Read,The following statement contains a magic number: ILocalDataStore store = new HierarchicalKeyStore(2);
Magic Number,UnitTests.StorageTests,LocalStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\LocalStoreTests.cs,Store_WriteRead,The following statement contains a magic number: ILocalDataStore store = new HierarchicalKeyStore(2);
Magic Number,UnitTests.StorageTests,LocalStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\LocalStoreTests.cs,Store_Delete,The following statement contains a magic number: ILocalDataStore store = new HierarchicalKeyStore(2);
Magic Number,UnitTests.StorageTests,LocalStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\LocalStoreTests.cs,Store_ReadMulti,The following statement contains a magic number: ILocalDataStore store = new HierarchicalKeyStore(2);
Magic Number,UnitTests.StorageTests,LocalStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\LocalStoreTests.cs,Store_ReadMulti,The following statement contains a magic number: Assert.Equal(2'  results.Count);
Magic Number,UnitTests.StorageTests,LocalStoreTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\LocalStoreTests.cs,GrainState_Store_WriteRead,The following statement contains a magic number: ILocalDataStore store = new HierarchicalKeyStore(2);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Activate_StoredValue,The following statement contains a magic number: int initialValue = 567;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Activate_StoredValue_Generic,The following statement contains a magic number: int initialValue = 567;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Activate_Error,The following statement contains a magic number: int initialValue = 567;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write,The following statement contains a magic number: Assert.Equal(2' providerState.ProviderStateForTest.WriteCount);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write,The following statement contains a magic number: Assert.Equal(2' providerState.LastStoredGrainState.Field1);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead,The following statement contains a magic number: SetStoredValue(providerName' typeof(MockStorageProvider).FullName' grainType' grain' "Field1"' 42);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead,The following statement contains a magic number: Assert.Equal(2' providerState.ProviderStateForTest.ReadCount);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead,The following statement contains a magic number: Assert.Equal(42' providerState.LastStoredGrainState.Field1);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,MemoryStore_Read_Write,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,MemoryStore_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,MemoryStore_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,MemoryStore_Delete,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,MemoryStore_Delete,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,MemoryStore_Stress_Read,The following statement contains a magic number: const int numIterations = 10000;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,MemoryStore_Stress_Read,The following statement contains a magic number: double tps = (numIterations * 2) / elapsed.TotalSeconds;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Write,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Write,The following statement contains a magic number: Assert.Equal(2' providerState.ProviderStateForTest.WriteCount);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Write,The following statement contains a magic number: Assert.Equal(2' providerState.LastStoredGrainState.Field1);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Delete,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Delete,The following statement contains a magic number: Assert.Equal(2' providerState.LastStoredGrainState.Field1);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Read_Error,The following statement contains a magic number: Assert.Equal(2' providerState.ProviderStateForTest.ReadCount);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The following statement contains a magic number: Assert.Equal(2' providerState.ProviderStateForTest.WriteCount);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The following statement contains a magic number: Assert.Equal(2' providerState.LastStoredGrainState.Field1);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The following statement contains a magic number: await grain.DoWriteError(3' true);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The following statement contains a magic number: Assert.Equal(2' providerState.ProviderStateForTest.WriteCount);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The following statement contains a magic number: Assert.Equal(2' providerState.LastStoredGrainState.Field1);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The following statement contains a magic number: await grain.DoWriteError(4' false);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The following statement contains a magic number: Assert.Equal(3' providerState.ProviderStateForTest.WriteCount);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_Write_Error,The following statement contains a magic number: Assert.Equal(4' providerState.LastStoredGrainState.Field1);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The following statement contains a magic number: SetStoredValue(providerName' typeof(MockStorageProvider).FullName' grainType' grain' "Field1"' 42);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The following statement contains a magic number: Assert.Equal(2' providerState.ProviderStateForTest.ReadCount);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The following statement contains a magic number: Assert.Equal(42' providerState.LastStoredGrainState.Field1);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The following statement contains a magic number: await grain.DoWrite(43);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The following statement contains a magic number: Assert.Equal(2' providerState.ProviderStateForTest.ReadCount);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The following statement contains a magic number: Assert.Equal(43' providerState.LastStoredGrainState.Field1);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The following statement contains a magic number: Assert.Equal(2' providerState.ProviderStateForTest.ReadCount);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The following statement contains a magic number: Assert.Equal(43' providerState.LastStoredGrainState.Field1);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The following statement contains a magic number: Assert.Equal(3' providerState.ProviderStateForTest.ReadCount);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Grain_ReRead_Error,The following statement contains a magic number: Assert.Equal(43' providerState.LastStoredGrainState.Field1);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_BeforeRead,The following statement contains a magic number: int expectedVal = 42;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_AfterRead,The following statement contains a magic number: int expectedVal = 52;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_AfterRead,The following statement contains a magic number: int newVal = 53;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_BeforeWrite,The following statement contains a magic number: int expectedVal = 62;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_BeforeWrite,The following statement contains a magic number: const int attemptedVal3 = 63;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_InconsistentStateException_DeactivatesGrain,The following statement contains a magic number: int expectedVal = 62;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_InconsistentStateException_DeactivatesGrain,The following statement contains a magic number: const int attemptedVal3 = 63;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_InconsistentStateException_DeactivatesOnlyCurrentGrain,The following statement contains a magic number: this.CheckStorageProviderErrors(() => proxy.DoWrite(63' target)' typeof(InconsistentStateException));
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_AfterWrite,The following statement contains a magic number: int expectedVal = 82;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_AfterWrite,The following statement contains a magic number: const int attemptedVal4 = 83;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_BeforeReRead,The following statement contains a magic number: int expectedVal = 72;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_BeforeReRead,The following statement contains a magic number: expectedVal = 73;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_AfterReRead,The following statement contains a magic number: int expectedVal = 92;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_AfterReRead,The following statement contains a magic number: expectedVal = 93;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Error_AfterReRead,The following statement contains a magic number: expectedVal = 94;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Error_Handled_Read,The following statement contains a magic number: int expectedVal = 42;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Error_Handled_Write,The following statement contains a magic number: int expectedVal = 42;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Error_NotHandled_Write,The following statement contains a magic number: int expectedVal = 42;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Persistence_Provider_Loop_Read,The following statement contains a magic number: const int numIterations = 100;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,MemoryStore_UserGrain_Read_Write,The following statement contains a magic number: Assert.Equal(2' friends.Count);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Serialize_GrainState_DeepCopy,The following statement contains a magic number: IUser[] grains = new IUser[3];
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Serialize_GrainState_DeepCopy,The following statement contains a magic number: grains[2] = this.HostedCluster.GrainFactory.GetGrain<IUser>(Guid.NewGuid());
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Serialize_GrainState_DeepCopy_Stress,The following statement contains a magic number: int num = 100;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,Serialize_GrainState_DeepCopy_Stress,The following statement contains a magic number: int loops = num * 100;
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,CheckStorageProviderErrors,The following statement contains a magic number: TimeSpan timeout = Debugger.IsAttached ? TimeSpan.FromMinutes(5) : TimeSpan.FromSeconds(15);
Magic Number,UnitTests.StorageTests,PersistenceGrainTests_Local,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\PersistenceGrainTests.cs,CheckStorageProviderErrors,The following statement contains a magic number: TimeSpan timeout = Debugger.IsAttached ? TimeSpan.FromMinutes(5) : TimeSpan.FromSeconds(15);
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: var counts = new int[4];
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: Assert.True((0 < ip.Endpoint.Port) && (ip.Endpoint.Port < 5)' "Incorrect IP port returned for gateway");
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: i < 2300
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: int low = 2300 / 4;
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: int low = 2300 / 4;
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: int up = 2300 / 4;
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: int up = 2300 / 4;
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: Assert.True((low <= counts[2]) && (counts[2] <= up)' "Gateway selection is incorrectly skewed. " + counts[2]);
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: Assert.True((low <= counts[2]) && (counts[2] <= up)' "Gateway selection is incorrectly skewed. " + counts[2]);
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: Assert.True((low <= counts[2]) && (counts[2] <= up)' "Gateway selection is incorrectly skewed. " + counts[2]);
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: Assert.True((low <= counts[3]) && (counts[3] <= up)' "Gateway selection is incorrectly skewed. " + counts[3]);
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: Assert.True((low <= counts[3]) && (counts[3] <= up)' "Gateway selection is incorrectly skewed. " + counts[3]);
Magic Number,UnitTests.MessageCenterTests,GatewaySelectionTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GatewaySelectionTest.cs,Test_GatewaySelection,The following statement contains a magic number: Assert.True((low <= counts[3]) && (counts[3] <= up)' "Gateway selection is incorrectly skewed. " + counts[3]);
Magic Number,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,Ring_2F_Random,The following statement contains a magic number: await FailureTest(Fail.Random' 2);
Magic Number,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,Ring_2F_Beginning,The following statement contains a magic number: await FailureTest(Fail.First' 2);
Magic Number,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,Ring_2F_End,The following statement contains a magic number: await FailureTest(Fail.Last' 2);
Magic Number,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,Ring_2J,The following statement contains a magic number: await JoinTest(2);
Magic Number,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,JoinTest,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(15));
Magic Number,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,Ring_1F1J,The following statement contains a magic number: var tasks = new Task[2]              {                  Task.Factory.StartNew(() => this.HostedCluster.StopSiloAsync(failures[0]))'                  this.HostedCluster.StartAdditionalSilosAsync(1).ContinueWith(t => joins = t.GetAwaiter().GetResult())              };
Magic Number,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,Ring_1Fsec1J,The following statement contains a magic number: var tasks = new Task[2]              {                  Task.Factory.StartNew(() => this.HostedCluster.StopSiloAsync(fail))'                  this.HostedCluster.StartAdditionalSilosAsync(1).ContinueWith(t => joins = t.GetAwaiter().GetResult())              };
Magic Number,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,PickKey,The following statement contains a magic number: int iteration = 10000;
Magic Number,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,VerificationScenario,The following statement contains a magic number: i < 3
Magic Number,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,printSilos,The following statement contains a magic number: SortedList<int' SiloAddress> ids = new SortedList<int' SiloAddress>(numAdditionalSilos + 2);
Magic Number,UnitTests.General,ConsistentRingProviderTests_Silo,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,AssertEventually,The following statement contains a magic number: AssertEventually(assertion' timeout' TimeSpan.FromMilliseconds(500));
Magic Number,UnitTests.General,Configurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ConsistentRingProviderTests_Silo.cs,Configure,The following statement contains a magic number: clientBuilder.Configure<GatewayOptions>(                      options => options.GatewayListRefreshPeriod = TimeSpan.FromMilliseconds(100));
Magic Number,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,ElasticityTest_CatchingUp,The following statement contains a magic number: double expected = (6.0 * perSilo) / 3.0;
Magic Number,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,ElasticityTest_CatchingUp,The following statement contains a magic number: double expected = (6.0 * perSilo) / 3.0;
Magic Number,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,ElasticityTest_CatchingUp,The following statement contains a magic number: expected = (9.0 * perSilo) / 3.0;
Magic Number,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,ElasticityTest_CatchingUp,The following statement contains a magic number: expected = (9.0 * perSilo) / 3.0;
Magic Number,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,ElasticityTest_StoppingSilos,The following statement contains a magic number: List<SiloHandle> runtimes = await this.HostedCluster.StartAdditionalSilosAsync(2);
Magic Number,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,ElasticityTest_StoppingSilos,The following statement contains a magic number: double expected = perSilo * 1.33;
Magic Number,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,ElasticityTest_AllSilosCPUTooHigh,The following statement contains a magic number: await taintedGrainPrimary.LatchCpuUsage(110.0f);
Magic Number,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,ElasticityTest_AllSilosCPUTooHigh,The following statement contains a magic number: await taintedGrainSecondary.LatchCpuUsage(110.0f);
Magic Number,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,ElasticityTest_AllSilosOverloaded,The following statement contains a magic number: await taintedGrainPrimary.LatchCpuUsage(110.0f);
Magic Number,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,LoadAwareGrainShouldNotAttemptToCreateActivationsOnBusySilos,The following statement contains a magic number: const float undesirability = (float)110.0;
Magic Number,UnitTests.General,ElasticPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\ElasticPlacementTest.cs,ElasticityGrainPlacementTest,The following statement contains a magic number: const long sampleSize = 10;
Magic Number,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,DefaultPlacementShouldBeRandom,The following statement contains a magic number: TestSilosStarted(2);
Magic Number,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,RandomlyPlacedGrainShouldPlaceActivationsRandomly,The following statement contains a magic number: TestSilosStarted(2);
Magic Number,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,RandomlyPlacedGrainShouldPlaceActivationsRandomly,The following statement contains a magic number: var grains =                  Enumerable.Range(0' 20).                  Select(                      n =>                          this.GrainFactory.GetGrain<IRandomPlacementTestGrain>(Guid.NewGuid()));
Magic Number,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,PreferLocalPlacedGrainShouldPlaceActivationsLocally_TwoHops,The following statement contains a magic number: TestSilosStarted(2);
Magic Number,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,PreferLocalPlacedGrainShouldPlaceActivationsLocally_TwoHops,The following statement contains a magic number: int numGrains = 20;
Magic Number,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,LocallyPlacedGrainShouldCreateActivationsOnLocalSilo,The following statement contains a magic number: TestSilosStarted(2);
Magic Number,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,LocallyPlacedGrainShouldCreateActivationsOnLocalSilo,The following statement contains a magic number: const int sampleSize = 5;
Magic Number,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,PreferLocalPlacementGrain_ShouldMigrateWhenHostSiloKilled,The following statement contains a magic number: TestSilosStarted(2);
Magic Number,UnitTests.General,GrainPlacementTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\GrainPlacementTests.cs,PreferLocalPlacementGrain_ShouldNotMigrateWhenOtherSiloKilled,The following statement contains a magic number: TestSilosStarted(2);
Magic Number,UnitTests.General,LoadSheddingTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\LoadSheddingTest.cs,LoadSheddingBasic,The following statement contains a magic number: await Assert.ThrowsAsync<GatewayTooBusyException>(() =>                  grain.SetA(5));
Magic Number,UnitTests.General,LoadSheddingTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\LoadSheddingTest.cs,LoadSheddingBasic,The following statement contains a magic number: await Task.Delay(latchPeriod.Multiply(1.1));
Magic Number,UnitTests.General,LoadSheddingTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\LoadSheddingTest.cs,LoadSheddingComplex,The following statement contains a magic number: await Assert.ThrowsAsync<GatewayTooBusyException>(() =>                  grain.SetA(2));
Magic Number,UnitTests.General,LoadSheddingTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\LoadSheddingTest.cs,LoadSheddingComplex,The following statement contains a magic number: await Task.Delay(latchPeriod.Multiply(1.1));
Magic Number,UnitTests.General,LoadSheddingTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\LoadSheddingTest.cs,LoadSheddingComplex,The following statement contains a magic number: await grain.SetA(4);
Magic Number,UnitTests.General,LoadSheddingTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\LoadSheddingTest.cs,LoadSheddingComplex,The following statement contains a magic number: await Task.Delay(latchPeriod.Multiply(1.1));
Magic Number,UnitTests.General,Halo_RequestContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,Halo_RequestContextShouldBeMaintainedWhenThreadHoppingOccurs,The following statement contains a magic number: int numTasks = 20;
Magic Number,UnitTests.General,Halo_RequestContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,FrameworkContextVerification,The following statement contains a magic number: await Task.Delay(10);
Magic Number,UnitTests.General,Halo_RequestContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,FrameworkContextVerification,The following statement contains a magic number: i < 10
Magic Number,UnitTests.General,Halo_CallContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,Halo_LogicalCallContextShouldBeMaintainedWhenThreadHoppingOccurs,The following statement contains a magic number: int numTasks = 20;
Magic Number,UnitTests.General,Halo_CallContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,FrameworkContextVerification,The following statement contains a magic number: await Task.Delay(10);
Magic Number,UnitTests.General,Halo_CallContextTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\General\RequestContextTest.cs,FrameworkContextVerification,The following statement contains a magic number: i < 10
Magic Number,UnitTests.General,DeadlockDetectionWithAllowCallChainReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DeadlockDetectionWithAllowCallChainReentrancyTests.cs,DeadlockDetection_2,The following statement contains a magic number: long bBase = 100;
Magic Number,UnitTests.General,DeadlockDetectionWithAllowCallChainReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DeadlockDetectionWithAllowCallChainReentrancyTests.cs,DeadlockDetection_3,The following statement contains a magic number: long cBase = 200;
Magic Number,UnitTests.General,DeadlockDetectionWithAllowCallChainReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DeadlockDetectionWithAllowCallChainReentrancyTests.cs,DeadlockDetection_4,The following statement contains a magic number: long cBase = 200;
Magic Number,UnitTests.General,DeadlockDetectionWithAllowCallChainReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DeadlockDetectionWithAllowCallChainReentrancyTests.cs,DeadlockDetection_5,The following statement contains a magic number: long cBase = 200;
Magic Number,UnitTests.General,DeadlockDetectionWithoutAllowCallChainReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DeadlockDetectionWithoutAllowCallChainReentrancyTests.cs,DeadlockDetection_2,The following statement contains a magic number: long bBase = 100;
Magic Number,UnitTests.General,DeadlockDetectionWithoutAllowCallChainReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DeadlockDetectionWithoutAllowCallChainReentrancyTests.cs,DeadlockDetection_3,The following statement contains a magic number: long cBase = 200;
Magic Number,UnitTests.General,DeadlockDetectionWithoutAllowCallChainReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DeadlockDetectionWithoutAllowCallChainReentrancyTests.cs,DeadlockDetection_4,The following statement contains a magic number: long cBase = 200;
Magic Number,UnitTests.General,DeadlockDetectionWithoutAllowCallChainReentrancyTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MessageScheduling\DeadlockDetectionWithoutAllowCallChainReentrancyTests.cs,DeadlockDetection_5,The following statement contains a magic number: long cBase = 200;
Magic Number,Tests.GeoClusterTests,BasicMultiClusterTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\BasicMultiClusterTest.cs,CreateTwoIndependentClusters,The following statement contains a magic number: host.NewCluster(serviceId' clusterB' 5);
Magic Number,Tests.GeoClusterTests,BasicMultiClusterTest,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\BasicMultiClusterTest.cs,CreateTwoIndependentClusters,The following statement contains a magic number: Assert.Equal(5' silos_in_B);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,All_Small,The following statement contains a magic number: numGrains = 600;
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,All_Small,The following statement contains a magic number: await RunWithTimeout("IndependentCreation"' 5000' IndependentCreation);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,All_Small,The following statement contains a magic number: await RunWithTimeout("CreationRace"' 10000' CreationRace);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,All_Small,The following statement contains a magic number: await RunWithTimeout("ConflictResolution"' 40000' ConflictResolution);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,All_Large,The following statement contains a magic number: numGrains = 2000;
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,All_Large,The following statement contains a magic number: await RunWithTimeout("IndependentCreation"' 20000' IndependentCreation);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,All_Large,The following statement contains a magic number: await RunWithTimeout("CreationRace"' 60000' CreationRace);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,All_Large,The following statement contains a magic number: await RunWithTimeout("ConflictResolution"' 120000' ConflictResolution);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,Setup_Clusters,The following statement contains a magic number: await RunWithTimeout("Setup_Clusters"' largesetup ? 120000 : 60000' async () =>              {                  // use a random global service id for testing purposes                  var globalserviceid = Guid.NewGuid();                                    // Create two clusters' each with a single silo.                  cluster0 = "cluster0";                  cluster1 = "cluster1";                  NewGeoCluster<SiloConfigurator>(globalserviceid' cluster0' (short)(largesetup ? 3 : 1));                  NewGeoCluster<SiloConfigurator>(globalserviceid' cluster1' (short)(largesetup ? 4 : 1));                    if (!largesetup)                  {                      // Create one client per cluster                      clients = new ClientWrapper[]                      {                         NewClient<ClientWrapper>(cluster0' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 0' ClientWrapper.Factory)'                      };                  }                  else                  {                      clients = new ClientWrapper[]                      {                         NewClient<ClientWrapper>(cluster0' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster0' 1' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 1' ClientWrapper.Factory)'                      };                  }                  await WaitForLivenessToStabilizeAsync();                    // Configure multicluster                  clients[0].InjectMultiClusterConf(new string[] { cluster0' cluster1 });                  await WaitForMultiClusterGossipToStabilizeAsync(false);              });
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,Setup_Clusters,The following statement contains a magic number: await RunWithTimeout("Setup_Clusters"' largesetup ? 120000 : 60000' async () =>              {                  // use a random global service id for testing purposes                  var globalserviceid = Guid.NewGuid();                                    // Create two clusters' each with a single silo.                  cluster0 = "cluster0";                  cluster1 = "cluster1";                  NewGeoCluster<SiloConfigurator>(globalserviceid' cluster0' (short)(largesetup ? 3 : 1));                  NewGeoCluster<SiloConfigurator>(globalserviceid' cluster1' (short)(largesetup ? 4 : 1));                    if (!largesetup)                  {                      // Create one client per cluster                      clients = new ClientWrapper[]                      {                         NewClient<ClientWrapper>(cluster0' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 0' ClientWrapper.Factory)'                      };                  }                  else                  {                      clients = new ClientWrapper[]                      {                         NewClient<ClientWrapper>(cluster0' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster0' 1' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 1' ClientWrapper.Factory)'                      };                  }                  await WaitForLivenessToStabilizeAsync();                    // Configure multicluster                  clients[0].InjectMultiClusterConf(new string[] { cluster0' cluster1 });                  await WaitForMultiClusterGossipToStabilizeAsync(false);              });
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,Setup_Clusters,The following statement contains a magic number: await RunWithTimeout("Setup_Clusters"' largesetup ? 120000 : 60000' async () =>              {                  // use a random global service id for testing purposes                  var globalserviceid = Guid.NewGuid();                                    // Create two clusters' each with a single silo.                  cluster0 = "cluster0";                  cluster1 = "cluster1";                  NewGeoCluster<SiloConfigurator>(globalserviceid' cluster0' (short)(largesetup ? 3 : 1));                  NewGeoCluster<SiloConfigurator>(globalserviceid' cluster1' (short)(largesetup ? 4 : 1));                    if (!largesetup)                  {                      // Create one client per cluster                      clients = new ClientWrapper[]                      {                         NewClient<ClientWrapper>(cluster0' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 0' ClientWrapper.Factory)'                      };                  }                  else                  {                      clients = new ClientWrapper[]                      {                         NewClient<ClientWrapper>(cluster0' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster0' 1' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 1' ClientWrapper.Factory)'                      };                  }                  await WaitForLivenessToStabilizeAsync();                    // Configure multicluster                  clients[0].InjectMultiClusterConf(new string[] { cluster0' cluster1 });                  await WaitForMultiClusterGossipToStabilizeAsync(false);              });
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,Setup_Clusters,The following statement contains a magic number: await RunWithTimeout("Setup_Clusters"' largesetup ? 120000 : 60000' async () =>              {                  // use a random global service id for testing purposes                  var globalserviceid = Guid.NewGuid();                                    // Create two clusters' each with a single silo.                  cluster0 = "cluster0";                  cluster1 = "cluster1";                  NewGeoCluster<SiloConfigurator>(globalserviceid' cluster0' (short)(largesetup ? 3 : 1));                  NewGeoCluster<SiloConfigurator>(globalserviceid' cluster1' (short)(largesetup ? 4 : 1));                    if (!largesetup)                  {                      // Create one client per cluster                      clients = new ClientWrapper[]                      {                         NewClient<ClientWrapper>(cluster0' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 0' ClientWrapper.Factory)'                      };                  }                  else                  {                      clients = new ClientWrapper[]                      {                         NewClient<ClientWrapper>(cluster0' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 0' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster0' 1' ClientWrapper.Factory)'                         NewClient<ClientWrapper>(cluster1' 1' ClientWrapper.Factory)'                      };                  }                  await WaitForLivenessToStabilizeAsync();                    // Configure multicluster                  clients[0].InjectMultiClusterConf(new string[] { cluster0' cluster1 });                  await WaitForMultiClusterGossipToStabilizeAsync(false);              });
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,IndependentCreation,The following statement contains a magic number: Assert.Equal(numGrains / 2' own0 - base_own0);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,IndependentCreation,The following statement contains a magic number: Assert.Equal(numGrains / 2' own1 - base_own1);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,CreationRace,The following statement contains a magic number: var waitTime = rand.Next(16' 100);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,CreationRace,The following statement contains a magic number: var waitTime = rand.Next(16' 100);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ValidateClusterRaceResults,The following statement contains a magic number: activations.Count != 2
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: Parallel.For(0' numGrains' paralleloptions' i =>              {                  int res0' res1' res2' res3;                    if (i % 2 == 1)                  {                      res0 = clients[0].CallGrain(offset + i);                      res1 = clients[1].CallGrain(offset + i);                      res2 = clients[2 % clients.Length].CallGrain(offset + i);                      res3 = clients[3 % clients.Length].CallGrain(offset + i);                  }                  else                  {                      res0 = clients[1].CallGrain(offset + i);                      res1 = clients[0].CallGrain(offset + i);                      res2 = clients[0].CallGrain(offset + i);                      res3 = clients[1].CallGrain(offset + i);                  }                    Assert.Equal(1' res0);                  Assert.Equal(1' res1);                  Assert.Equal(2' res2);                  Assert.Equal(2' res3);              });
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: Parallel.For(0' numGrains' paralleloptions' i =>              {                  int res0' res1' res2' res3;                    if (i % 2 == 1)                  {                      res0 = clients[0].CallGrain(offset + i);                      res1 = clients[1].CallGrain(offset + i);                      res2 = clients[2 % clients.Length].CallGrain(offset + i);                      res3 = clients[3 % clients.Length].CallGrain(offset + i);                  }                  else                  {                      res0 = clients[1].CallGrain(offset + i);                      res1 = clients[0].CallGrain(offset + i);                      res2 = clients[0].CallGrain(offset + i);                      res3 = clients[1].CallGrain(offset + i);                  }                    Assert.Equal(1' res0);                  Assert.Equal(1' res1);                  Assert.Equal(2' res2);                  Assert.Equal(2' res3);              });
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: Parallel.For(0' numGrains' paralleloptions' i =>              {                  int res0' res1' res2' res3;                    if (i % 2 == 1)                  {                      res0 = clients[0].CallGrain(offset + i);                      res1 = clients[1].CallGrain(offset + i);                      res2 = clients[2 % clients.Length].CallGrain(offset + i);                      res3 = clients[3 % clients.Length].CallGrain(offset + i);                  }                  else                  {                      res0 = clients[1].CallGrain(offset + i);                      res1 = clients[0].CallGrain(offset + i);                      res2 = clients[0].CallGrain(offset + i);                      res3 = clients[1].CallGrain(offset + i);                  }                    Assert.Equal(1' res0);                  Assert.Equal(1' res1);                  Assert.Equal(2' res2);                  Assert.Equal(2' res3);              });
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: Parallel.For(0' numGrains' paralleloptions' i =>              {                  int res0' res1' res2' res3;                    if (i % 2 == 1)                  {                      res0 = clients[0].CallGrain(offset + i);                      res1 = clients[1].CallGrain(offset + i);                      res2 = clients[2 % clients.Length].CallGrain(offset + i);                      res3 = clients[3 % clients.Length].CallGrain(offset + i);                  }                  else                  {                      res0 = clients[1].CallGrain(offset + i);                      res1 = clients[0].CallGrain(offset + i);                      res2 = clients[0].CallGrain(offset + i);                      res3 = clients[1].CallGrain(offset + i);                  }                    Assert.Equal(1' res0);                  Assert.Equal(1' res1);                  Assert.Equal(2' res2);                  Assert.Equal(2' res3);              });
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: Parallel.For(0' numGrains' paralleloptions' i =>              {                  int res0' res1' res2' res3;                    if (i % 2 == 1)                  {                      res0 = clients[0].CallGrain(offset + i);                      res1 = clients[1].CallGrain(offset + i);                      res2 = clients[2 % clients.Length].CallGrain(offset + i);                      res3 = clients[3 % clients.Length].CallGrain(offset + i);                  }                  else                  {                      res0 = clients[1].CallGrain(offset + i);                      res1 = clients[0].CallGrain(offset + i);                      res2 = clients[0].CallGrain(offset + i);                      res3 = clients[1].CallGrain(offset + i);                  }                    Assert.Equal(1' res0);                  Assert.Equal(1' res1);                  Assert.Equal(2' res2);                  Assert.Equal(2' res3);              });
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(7));
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: activations.Count != 2
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: res2 = clients[2 % clients.Length].CallGrain(offset + i);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: res3 = clients[3 % clients.Length].CallGrain(offset + i);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: i % 2 == 1
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: Assert.Equal(3' res0);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: Assert.Equal(4' res1);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: Assert.Equal(5' res2);
Magic Number,Tests.GeoClusterTests,GlobalSingleInstanceClusterTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,ConflictResolution,The following statement contains a magic number: Assert.Equal(6' res3);
Magic Number,Tests.GeoClusterTests,SiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GlobalSingleInstanceClusterTests.cs,Configure,The following statement contains a magic number: hostBuilder.Configure<MultiClusterOptions>(options => options.GlobalSingleInstanceRetryInterval = TimeSpan.FromSeconds(5));
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,StartClustersIfNeeded,The following statement contains a magic number: Assert.True(numclusters >= 2);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,StartClustersIfNeeded,The following statement contains a magic number: System.Threading.ThreadPool.SetMaxThreads(8' 8);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,StartClustersIfNeeded,The following statement contains a magic number: System.Threading.ThreadPool.SetMaxThreads(8' 8);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,StartClustersIfNeeded,The following statement contains a magic number: MultiCluster.WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<Task> checker5 = () => Task.Run(() =>              {                  var x = GetRandom();                  var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                  Task.WaitAll(                     Task.Run(() =>                     {                         Client[0].AddReservationLocal(grainClass' x' 0);                         Client[0].RemoveReservationLocal(grainClass' x' 0);                         Client[0].Synchronize(grainClass' x);                     })'                   Task.Run(() =>                   {                       Client[1].AddReservationLocal(grainClass' x' 1);                       Client[1].RemoveReservationLocal(grainClass' x' 1);                       Client[1].AddReservationLocal(grainClass' x' 2);                       Client[1].Synchronize(grainClass' x);                   })                 );                  var result = Client[0].GetReservationsGlobal(grainClass' x);                  AssertEqual(1' result.Length' grainIdentity);                  AssertEqual(2' result[0]' grainIdentity);              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<Task> checker5 = () => Task.Run(() =>              {                  var x = GetRandom();                  var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                  Task.WaitAll(                     Task.Run(() =>                     {                         Client[0].AddReservationLocal(grainClass' x' 0);                         Client[0].RemoveReservationLocal(grainClass' x' 0);                         Client[0].Synchronize(grainClass' x);                     })'                   Task.Run(() =>                   {                       Client[1].AddReservationLocal(grainClass' x' 1);                       Client[1].RemoveReservationLocal(grainClass' x' 1);                       Client[1].AddReservationLocal(grainClass' x' 2);                       Client[1].Synchronize(grainClass' x);                   })                 );                  var result = Client[0].GetReservationsGlobal(grainClass' x);                  AssertEqual(1' result.Length' grainIdentity);                  AssertEqual(2' result[0]' grainIdentity);              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker6 = async (int preload) =>              {                  var x = GetRandom();                    if (preload % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((preload / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    bool[] done = new bool[numclusters - 1];                    var t = new List<Task>();                    // create listener tasks                  for (int i = 1; i < numclusters; i++)                  {                      int c = i;                      t.Add(Task.Run(async () =>                      {                          while (Client[c].GetALocal(grainClass' x) != 1)                              await Task.Delay(100);                          done[c - 1] = true;                      }));                  }                    // send notification                  Client[0].SetALocal(grainClass' x' 1);                    await Task.WhenAny(                      Task.Delay(20000)'                      Task.WhenAll(t)                  );                    Assert.True(done.All(b => b)' string.Format("checker6({0}): update did not propagate within 20 sec"' preload));              };
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker6 = async (int preload) =>              {                  var x = GetRandom();                    if (preload % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((preload / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    bool[] done = new bool[numclusters - 1];                    var t = new List<Task>();                    // create listener tasks                  for (int i = 1; i < numclusters; i++)                  {                      int c = i;                      t.Add(Task.Run(async () =>                      {                          while (Client[c].GetALocal(grainClass' x) != 1)                              await Task.Delay(100);                          done[c - 1] = true;                      }));                  }                    // send notification                  Client[0].SetALocal(grainClass' x' 1);                    await Task.WhenAny(                      Task.Delay(20000)'                      Task.WhenAll(t)                  );                    Assert.True(done.All(b => b)' string.Format("checker6({0}): update did not propagate within 20 sec"' preload));              };
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker6 = async (int preload) =>              {                  var x = GetRandom();                    if (preload % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((preload / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    bool[] done = new bool[numclusters - 1];                    var t = new List<Task>();                    // create listener tasks                  for (int i = 1; i < numclusters; i++)                  {                      int c = i;                      t.Add(Task.Run(async () =>                      {                          while (Client[c].GetALocal(grainClass' x) != 1)                              await Task.Delay(100);                          done[c - 1] = true;                      }));                  }                    // send notification                  Client[0].SetALocal(grainClass' x' 1);                    await Task.WhenAny(                      Task.Delay(20000)'                      Task.WhenAll(t)                  );                    Assert.True(done.All(b => b)' string.Format("checker6({0}): update did not propagate within 20 sec"' preload));              };
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker6 = async (int preload) =>              {                  var x = GetRandom();                    if (preload % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((preload / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    bool[] done = new bool[numclusters - 1];                    var t = new List<Task>();                    // create listener tasks                  for (int i = 1; i < numclusters; i++)                  {                      int c = i;                      t.Add(Task.Run(async () =>                      {                          while (Client[c].GetALocal(grainClass' x) != 1)                              await Task.Delay(100);                          done[c - 1] = true;                      }));                  }                    // send notification                  Client[0].SetALocal(grainClass' x' 1);                    await Task.WhenAny(                      Task.Delay(20000)'                      Task.WhenAll(t)                  );                    Assert.True(done.All(b => b)' string.Format("checker6({0}): update did not propagate within 20 sec"' preload));              };
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker6 = async (int preload) =>              {                  var x = GetRandom();                    if (preload % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((preload / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    bool[] done = new bool[numclusters - 1];                    var t = new List<Task>();                    // create listener tasks                  for (int i = 1; i < numclusters; i++)                  {                      int c = i;                      t.Add(Task.Run(async () =>                      {                          while (Client[c].GetALocal(grainClass' x) != 1)                              await Task.Delay(100);                          done[c - 1] = true;                      }));                  }                    // send notification                  Client[0].SetALocal(grainClass' x' 1);                    await Task.WhenAny(                      Task.Delay(20000)'                      Task.WhenAll(t)                  );                    Assert.True(done.All(b => b)' string.Format("checker6({0}): update did not propagate within 20 sec"' preload));              };
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker7 = (int variation) => Task.Run(async () =>              {                  int x = GetRandom();                    if (variation % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((variation / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                    // write conditional on client 0' should always succeed                  {                      var result = Client[0].SetAConditional(grainClass' x' Xyz);                      AssertEqual(0' result.Item1' grainIdentity);                      AssertEqual(true' result.Item2' grainIdentity);                      AssertEqual(1' Client[0].GetConfirmedVersion(grainClass' x)' grainIdentity);                  }                    if ((variation / 4) % 2 == 1)                      await Task.Delay(100);                    // write conditional on Client[1]' may or may not succeed based on timing                  {                      var result = Client[1].SetAConditional(grainClass' x' 444);                      if (result.Item1 == 0) // was stale' thus failed                      {                          AssertEqual(false' result.Item2' grainIdentity);                          // must have updated as a result                          AssertEqual(1' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(Xyz' Client[0].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                      else // was up-to-date' thus succeeded                      {                          AssertEqual(true' result.Item2' grainIdentity);                          AssertEqual(1' result.Item1' grainIdentity);                          // version is now 2                          AssertEqual(2' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(444' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                  }              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker7 = (int variation) => Task.Run(async () =>              {                  int x = GetRandom();                    if (variation % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((variation / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                    // write conditional on client 0' should always succeed                  {                      var result = Client[0].SetAConditional(grainClass' x' Xyz);                      AssertEqual(0' result.Item1' grainIdentity);                      AssertEqual(true' result.Item2' grainIdentity);                      AssertEqual(1' Client[0].GetConfirmedVersion(grainClass' x)' grainIdentity);                  }                    if ((variation / 4) % 2 == 1)                      await Task.Delay(100);                    // write conditional on Client[1]' may or may not succeed based on timing                  {                      var result = Client[1].SetAConditional(grainClass' x' 444);                      if (result.Item1 == 0) // was stale' thus failed                      {                          AssertEqual(false' result.Item2' grainIdentity);                          // must have updated as a result                          AssertEqual(1' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(Xyz' Client[0].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                      else // was up-to-date' thus succeeded                      {                          AssertEqual(true' result.Item2' grainIdentity);                          AssertEqual(1' result.Item1' grainIdentity);                          // version is now 2                          AssertEqual(2' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(444' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                  }              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker7 = (int variation) => Task.Run(async () =>              {                  int x = GetRandom();                    if (variation % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((variation / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                    // write conditional on client 0' should always succeed                  {                      var result = Client[0].SetAConditional(grainClass' x' Xyz);                      AssertEqual(0' result.Item1' grainIdentity);                      AssertEqual(true' result.Item2' grainIdentity);                      AssertEqual(1' Client[0].GetConfirmedVersion(grainClass' x)' grainIdentity);                  }                    if ((variation / 4) % 2 == 1)                      await Task.Delay(100);                    // write conditional on Client[1]' may or may not succeed based on timing                  {                      var result = Client[1].SetAConditional(grainClass' x' 444);                      if (result.Item1 == 0) // was stale' thus failed                      {                          AssertEqual(false' result.Item2' grainIdentity);                          // must have updated as a result                          AssertEqual(1' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(Xyz' Client[0].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                      else // was up-to-date' thus succeeded                      {                          AssertEqual(true' result.Item2' grainIdentity);                          AssertEqual(1' result.Item1' grainIdentity);                          // version is now 2                          AssertEqual(2' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(444' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                  }              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker7 = (int variation) => Task.Run(async () =>              {                  int x = GetRandom();                    if (variation % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((variation / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                    // write conditional on client 0' should always succeed                  {                      var result = Client[0].SetAConditional(grainClass' x' Xyz);                      AssertEqual(0' result.Item1' grainIdentity);                      AssertEqual(true' result.Item2' grainIdentity);                      AssertEqual(1' Client[0].GetConfirmedVersion(grainClass' x)' grainIdentity);                  }                    if ((variation / 4) % 2 == 1)                      await Task.Delay(100);                    // write conditional on Client[1]' may or may not succeed based on timing                  {                      var result = Client[1].SetAConditional(grainClass' x' 444);                      if (result.Item1 == 0) // was stale' thus failed                      {                          AssertEqual(false' result.Item2' grainIdentity);                          // must have updated as a result                          AssertEqual(1' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(Xyz' Client[0].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                      else // was up-to-date' thus succeeded                      {                          AssertEqual(true' result.Item2' grainIdentity);                          AssertEqual(1' result.Item1' grainIdentity);                          // version is now 2                          AssertEqual(2' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(444' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                  }              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker7 = (int variation) => Task.Run(async () =>              {                  int x = GetRandom();                    if (variation % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((variation / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                    // write conditional on client 0' should always succeed                  {                      var result = Client[0].SetAConditional(grainClass' x' Xyz);                      AssertEqual(0' result.Item1' grainIdentity);                      AssertEqual(true' result.Item2' grainIdentity);                      AssertEqual(1' Client[0].GetConfirmedVersion(grainClass' x)' grainIdentity);                  }                    if ((variation / 4) % 2 == 1)                      await Task.Delay(100);                    // write conditional on Client[1]' may or may not succeed based on timing                  {                      var result = Client[1].SetAConditional(grainClass' x' 444);                      if (result.Item1 == 0) // was stale' thus failed                      {                          AssertEqual(false' result.Item2' grainIdentity);                          // must have updated as a result                          AssertEqual(1' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(Xyz' Client[0].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                      else // was up-to-date' thus succeeded                      {                          AssertEqual(true' result.Item2' grainIdentity);                          AssertEqual(1' result.Item1' grainIdentity);                          // version is now 2                          AssertEqual(2' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(444' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                  }              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker7 = (int variation) => Task.Run(async () =>              {                  int x = GetRandom();                    if (variation % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((variation / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                    // write conditional on client 0' should always succeed                  {                      var result = Client[0].SetAConditional(grainClass' x' Xyz);                      AssertEqual(0' result.Item1' grainIdentity);                      AssertEqual(true' result.Item2' grainIdentity);                      AssertEqual(1' Client[0].GetConfirmedVersion(grainClass' x)' grainIdentity);                  }                    if ((variation / 4) % 2 == 1)                      await Task.Delay(100);                    // write conditional on Client[1]' may or may not succeed based on timing                  {                      var result = Client[1].SetAConditional(grainClass' x' 444);                      if (result.Item1 == 0) // was stale' thus failed                      {                          AssertEqual(false' result.Item2' grainIdentity);                          // must have updated as a result                          AssertEqual(1' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(Xyz' Client[0].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                      else // was up-to-date' thus succeeded                      {                          AssertEqual(true' result.Item2' grainIdentity);                          AssertEqual(1' result.Item1' grainIdentity);                          // version is now 2                          AssertEqual(2' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(444' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                  }              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker7 = (int variation) => Task.Run(async () =>              {                  int x = GetRandom();                    if (variation % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((variation / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                    // write conditional on client 0' should always succeed                  {                      var result = Client[0].SetAConditional(grainClass' x' Xyz);                      AssertEqual(0' result.Item1' grainIdentity);                      AssertEqual(true' result.Item2' grainIdentity);                      AssertEqual(1' Client[0].GetConfirmedVersion(grainClass' x)' grainIdentity);                  }                    if ((variation / 4) % 2 == 1)                      await Task.Delay(100);                    // write conditional on Client[1]' may or may not succeed based on timing                  {                      var result = Client[1].SetAConditional(grainClass' x' 444);                      if (result.Item1 == 0) // was stale' thus failed                      {                          AssertEqual(false' result.Item2' grainIdentity);                          // must have updated as a result                          AssertEqual(1' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(Xyz' Client[0].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                      else // was up-to-date' thus succeeded                      {                          AssertEqual(true' result.Item2' grainIdentity);                          AssertEqual(1' result.Item1' grainIdentity);                          // version is now 2                          AssertEqual(2' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(444' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                  }              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker7 = (int variation) => Task.Run(async () =>              {                  int x = GetRandom();                    if (variation % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((variation / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                    // write conditional on client 0' should always succeed                  {                      var result = Client[0].SetAConditional(grainClass' x' Xyz);                      AssertEqual(0' result.Item1' grainIdentity);                      AssertEqual(true' result.Item2' grainIdentity);                      AssertEqual(1' Client[0].GetConfirmedVersion(grainClass' x)' grainIdentity);                  }                    if ((variation / 4) % 2 == 1)                      await Task.Delay(100);                    // write conditional on Client[1]' may or may not succeed based on timing                  {                      var result = Client[1].SetAConditional(grainClass' x' 444);                      if (result.Item1 == 0) // was stale' thus failed                      {                          AssertEqual(false' result.Item2' grainIdentity);                          // must have updated as a result                          AssertEqual(1' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(Xyz' Client[0].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                      else // was up-to-date' thus succeeded                      {                          AssertEqual(true' result.Item2' grainIdentity);                          AssertEqual(1' result.Item1' grainIdentity);                          // version is now 2                          AssertEqual(2' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(444' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                  }              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker7 = (int variation) => Task.Run(async () =>              {                  int x = GetRandom();                    if (variation % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((variation / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                    // write conditional on client 0' should always succeed                  {                      var result = Client[0].SetAConditional(grainClass' x' Xyz);                      AssertEqual(0' result.Item1' grainIdentity);                      AssertEqual(true' result.Item2' grainIdentity);                      AssertEqual(1' Client[0].GetConfirmedVersion(grainClass' x)' grainIdentity);                  }                    if ((variation / 4) % 2 == 1)                      await Task.Delay(100);                    // write conditional on Client[1]' may or may not succeed based on timing                  {                      var result = Client[1].SetAConditional(grainClass' x' 444);                      if (result.Item1 == 0) // was stale' thus failed                      {                          AssertEqual(false' result.Item2' grainIdentity);                          // must have updated as a result                          AssertEqual(1' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(Xyz' Client[0].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                      else // was up-to-date' thus succeeded                      {                          AssertEqual(true' result.Item2' grainIdentity);                          AssertEqual(1' result.Item1' grainIdentity);                          // version is now 2                          AssertEqual(2' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(444' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                  }              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker7 = (int variation) => Task.Run(async () =>              {                  int x = GetRandom();                    if (variation % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((variation / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                    // write conditional on client 0' should always succeed                  {                      var result = Client[0].SetAConditional(grainClass' x' Xyz);                      AssertEqual(0' result.Item1' grainIdentity);                      AssertEqual(true' result.Item2' grainIdentity);                      AssertEqual(1' Client[0].GetConfirmedVersion(grainClass' x)' grainIdentity);                  }                    if ((variation / 4) % 2 == 1)                      await Task.Delay(100);                    // write conditional on Client[1]' may or may not succeed based on timing                  {                      var result = Client[1].SetAConditional(grainClass' x' 444);                      if (result.Item1 == 0) // was stale' thus failed                      {                          AssertEqual(false' result.Item2' grainIdentity);                          // must have updated as a result                          AssertEqual(1' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(Xyz' Client[0].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                      else // was up-to-date' thus succeeded                      {                          AssertEqual(true' result.Item2' grainIdentity);                          AssertEqual(1' result.Item1' grainIdentity);                          // version is now 2                          AssertEqual(2' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(444' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                  }              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: Func<int' Task> checker7 = (int variation) => Task.Run(async () =>              {                  int x = GetRandom();                    if (variation % 2 == 0)                      Client[1].GetAGlobal(grainClass' x);                  if ((variation / 2) % 2 == 0)                      Client[0].GetAGlobal(grainClass' x);                    var grainIdentity = string.Format("grainref={0}"' Client[0].GetGrainRef(grainClass' x));                    // write conditional on client 0' should always succeed                  {                      var result = Client[0].SetAConditional(grainClass' x' Xyz);                      AssertEqual(0' result.Item1' grainIdentity);                      AssertEqual(true' result.Item2' grainIdentity);                      AssertEqual(1' Client[0].GetConfirmedVersion(grainClass' x)' grainIdentity);                  }                    if ((variation / 4) % 2 == 1)                      await Task.Delay(100);                    // write conditional on Client[1]' may or may not succeed based on timing                  {                      var result = Client[1].SetAConditional(grainClass' x' 444);                      if (result.Item1 == 0) // was stale' thus failed                      {                          AssertEqual(false' result.Item2' grainIdentity);                          // must have updated as a result                          AssertEqual(1' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(Xyz' Client[0].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(Xyz' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                      else // was up-to-date' thus succeeded                      {                          AssertEqual(true' result.Item2' grainIdentity);                          AssertEqual(1' result.Item1' grainIdentity);                          // version is now 2                          AssertEqual(2' Client[1].GetConfirmedVersion(grainClass' x)' grainIdentity);                          // check stability                          AssertEqual(444' Client[1].GetALocal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[0].GetAGlobal(grainClass' x)' grainIdentity);                          AssertEqual(444' Client[1].GetAGlobal(grainClass' x)' grainIdentity);                      }                  }              });
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: await checker3(4);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: await checker3(20);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: await checker6(2);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: await checker6(3);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: await checker7(4);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: await checker7(7);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: await checker7(2);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: await checker7(3);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: await checker3(20);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: tasks.Add(checker3(4));
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: tasks.Add(checker6(2));
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: tasks.Add(checker6(3));
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: tasks.Add(checker7(2));
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: tasks.Add(checker7(3));
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: tasks.Add(checker7(4));
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: tasks.Add(checker7(5));
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: tasks.Add(checker7(6));
Magic Number,Tests.GeoClusterTests,LogConsistencyTestFixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestFixture.cs,RunChecksOnGrainClass,The following statement contains a magic number: tasks.Add(checker7(7));
Magic Number,Tests.GeoClusterTests,LogConsistencyTestsFourClusters,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestsFourClusters.cs,LogConsistencyTestsFourClusters,The following statement contains a magic number: fixture.StartClustersIfNeeded(4' output);
Magic Number,Tests.GeoClusterTests,LogConsistencyTestsTwoClusters,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\LogConsistencyTestsTwoClusters.cs,LogConsistencyTestsTwoClusters,The following statement contains a magic number: fixture.StartClustersIfNeeded(2' output);
Magic Number,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_1_1,The following statement contains a magic number: Assert.Equal(2'  gateways.Count);
Magic Number,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_1_1,The following statement contains a magic number: i < 2
Magic Number,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_1_1,The following statement contains a magic number: Assert.Equal(2'  gateways.Count);
Magic Number,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The following statement contains a magic number: NewGeoCluster<TwoClusterSiloConfigurator>(globalserviceid' clusterA' 3);
Magic Number,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The following statement contains a magic number: NewGeoCluster<TwoClusterSiloConfigurator>(globalserviceid' clusterB' 3);
Magic Number,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The following statement contains a magic number: Assert.Equal(string.Join("'"' portsB[0]' portsB[2])'                              string.Join("'"' activegateways.Where(g => g.ClusterId == clusterB).Select(g => g.SiloAddress.Endpoint.Port).OrderBy(x => x)));
Magic Number,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The following statement contains a magic number: Assert.Equal(string.Join("'"' portsA[0]' portsA[2])'                              string.Join("'"' activegateways.Where(g => g.ClusterId == clusterA).Select(g => g.SiloAddress.Endpoint.Port).OrderBy(x => x)));
Magic Number,Tests.GeoClusterTests,MultiClusterNetworkTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterNetworkTests.cs,TestMultiClusterConf_3_3,The following statement contains a magic number: Assert.Equal(string.Join("'"' portsB[0]' portsB[2])'                              string.Join("'"' activegateways.Where(g => g.ClusterId == clusterB).Select(g => g.SiloAddress.Endpoint.Port).OrderBy(x => x)));
Magic Number,Tests.GeoClusterTests,TestingClusterHost,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,RunWithTimeout,The following statement contains a magic number: await Task.WhenAny(testtask' Task.Delay(System.Diagnostics.Debugger.IsAttached ? 3600000 : msec));
Magic Number,Tests.GeoClusterTests,TestingClusterHost,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,GetPortBase,The following statement contains a magic number: return 21000 + (clusternumber + 1) * 100;
Magic Number,Tests.GeoClusterTests,TestingClusterHost,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,GetPortBase,The following statement contains a magic number: return 21000 + (clusternumber + 1) * 100;
Magic Number,Tests.GeoClusterTests,TestingClusterHost,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,GetProxyBase,The following statement contains a magic number: return 22000 + (clusternumber + 2) * 100;
Magic Number,Tests.GeoClusterTests,TestingClusterHost,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,GetProxyBase,The following statement contains a magic number: return 22000 + (clusternumber + 2) * 100;
Magic Number,Tests.GeoClusterTests,TestingClusterHost,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,GetProxyBase,The following statement contains a magic number: return 22000 + (clusternumber + 2) * 100;
Magic Number,Tests.GeoClusterTests,TestingClusterHost,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,StopAllClientsAndClusters,The following statement contains a magic number: disposetask.WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 2));
Magic Number,Tests.GeoClusterTests,TestingClusterHost,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,StopAllClientsAndClusters,The following statement contains a magic number: disposetask.WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 2));
Magic Number,Tests.GeoClusterTests,TestingClusterHost,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,BlockAllClusterCommunication,The following statement contains a magic number: hooks.BlockSiloCommunication(dest.SiloAddress.Endpoint' 100);
Magic Number,Tests.GeoClusterTests,StandardGeoClusterConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\TestingClusterHost.cs,Configure,The following statement contains a magic number: hostBuilder.Configure<MultiClusterOptions>(                      options =>                      {                          options.HasMultiClusterNetwork = true;                          options.MaxMultiClusterGateways = 2;                          options.DefaultMultiCluster = null;                          options.GossipChannels = new Dictionary<string' string>                          {                              [MultiClusterOptions.BuiltIn.AzureTable] = TestDefaultConfiguration.DataConnectionString                          };                      });
Magic Number,UnitTests.GeoClusterTests,GatewaySelectionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GatewaySelectionTest.cs,TestMultiClusterGatewaySelection,The following statement contains a magic number: var candidates = new SiloAddress[] {                  SiloAddress.New(new IPEndPoint(0'0)'0)'                  SiloAddress.New(new IPEndPoint(0'0)'1)'                  SiloAddress.New(new IPEndPoint(0'1)'0)'                  SiloAddress.New(new IPEndPoint(0'1)'1)'                  SiloAddress.New(new IPEndPoint(0'234)'1)'                  SiloAddress.New(new IPEndPoint(1'0)'0)'                  SiloAddress.New(new IPEndPoint(1'0)'1)'                  SiloAddress.New(new IPEndPoint(1'1)'1)'                  SiloAddress.New(new IPEndPoint(1'234)'1)'                  SiloAddress.New(new IPEndPoint(2'234)'1)'                  SiloAddress.New(new IPEndPoint(3'234)'1)'                  SiloAddress.New(new IPEndPoint(4'234)'1)'              };
Magic Number,UnitTests.GeoClusterTests,GatewaySelectionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GatewaySelectionTest.cs,TestMultiClusterGatewaySelection,The following statement contains a magic number: var candidates = new SiloAddress[] {                  SiloAddress.New(new IPEndPoint(0'0)'0)'                  SiloAddress.New(new IPEndPoint(0'0)'1)'                  SiloAddress.New(new IPEndPoint(0'1)'0)'                  SiloAddress.New(new IPEndPoint(0'1)'1)'                  SiloAddress.New(new IPEndPoint(0'234)'1)'                  SiloAddress.New(new IPEndPoint(1'0)'0)'                  SiloAddress.New(new IPEndPoint(1'0)'1)'                  SiloAddress.New(new IPEndPoint(1'1)'1)'                  SiloAddress.New(new IPEndPoint(1'234)'1)'                  SiloAddress.New(new IPEndPoint(2'234)'1)'                  SiloAddress.New(new IPEndPoint(3'234)'1)'                  SiloAddress.New(new IPEndPoint(4'234)'1)'              };
Magic Number,UnitTests.GeoClusterTests,GatewaySelectionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GatewaySelectionTest.cs,TestMultiClusterGatewaySelection,The following statement contains a magic number: var candidates = new SiloAddress[] {                  SiloAddress.New(new IPEndPoint(0'0)'0)'                  SiloAddress.New(new IPEndPoint(0'0)'1)'                  SiloAddress.New(new IPEndPoint(0'1)'0)'                  SiloAddress.New(new IPEndPoint(0'1)'1)'                  SiloAddress.New(new IPEndPoint(0'234)'1)'                  SiloAddress.New(new IPEndPoint(1'0)'0)'                  SiloAddress.New(new IPEndPoint(1'0)'1)'                  SiloAddress.New(new IPEndPoint(1'1)'1)'                  SiloAddress.New(new IPEndPoint(1'234)'1)'                  SiloAddress.New(new IPEndPoint(2'234)'1)'                  SiloAddress.New(new IPEndPoint(3'234)'1)'                  SiloAddress.New(new IPEndPoint(4'234)'1)'              };
Magic Number,UnitTests.GeoClusterTests,GatewaySelectionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GatewaySelectionTest.cs,TestMultiClusterGatewaySelection,The following statement contains a magic number: var candidates = new SiloAddress[] {                  SiloAddress.New(new IPEndPoint(0'0)'0)'                  SiloAddress.New(new IPEndPoint(0'0)'1)'                  SiloAddress.New(new IPEndPoint(0'1)'0)'                  SiloAddress.New(new IPEndPoint(0'1)'1)'                  SiloAddress.New(new IPEndPoint(0'234)'1)'                  SiloAddress.New(new IPEndPoint(1'0)'0)'                  SiloAddress.New(new IPEndPoint(1'0)'1)'                  SiloAddress.New(new IPEndPoint(1'1)'1)'                  SiloAddress.New(new IPEndPoint(1'234)'1)'                  SiloAddress.New(new IPEndPoint(2'234)'1)'                  SiloAddress.New(new IPEndPoint(3'234)'1)'                  SiloAddress.New(new IPEndPoint(4'234)'1)'              };
Magic Number,UnitTests.GeoClusterTests,GatewaySelectionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GatewaySelectionTest.cs,TestMultiClusterGatewaySelection,The following statement contains a magic number: var candidates = new SiloAddress[] {                  SiloAddress.New(new IPEndPoint(0'0)'0)'                  SiloAddress.New(new IPEndPoint(0'0)'1)'                  SiloAddress.New(new IPEndPoint(0'1)'0)'                  SiloAddress.New(new IPEndPoint(0'1)'1)'                  SiloAddress.New(new IPEndPoint(0'234)'1)'                  SiloAddress.New(new IPEndPoint(1'0)'0)'                  SiloAddress.New(new IPEndPoint(1'0)'1)'                  SiloAddress.New(new IPEndPoint(1'1)'1)'                  SiloAddress.New(new IPEndPoint(1'234)'1)'                  SiloAddress.New(new IPEndPoint(2'234)'1)'                  SiloAddress.New(new IPEndPoint(3'234)'1)'                  SiloAddress.New(new IPEndPoint(4'234)'1)'              };
Magic Number,UnitTests.GeoClusterTests,GatewaySelectionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GatewaySelectionTest.cs,TestMultiClusterGatewaySelection,The following statement contains a magic number: var candidates = new SiloAddress[] {                  SiloAddress.New(new IPEndPoint(0'0)'0)'                  SiloAddress.New(new IPEndPoint(0'0)'1)'                  SiloAddress.New(new IPEndPoint(0'1)'0)'                  SiloAddress.New(new IPEndPoint(0'1)'1)'                  SiloAddress.New(new IPEndPoint(0'234)'1)'                  SiloAddress.New(new IPEndPoint(1'0)'0)'                  SiloAddress.New(new IPEndPoint(1'0)'1)'                  SiloAddress.New(new IPEndPoint(1'1)'1)'                  SiloAddress.New(new IPEndPoint(1'234)'1)'                  SiloAddress.New(new IPEndPoint(2'234)'1)'                  SiloAddress.New(new IPEndPoint(3'234)'1)'                  SiloAddress.New(new IPEndPoint(4'234)'1)'              };
Magic Number,UnitTests.GeoClusterTests,GatewaySelectionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GatewaySelectionTest.cs,TestMultiClusterGatewaySelection,The following statement contains a magic number: var candidates = new SiloAddress[] {                  SiloAddress.New(new IPEndPoint(0'0)'0)'                  SiloAddress.New(new IPEndPoint(0'0)'1)'                  SiloAddress.New(new IPEndPoint(0'1)'0)'                  SiloAddress.New(new IPEndPoint(0'1)'1)'                  SiloAddress.New(new IPEndPoint(0'234)'1)'                  SiloAddress.New(new IPEndPoint(1'0)'0)'                  SiloAddress.New(new IPEndPoint(1'0)'1)'                  SiloAddress.New(new IPEndPoint(1'1)'1)'                  SiloAddress.New(new IPEndPoint(1'234)'1)'                  SiloAddress.New(new IPEndPoint(2'234)'1)'                  SiloAddress.New(new IPEndPoint(3'234)'1)'                  SiloAddress.New(new IPEndPoint(4'234)'1)'              };
Magic Number,UnitTests.GeoClusterTests,GatewaySelectionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GatewaySelectionTest.cs,TestMultiClusterGatewaySelection,The following statement contains a magic number: var candidates = new SiloAddress[] {                  SiloAddress.New(new IPEndPoint(0'0)'0)'                  SiloAddress.New(new IPEndPoint(0'0)'1)'                  SiloAddress.New(new IPEndPoint(0'1)'0)'                  SiloAddress.New(new IPEndPoint(0'1)'1)'                  SiloAddress.New(new IPEndPoint(0'234)'1)'                  SiloAddress.New(new IPEndPoint(1'0)'0)'                  SiloAddress.New(new IPEndPoint(1'0)'1)'                  SiloAddress.New(new IPEndPoint(1'1)'1)'                  SiloAddress.New(new IPEndPoint(1'234)'1)'                  SiloAddress.New(new IPEndPoint(2'234)'1)'                  SiloAddress.New(new IPEndPoint(3'234)'1)'                  SiloAddress.New(new IPEndPoint(4'234)'1)'              };
Magic Number,UnitTests.GeoClusterTests,GatewaySelectionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GatewaySelectionTest.cs,TestMultiClusterGatewaySelection,The following statement contains a magic number: var x = MembershipHelper.DeterministicBalancedChoice(randomized.Values' 10' group);
Magic Number,UnitTests.GeoClusterTests,GatewaySelectionTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\GatewaySelectionTest.cs,TestMultiClusterGatewaySelection,The following statement contains a magic number: i < 10
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,TwoClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,TwoClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,TwoClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,TwoClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,TwoClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("Deact"' 20000' Deact));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,TwoClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("SequentialCalls"' 10000' SequentialCalls));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,TwoClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("ParallelCalls"' 10000' ParallelCalls));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,TwoClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("ManyParallelCalls"' 10000' ManyParallelCalls));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,TwoClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("ObserverBasedClientNotification"' 10000' ObserverBasedClientNotification));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,TwoClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("StreamBasedClientNotification"' 10000' StreamBasedClientNotification));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ThreeClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2' 2));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ThreeClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2' 2));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ThreeClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2' 2));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ThreeClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2' 2));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ThreeClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2' 2));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ThreeClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("Deact"' 20000' Deact));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ThreeClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("SequentialCalls"' 10000' SequentialCalls));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ThreeClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("ParallelCalls"' 10000' ParallelCalls));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ThreeClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("ManyParallelCalls"' 10000' ManyParallelCalls));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ThreeClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("ObserverBasedClientNotification"' 10000' ObserverBasedClientNotification));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ThreeClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("StreamBasedClientNotification"' 10000' StreamBasedClientNotification));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,FourClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2' 1' 1));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,FourClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2' 1' 1));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,FourClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2' 1' 1));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,FourClusterBattery,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () => StartClustersAndClients(2' 2' 1' 1));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,FourClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("Deact"' 20000' Deact));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,FourClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("SequentialCalls"' 10000' SequentialCalls));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,FourClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("ParallelCalls"' 10000' ParallelCalls));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,FourClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("ManyParallelCalls"' 10000' ManyParallelCalls));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,FourClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("ObserverBasedClientNotification"' 10000' ObserverBasedClientNotification));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,FourClusterBattery,The following statement contains a magic number: testtasks.Add(RunWithTimeout("StreamBasedClientNotification"' 10000' StreamBasedClientNotification));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,FourClusterBattery,The following statement contains a magic number: i < 20
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,StartClustersAndClients,The following statement contains a magic number: System.Threading.ThreadPool.SetMaxThreads(8' 8);
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,StartClustersAndClients,The following statement contains a magic number: System.Threading.ThreadPool.SetMaxThreads(8' 8);
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,StartClustersAndClients,The following statement contains a magic number: WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ManyParallelCalls,The following statement contains a magic number: Parallel.For(0' 20' paralleloptions' i => clients[i % clients.Count].CallGrain(x));
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,ManyParallelCalls,The following statement contains a magic number: AssertEqual(21' Clients[0][0].CallGrain(x)' gref);
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,Deact,The following statement contains a magic number: AssertEqual(2* list.Count() + 1' Clients[0][0].CallGrain(x)' gref);
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,Deact,The following statement contains a magic number: await Task.Delay(5000);
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,BlockedDeact,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () =>              {                  return StartClustersAndClients(2' 2);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,BlockedDeact,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () =>              {                  return StartClustersAndClients(2' 2);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,BlockedDeact,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () =>              {                  return StartClustersAndClients(2' 2);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,BlockedDeact,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () =>              {                  return StartClustersAndClients(2' 2);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,BlockedDeact,The following statement contains a magic number: await RunWithTimeout("BlockedDeact"' 10 * 1000' async () =>              {                  var x = Next();                  var gref = Clients[0][0].GetGrainRef(x);                    // put into cluster A and access from cluster B                  var id = Clients[0][0].GetRuntimeId(x);                    WriteLog("Grain {0} at {1}"' gref' id);                  Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == id);                    var id2 = Clients[1][0].GetRuntimeId(x);                  AssertEqual(id2' id' gref);                    // deactivate grain in cluster A' but block deactivation message to cluster B                    WriteLog("Grain {0} deactivating."' gref);                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                  Clients[0][0].Deactivate(x);                  await Task.Delay(5000);                  UnblockAllClusterCommunication(ClusterNames[0]);                    // reactivate in cluster B. This should cause unregistration to be sent                  WriteLog("Grain {0} reactivating."' gref);                    // activate anew in cluster B                  var val = Clients[1][0].CallGrain(x);                  AssertEqual(1' val' gref);                  var newid = Clients[1][0].GetRuntimeId(x);                  WriteLog("{2} sees Grain {0} at {1}"' gref' newid' ClusterNames[1]);                  Assert.Contains(newid' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // connect from cluster A                  val = Clients[0][0].CallGrain(x);                  AssertEqual(2' val' gref);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,BlockedDeact,The following statement contains a magic number: await RunWithTimeout("BlockedDeact"' 10 * 1000' async () =>              {                  var x = Next();                  var gref = Clients[0][0].GetGrainRef(x);                    // put into cluster A and access from cluster B                  var id = Clients[0][0].GetRuntimeId(x);                    WriteLog("Grain {0} at {1}"' gref' id);                  Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == id);                    var id2 = Clients[1][0].GetRuntimeId(x);                  AssertEqual(id2' id' gref);                    // deactivate grain in cluster A' but block deactivation message to cluster B                    WriteLog("Grain {0} deactivating."' gref);                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                  Clients[0][0].Deactivate(x);                  await Task.Delay(5000);                  UnblockAllClusterCommunication(ClusterNames[0]);                    // reactivate in cluster B. This should cause unregistration to be sent                  WriteLog("Grain {0} reactivating."' gref);                    // activate anew in cluster B                  var val = Clients[1][0].CallGrain(x);                  AssertEqual(1' val' gref);                  var newid = Clients[1][0].GetRuntimeId(x);                  WriteLog("{2} sees Grain {0} at {1}"' gref' newid' ClusterNames[1]);                  Assert.Contains(newid' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // connect from cluster A                  val = Clients[0][0].CallGrain(x);                  AssertEqual(2' val' gref);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,BlockedDeact,The following statement contains a magic number: await RunWithTimeout("BlockedDeact"' 10 * 1000' async () =>              {                  var x = Next();                  var gref = Clients[0][0].GetGrainRef(x);                    // put into cluster A and access from cluster B                  var id = Clients[0][0].GetRuntimeId(x);                    WriteLog("Grain {0} at {1}"' gref' id);                  Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == id);                    var id2 = Clients[1][0].GetRuntimeId(x);                  AssertEqual(id2' id' gref);                    // deactivate grain in cluster A' but block deactivation message to cluster B                    WriteLog("Grain {0} deactivating."' gref);                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                  Clients[0][0].Deactivate(x);                  await Task.Delay(5000);                  UnblockAllClusterCommunication(ClusterNames[0]);                    // reactivate in cluster B. This should cause unregistration to be sent                  WriteLog("Grain {0} reactivating."' gref);                    // activate anew in cluster B                  var val = Clients[1][0].CallGrain(x);                  AssertEqual(1' val' gref);                  var newid = Clients[1][0].GetRuntimeId(x);                  WriteLog("{2} sees Grain {0} at {1}"' gref' newid' ClusterNames[1]);                  Assert.Contains(newid' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // connect from cluster A                  val = Clients[0][0].CallGrain(x);                  AssertEqual(2' val' gref);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,BlockedDeact,The following statement contains a magic number: await RunWithTimeout("BlockedDeact"' 10 * 1000' async () =>              {                  var x = Next();                  var gref = Clients[0][0].GetGrainRef(x);                    // put into cluster A and access from cluster B                  var id = Clients[0][0].GetRuntimeId(x);                    WriteLog("Grain {0} at {1}"' gref' id);                  Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == id);                    var id2 = Clients[1][0].GetRuntimeId(x);                  AssertEqual(id2' id' gref);                    // deactivate grain in cluster A' but block deactivation message to cluster B                    WriteLog("Grain {0} deactivating."' gref);                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                  Clients[0][0].Deactivate(x);                  await Task.Delay(5000);                  UnblockAllClusterCommunication(ClusterNames[0]);                    // reactivate in cluster B. This should cause unregistration to be sent                  WriteLog("Grain {0} reactivating."' gref);                    // activate anew in cluster B                  var val = Clients[1][0].CallGrain(x);                  AssertEqual(1' val' gref);                  var newid = Clients[1][0].GetRuntimeId(x);                  WriteLog("{2} sees Grain {0} at {1}"' gref' newid' ClusterNames[1]);                  Assert.Contains(newid' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // connect from cluster A                  val = Clients[0][0].CallGrain(x);                  AssertEqual(2' val' gref);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanup,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () =>              {                  return StartClustersAndClients(1' 1);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanup,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () =>              {                  return StartClustersAndClients(1' 1);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanup,The following statement contains a magic number: await RunWithTimeout("CacheCleanup"' 1000000' async () =>              {                  var x = Next();                  var gref = Clients[0][0].GetGrainRef(x);                    // put grain into cluster A                   var id = Clients[0][0].GetRuntimeId(x);                    WriteLog("Grain {0} at {1}"' gref' id);                  Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == id);                    // access the grain from B' causing                  // causing entry to be installed in B's directory and/or B's directory caches                  var id2 = Clients[1][0].GetRuntimeId(x);                  AssertEqual(id2' id' gref);                    // block communication from A to B                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                    // change multi-cluster configuration to be only { B }' i.e. exclude A                  WriteLog($"Removing A from multi-cluster");                  Clients[1][0].InjectClusterConfiguration(new string[] { ClusterNames[1] }' "exclude A"' false);                  WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));                    // give the cache cleanup process time to remove all cached references in B                  await Task.Delay(40000);                    // now try to access the grain from cluster B                  // if everything works correctly this should succeed' creating a new instances on B locally                  // (if invalid caches were not removed this times out)                  WriteLog("Grain {0} doubly-activating."' gref);                  var val = Clients[1][0].CallGrain(x);                  AssertEqual(1' val' gref);                  var newid = Clients[1][0].GetRuntimeId(x);                  WriteLog("{2} sees Grain {0} at {1}"' gref' newid' ClusterNames[1]);                  Assert.Contains(newid' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanup,The following statement contains a magic number: await RunWithTimeout("CacheCleanup"' 1000000' async () =>              {                  var x = Next();                  var gref = Clients[0][0].GetGrainRef(x);                    // put grain into cluster A                   var id = Clients[0][0].GetRuntimeId(x);                    WriteLog("Grain {0} at {1}"' gref' id);                  Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == id);                    // access the grain from B' causing                  // causing entry to be installed in B's directory and/or B's directory caches                  var id2 = Clients[1][0].GetRuntimeId(x);                  AssertEqual(id2' id' gref);                    // block communication from A to B                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                    // change multi-cluster configuration to be only { B }' i.e. exclude A                  WriteLog($"Removing A from multi-cluster");                  Clients[1][0].InjectClusterConfiguration(new string[] { ClusterNames[1] }' "exclude A"' false);                  WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));                    // give the cache cleanup process time to remove all cached references in B                  await Task.Delay(40000);                    // now try to access the grain from cluster B                  // if everything works correctly this should succeed' creating a new instances on B locally                  // (if invalid caches were not removed this times out)                  WriteLog("Grain {0} doubly-activating."' gref);                  var val = Clients[1][0].CallGrain(x);                  AssertEqual(1' val' gref);                  var newid = Clients[1][0].GetRuntimeId(x);                  WriteLog("{2} sees Grain {0} at {1}"' gref' newid' ClusterNames[1]);                  Assert.Contains(newid' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanup,The following statement contains a magic number: await RunWithTimeout("CacheCleanup"' 1000000' async () =>              {                  var x = Next();                  var gref = Clients[0][0].GetGrainRef(x);                    // put grain into cluster A                   var id = Clients[0][0].GetRuntimeId(x);                    WriteLog("Grain {0} at {1}"' gref' id);                  Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == id);                    // access the grain from B' causing                  // causing entry to be installed in B's directory and/or B's directory caches                  var id2 = Clients[1][0].GetRuntimeId(x);                  AssertEqual(id2' id' gref);                    // block communication from A to B                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                    // change multi-cluster configuration to be only { B }' i.e. exclude A                  WriteLog($"Removing A from multi-cluster");                  Clients[1][0].InjectClusterConfiguration(new string[] { ClusterNames[1] }' "exclude A"' false);                  WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));                    // give the cache cleanup process time to remove all cached references in B                  await Task.Delay(40000);                    // now try to access the grain from cluster B                  // if everything works correctly this should succeed' creating a new instances on B locally                  // (if invalid caches were not removed this times out)                  WriteLog("Grain {0} doubly-activating."' gref);                  var val = Clients[1][0].CallGrain(x);                  AssertEqual(1' val' gref);                  var newid = Clients[1][0].GetRuntimeId(x);                  WriteLog("{2} sees Grain {0} at {1}"' gref' newid' ClusterNames[1]);                  Assert.Contains(newid' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () =>              {                  return StartClustersAndClients(3' 3);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () =>              {                  return StartClustersAndClients(3' 3);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () =>              {                  return StartClustersAndClients(3' 3);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("Start Clusters and Clients"' 180 * 1000' () =>              {                  return StartClustersAndClients(3' 3);              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("CacheCleanupMultiple"' 1000000' async () =>              {                  int count = 100;                    var grains = Next(count);                  var grefs = grains.Select((x) => Clients[0][0].GetGrainRef(x)).ToList();                    // put grains into cluster A                   var ids = grains.Select((x'i) => Clients[0][i % 3].GetRuntimeId(x)).ToList();                  WriteLog($"{count} Grains activated on A");                  for (int i = 0; i < count; i++ )                     Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == ids[i]);                    // access all the grains living in A from all the clients of B                  // causing  entries to be installed in B's directory and in B's directory caches                  for (int j = 0; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' ids[i]' grefs[i]);                  }                  WriteLog($"{count} Grain references cached in B");                    // block communication from A to B                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                    // change multi-cluster configuration to be only { B }' i.e. exclude A                  WriteLog($"Removing A from multi-cluster");                  Clients[1][0].InjectClusterConfiguration(new string[] { ClusterNames[1] }' "exclude A"' false);                  WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));                    // give the cache cleanup process time to remove all cached references in B                  await Task.Delay(50000);                    // call the grains from random clients of B                  // if everything works correctly this should succeed' creating new instances on B locally                  // (if invalid caches were not removed this times out)                  var vals = grains.Select((x) => Clients[1][Math.Abs(x) % 3].CallGrain(x)).ToList();                  for (int i = 0; i < count; i++)                      AssertEqual(1' vals[i]' grefs[i]);                    // check the placement of the new grains' from client 0                  var newids = grains.Select((x) => Clients[1][0].GetRuntimeId(x)).ToList();                  for (int i = 0; i < count; i++)                      Assert.Contains(newids[i]' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // check the placement of these same grains' from other clients                  for (int j = 1; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' newids[i]' grefs[i]);                  }              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("CacheCleanupMultiple"' 1000000' async () =>              {                  int count = 100;                    var grains = Next(count);                  var grefs = grains.Select((x) => Clients[0][0].GetGrainRef(x)).ToList();                    // put grains into cluster A                   var ids = grains.Select((x'i) => Clients[0][i % 3].GetRuntimeId(x)).ToList();                  WriteLog($"{count} Grains activated on A");                  for (int i = 0; i < count; i++ )                     Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == ids[i]);                    // access all the grains living in A from all the clients of B                  // causing  entries to be installed in B's directory and in B's directory caches                  for (int j = 0; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' ids[i]' grefs[i]);                  }                  WriteLog($"{count} Grain references cached in B");                    // block communication from A to B                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                    // change multi-cluster configuration to be only { B }' i.e. exclude A                  WriteLog($"Removing A from multi-cluster");                  Clients[1][0].InjectClusterConfiguration(new string[] { ClusterNames[1] }' "exclude A"' false);                  WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));                    // give the cache cleanup process time to remove all cached references in B                  await Task.Delay(50000);                    // call the grains from random clients of B                  // if everything works correctly this should succeed' creating new instances on B locally                  // (if invalid caches were not removed this times out)                  var vals = grains.Select((x) => Clients[1][Math.Abs(x) % 3].CallGrain(x)).ToList();                  for (int i = 0; i < count; i++)                      AssertEqual(1' vals[i]' grefs[i]);                    // check the placement of the new grains' from client 0                  var newids = grains.Select((x) => Clients[1][0].GetRuntimeId(x)).ToList();                  for (int i = 0; i < count; i++)                      Assert.Contains(newids[i]' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // check the placement of these same grains' from other clients                  for (int j = 1; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' newids[i]' grefs[i]);                  }              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("CacheCleanupMultiple"' 1000000' async () =>              {                  int count = 100;                    var grains = Next(count);                  var grefs = grains.Select((x) => Clients[0][0].GetGrainRef(x)).ToList();                    // put grains into cluster A                   var ids = grains.Select((x'i) => Clients[0][i % 3].GetRuntimeId(x)).ToList();                  WriteLog($"{count} Grains activated on A");                  for (int i = 0; i < count; i++ )                     Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == ids[i]);                    // access all the grains living in A from all the clients of B                  // causing  entries to be installed in B's directory and in B's directory caches                  for (int j = 0; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' ids[i]' grefs[i]);                  }                  WriteLog($"{count} Grain references cached in B");                    // block communication from A to B                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                    // change multi-cluster configuration to be only { B }' i.e. exclude A                  WriteLog($"Removing A from multi-cluster");                  Clients[1][0].InjectClusterConfiguration(new string[] { ClusterNames[1] }' "exclude A"' false);                  WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));                    // give the cache cleanup process time to remove all cached references in B                  await Task.Delay(50000);                    // call the grains from random clients of B                  // if everything works correctly this should succeed' creating new instances on B locally                  // (if invalid caches were not removed this times out)                  var vals = grains.Select((x) => Clients[1][Math.Abs(x) % 3].CallGrain(x)).ToList();                  for (int i = 0; i < count; i++)                      AssertEqual(1' vals[i]' grefs[i]);                    // check the placement of the new grains' from client 0                  var newids = grains.Select((x) => Clients[1][0].GetRuntimeId(x)).ToList();                  for (int i = 0; i < count; i++)                      Assert.Contains(newids[i]' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // check the placement of these same grains' from other clients                  for (int j = 1; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' newids[i]' grefs[i]);                  }              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("CacheCleanupMultiple"' 1000000' async () =>              {                  int count = 100;                    var grains = Next(count);                  var grefs = grains.Select((x) => Clients[0][0].GetGrainRef(x)).ToList();                    // put grains into cluster A                   var ids = grains.Select((x'i) => Clients[0][i % 3].GetRuntimeId(x)).ToList();                  WriteLog($"{count} Grains activated on A");                  for (int i = 0; i < count; i++ )                     Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == ids[i]);                    // access all the grains living in A from all the clients of B                  // causing  entries to be installed in B's directory and in B's directory caches                  for (int j = 0; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' ids[i]' grefs[i]);                  }                  WriteLog($"{count} Grain references cached in B");                    // block communication from A to B                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                    // change multi-cluster configuration to be only { B }' i.e. exclude A                  WriteLog($"Removing A from multi-cluster");                  Clients[1][0].InjectClusterConfiguration(new string[] { ClusterNames[1] }' "exclude A"' false);                  WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));                    // give the cache cleanup process time to remove all cached references in B                  await Task.Delay(50000);                    // call the grains from random clients of B                  // if everything works correctly this should succeed' creating new instances on B locally                  // (if invalid caches were not removed this times out)                  var vals = grains.Select((x) => Clients[1][Math.Abs(x) % 3].CallGrain(x)).ToList();                  for (int i = 0; i < count; i++)                      AssertEqual(1' vals[i]' grefs[i]);                    // check the placement of the new grains' from client 0                  var newids = grains.Select((x) => Clients[1][0].GetRuntimeId(x)).ToList();                  for (int i = 0; i < count; i++)                      Assert.Contains(newids[i]' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // check the placement of these same grains' from other clients                  for (int j = 1; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' newids[i]' grefs[i]);                  }              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("CacheCleanupMultiple"' 1000000' async () =>              {                  int count = 100;                    var grains = Next(count);                  var grefs = grains.Select((x) => Clients[0][0].GetGrainRef(x)).ToList();                    // put grains into cluster A                   var ids = grains.Select((x'i) => Clients[0][i % 3].GetRuntimeId(x)).ToList();                  WriteLog($"{count} Grains activated on A");                  for (int i = 0; i < count; i++ )                     Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == ids[i]);                    // access all the grains living in A from all the clients of B                  // causing  entries to be installed in B's directory and in B's directory caches                  for (int j = 0; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' ids[i]' grefs[i]);                  }                  WriteLog($"{count} Grain references cached in B");                    // block communication from A to B                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                    // change multi-cluster configuration to be only { B }' i.e. exclude A                  WriteLog($"Removing A from multi-cluster");                  Clients[1][0].InjectClusterConfiguration(new string[] { ClusterNames[1] }' "exclude A"' false);                  WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));                    // give the cache cleanup process time to remove all cached references in B                  await Task.Delay(50000);                    // call the grains from random clients of B                  // if everything works correctly this should succeed' creating new instances on B locally                  // (if invalid caches were not removed this times out)                  var vals = grains.Select((x) => Clients[1][Math.Abs(x) % 3].CallGrain(x)).ToList();                  for (int i = 0; i < count; i++)                      AssertEqual(1' vals[i]' grefs[i]);                    // check the placement of the new grains' from client 0                  var newids = grains.Select((x) => Clients[1][0].GetRuntimeId(x)).ToList();                  for (int i = 0; i < count; i++)                      Assert.Contains(newids[i]' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // check the placement of these same grains' from other clients                  for (int j = 1; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' newids[i]' grefs[i]);                  }              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("CacheCleanupMultiple"' 1000000' async () =>              {                  int count = 100;                    var grains = Next(count);                  var grefs = grains.Select((x) => Clients[0][0].GetGrainRef(x)).ToList();                    // put grains into cluster A                   var ids = grains.Select((x'i) => Clients[0][i % 3].GetRuntimeId(x)).ToList();                  WriteLog($"{count} Grains activated on A");                  for (int i = 0; i < count; i++ )                     Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == ids[i]);                    // access all the grains living in A from all the clients of B                  // causing  entries to be installed in B's directory and in B's directory caches                  for (int j = 0; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' ids[i]' grefs[i]);                  }                  WriteLog($"{count} Grain references cached in B");                    // block communication from A to B                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                    // change multi-cluster configuration to be only { B }' i.e. exclude A                  WriteLog($"Removing A from multi-cluster");                  Clients[1][0].InjectClusterConfiguration(new string[] { ClusterNames[1] }' "exclude A"' false);                  WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));                    // give the cache cleanup process time to remove all cached references in B                  await Task.Delay(50000);                    // call the grains from random clients of B                  // if everything works correctly this should succeed' creating new instances on B locally                  // (if invalid caches were not removed this times out)                  var vals = grains.Select((x) => Clients[1][Math.Abs(x) % 3].CallGrain(x)).ToList();                  for (int i = 0; i < count; i++)                      AssertEqual(1' vals[i]' grefs[i]);                    // check the placement of the new grains' from client 0                  var newids = grains.Select((x) => Clients[1][0].GetRuntimeId(x)).ToList();                  for (int i = 0; i < count; i++)                      Assert.Contains(newids[i]' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // check the placement of these same grains' from other clients                  for (int j = 1; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' newids[i]' grefs[i]);                  }              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("CacheCleanupMultiple"' 1000000' async () =>              {                  int count = 100;                    var grains = Next(count);                  var grefs = grains.Select((x) => Clients[0][0].GetGrainRef(x)).ToList();                    // put grains into cluster A                   var ids = grains.Select((x'i) => Clients[0][i % 3].GetRuntimeId(x)).ToList();                  WriteLog($"{count} Grains activated on A");                  for (int i = 0; i < count; i++ )                     Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == ids[i]);                    // access all the grains living in A from all the clients of B                  // causing  entries to be installed in B's directory and in B's directory caches                  for (int j = 0; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' ids[i]' grefs[i]);                  }                  WriteLog($"{count} Grain references cached in B");                    // block communication from A to B                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                    // change multi-cluster configuration to be only { B }' i.e. exclude A                  WriteLog($"Removing A from multi-cluster");                  Clients[1][0].InjectClusterConfiguration(new string[] { ClusterNames[1] }' "exclude A"' false);                  WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));                    // give the cache cleanup process time to remove all cached references in B                  await Task.Delay(50000);                    // call the grains from random clients of B                  // if everything works correctly this should succeed' creating new instances on B locally                  // (if invalid caches were not removed this times out)                  var vals = grains.Select((x) => Clients[1][Math.Abs(x) % 3].CallGrain(x)).ToList();                  for (int i = 0; i < count; i++)                      AssertEqual(1' vals[i]' grefs[i]);                    // check the placement of the new grains' from client 0                  var newids = grains.Select((x) => Clients[1][0].GetRuntimeId(x)).ToList();                  for (int i = 0; i < count; i++)                      Assert.Contains(newids[i]' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // check the placement of these same grains' from other clients                  for (int j = 1; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' newids[i]' grefs[i]);                  }              });
Magic Number,UnitTests.GeoClusterTests,MultiClusterRegistrationTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,CacheCleanupMultiple,The following statement contains a magic number: await RunWithTimeout("CacheCleanupMultiple"' 1000000' async () =>              {                  int count = 100;                    var grains = Next(count);                  var grefs = grains.Select((x) => Clients[0][0].GetGrainRef(x)).ToList();                    // put grains into cluster A                   var ids = grains.Select((x'i) => Clients[0][i % 3].GetRuntimeId(x)).ToList();                  WriteLog($"{count} Grains activated on A");                  for (int i = 0; i < count; i++ )                     Assert.Contains(Clusters[ClusterNames[0]].Silos' silo => silo.SiloAddress.ToString() == ids[i]);                    // access all the grains living in A from all the clients of B                  // causing  entries to be installed in B's directory and in B's directory caches                  for (int j = 0; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' ids[i]' grefs[i]);                  }                  WriteLog($"{count} Grain references cached in B");                    // block communication from A to B                  BlockAllClusterCommunication(ClusterNames[0]' ClusterNames[1]);                    // change multi-cluster configuration to be only { B }' i.e. exclude A                  WriteLog($"Removing A from multi-cluster");                  Clients[1][0].InjectClusterConfiguration(new string[] { ClusterNames[1] }' "exclude A"' false);                  WaitForMultiClusterGossipToStabilizeAsync(false).WaitWithThrow(TimeSpan.FromMinutes(System.Diagnostics.Debugger.IsAttached ? 60 : 1));                    // give the cache cleanup process time to remove all cached references in B                  await Task.Delay(50000);                    // call the grains from random clients of B                  // if everything works correctly this should succeed' creating new instances on B locally                  // (if invalid caches were not removed this times out)                  var vals = grains.Select((x) => Clients[1][Math.Abs(x) % 3].CallGrain(x)).ToList();                  for (int i = 0; i < count; i++)                      AssertEqual(1' vals[i]' grefs[i]);                    // check the placement of the new grains' from client 0                  var newids = grains.Select((x) => Clients[1][0].GetRuntimeId(x)).ToList();                  for (int i = 0; i < count; i++)                      Assert.Contains(newids[i]' Clusters[ClusterNames[1]].Silos.Select(s => s.SiloAddress.ToString()));                    // check the placement of these same grains' from other clients                  for (int j = 1; j < 3; j++)                  {                      var ids2 = grains.Select((x) => Clients[1][j].GetRuntimeId(x)).ToList();                      for (int i = 0; i < count; i++)                          AssertEqual(ids2[i]' newids[i]' grefs[i]);                  }              });
Magic Number,UnitTests.GeoClusterTests,ClientWrapper,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\GeoClusterTests\MultiClusterRegistrationTests.cs,SubscribeStream,The following statement contains a magic number: Guid guid = new Guid(i' 0' 0' new byte[8]);
Magic Number,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test1,The following statement contains a magic number: ring.AddServer(SiloAddressUtils.NewLocalSiloAddress(2));
Magic Number,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test2,The following statement contains a magic number: VirtualBucketsRingProvider ring = new VirtualBucketsRingProvider(silo1' NullLoggerFactory.Instance' 30);
Magic Number,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test2,The following statement contains a magic number: var range = RangeFactory.CreateEquallyDividedMultiRange(ring.GetMyRange()' 5);
Magic Number,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test2,The following statement contains a magic number: i <= 10
Magic Number,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test3,The following statement contains a magic number: int NUM_SILOS = 100;
Magic Number,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test3,The following statement contains a magic number: double NUM_QUEUES = 10024.0;
Magic Number,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test3,The following statement contains a magic number: int NUM_AGENTS = 4;
Magic Number,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test3,The following statement contains a magic number: SiloAddress silo1 = SiloAddressUtils.NewLocalSiloAddress(random.Next(100000));
Magic Number,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test3,The following statement contains a magic number: VirtualBucketsRingProvider ring = new VirtualBucketsRingProvider(silo1' NullLoggerFactory.Instance' 50);
Magic Number,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test3,The following statement contains a magic number: ring.SiloStatusChangeNotification(SiloAddressUtils.NewLocalSiloAddress(random.Next(100000))' SiloStatus.Active);
Magic Number,UnitTests.LivenessTests,ConsistentRingProviderTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\LivenessTests\ConsistentRingProviderTests.cs,ConsistentRingProvider_Test3,The following statement contains a magic number: output.WriteLine("Expected average range per silo is: {0:0.00}%' expected #queues per silo is: {1:0.00}' expected #queues per agent is: {2:0.000}."'                  100.0 / NUM_SILOS' NUM_QUEUES / NUM_SILOS' NUM_QUEUES / (NUM_SILOS * NUM_AGENTS));
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,ReconstructClientIdPartitionTest_Observer,The following statement contains a magic number: await grain.SetA(10);
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,ReconstructClientIdPartitionTest_Observer,The following statement contains a magic number: await observer.WaitForNotification(10' 0' TimeSpan.FromSeconds(10));
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,ReconstructClientIdPartitionTest_Observer,The following statement contains a magic number: await observer.WaitForNotification(10' 0' TimeSpan.FromSeconds(10));
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,ReconstructClientIdPartitionTest_Observer,The following statement contains a magic number: await Task.Delay(5000);
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,ReconstructClientIdPartitionTest_Observer,The following statement contains a magic number: await grain.SetB(20);
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,ReconstructClientIdPartitionTest_Observer,The following statement contains a magic number: await observer.WaitForNotification(10' 20' TimeSpan.FromSeconds(10));
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,ReconstructClientIdPartitionTest_Observer,The following statement contains a magic number: await observer.WaitForNotification(10' 20' TimeSpan.FromSeconds(10));
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,ReconstructClientIdPartitionTest_Observer,The following statement contains a magic number: await observer.WaitForNotification(10' 20' TimeSpan.FromSeconds(10));
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,ReconstructClientIdPartitionTest_Request,The following statement contains a magic number: var promise = grain.DoLongAction(TimeSpan.FromSeconds(10)' "LongAction");
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,SetupTestAndPickGrain,The following statement contains a magic number: i < 100
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,SetupTestAndPickGrain,The following statement contains a magic number: i < 100
Magic Number,UnitTests.MembershipTests,ClientIdPartitionDataRebuildTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,CreateAndDeployTestCluster,The following statement contains a magic number: var builder = new TestClusterBuilder(3);
Magic Number,UnitTests.MembershipTests,SiloConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\ClientIdPartitionDataRebuildTests.cs,Configure,The following statement contains a magic number: hostBuilder.Configure<ClusterMembershipOptions>(options =>                  {                      options.NumMissedProbesLimit = 1;                      options.ProbeTimeout = TimeSpan.FromMilliseconds(500);                      options.NumVotesForDeathDeclaration = 1;                  });
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_GetGateways,The following statement contains a magic number: var membershipEntries = Enumerable.Range(0' 10).Select(i => CreateMembershipEntryForTest()).ToArray();
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_GetGateways,The following statement contains a magic number: membershipEntries[3].Status = SiloStatus.Active;
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_GetGateways,The following statement contains a magic number: membershipEntries[3].ProxyPort = 0;
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_GetGateways,The following statement contains a magic number: membershipEntries[5].Status = SiloStatus.Active;
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_GetGateways,The following statement contains a magic number: membershipEntries[9].Status = SiloStatus.Active;
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_GetGateways,The following statement contains a magic number: Assert.DoesNotContain(membershipEntries[3].SiloAddress.ToGatewayUri().ToString()' entries);
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_GetGateways,The following statement contains a magic number: Assert.Contains(membershipEntries[5].SiloAddress.ToGatewayUri().ToString()' entries);
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_GetGateways,The following statement contains a magic number: Assert.Contains(membershipEntries[9].SiloAddress.ToGatewayUri().ToString()' entries);
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_GetGateways,The following statement contains a magic number: Assert.Equal(2' entries.Count);
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateRow,The following statement contains a magic number: siloEntry.SuspectTimes =                      new List<Tuple<SiloAddress' DateTime>>                      {                          new Tuple<SiloAddress' DateTime>(CreateSiloAddressForTest()' GetUtcNowWithSecondsResolution().AddSeconds(1))'                          new Tuple<SiloAddress' DateTime>(CreateSiloAddressForTest()' GetUtcNowWithSecondsResolution().AddSeconds(2))                      };
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateRow,The following statement contains a magic number: i < 10
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateRowInParallel,The following statement contains a magic number: var insertions = Task.WhenAll(Enumerable.Range(1' 20).Select(async i => { try { return await membershipTable.InsertRow(data' newTableVer); } catch { return false; } }));
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateRowInParallel,The following statement contains a magic number: await Task.WhenAll(Enumerable.Range(1' 19).Select(async i =>              {                  bool done;                  do                  {                      var updatedTableData = await membershipTable.ReadAll();                      var updatedRow = updatedTableData.Get(data.SiloAddress);                        TableVersion tableVersion = updatedTableData.Version.Next();                        await Task.Delay(10);                      try { done = await membershipTable.UpdateRow(updatedRow.Item1' updatedRow.Item2' tableVersion); } catch { done = false; }                  } while (!done);              })).WithTimeout(TimeSpan.FromSeconds(30));
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateRowInParallel,The following statement contains a magic number: await Task.WhenAll(Enumerable.Range(1' 19).Select(async i =>              {                  bool done;                  do                  {                      var updatedTableData = await membershipTable.ReadAll();                      var updatedRow = updatedTableData.Get(data.SiloAddress);                        TableVersion tableVersion = updatedTableData.Version.Next();                        await Task.Delay(10);                      try { done = await membershipTable.UpdateRow(updatedRow.Item1' updatedRow.Item2' tableVersion); } catch { done = false; }                  } while (!done);              })).WithTimeout(TimeSpan.FromSeconds(30));
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateRowInParallel,The following statement contains a magic number: await Task.WhenAll(Enumerable.Range(1' 19).Select(async i =>              {                  bool done;                  do                  {                      var updatedTableData = await membershipTable.ReadAll();                      var updatedRow = updatedTableData.Get(data.SiloAddress);                        TableVersion tableVersion = updatedTableData.Version.Next();                        await Task.Delay(10);                      try { done = await membershipTable.UpdateRow(updatedRow.Item1' updatedRow.Item2' tableVersion); } catch { done = false; }                  } while (!done);              })).WithTimeout(TimeSpan.FromSeconds(30));
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateRowInParallel,The following statement contains a magic number: Assert.Equal(20' tableData.Version.Version);
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_UpdateIAmAlive,The following statement contains a magic number: Assert.True((amAliveTime - member.Item1.IAmAliveTime).Duration() < TimeSpan.FromMilliseconds(50)' (amAliveTime - member.Item1.IAmAliveTime).Duration().ToString());
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_CleanupDefunctSiloEntries,The following statement contains a magic number: oldEntry.IAmAliveTime = oldEntry.IAmAliveTime.AddDays(-10);
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_CleanupDefunctSiloEntries,The following statement contains a magic number: oldEntry.StartTime = oldEntry.StartTime.AddDays(-10);
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_CleanupDefunctSiloEntries,The following statement contains a magic number: Assert.Equal(2' data.Members.Count);
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,MembershipTable_CleanupDefunctSiloEntries,The following statement contains a magic number: await membershipTable.CleanupDefunctSiloEntries(oldEntry.IAmAliveTime.AddDays(3));
Magic Number,UnitTests.MembershipTests,MembershipTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\MembershipTests\MembershipTableTestsBase.cs,CreateSiloAddressForTest,The following statement contains a magic number: siloAddress.Endpoint.Port = 12345;
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,Add2Remove1UntilFull,The following statement contains a magic number: Assert.Equal(TestBlockSize / 2' block.OldestMessageIndex);
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,FirstMessageWithSequenceNumberTest,The following statement contains a magic number: sequenceNumber += 2;
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,FirstMessageWithSequenceNumberTest,The following statement contains a magic number: Assert.Equal(block.NewestMessageIndex' block.GetIndexOfFirstMessageLessThanOrEqualTo(new EventSequenceTokenV2(sequenceNumber - 2)));
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,FirstMessageWithSequenceNumberTest,The following statement contains a magic number: Assert.Equal(block.NewestMessageIndex - 1' block.GetIndexOfFirstMessageLessThanOrEqualTo(new EventSequenceTokenV2(sequenceNumber - 3)));
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,FirstMessageWithSequenceNumberTest,The following statement contains a magic number: Assert.Equal(50' block.GetIndexOfFirstMessageLessThanOrEqualTo(new EventSequenceTokenV2(sequenceNumber / 2)));
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,FirstMessageWithSequenceNumberTest,The following statement contains a magic number: Assert.Equal(50' block.GetIndexOfFirstMessageLessThanOrEqualTo(new EventSequenceTokenV2(sequenceNumber / 2)));
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,FirstMessageWithSequenceNumberTest,The following statement contains a magic number: Assert.Equal(50' block.GetIndexOfFirstMessageLessThanOrEqualTo(new EventSequenceTokenV2(sequenceNumber / 2 + 1)));
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,FirstMessageWithSequenceNumberTest,The following statement contains a magic number: Assert.Equal(50' block.GetIndexOfFirstMessageLessThanOrEqualTo(new EventSequenceTokenV2(sequenceNumber / 2 + 1)));
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,NextInStreamTest,The following statement contains a magic number: var stream = streams[last%2];
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,NextInStreamTest,The following statement contains a magic number: sequenceNumber += 2;
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,NextInStreamTest,The following statement contains a magic number: Assert.Equal(iteration * 2' streamIndex);
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,NextInStreamTest,The following statement contains a magic number: Assert.Equal(iteration * 4' block.GetSequenceToken(streamIndex' dataAdapter).SequenceNumber);
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,NextInStreamTest,The following statement contains a magic number: Assert.Equal(iteration' TestBlockSize / 2);
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,NextInStreamTest,The following statement contains a magic number: Assert.Equal(2' block.GetSequenceToken(streamIndex' dataAdapter).SequenceNumber);
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,NextInStreamTest,The following statement contains a magic number: Assert.Equal(iteration * 2 + 1' streamIndex);
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,NextInStreamTest,The following statement contains a magic number: Assert.Equal(iteration * 4 + 2' block.GetSequenceToken(streamIndex' dataAdapter).SequenceNumber);
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,NextInStreamTest,The following statement contains a magic number: Assert.Equal(iteration * 4 + 2' block.GetSequenceToken(streamIndex' dataAdapter).SequenceNumber);
Magic Number,UnitTests.OrleansRuntime.Streams,CachedMessageBlockTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\CachedMessageBlockTests.cs,NextInStreamTest,The following statement contains a magic number: Assert.Equal(iteration' TestBlockSize / 2);
Magic Number,UnitTests.OrleansRuntime.Streams,ObjectPoolTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\ObjectPoolTests.cs,Alloc1Free1Test,The following statement contains a magic number: i < 10
Magic Number,UnitTests.OrleansRuntime.Streams,ObjectPoolTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\ObjectPoolTests.cs,Alloc10Free1Test,The following statement contains a magic number: var resources = Enumerable.Range(0' 10).Select(i => pool.Allocate()) .ToList();
Magic Number,UnitTests.OrleansRuntime.Streams,ObjectPoolTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\ObjectPoolTests.cs,Alloc10Free1Test,The following statement contains a magic number: Assert.Equal(10' accumulator.MaxAllocated);
Magic Number,UnitTests.OrleansRuntime.Streams,ObjectPoolTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\ObjectPoolTests.cs,Alloc10Free1Test,The following statement contains a magic number: i < 10
Magic Number,UnitTests.OrleansRuntime.Streams,ObjectPoolTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\ObjectPoolTests.cs,Alloc10Free1Test,The following statement contains a magic number: Assert.Equal(10' accumulator.MaxAllocated);
Magic Number,UnitTests.OrleansRuntime.Streams,ObjectPoolTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\ObjectPoolTests.cs,ReuseResourceTest,The following statement contains a magic number: const int WorkngSet = 20;
Magic Number,UnitTests.OrleansRuntime.Streams,ObjectPoolTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\ObjectPoolTests.cs,ReuseResourceTest,The following statement contains a magic number: int expectedAllocationCount = (i*(5 + 1)) // allocations accumulated in previous loops                                                    + (j + 1);
Magic Number,UnitTests.OrleansRuntime.Streams,ObjectPoolTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\ObjectPoolTests.cs,ReuseResourceTest,The following statement contains a magic number: j < 5
Magic Number,UnitTests.OrleansRuntime.Streams,ObjectPoolTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\ObjectPoolTests.cs,ReuseResourceTest,The following statement contains a magic number: i < 5
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,GoldenPathTest,The following statement contains a magic number: var evictionStrategy = new ChronologicalEvictionStrategy(NullLogger.Instance' new TimePurgePredicate(TimeSpan.FromMinutes(5)' TimeSpan.FromMinutes(10))' null' null);
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,GoldenPathTest,The following statement contains a magic number: var evictionStrategy = new ChronologicalEvictionStrategy(NullLogger.Instance' new TimePurgePredicate(TimeSpan.FromMinutes(5)' TimeSpan.FromMinutes(10))' null' null);
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,GoldenPathTest,The following statement contains a magic number: RunGoldenPath(cache' converter' 111);
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,CacheDrainTest,The following statement contains a magic number: var evictionStrategy = new ChronologicalEvictionStrategy(NullLogger.Instance' new TimePurgePredicate(TimeSpan.FromMinutes(5)' TimeSpan.FromMinutes(10))' null' null);
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,CacheDrainTest,The following statement contains a magic number: var evictionStrategy = new ChronologicalEvictionStrategy(NullLogger.Instance' new TimePurgePredicate(TimeSpan.FromMinutes(5)' TimeSpan.FromMinutes(10))' null' null);
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,CacheDrainTest,The following statement contains a magic number: int startSequenceNuber = 222;
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,RunGoldenPath,The following statement contains a magic number: List<TestQueueMessage> messages = Enumerable.Range(0' MessagesPerBuffer * PooledBufferCount)                  .Select(i => new TestQueueMessage                  {                      StreamGuid = i % 2 == 0 ? stream1.Guid : stream2.Guid'                      StreamNamespace = TestStreamNamespace'                      SequenceNumber = sequenceNumber + i                  })                  .ToList();
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,RunGoldenPath,The following statement contains a magic number: Assert.Equal((sequenceNumber - startOfCache) / 2' stream1EventCount);
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,RunGoldenPath,The following statement contains a magic number: Assert.Equal((sequenceNumber - startOfCache) / 2' stream2EventCount);
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,RunGoldenPath,The following statement contains a magic number: List<TestQueueMessage> moreMessages = Enumerable.Range(0' MessagesPerBuffer)                  .Select(i => new TestQueueMessage                  {                      StreamGuid = i % 2 == 0 ? stream1.Guid : stream2.Guid'                      StreamNamespace = TestStreamNamespace'                      SequenceNumber = sequenceNumber + i                  })                  .ToList();
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,RunGoldenPath,The following statement contains a magic number: Assert.Equal((sequenceNumber - startOfCache) / 2' stream1EventCount);
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,RunGoldenPath,The following statement contains a magic number: Assert.Equal((sequenceNumber - startOfCache) / 2' stream2EventCount);
Magic Number,UnitTests.OrleansRuntime.Streams,PooledQueueCacheTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\Streams\PooledQueueCacheTests.cs,RunGoldenPath,The following statement contains a magic number: j < PooledBufferCount*2
Magic Number,UnitTests.StuckGrainTests,StuckGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\StuckGrainTests.cs,StuckGrainTest_Basic,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(6));
Magic Number,UnitTests.StuckGrainTests,StuckGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\StuckGrainTests.cs,StuckGrainTest_StuckDetectionAndForward,The following statement contains a magic number: await Assert.ThrowsAsync<TimeoutException>(                      () => stuckGrain.NonBlockingCall().WithTimeout(TimeSpan.FromMilliseconds(500)));
Magic Number,UnitTests.StuckGrainTests,StuckGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\StuckGrainTests.cs,StuckGrainTest_StuckDetectionAndForward,The following statement contains a magic number: i < 3
Magic Number,UnitTests.StuckGrainTests,StuckGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\StuckGrainTests.cs,StuckGrainTest_StuckDetectionAndForward,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,UnitTests.StuckGrainTests,StuckGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\StuckGrainTests.cs,StuckGrainTest_StuckDetectionOnDeactivation,The following statement contains a magic number: await Assert.ThrowsAsync<TimeoutException>(                      () => stuckGrain.NonBlockingCall().WithTimeout(TimeSpan.FromMilliseconds(500)));
Magic Number,UnitTests.StuckGrainTests,StuckGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\StuckGrainTests.cs,StuckGrainTest_StuckDetectionOnDeactivation,The following statement contains a magic number: i < 3
Magic Number,UnitTests.StuckGrainTests,StuckGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\StuckGrainTests.cs,StuckGrainTest_StuckDetectionOnDeactivation,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3));
Magic Number,UnitTests.StuckGrainTests,SiloHostConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\StuckGrainTests.cs,Configure,The following statement contains a magic number: hostBuilder.Configure<GrainCollectionOptions>(options =>                      {                          options.CollectionAge = TimeSpan.FromSeconds(3);                          options.CollectionQuantum = TimeSpan.FromSeconds(1);                      });
Magic Number,UnitTests.StuckGrainTests,SiloHostConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\OrleansRuntime\StuckGrainTests.cs,Configure,The following statement contains a magic number: hostBuilder.Configure<SiloMessagingOptions>(options => options.MaxRequestProcessingTime = TimeSpan.FromSeconds(3));
Magic Number,UnitTests.RemindersTest,ReminderTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RemindersTest\ReminderTableTestsBase.cs,RemindersParallelUpsert,The following statement contains a magic number: var upserts = await Task.WhenAll(Enumerable.Range(0' 5).Select(i =>              {                  var reminder = CreateReminder(MakeTestGrainReference()' i.ToString());                  return Task.WhenAll(Enumerable.Range(1' 5).Select(j =>                  {                      return RetryHelper.RetryOnExceptionAsync<string>(5' RetryOperation.Sigmoid' async () =>                      {                          return await remindersTable.UpsertRow(reminder);                      });                  }));              }));
Magic Number,UnitTests.RemindersTest,ReminderTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RemindersTest\ReminderTableTestsBase.cs,RemindersParallelUpsert,The following statement contains a magic number: var upserts = await Task.WhenAll(Enumerable.Range(0' 5).Select(i =>              {                  var reminder = CreateReminder(MakeTestGrainReference()' i.ToString());                  return Task.WhenAll(Enumerable.Range(1' 5).Select(j =>                  {                      return RetryHelper.RetryOnExceptionAsync<string>(5' RetryOperation.Sigmoid' async () =>                      {                          return await remindersTable.UpsertRow(reminder);                      });                  }));              }));
Magic Number,UnitTests.RemindersTest,ReminderTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RemindersTest\ReminderTableTestsBase.cs,RemindersParallelUpsert,The following statement contains a magic number: var upserts = await Task.WhenAll(Enumerable.Range(0' 5).Select(i =>              {                  var reminder = CreateReminder(MakeTestGrainReference()' i.ToString());                  return Task.WhenAll(Enumerable.Range(1' 5).Select(j =>                  {                      return RetryHelper.RetryOnExceptionAsync<string>(5' RetryOperation.Sigmoid' async () =>                      {                          return await remindersTable.UpsertRow(reminder);                      });                  }));              }));
Magic Number,UnitTests.RemindersTest,ReminderTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RemindersTest\ReminderTableTestsBase.cs,RemindersParallelUpsert,The following statement contains a magic number: Assert.DoesNotContain(upserts' i => i.Distinct().Count() != 5);
Magic Number,UnitTests.RemindersTest,ReminderTableTestsBase,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\RemindersTest\ReminderTableTestsBase.cs,RemindersRange,The following statement contains a magic number: await Task.WhenAll(Enumerable.Range(1' iterations).Select(async i =>              {                  GrainReference grainRef = MakeTestGrainReference();                    await RetryHelper.RetryOnExceptionAsync<Task>(10' RetryOperation.Sigmoid' async () =>                  {                      await remindersTable.UpsertRow(CreateReminder(grainRef' i.ToString()));                      return Task.CompletedTask;                  });              }));
Magic Number,UnitTests.StorageTests.Relational,CommonStorageTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\CommonStorageTests.cs,PersistenceStorage_WriteReadWriteReadStatesInParallel,The following statement contains a magic number: int StartOfRange = 33900;
Magic Number,UnitTests.StorageTests.Relational,CommonStorageTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\CommonStorageTests.cs,PersistenceStorage_WriteReadWriteReadStatesInParallel,The following statement contains a magic number: int MaxNumberOfThreads = Environment.ProcessorCount * 3;
Magic Number,UnitTests.StorageTests.Relational,CommonStorageTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\CommonStorageTests.cs,PersistenceStorage_WriteReadWriteReadStatesInParallel,The following statement contains a magic number: Parallel.ForEach(grainStates' new ParallelOptions { MaxDegreeOfParallelism = MaxNumberOfThreads }' async grainData =>              {                  // This loop writes the state consecutive times to the database to make sure its                  // version is updated appropriately.                  for(int k = 0; k < 10; ++k)                  {                      var versionBefore = grainData.Item2.ETag;                      await RetryHelper.RetryOnExceptionAsync(5' RetryOperation.Sigmoid' async () =>                      {                          await Store_WriteRead(grainTypeName' grainData.Item1' grainData.Item2);                          return Task.CompletedTask;                      });                        var versionAfter = grainData.Item2.ETag;                      Assert.NotEqual(versionBefore' versionAfter);                  }              });
Magic Number,UnitTests.StorageTests.Relational,CommonStorageTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\CommonStorageTests.cs,PersistenceStorage_WriteReadWriteReadStatesInParallel,The following statement contains a magic number: Parallel.ForEach(grainStates' new ParallelOptions { MaxDegreeOfParallelism = MaxNumberOfThreads }' async grainData =>              {                  // This loop writes the state consecutive times to the database to make sure its                  // version is updated appropriately.                  for(int k = 0; k < 10; ++k)                  {                      var versionBefore = grainData.Item2.ETag;                      await RetryHelper.RetryOnExceptionAsync(5' RetryOperation.Sigmoid' async () =>                      {                          await Store_WriteRead(grainTypeName' grainData.Item1' grainData.Item2);                          return Task.CompletedTask;                      });                        var versionAfter = grainData.Item2.ETag;                      Assert.NotEqual(versionBefore' versionAfter);                  }              });
Magic Number,UnitTests.StorageTests.Relational,RandomUtilities,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\RandomUtilities.cs,GetRandom,The following statement contains a magic number: const long SymbolsDefaultCount = 15;
Magic Number,UnitTests.StorageTests.Relational,RandomUtilities,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\RandomUtilities.cs,GetRandomGrainReference,The following statement contains a magic number: const long SymbolsDefaultCount = 15;
Magic Number,UnitTests.StorageTests.Relational,Range<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\Range.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,UnitTests.StorageTests.Relational,Range<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\Range.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + comparer.GetHashCode(Start);
Magic Number,UnitTests.StorageTests.Relational,Range<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\Range.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + comparer.GetHashCode(End);
Magic Number,UnitTests.StorageTests.Relational.TestDataSets,TestState1,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\TestDataSets\TestState1.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,UnitTests.StorageTests.Relational.TestDataSets,TestState1,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\TestDataSets\TestState1.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + EqualityComparer<string>.Default.GetHashCode(A);
Magic Number,UnitTests.StorageTests.Relational.TestDataSets,TestState1,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\TestDataSets\TestState1.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + B.GetHashCode();
Magic Number,UnitTests.StorageTests.Relational.TestDataSets,TestState1,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\TestDataSets\TestState1.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + C.GetHashCode();
Magic Number,UnitTests.StorageTests.Relational.TestDataSets,TestStateGeneric1<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\TestDataSets\TestStateGeneric1.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,UnitTests.StorageTests.Relational.TestDataSets,TestStateGeneric1<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\TestDataSets\TestStateGeneric1.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + EqualityComparer<T>.Default.GetHashCode(SomeData);
Magic Number,UnitTests.StorageTests.Relational.TestDataSets,TestStateGeneric1<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\TestDataSets\TestStateGeneric1.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + EqualityComparer<string>.Default.GetHashCode(A);
Magic Number,UnitTests.StorageTests.Relational.TestDataSets,TestStateGeneric1<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\TestDataSets\TestStateGeneric1.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + B.GetHashCode();
Magic Number,UnitTests.StorageTests.Relational.TestDataSets,TestStateGeneric1<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StorageTests\TestDataSets\TestStateGeneric1.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + C.GetHashCode();
Magic Number,UnitTests.Streaming,MultipleStreamsTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\MultipleStreamsTestRunner.cs,StreamTest_MultipleStreams_ManyDifferent_ManyProducerGrainsManyConsumerGrains,The following statement contains a magic number: i < 10
Magic Number,UnitTests.Streaming,StreamProvidersTests_ProviderConfigNotLoaded,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamProvidersTests.cs,ServiceId_SiloRestart,The following statement contains a magic number: await AsyncExecutorWithRetries.ExecuteWithRetries(async _ =>                      {                          var serviceId = await this.fixture.Client.GetTestHooks(siloHandle).GetServiceId();                          Assert.Equal(this.fixture.ServiceId' serviceId); // "ServiceId active in silo"                      }'                      30'                      (ex' i) => ex is OrleansException'                      TimeSpan.FromSeconds(60)'                      new FixedBackoff(TimeSpan.FromSeconds(2)));
Magic Number,UnitTests.Streaming,StreamProvidersTests_ProviderConfigNotLoaded,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamProvidersTests.cs,ServiceId_SiloRestart,The following statement contains a magic number: await AsyncExecutorWithRetries.ExecuteWithRetries(async _ =>                      {                          var serviceId = await this.fixture.Client.GetTestHooks(siloHandle).GetServiceId();                          Assert.Equal(this.fixture.ServiceId' serviceId); // "ServiceId active in silo"                      }'                      30'                      (ex' i) => ex is OrleansException'                      TimeSpan.FromSeconds(60)'                      new FixedBackoff(TimeSpan.FromSeconds(2)));
Magic Number,UnitTests.Streaming,StreamProvidersTests_ProviderConfigNotLoaded,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamProvidersTests.cs,ServiceId_SiloRestart,The following statement contains a magic number: await AsyncExecutorWithRetries.ExecuteWithRetries(async _ =>                      {                          var serviceId = await this.fixture.Client.GetTestHooks(siloHandle).GetServiceId();                          Assert.Equal(this.fixture.ServiceId' serviceId); // "ServiceId active in silo"                      }'                      30'                      (ex' i) => ex is OrleansException'                      TimeSpan.FromSeconds(60)'                      new FixedBackoff(TimeSpan.FromSeconds(2)));
Magic Number,UnitTests.Streaming,Fixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamProvidersTests.cs,ConfigureTestCluster,The following statement contains a magic number: builder.Options.InitialSilosCount = 4;
Magic Number,UnitTests.Streaming,Fixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamProvidersTests.cs,ConfigureTestCluster,The following statement contains a magic number: builder.Options.InitialSilosCount = 4;
Magic Number,UnitTests.StreamingTests,PubSubRendezvousGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\PubSubRendezvousGrainTests.cs,RegisterConsumerFaultTest,The following statement contains a magic number: Assert.Equal(2' consumers);
Magic Number,UnitTests.StreamingTests,PubSubRendezvousGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\PubSubRendezvousGrainTests.cs,UnregisterConsumerFaultTest,The following statement contains a magic number: Assert.Equal(2' consumers);
Magic Number,UnitTests.StreamingTests,PubSubRendezvousGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\PubSubRendezvousGrainTests.cs,RegisterProducerFaultTest,The following statement contains a magic number: Assert.Equal(2' producers);
Magic Number,UnitTests.StreamingTests,PubSubRendezvousGrainTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\PubSubRendezvousGrainTests.cs,UnregisterProducerFaultTest,The following statement contains a magic number: Assert.Equal(2' producers);
Magic Number,UnitTests.StreamingTests,Fixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\PubSubRendezvousGrainTests.cs,ConfigureTestCluster,The following statement contains a magic number: builder.Options.InitialSilosCount = 4;
Magic Number,UnitTests.StreamingTests,Fixture,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\PubSubRendezvousGrainTests.cs,ConfigureTestCluster,The following statement contains a magic number: builder.Options.InitialSilosCount = 4;
Magic Number,UnitTests.StreamingTests,StreamPubSubReliabilityTests,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamPubSubReliabilityTests.cs,Test_PubSub_Stream,The following statement contains a magic number: await producer.SendItem(2);
Magic Number,UnitTests.StreamingTests,Streaming_ProducerClientObject,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\StreamingTests\StreamTestHelperClasses.cs,ProducePeriodicSeries,The following statement contains a magic number: return this.producer.ProducePeriodicSeries(timerCallback =>                      {                          return new AsyncTaskSafeTimer(NullLogger.Instance' timerCallback' null' TimeSpan.Zero' TimeSpan.FromMilliseconds(10));                      }' count);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GrainStorage_Delete,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GrainStorage_Delete,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GuidKey_GrainStorage_Read_Write,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GuidKey_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GuidKey_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_LongKey_GrainStorage_Read_Write,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_LongKey_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_LongKey_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_LongKeyExtended_GrainStorage_Read_Write,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_LongKeyExtended_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_LongKeyExtended_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_LongKeyExtended_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GuidKeyExtended_GrainStorage_Read_Write,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GuidKeyExtended_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GuidKeyExtended_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GuidKeyExtended_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_Generic_GrainStorage_Read_Write,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_Generic_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_Generic_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_NestedGeneric_GrainStorage_Read_Write,The following statement contains a magic number: await grain.DoWrite(new List<int> { 1' 2 });
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_NestedGeneric_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(new List<int> { 1' 2 }' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_NestedGeneric_GrainStorage_Read_Write,The following statement contains a magic number: Assert.Equal(new List<int> { 1' 2 }' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_Generic_GrainStorage_DiffTypes,The following statement contains a magic number: double expected3 = 5.1;
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_Generic_GrainStorage_DiffTypes,The following statement contains a magic number: expected1 = 2;
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_Generic_GrainStorage_DiffTypes,The following statement contains a magic number: expected3 = 6.2;
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GrainStorage_SiloRestart,The following statement contains a magic number: await grain.DoWrite(2);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GrainStorage_SiloRestart,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,TestExtensions.Runners,GrainPersistenceTestsRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TestRunners\GrainPersistenceTestRunner.cs,Grain_GrainStorage_SiloRestart,The following statement contains a magic number: Assert.Equal(2' val);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,Test_Reminders_Basic_ListOps,The following statement contains a magic number: const int count = 5;
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,Test_Reminders_Basic_ListOps,The following statement contains a magic number: Thread.Sleep(period.Multiply(2) + LEEWAY);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,Test_Reminders_Basic_ListOps,The following statement contains a magic number: Assert.Equal(2'  curr);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,Test_Reminders_1J_MultiGrainMultiReminders,The following statement contains a magic number: Thread.Sleep(period.Multiply(5));
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTestChurn,The following statement contains a magic number: TimeSpan sleepFor = period.Multiply(2);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTestChurn,The following statement contains a magic number: sleepFor = period.Multiply(2);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTestChurn,The following statement contains a magic number: sleepFor = period.Multiply(2);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTestChurn,The following statement contains a magic number: sleepFor = period.Multiply(2);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTestChurn,The following statement contains a magic number: AssertIsInRange(last' 4' 6' g' R1' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTestChurn,The following statement contains a magic number: AssertIsInRange(last' 4' 6' g' R1' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTestChurn,The following statement contains a magic number: AssertIsInRange(last' 4' 6' g' R2' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTestChurn,The following statement contains a magic number: AssertIsInRange(last' 4' 6' g' R2' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTestChurn,The following statement contains a magic number: AssertIsInRange(last' 9' 10' g' DR' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTestChurn,The following statement contains a magic number: AssertIsInRange(last' 9' 10' g' DR' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainFailureTest,The following statement contains a magic number: sleepFor = period.Multiply(2) + LEEWAY;
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: TimeSpan sleepFor = period.Multiply(2) + LEEWAY;
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 1' 2' g' DR' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 1' 2' g' R1' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R1' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R1' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 1' 2' g' R2' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 5' 6' g' DR' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 5' 6' g' DR' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R1' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R1' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R2' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R2' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 7' 8' g' DR' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 7' 8' g' DR' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: sleepFor = period.Multiply(3) + LEEWAY;
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R1' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R1' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R2' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R2' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 10' 12' g' DR' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 10' 12' g' DR' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R1' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R1' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R2' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 3' 4' g' R2' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 10' 12' g' DR' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerGrainMultiReminderTest,The following statement contains a magic number: AssertIsInRange(last' 10' 12' g' DR' sleepFor);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,PerCopyGrainFailureTest,The following statement contains a magic number: Thread.Sleep(period.Multiply(2) + LEEWAY);
Magic Number,UnitTests.TimerTests,ReminderTests_Base,D:\research\architectureSmells\repos\dotnet_orleans\test\TesterInternal\TimerTests\ReminderTests_Base.cs,HandleError,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromMilliseconds(10));
