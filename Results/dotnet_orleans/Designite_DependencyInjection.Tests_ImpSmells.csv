Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DependencyInjection.Tests,DependencyInjectionGrainTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\DependencyInjection.Tests\DependencyInjectionGrainTestsRunner.cs,CanGetGrainWithInjectedDependencies,The length of the statement  "            IDIGrainWithInjectedServices grain = this.fixture.GrainFactory.GetGrain<IDIGrainWithInjectedServices>(GetRandomGrainId()); " is 122.
Long Statement,DependencyInjection.Tests,DependencyInjectionGrainTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\DependencyInjection.Tests\DependencyInjectionGrainTestsRunner.cs,CanGetGrainWithInjectedGrainFactory,The length of the statement  "            IDIGrainWithInjectedServices grain = this.fixture.GrainFactory.GetGrain<IDIGrainWithInjectedServices>(GetRandomGrainId()); " is 122.
Long Statement,DependencyInjection.Tests,DependencyInjectionGrainTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\DependencyInjection.Tests\DependencyInjectionGrainTestsRunner.cs,CannotGetExplictlyRegisteredGrain,The length of the statement  "            ISimpleDIGrain grain = this.fixture.GrainFactory.GetGrain<ISimpleDIGrain>(GetRandomGrainId()' grainClassNamePrefix: "UnitTests.Grains.ExplicitlyRegistered"); " is 157.
Magic Number,DependencyInjection.Tests,DependencyInjectionGrainTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\DependencyInjection.Tests\DependencyInjectionGrainTestsRunner.cs,ScopedDependenciesAreThreadSafe,The following statement contains a magic number: const int parallelCalls = 10;
Magic Number,DependencyInjection.Tests,DependencyInjectionGrainTestRunner,D:\research\architectureSmells\repos\dotnet_orleans\test\DependencyInjection.Tests\DependencyInjectionGrainTestsRunner.cs,CanUseGenericArgumentsInConstructor,The following statement contains a magic number: Assert.NotEqual(0' await grain2.Go(378' new Reducer2Action()));
Magic Number,DependencyInjection.Tests,TestSiloBuilderConfigurator,D:\research\architectureSmells\repos\dotnet_orleans\test\DependencyInjection.Tests\DependencyInjectionGrainTestsRunner.cs,Configure,The following statement contains a magic number: hostBuilder.ConfigureServices(services =>                  {                      services.AddSingleton<IReducer<string' Reducer1Action>>(x => new Reducer1());                      services.AddSingleton<IReducer<int' Reducer2Action>>(x => new Reducer2());                      services.AddSingleton<IInjectedService' InjectedService>();                      services.AddScoped<IInjectedScopedService' InjectedScopedService>();                        // explicitly register a grain class to assert that it will NOT use the registration'                       // as by design this is not supported.                      services.AddTransient<ExplicitlyRegisteredSimpleDIGrain>(                          sp => new ExplicitlyRegisteredSimpleDIGrain(                              sp.GetRequiredService<IInjectedService>()'                              "some value"'                              5));                  });
