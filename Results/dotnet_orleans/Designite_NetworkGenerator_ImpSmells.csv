Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,GenerateChirperFollowerEdge,Cyclomatic complexity of the method is 8
Long Statement,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,ParseArguments,The length of the statement  "                            Console.WriteLine("Cannot generate {0:N0} nodes starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkNodeCount' this.nodeIdStartValue' int.MaxValue); " is 194.
Long Statement,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,ParseArguments,The length of the statement  "                            Console.WriteLine("Cannot generate {0:N0} edges starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkEdgeCount' this.edgeIDStartValue' int.MaxValue); " is 194.
Long Statement,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,ParseArguments,The length of the statement  "                            Console.WriteLine("Could not convert the value used as the starting node Id for creating edges ({0}) to an int - defaulting to {1}."' a' nodeIdStartValue); " is 155.
Long Statement,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,PrintUsage,The length of the statement  "                usageStr.WriteLine("                        Used to build edges that span nodes generated in previously run graphML files."); " is 125.
Long Statement,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,Run,The length of the statement  "                    LogMessage(string.Format("{0'25}\t{1:N0}\tEdges: {2:N0}"' "Requested Nodes:"' this.networkNodeCount' this.networkEdgeCount)); " is 125.
Long Statement,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,Run,The length of the statement  "                    LogMessage(string.Format("{0'25}\t{1:N0}\tEdges: {2:N0}"' "Start Ids - Nodes:"' this.nodeIdStartValue' this.edgeIDStartValue)); " is 127.
Long Statement,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,Run,The length of the statement  "                    LogMessage(string.Format(CultureInfo.InvariantCulture' "{0'30}\t{1}"' "Total Graph Generation Time:"' (nodeGenerationTime + edgeGenerationTime + xmlWriteTime))); " is 161.
Long Statement,Orleans.Samples.Chirper.Network.Generator,ChirperGraphMLDocument,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperGraphMLDocument.cs,WriteXmlWithWriter,The length of the statement  "                //<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"> " is 224.
Magic Number,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,ParseArguments,The following statement contains a magic number: for (int i = 0; i < args.Length; i++)              {                  string a = args[i];                  if (a.StartsWith("-") || a.StartsWith("/"))                  {                      a = a.Substring(1).ToLowerInvariant();                      switch (a)                      {                          case "auto":                              this.Automated = true;                              break;                          case "random":                              this.random = true;                              break;                          case "?":                          case "help":                          default:                              ok = false;                              break;                      }                  }                  // unqualified arguments below                  else if (argPos == 1)                  {                      this.networkNodeCount = int.Parse(a);                      argPos++;                  }                  else if (argPos == 2)                  {                      this.networkEdgeCount = int.Parse(a);                      argPos++;                  }                  else if (argPos == 3)                  {                      this.graphMLFile = a;                      argPos++;                  }                  else if (argPos == 4)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.nodeIdStartValue))                          {                              Console.WriteLine("Could not convert starting node value ({0}) to an int - defaulting to 1."' a);                              this.nodeIdStartValue = 1;                          }                            if (this.nodeIdStartValue + this.networkNodeCount > int.MaxValue)                          {                              Console.WriteLine("Cannot generate {0:N0} nodes starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkNodeCount' this.nodeIdStartValue' int.MaxValue);                              return false;                          }                      }                      argPos++;                  }                  else if (argPos == 5)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.edgeIDStartValue))                          {                              Console.WriteLine("Could not convert starting edge value ({0}) to an int - defaulting to 1."' a);                              this.nodeIdStartValue = 1;                          }                            if (this.edgeIDStartValue + this.networkEdgeCount > int.MaxValue)                          {                              Console.WriteLine("Cannot generate {0:N0} edges starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkEdgeCount' this.edgeIDStartValue' int.MaxValue);                              return false;                          }                      }                      argPos++;                  }                  else if (argPos == 6)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.edgeNodeStartIdValue))                          {                              Console.WriteLine("Could not convert the value used as the starting node Id for creating edges ({0}) to an int - defaulting to {1}."' a' nodeIdStartValue);                              this.edgeNodeStartIdValue = this.nodeIdStartValue;                          }                      }                      argPos++;                  }                  else                  {                      // Too many command line arguments                      Console.WriteLine("Too many command line arguments supplied: " + a);                      return false;                  }              }
Magic Number,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,ParseArguments,The following statement contains a magic number: for (int i = 0; i < args.Length; i++)              {                  string a = args[i];                  if (a.StartsWith("-") || a.StartsWith("/"))                  {                      a = a.Substring(1).ToLowerInvariant();                      switch (a)                      {                          case "auto":                              this.Automated = true;                              break;                          case "random":                              this.random = true;                              break;                          case "?":                          case "help":                          default:                              ok = false;                              break;                      }                  }                  // unqualified arguments below                  else if (argPos == 1)                  {                      this.networkNodeCount = int.Parse(a);                      argPos++;                  }                  else if (argPos == 2)                  {                      this.networkEdgeCount = int.Parse(a);                      argPos++;                  }                  else if (argPos == 3)                  {                      this.graphMLFile = a;                      argPos++;                  }                  else if (argPos == 4)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.nodeIdStartValue))                          {                              Console.WriteLine("Could not convert starting node value ({0}) to an int - defaulting to 1."' a);                              this.nodeIdStartValue = 1;                          }                            if (this.nodeIdStartValue + this.networkNodeCount > int.MaxValue)                          {                              Console.WriteLine("Cannot generate {0:N0} nodes starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkNodeCount' this.nodeIdStartValue' int.MaxValue);                              return false;                          }                      }                      argPos++;                  }                  else if (argPos == 5)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.edgeIDStartValue))                          {                              Console.WriteLine("Could not convert starting edge value ({0}) to an int - defaulting to 1."' a);                              this.nodeIdStartValue = 1;                          }                            if (this.edgeIDStartValue + this.networkEdgeCount > int.MaxValue)                          {                              Console.WriteLine("Cannot generate {0:N0} edges starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkEdgeCount' this.edgeIDStartValue' int.MaxValue);                              return false;                          }                      }                      argPos++;                  }                  else if (argPos == 6)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.edgeNodeStartIdValue))                          {                              Console.WriteLine("Could not convert the value used as the starting node Id for creating edges ({0}) to an int - defaulting to {1}."' a' nodeIdStartValue);                              this.edgeNodeStartIdValue = this.nodeIdStartValue;                          }                      }                      argPos++;                  }                  else                  {                      // Too many command line arguments                      Console.WriteLine("Too many command line arguments supplied: " + a);                      return false;                  }              }
Magic Number,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,ParseArguments,The following statement contains a magic number: for (int i = 0; i < args.Length; i++)              {                  string a = args[i];                  if (a.StartsWith("-") || a.StartsWith("/"))                  {                      a = a.Substring(1).ToLowerInvariant();                      switch (a)                      {                          case "auto":                              this.Automated = true;                              break;                          case "random":                              this.random = true;                              break;                          case "?":                          case "help":                          default:                              ok = false;                              break;                      }                  }                  // unqualified arguments below                  else if (argPos == 1)                  {                      this.networkNodeCount = int.Parse(a);                      argPos++;                  }                  else if (argPos == 2)                  {                      this.networkEdgeCount = int.Parse(a);                      argPos++;                  }                  else if (argPos == 3)                  {                      this.graphMLFile = a;                      argPos++;                  }                  else if (argPos == 4)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.nodeIdStartValue))                          {                              Console.WriteLine("Could not convert starting node value ({0}) to an int - defaulting to 1."' a);                              this.nodeIdStartValue = 1;                          }                            if (this.nodeIdStartValue + this.networkNodeCount > int.MaxValue)                          {                              Console.WriteLine("Cannot generate {0:N0} nodes starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkNodeCount' this.nodeIdStartValue' int.MaxValue);                              return false;                          }                      }                      argPos++;                  }                  else if (argPos == 5)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.edgeIDStartValue))                          {                              Console.WriteLine("Could not convert starting edge value ({0}) to an int - defaulting to 1."' a);                              this.nodeIdStartValue = 1;                          }                            if (this.edgeIDStartValue + this.networkEdgeCount > int.MaxValue)                          {                              Console.WriteLine("Cannot generate {0:N0} edges starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkEdgeCount' this.edgeIDStartValue' int.MaxValue);                              return false;                          }                      }                      argPos++;                  }                  else if (argPos == 6)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.edgeNodeStartIdValue))                          {                              Console.WriteLine("Could not convert the value used as the starting node Id for creating edges ({0}) to an int - defaulting to {1}."' a' nodeIdStartValue);                              this.edgeNodeStartIdValue = this.nodeIdStartValue;                          }                      }                      argPos++;                  }                  else                  {                      // Too many command line arguments                      Console.WriteLine("Too many command line arguments supplied: " + a);                      return false;                  }              }
Magic Number,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,ParseArguments,The following statement contains a magic number: for (int i = 0; i < args.Length; i++)              {                  string a = args[i];                  if (a.StartsWith("-") || a.StartsWith("/"))                  {                      a = a.Substring(1).ToLowerInvariant();                      switch (a)                      {                          case "auto":                              this.Automated = true;                              break;                          case "random":                              this.random = true;                              break;                          case "?":                          case "help":                          default:                              ok = false;                              break;                      }                  }                  // unqualified arguments below                  else if (argPos == 1)                  {                      this.networkNodeCount = int.Parse(a);                      argPos++;                  }                  else if (argPos == 2)                  {                      this.networkEdgeCount = int.Parse(a);                      argPos++;                  }                  else if (argPos == 3)                  {                      this.graphMLFile = a;                      argPos++;                  }                  else if (argPos == 4)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.nodeIdStartValue))                          {                              Console.WriteLine("Could not convert starting node value ({0}) to an int - defaulting to 1."' a);                              this.nodeIdStartValue = 1;                          }                            if (this.nodeIdStartValue + this.networkNodeCount > int.MaxValue)                          {                              Console.WriteLine("Cannot generate {0:N0} nodes starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkNodeCount' this.nodeIdStartValue' int.MaxValue);                              return false;                          }                      }                      argPos++;                  }                  else if (argPos == 5)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.edgeIDStartValue))                          {                              Console.WriteLine("Could not convert starting edge value ({0}) to an int - defaulting to 1."' a);                              this.nodeIdStartValue = 1;                          }                            if (this.edgeIDStartValue + this.networkEdgeCount > int.MaxValue)                          {                              Console.WriteLine("Cannot generate {0:N0} edges starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkEdgeCount' this.edgeIDStartValue' int.MaxValue);                              return false;                          }                      }                      argPos++;                  }                  else if (argPos == 6)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.edgeNodeStartIdValue))                          {                              Console.WriteLine("Could not convert the value used as the starting node Id for creating edges ({0}) to an int - defaulting to {1}."' a' nodeIdStartValue);                              this.edgeNodeStartIdValue = this.nodeIdStartValue;                          }                      }                      argPos++;                  }                  else                  {                      // Too many command line arguments                      Console.WriteLine("Too many command line arguments supplied: " + a);                      return false;                  }              }
Magic Number,Orleans.Samples.Chirper.Network.Generator,ChirperNetworkGenerator,C:\repos\dotnet_orleans\Samples\Chirper\NetworkGenerator\ChirperNetworkGenerator.cs,ParseArguments,The following statement contains a magic number: for (int i = 0; i < args.Length; i++)              {                  string a = args[i];                  if (a.StartsWith("-") || a.StartsWith("/"))                  {                      a = a.Substring(1).ToLowerInvariant();                      switch (a)                      {                          case "auto":                              this.Automated = true;                              break;                          case "random":                              this.random = true;                              break;                          case "?":                          case "help":                          default:                              ok = false;                              break;                      }                  }                  // unqualified arguments below                  else if (argPos == 1)                  {                      this.networkNodeCount = int.Parse(a);                      argPos++;                  }                  else if (argPos == 2)                  {                      this.networkEdgeCount = int.Parse(a);                      argPos++;                  }                  else if (argPos == 3)                  {                      this.graphMLFile = a;                      argPos++;                  }                  else if (argPos == 4)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.nodeIdStartValue))                          {                              Console.WriteLine("Could not convert starting node value ({0}) to an int - defaulting to 1."' a);                              this.nodeIdStartValue = 1;                          }                            if (this.nodeIdStartValue + this.networkNodeCount > int.MaxValue)                          {                              Console.WriteLine("Cannot generate {0:N0} nodes starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkNodeCount' this.nodeIdStartValue' int.MaxValue);                              return false;                          }                      }                      argPos++;                  }                  else if (argPos == 5)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.edgeIDStartValue))                          {                              Console.WriteLine("Could not convert starting edge value ({0}) to an int - defaulting to 1."' a);                              this.nodeIdStartValue = 1;                          }                            if (this.edgeIDStartValue + this.networkEdgeCount > int.MaxValue)                          {                              Console.WriteLine("Cannot generate {0:N0} edges starting from id {1:N0} because it would exceed the max value for an integer ({2})."' this.networkEdgeCount' this.edgeIDStartValue' int.MaxValue);                              return false;                          }                      }                      argPos++;                  }                  else if (argPos == 6)                  {                      if (!string.IsNullOrWhiteSpace(a))                      {                          if (!int.TryParse(a' out this.edgeNodeStartIdValue))                          {                              Console.WriteLine("Could not convert the value used as the starting node Id for creating edges ({0}) to an int - defaulting to {1}."' a' nodeIdStartValue);                              this.edgeNodeStartIdValue = this.nodeIdStartValue;                          }                      }                      argPos++;                  }                  else                  {                      // Too many command line arguments                      Console.WriteLine("Too many command line arguments supplied: " + a);                      return false;                  }              }
