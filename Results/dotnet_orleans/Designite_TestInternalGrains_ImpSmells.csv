Implementation smell,Namespace,Class,File,Method,Description
Complex Method,UnitTests.Grains,StreamLifecycleTestGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,InitStream,Cyclomatic complexity of the method is 9
Long Identifier,UnitTests.Grains,ReentrentGrainWithState,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\PersistenceTestGrains.cs,,The length of the parameter outstandingWriteStateOperation is 30.
Long Identifier,UnitTests.StreamingTests,StreamTestsConstants,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamTestsConstants.cs,,The length of the parameter AZURE_QUEUE_STREAM_PROVIDER_NAME is 32.
Long Statement,UnitTests.Grains,NonReentrentStressGrainWithoutState,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\PersistenceTestGrains.cs,CheckRuntimeEnvironment,The length of the statement  "            //Assert.IsFalse(executing' "Found out that this grain is already in the middle of execution. Single threaded-ness violation!"); " is 128.
Long Statement,UnitTests.Grains,ReminderTestGrain2,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,StartReminder,The length of the statement  "                r = await this.unvalidatedReminderRegistry.RegisterOrUpdateReminder(reminderName' usePeriod - TimeSpan.FromSeconds(2)' usePeriod); " is 130.
Long Statement,UnitTests.Grains,ReminderTestGrain2,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,ReceiveReminder,The length of the statement  "            // if # of ticks between two consecutive ReceiveReminder() is larger than period.Ticks' everything is fine... the problem is when its less " is 138.
Long Statement,UnitTests.Grains,ReminderTestGrain2,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,ReceiveReminder,The length of the statement  "                this.logger.Info("ReceiveReminder: {0} Incorrect tick {1} vs. {2} with status {3}."' reminderName' this.sequence[reminderName]' sequenceNumber' status); " is 152.
Long Statement,UnitTests.Grains,ReminderTestGrain2,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,ReceiveReminder,The length of the statement  "            this.logger.Info("ReceiveReminder: {0} Sequence # {1} with status {2}."' reminderName' this.sequence[reminderName]' status); " is 124.
Long Statement,UnitTests.Grains,ReminderTestCopyGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,StartReminder,The length of the statement  "                r = await RegisterOrUpdateReminder(reminderName' /*TimeSpan.FromSeconds(3)*/usePeriod - TimeSpan.FromSeconds(2)' usePeriod); " is 124.
Long Statement,UnitTests.Grains,ReminderTestCopyGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,ReceiveReminder,The length of the statement  "            // if # of ticks between two consecutive ReceiveReminder() is larger than period.Ticks' everything is fine... the problem is when its less " is 138.
Long Statement,UnitTests.Grains,ReminderTestCopyGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,ReceiveReminder,The length of the statement  "                this.logger.Info("{0} Incorrect tick {1} vs. {2} with status {3}."' reminderName' this.sequence[reminderName]' sequenceNumber' status); " is 135.
Long Statement,UnitTests.Grains,ProducerObserver,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,ProduceItem,The length of the statement  "            string str = String.Format("ProducerObserver.ProduceItem: streamId={0}' data={1}' numProduced so far={2}."' _streamId' data' _itemsProduced); " is 141.
Long Statement,UnitTests.Grains,ProducerObserver,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,AddNewConsumerGrain,The length of the statement  "            var grain = _grainFactory.GetGrain<IStreaming_ConsumerGrain>(consumerGrainId' "UnitTests.Grains.Streaming_ConsumerGrain"); " is 122.
Long Statement,UnitTests.Grains,Streaming_ProducerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,OnActivateAsync,The length of the statement  "            _logger = this.ServiceProvider.GetRequiredService<ILoggerFactory>().CreateLogger("Test.Streaming_ProducerGrain " + RuntimeIdentity + "/" + IdentityString + "/" + Data.ActivationId); " is 181.
Long Statement,UnitTests.Grains,PersistentStreaming_ProducerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,OnActivateAsync,The length of the statement  "            _logger = this.ServiceProvider.GetRequiredService<ILoggerFactory>().CreateLogger("Test.PersistentStreaming_ProducerGrain " + RuntimeIdentity + "/" + IdentityString + "/" + Data.ActivationId); " is 191.
Long Statement,UnitTests.Grains,Streaming_ConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,OnActivateAsync,The length of the statement  "            _logger = this.ServiceProvider.GetRequiredService<ILoggerFactory>().CreateLogger("Test.Streaming_ConsumerGrain " + RuntimeIdentity + "/" + IdentityString + "/" + Data.ActivationId); " is 181.
Long Statement,UnitTests.Grains,Streaming_ConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,DeactivateConsumerOnIdle,The length of the statement  "            Task.Delay(TimeSpan.FromSeconds(2)).ContinueWith(task => { _logger.Info("DeactivateConsumerOnIdle ContinueWith fired."); }).Ignore(); // .WithTimeout(TimeSpan.FromSeconds(2)); " is 175.
Long Statement,UnitTests.Grains,PersistentStreaming_ConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,OnActivateAsync,The length of the statement  "            _logger = this.ServiceProvider.GetRequiredService<ILoggerFactory>().CreateLogger("Test.PersistentStreaming_ConsumerGrain " + RuntimeIdentity + "/" + IdentityString + "/" + Data.ActivationId); " is 191.
Long Statement,UnitTests.Grains,Streaming_Reentrant_ProducerConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,OnActivateAsync,The length of the statement  "            _logger = this.ServiceProvider.GetRequiredService<ILoggerFactory>().CreateLogger("Test.Streaming_Reentrant_ProducerConsumerGrain " + RuntimeIdentity + "/" + IdentityString + "/" + Data.ActivationId) ; " is 200.
Long Statement,UnitTests.Grains,Streaming_ProducerConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,OnActivateAsync,The length of the statement  "            _logger = this.ServiceProvider.GetRequiredService<ILoggerFactory>().CreateLogger("Test.Streaming_ProducerConsumerGrain " + RuntimeIdentity + "/" + IdentityString + "/" + Data.ActivationId); " is 189.
Long Statement,UnitTests.Grains,Streaming_ImplicitlySubscribedConsumerGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,OnActivateAsync,The length of the statement  "            _logger = this.ServiceProvider.GetRequiredService<ILoggerFactory>().CreateLogger("Test.Streaming_ImplicitConsumerGrain1 " + RuntimeIdentity + "/" + IdentityString + "/" + Data.ActivationId); " is 190.
Long Statement,UnitTests.Grains,Streaming_ImplicitlySubscribedConsumerGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,OnActivateAsync,The length of the statement  "            // discuss: Note that we need to know the provider that will be used in advance. I think it would be beneficial if we specified the provider as an argument to ImplicitConsumerActivationAttribute. " is 195.
Long Statement,UnitTests.Grains,Streaming_ImplicitlySubscribedConsumerGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,OnActivateAsync,The length of the statement  "            await Task.WhenAll(activeStreamProviders.Select(stream => BecomeConsumer(this.GetPrimaryKey()' stream' "TestNamespace1"))); " is 123.
Long Statement,UnitTests.Grains,Streaming_ImplicitlySubscribedConsumerGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,GetConsumerCount,The length of the statement  "            // this problem will continue until we require the provider's name to be apart of the implicit subscriber attribute identity. " is 125.
Long Statement,UnitTests.Grains,Streaming_ImplicitlySubscribedConsumerGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,DeactivateConsumerOnIdle,The length of the statement  "            Task.Delay(TimeSpan.FromSeconds(2)).ContinueWith(task => { _logger.Info("DeactivateConsumerOnIdle ContinueWith fired."); }).Ignore(); // .WithTimeout(TimeSpan.FromSeconds(2)); " is 175.
Long Statement,UnitTests.Grains,StreamingImmutabilityTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingImmutabilityTestGrain.cs,SendTestObject,The length of the statement  "            var stream = GetStreamProvider(providerName).GetStream<StreamImmutabilityTestObject>(this.GetPrimaryKey()' "Namespace"); " is 120.
Long Statement,UnitTests.Grains,StreamLifecycleTestGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,InitStream,The length of the statement  "            if (streamNamespace == null) throw new ArgumentNullException("streamNamespace"' "Can't have null stream namespace values"); " is 123.
Long Statement,UnitTests.Grains,StreamLifecycleTestGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,InitStream,The length of the statement  "                if (logger.IsEnabled(LogLevel.Debug)) logger.LogDebug("Stream already exists for StreamId={0} StreamProvider={1} - Resetting"' State.Stream' providerToUse); " is 156.
Long Statement,UnitTests.Grains,StreamLifecycleTestGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,InitStream,The length of the statement  "                // Note: in this test' we are deliberately not doing Unsubscribe consumers' just discard old stream and let auto-cleanup functions do their thing. " is 146.
Long Statement,UnitTests.Grains,StreamLifecycleTestGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,InitStream,The length of the statement  "            if (logger.IsEnabled(LogLevel.Debug)) logger.LogDebug("InitStream StreamId={0} StreamProvider={1}"' streamId' providerToUse); " is 125.
Long Statement,UnitTests.Grains,StreamLifecycleTestGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,InitStream,The length of the statement  "            if (logger.IsEnabled(LogLevel.Debug)) logger.LogDebug("InitStream returning with Stream={0} with ref type = {1}"' State.Stream' State.Stream.GetType().FullName); " is 161.
Long Statement,UnitTests.Grains,StreamLifecycleConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,OnActivateAsync,The length of the statement  "                    logger.Info("ReconnectConsumerHandles SubscriptionHandles={0} Grain={1}"' Utils.EnumerableToString(handles)' this.AsReference<IStreamLifecycleConsumerGrain>()); " is 160.
Long Statement,UnitTests.Grains,StreamLifecycleConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,BecomeConsumer,The length of the statement  "            if (logger.IsEnabled(LogLevel.Debug)) logger.LogDebug("BecomeConsumer StreamId={0} StreamProvider={1} Grain={2}"' streamId' providerToUse' this.AsReference<IStreamLifecycleConsumerGrain>()); " is 190.
Long Statement,UnitTests.Grains,StreamLifecycleConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,RemoveConsumer,The length of the statement  "            if (logger.IsEnabled(LogLevel.Debug)) logger.LogDebug("RemoveConsumer StreamId={0} StreamProvider={1}"' streamId' providerName); " is 128.
Long Statement,UnitTests.Grains,FilteredStreamConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,FilterIsEven,The length of the statement  "            if (staticLogger != null) staticLogger.Info("FilterIsEven(Stream={0}'FilterData={1}'Item={2}) Filter = {3}"' stream' filterData' item' result); " is 143.
Long Statement,UnitTests.Grains,FilteredStreamConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,FilterIsOdd,The length of the statement  "            if (staticLogger != null) staticLogger.Info("FilterIsOdd(Stream={0}'FilterData={1}'Item={2}) Filter = {3}"' stream' filterData' item' result); " is 142.
Long Statement,UnitTests.Grains,StreamLifecycleProducerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,BecomeProducer,The length of the statement  "            if (logger.IsEnabled(LogLevel.Debug)) logger.LogDebug("BecomeProducer StreamId={0} StreamProvider={1}"' streamId' providerName); " is 128.
Long Statement,UnitTests.Grains,StreamLifecycleProducerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,BecomeProducer,The length of the statement  "            if (logger.IsEnabled(LogLevel.Debug)) logger.LogDebug("Finished BecomeProducer for StreamId={0} StreamProvider={1}"' streamId' providerName); " is 141.
Long Statement,UnitTests.Grains,StreamReliabilityTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamReliabilityTestGrains.cs,AddConsumer,The length of the statement  "            logger.Info("AddConsumer StreamId={0} StreamProvider={1} Grain={2}"' streamId' providerName' this.AsReference<IStreamReliabilityTestGrain>()); " is 142.
Long Statement,UnitTests.Grains,StreamReliabilityTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamReliabilityTestGrains.cs,RemoveAllConsumers,The length of the statement  "            logger.Info("RemoveAllConsumers: State.ConsumerSubscriptionHandles.Count={0}"' State.ConsumerSubscriptionHandles.Count); " is 120.
Long Statement,UnitTests.Grains,StreamReliabilityTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamReliabilityTestGrains.cs,ReconnectConsumerHandles,The length of the statement  "            logger.Info("ReconnectConsumerHandles SubscriptionHandles={0} Grain={1}"' Utils.EnumerableToString(subscriptionHandles)' this.AsReference<IStreamReliabilityTestGrain>()); " is 170.
Long Statement,UnitTests.Grains,StreamUnsubscribeTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamReliabilityTestGrains.cs,Subscribe,The length of the statement  "            logger.Info("Subscribe StreamId={0} StreamProvider={1} Grain={2}"' streamId' providerName' this.AsReference<IStreamUnsubscribeTestGrain>()); " is 140.
Long Statement,UnitTests.Grains,StreamUnsubscribeTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamReliabilityTestGrains.cs,UnSubscribeFromAllStreams,The length of the statement  "            logger.Info("UnSubscribeFromAllStreams: State.ConsumerSubscriptionHandles.Count={0}"' State.ConsumerSubscriptionHandles.Count); " is 127.
Long Statement,UnitTestGrains,TimerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\TimerGrain.cs,Tick,The length of the statement  "            logger.Info(data.ToString() + " Tick # " + counter + " RuntimeContext = " + RuntimeContext.Current.ActivationContext.ToString()); " is 129.
Magic Number,UnitTests.Grains,BusyActivationGcTestGrain1,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ActivationGCTestGrains.cs,OnCollectActivation,The following statement contains a magic number: g.Delay(TimeSpan.FromMilliseconds(10)).Ignore();
Magic Number,UnitTests.Grains,ClientAddressableTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ClientAddressableTestGrain.cs,MicroSerialStressTest,The following statement contains a magic number: Assert.Equal(10000 + i' n);
Magic Number,UnitTests.Grains,ClientAddressableTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ClientAddressableTestGrain.cs,MicroParallelStressTest,The following statement contains a magic number: tasks[n] =                       target.OnParallelStress(n)                      .ContinueWith(                          completed =>                              {                                  Assert.True(completed.IsCompleted);                                  Assert.Equal(10000 + n' completed.Result);                              });
Magic Number,UnitTests.Grains,ReentrantCollectionTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\CollectionTestGrain.cs,IncrCounter,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(1000));
Magic Number,UnitTests.Grains,ErrorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ErrorGrain.cs,UnobservedErrorImmediate,The following statement contains a magic number: return Task.FromResult(11);
Magic Number,UnitTests.Grains,ErrorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ErrorGrain.cs,UnobservedErrorDelayed,The following statement contains a magic number: Task<long> promise = Task<long>.Factory.StartNew(() =>              {                  if (!doThrow)                      return 0;                  Thread.Sleep(100);                  logger.Info("About to throw 1.5.");                  throw new ArgumentException("ErrorGrain left Delayed Unobserved Error 1.5.");              });
Magic Number,UnitTests.Grains,ErrorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ErrorGrain.cs,UnobservedErrorDelayed,The following statement contains a magic number: return Task.FromResult(11);
Magic Number,UnitTests.Grains,ErrorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ErrorGrain.cs,UnobservedErrorContinuation2,The following statement contains a magic number: Task<long> promise = Task.FromResult((long)25);
Magic Number,UnitTests.Grains,ErrorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ErrorGrain.cs,UnobservedErrorContinuation2,The following statement contains a magic number: return Task.FromResult(11);
Magic Number,UnitTests.Grains,ErrorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ErrorGrain.cs,UnobservedErrorContinuation3,The following statement contains a magic number: Task<long> promise = Task<long>.Factory.StartNew(() =>              {                  logger.Info("First promise from Task " + Task.CurrentId);                  return 26;              });
Magic Number,UnitTests.Grains,ErrorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ErrorGrain.cs,UnobservedErrorContinuation3,The following statement contains a magic number: return Task.FromResult(11);
Magic Number,UnitTests.Grains,ErrorGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ErrorGrain.cs,UnobservedIgnoredError,The following statement contains a magic number: return Task.FromResult(11);
Magic Number,UnitTests.Grains,ReentrentGrainWithState,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\PersistenceTestGrains.cs,Test1,The following statement contains a magic number: i < 2*Multiple
Magic Number,UnitTests.Grains,ReentrentGrainWithState,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\PersistenceTestGrains.cs,Test2,The following statement contains a magic number: i < 3*Multiple
Magic Number,UnitTests.Grains,ReentrentGrainWithState,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\PersistenceTestGrains.cs,Task_Delay,The following statement contains a magic number: var wrapper = new Task(async () =>              {                  logger.Info("Before Task.Delay #1 TaskScheduler.Current=" + TaskScheduler.Current);                  await DoDelay(1);                  logger.Info("After Task.Delay #1 TaskScheduler.Current=" + TaskScheduler.Current);                  await DoDelay(2);                  logger.Info("After Task.Delay #2 TaskScheduler.Current=" + TaskScheduler.Current);              });
Magic Number,UnitTests.Grains,NonReentrentStressGrainWithoutState,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\PersistenceTestGrains.cs,SetOne,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(10));
Magic Number,UnitTests.Grains,NonReentrentStressGrainWithoutState,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\PersistenceTestGrains.cs,Task_Delay,The following statement contains a magic number: var wrapper = new Task(async () =>              {                  logger.Info("Before Task.Delay #1 TaskScheduler.Current=" + TaskScheduler.Current);                  await DoDelay(1);                  logger.Info("After Task.Delay #1 TaskScheduler.Current=" + TaskScheduler.Current);                  await DoDelay(2);                  logger.Info("After Task.Delay #2 TaskScheduler.Current=" + TaskScheduler.Current);              });
Magic Number,UnitTests.Grains,NonReentrentStressGrainWithoutState,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\PersistenceTestGrains.cs,CheckRuntimeEnvironment,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,UnitTests.Grains,ReminderTestGrain2,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,StartReminder,The following statement contains a magic number: r = await RegisterOrUpdateReminder(reminderName' usePeriod - TimeSpan.FromSeconds(2)' usePeriod);
Magic Number,UnitTests.Grains,ReminderTestGrain2,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,GetDefaultPeriod,The following statement contains a magic number: int period = 12;
Magic Number,UnitTests.Grains,ReminderTestCopyGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,StartReminder,The following statement contains a magic number: r = await RegisterOrUpdateReminder(reminderName' /*TimeSpan.FromSeconds(3)*/usePeriod - TimeSpan.FromSeconds(2)' usePeriod);
Magic Number,UnitTests.Grains,WrongReminderGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,StartReminder,The following statement contains a magic number: IGrainReminder r = await RegisterOrUpdateReminder(reminderName' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(3));
Magic Number,UnitTests.Grains,WrongReminderGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\ReminderTestGrain2.cs,StartReminder,The following statement contains a magic number: IGrainReminder r = await RegisterOrUpdateReminder(reminderName' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(3));
Magic Number,UnitTests.Grains,ProducerObserver,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,VerifyFinished,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,UnitTests.Grains,Streaming_ProducerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,ProducePeriodicSeries,The following statement contains a magic number: await Task.WhenAll(_producers.Select(p => p.ProducePeriodicSeries(timerCallback =>                  {                      return RegisterTimer(timerCallback' null' TimeSpan.Zero' TimeSpan.FromMilliseconds(10));                  }'count)).ToArray());
Magic Number,UnitTests.Grains,Streaming_ConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,DeactivateConsumerOnIdle,The following statement contains a magic number: Task.Delay(TimeSpan.FromSeconds(2)).ContinueWith(task => { _logger.Info("DeactivateConsumerOnIdle ContinueWith fired."); }).Ignore();
Magic Number,UnitTests.Grains,Streaming_ProducerConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,ProducePeriodicSeries,The following statement contains a magic number: return _producer.ProducePeriodicSeries(timerCallback =>              {                  return RegisterTimer(timerCallback' null' TimeSpan.Zero' TimeSpan.FromMilliseconds(10));              }' count);
Magic Number,UnitTests.Grains,Streaming_ImplicitlySubscribedConsumerGrainBase,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamingGrain.cs,DeactivateConsumerOnIdle,The following statement contains a magic number: Task.Delay(TimeSpan.FromSeconds(2)).ContinueWith(task => { _logger.Info("DeactivateConsumerOnIdle ContinueWith fired."); }).Ignore();
Magic Number,UnitTests.Grains,GenericArg,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,GetHashCode,The following statement contains a magic number: return (B * 397) ^ (A != null ? A.GetHashCode() : 0);
Magic Number,UnitTests.Grains,FilteredStreamConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,FilterIsEven,The following statement contains a magic number: bool result = val % 2 == 0;
Magic Number,UnitTests.Grains,FilteredStreamConsumerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StreamLifecycleTestGrains.cs,FilterIsOdd,The following statement contains a magic number: bool result = val % 2 == 1;
Magic Number,UnitTests.Grains,StressTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StressTestGrain.cs,OnActivateAsync,The following statement contains a magic number: this.GetPrimaryKeyLong() == -2
Magic Number,UnitTests.Grains,StressTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StressTestGrain.cs,LookUpMany,The following statement contains a magic number: i < 10
Magic Number,UnitTests.Grains,StressTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StressTestGrain.cs,LookUpMany,The following statement contains a magic number: list.Add(new Tuple<GrainId' int' List<Tuple<SiloAddress' ActivationId>>>(id' 3' reply));
Magic Number,UnitTests.Grains,ReentrantStressTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StressTestGrain.cs,InterleavingConsistencyTest,The following statement contains a magic number: List<Task> getFileMetadataPromises = new List<Task>(numItems*2);
Magic Number,UnitTests.Grains,ReentrantStressTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StressTestGrain.cs,InterleavingConsistencyTest,The following statement contains a magic number: Dictionary<int' string> fileMetadatas = new Dictionary<int' string>(numItems*2);
Magic Number,UnitTests.Grains,ReentrantStressTestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\StressTestGrain.cs,InterleavingConsistencyTest,The following statement contains a magic number: Func<Task> func = (                      async () =>                      {                          await Task.Delay(random.NextTimeSpan(delay));                          int fileMetadata = capture;                          if ((fileMetadata%2) == 0)                          {                              fileMetadatas.Add(fileMetadata' fileMetadata.ToString());                          }                      });
Magic Number,UnitTests.Grains,TestExtension,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\TestExtension.cs,CheckExtension_2,The following statement contains a magic number: ITestGrain g = grainFactory.GetGrain<ITestGrain>(23);
Magic Number,UnitTests.Grains,GenericTestExtension<T>,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\TestExtension.cs,CheckExtension_2,The following statement contains a magic number: ITestGrain g = this.grainFactory.GetGrain<ITestGrain>(24);
Magic Number,UnitTests.Grains,TestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\TestGrain.cs,OnActivateAsync,The following statement contains a magic number: this.GetPrimaryKeyLong() == -2
Magic Number,UnitTests.Grains,TestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\TestGrain.cs,StartTimer,The following statement contains a magic number: timer = base.RegisterTimer(TimerTick' null' TimeSpan.Zero' TimeSpan.FromSeconds(10));
Magic Number,UnitTests.Grains,TestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\TestGrain.cs,GetMultipleGrainInterfaces_Array,The following statement contains a magic number: var grains = new IGrain[5];
Magic Number,UnitTests.Grains,TestGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\TestGrain.cs,GetMultipleGrainInterfaces_List,The following statement contains a magic number: var grains = new IGrain[5];
Magic Number,UnitTestGrains,TimerGrain,D:\research\architectureSmells\repos\dotnet_orleans\test\Grains\TestInternalGrains\TimerGrain.cs,Tick,The following statement contains a magic number: timer != null && counter > 10000
