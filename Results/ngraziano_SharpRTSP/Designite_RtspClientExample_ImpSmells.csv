Implementation smell,Namespace,Class,File,Method,Description
Long Method,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The method has 230 lines of code.
Long Method,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The method has 345 lines of code.
Long Method,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The method has 423 lines of code.
Complex Method,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,Cyclomatic complexity of the method is 41
Complex Method,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,Cyclomatic complexity of the method is 65
Long Parameter List,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,AddAuthorization,The method has 7 parameters. Parameters: message' username' password' auth_type' realm' nonce' url
Long Statement,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The length of the statement  "            c.Received_AAC += (string format' List<byte[]> aac' uint ObjectType' uint FrequencyIndex' uint ChannelConfiguration) => {" is 121.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Connect,The length of the statement  "            // If the RTP transport is MULTICAST' we have to wait for the SETUP message to get the Multicast Address from the RTSP server" is 125.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Connect,The length of the statement  "                video_udp_pair = new Rtsp.UDPSocket(50000' 51000); // give a range of 500 pairs (1000 addresses) to try incase some address are in use" is 134.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Connect,The length of the statement  "                audio_udp_pair = new Rtsp.UDPSocket(50000' 51000); // give a range of 500 pairs (1000 addresses) to try incase some address are in use" is 134.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The length of the statement  "                    uint rtcp_length = (uint)(e.Message.Data[packetIndex+2] << 8) + (uint)(e.Message.Data[packetIndex+3]); // number of 32 bit words" is 128.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The length of the statement  "                        UInt32 ntp_lsw_fractions = (uint)(e.Message.Data[packetIndex + 12] << 24) + (uint)(e.Message.Data[packetIndex + 13] << 16)" is 122.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The length of the statement  "                uint rtp_timestamp = ((uint)e.Message.Data[4] << 24) + (uint)(e.Message.Data[5] << 16) + (uint)(e.Message.Data[6] << 8) + (uint)(e.Message.Data[7]);" is 148.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The length of the statement  "                uint rtp_ssrc = ((uint)e.Message.Data[8] << 24) + (uint)(e.Message.Data[9] << 16) + (uint)(e.Message.Data[10] << 8) + (uint)(e.Message.Data[11]);" is 145.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The length of the statement  "                    rtp_extension_id = ((uint)e.Message.Data[rtp_payload_start + 0] << 8) + (uint)(e.Message.Data[rtp_payload_start + 1] << 0);" is 123.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The length of the statement  "                    rtp_extension_size = ((uint)e.Message.Data[rtp_payload_start + 2] << 8) + (uint)(e.Message.Data[rtp_payload_start + 3] << 0) * 4; // units of extension_size is 4-bytes" is 167.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The length of the statement  "                    List<byte[]> nal_units = h264Payload.Process_H264_RTP_Packet(rtp_payload' rtp_marker); // this will cache the Packets until there is a Frame" is 140.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The length of the statement  "                    List<byte[]> nal_units = h265Payload.Process_H265_RTP_Packet(rtp_payload' rtp_marker); // this will cache the Packets until there is a Frame" is 140.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The length of the statement  "                else if (data_received.Channel == audio_data_channel && (rtp_payload_type == 0 || rtp_payload_type == 8 || audio_codec.Equals("PCMA") || audio_codec.Equals("PCMU"))) {" is 167.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The length of the statement  "                            Received_AAC(audio_codec' audio_frames' aacPayload.ObjectType' aacPayload.FrequencyIndex' aacPayload.ChannelConfiguration);" is 123.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The length of the statement  "                                String[] valid_audio_codecs = {"PCMA"' "PCMU"' "AMR"' "MPEG4-GENERIC" /* for aac */}; // Note some are "mpeg4-generic" lower case" is 129.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The length of the statement  "                        // Example fmtp is ""96 streamtype=5;profile-level-id=1;mode=AAC-hbr;sizelength=13;indexlength=3;indexdeltalength=3;config=1210"" is 128.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The length of the statement  "                                Interleaved = new PortCouple(next_free_rtp_channel' next_free_rtcp_channel)' // Eg Channel 0 for RTP video data. Channel 1 for RTCP status reports" is 146.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The length of the statement  "                                ClientPort = new PortCouple(rtp_port' rtcp_port)' // a UDP Port for data (video or audio). a UDP Port for RTCP status reports" is 125.
Long Statement,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Timer_Elapsed,The length of the statement  "            // RFC 2326 (RTSP Standard) says "GET_PARAMETER with no entity body may be used to test client or server liveness("ping")"" is 122.
Complex Conditional,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The conditional expression  "data_received.Channel == audio_data_channel && (rtp_payload_type == 0 || rtp_payload_type == 8 || audio_codec.Equals("PCMA") || audio_codec.Equals("PCMU"))"  is complex.
Complex Conditional,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The conditional expression  "data_received.Channel == audio_data_channel                          && rtp_payload_type == audio_payload                          && audio_codec.Equals("MPEG4-GENERIC")                         && aacPayload != null"  is complex.
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_SPS_PPS += (byte[] sps' byte[] pps) => {                 h264 = true;                 if (fs_v == null) {                     String filename = "rtsp_capture_" + now + ".264";                     fs_v = new FileStream(filename' FileMode.Create);                 }                  if (fs_v != null) {                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(sps' 0' sps.Length);                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(pps' 0' pps.Length);                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_SPS_PPS += (byte[] sps' byte[] pps) => {                 h264 = true;                 if (fs_v == null) {                     String filename = "rtsp_capture_" + now + ".264";                     fs_v = new FileStream(filename' FileMode.Create);                 }                  if (fs_v != null) {                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(sps' 0' sps.Length);                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(pps' 0' pps.Length);                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_VPS_SPS_PPS += (byte[] vps' byte[] sps' byte[] pps) => {                 h265 = true;                 if (fs_v == null)                 {                     String filename = "rtsp_capture_" + now + ".265";                     fs_v = new FileStream(filename' FileMode.Create);                 }                  if (fs_v != null)                 {                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(vps' 0' vps.Length);                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(sps' 0' sps.Length);                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(pps' 0' pps.Length);                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_VPS_SPS_PPS += (byte[] vps' byte[] sps' byte[] pps) => {                 h265 = true;                 if (fs_v == null)                 {                     String filename = "rtsp_capture_" + now + ".265";                     fs_v = new FileStream(filename' FileMode.Create);                 }                  if (fs_v != null)                 {                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(vps' 0' vps.Length);                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(sps' 0' sps.Length);                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(pps' 0' pps.Length);                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_VPS_SPS_PPS += (byte[] vps' byte[] sps' byte[] pps) => {                 h265 = true;                 if (fs_v == null)                 {                     String filename = "rtsp_capture_" + now + ".265";                     fs_v = new FileStream(filename' FileMode.Create);                 }                  if (fs_v != null)                 {                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(vps' 0' vps.Length);                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(sps' 0' sps.Length);                     fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                     fs_v.Write(pps' 0' pps.Length);                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_NALs += (List<byte[]> nal_units) => {                 if (fs_v != null) {                     foreach (byte[] nal_unit in nal_units)                     {                         // Output some H264 stream information                         if (h264 && nal_unit.Length > 0) {                             int nal_ref_idc  = (nal_unit[0] >> 5) & 0x03;                             int nal_unit_type = nal_unit[0] & 0x1F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 5) description = "IDR NAL";                             else if (nal_unit_type == 6) description = "SEI NAL";                             else if (nal_unit_type == 7) description = "SPS NAL";                             else if (nal_unit_type == 8) description = "PPS NAL";                             else if (nal_unit_type == 9) description = "ACCESS UNIT DELIMITER NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Ref = " + nal_ref_idc + " NAL Type = " + nal_unit_type + " " + description);                         }                          // Output some H265 stream information                         if (h265 && nal_unit.Length > 0)                         {                             int nal_unit_type = (nal_unit[0] >> 1) & 0x3F;                             String description = "";                             if (nal_unit_type == 1) description = "NON IDR NAL";                             else if (nal_unit_type == 19) description = "IDR NAL";                             else if (nal_unit_type == 32) description = "VPS NAL";                             else if (nal_unit_type == 33) description = "SPS NAL";                             else if (nal_unit_type == 34) description = "PPS NAL";                             else if (nal_unit_type == 39) description = "SEI NAL";                             else description = "OTHER NAL";                             Console.WriteLine("NAL Type = " + nal_unit_type + " " + description);                         }                          fs_v.Write(new byte[] { 0x00' 0x00' 0x00' 0x01 }' 0' 4);  // Write Start Code                         fs_v.Write(nal_unit' 0' nal_unit.Length);                 // Write NAL                     }                     fs_v.Flush(true);                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_AAC += (string format' List<byte[]> aac' uint ObjectType' uint FrequencyIndex' uint ChannelConfiguration) => {                 if (fs_a == null)                 {                     String filename = "rtsp_capture_" + now + ".aac";                     fs_a = new FileStream(filename' FileMode.Create);                 }                  if (fs_a != null)                 {                     foreach (byte[] data in aac)                     {                         // ASDT header format                         int protection_absent = 1; //                        int profile = 2; // Profile 2 = AAC Low Complexity (LC) //                        int sample_freq = 4; // 4 = 44100 Hz //                        int channel_config = 2; // 2 = Stereo                          Rtsp.BitStream bs = new Rtsp.BitStream();                         bs.AddValue(0xFFF'12); // (a) Start of data                         bs.AddValue(0'1); // (b) Version ID' 0 = MPEG4                         bs.AddValue(0'2); // (c) Layer always 2 bits set to 0                         bs.AddValue(protection_absent'1); // (d) 1 = No CRC                         bs.AddValue((int)ObjectType-1'2); // (e) MPEG Object Type / Profile' minus 1                         bs.AddValue((int)FrequencyIndex'4); // (f)                         bs.AddValue(0' 1); // (g) private bit. Always zero                         bs.AddValue((int)ChannelConfiguration'3); // (h)                         bs.AddValue(0'1); // (i) originality                         bs.AddValue(0'1); // (j) home                         bs.AddValue(0'1); // (k) copyrighted id                         bs.AddValue(0'1); // (l) copyright id start                         bs.AddValue(data.Length + 7'13); // (m) AAC data + size of the ASDT header                         bs.AddValue(2047'11); // (n) buffer fullness ???                         int num_acc_frames = 1;                         bs.AddValue(num_acc_frames-1'1); // (o) num of AAC Frames' minus 1                          // If Protection was On' there would be a 16 bit CRC                         if (protection_absent == 0) bs.AddValue(0xABCD /*CRC*/'16); // (p)                          byte[] header = bs.ToArray();                          fs_a.Write(header' 0' header.Length);                         fs_a.Write(data' 0' data.Length);                     }                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_AAC += (string format' List<byte[]> aac' uint ObjectType' uint FrequencyIndex' uint ChannelConfiguration) => {                 if (fs_a == null)                 {                     String filename = "rtsp_capture_" + now + ".aac";                     fs_a = new FileStream(filename' FileMode.Create);                 }                  if (fs_a != null)                 {                     foreach (byte[] data in aac)                     {                         // ASDT header format                         int protection_absent = 1; //                        int profile = 2; // Profile 2 = AAC Low Complexity (LC) //                        int sample_freq = 4; // 4 = 44100 Hz //                        int channel_config = 2; // 2 = Stereo                          Rtsp.BitStream bs = new Rtsp.BitStream();                         bs.AddValue(0xFFF'12); // (a) Start of data                         bs.AddValue(0'1); // (b) Version ID' 0 = MPEG4                         bs.AddValue(0'2); // (c) Layer always 2 bits set to 0                         bs.AddValue(protection_absent'1); // (d) 1 = No CRC                         bs.AddValue((int)ObjectType-1'2); // (e) MPEG Object Type / Profile' minus 1                         bs.AddValue((int)FrequencyIndex'4); // (f)                         bs.AddValue(0' 1); // (g) private bit. Always zero                         bs.AddValue((int)ChannelConfiguration'3); // (h)                         bs.AddValue(0'1); // (i) originality                         bs.AddValue(0'1); // (j) home                         bs.AddValue(0'1); // (k) copyrighted id                         bs.AddValue(0'1); // (l) copyright id start                         bs.AddValue(data.Length + 7'13); // (m) AAC data + size of the ASDT header                         bs.AddValue(2047'11); // (n) buffer fullness ???                         int num_acc_frames = 1;                         bs.AddValue(num_acc_frames-1'1); // (o) num of AAC Frames' minus 1                          // If Protection was On' there would be a 16 bit CRC                         if (protection_absent == 0) bs.AddValue(0xABCD /*CRC*/'16); // (p)                          byte[] header = bs.ToArray();                          fs_a.Write(header' 0' header.Length);                         fs_a.Write(data' 0' data.Length);                     }                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_AAC += (string format' List<byte[]> aac' uint ObjectType' uint FrequencyIndex' uint ChannelConfiguration) => {                 if (fs_a == null)                 {                     String filename = "rtsp_capture_" + now + ".aac";                     fs_a = new FileStream(filename' FileMode.Create);                 }                  if (fs_a != null)                 {                     foreach (byte[] data in aac)                     {                         // ASDT header format                         int protection_absent = 1; //                        int profile = 2; // Profile 2 = AAC Low Complexity (LC) //                        int sample_freq = 4; // 4 = 44100 Hz //                        int channel_config = 2; // 2 = Stereo                          Rtsp.BitStream bs = new Rtsp.BitStream();                         bs.AddValue(0xFFF'12); // (a) Start of data                         bs.AddValue(0'1); // (b) Version ID' 0 = MPEG4                         bs.AddValue(0'2); // (c) Layer always 2 bits set to 0                         bs.AddValue(protection_absent'1); // (d) 1 = No CRC                         bs.AddValue((int)ObjectType-1'2); // (e) MPEG Object Type / Profile' minus 1                         bs.AddValue((int)FrequencyIndex'4); // (f)                         bs.AddValue(0' 1); // (g) private bit. Always zero                         bs.AddValue((int)ChannelConfiguration'3); // (h)                         bs.AddValue(0'1); // (i) originality                         bs.AddValue(0'1); // (j) home                         bs.AddValue(0'1); // (k) copyrighted id                         bs.AddValue(0'1); // (l) copyright id start                         bs.AddValue(data.Length + 7'13); // (m) AAC data + size of the ASDT header                         bs.AddValue(2047'11); // (n) buffer fullness ???                         int num_acc_frames = 1;                         bs.AddValue(num_acc_frames-1'1); // (o) num of AAC Frames' minus 1                          // If Protection was On' there would be a 16 bit CRC                         if (protection_absent == 0) bs.AddValue(0xABCD /*CRC*/'16); // (p)                          byte[] header = bs.ToArray();                          fs_a.Write(header' 0' header.Length);                         fs_a.Write(data' 0' data.Length);                     }                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_AAC += (string format' List<byte[]> aac' uint ObjectType' uint FrequencyIndex' uint ChannelConfiguration) => {                 if (fs_a == null)                 {                     String filename = "rtsp_capture_" + now + ".aac";                     fs_a = new FileStream(filename' FileMode.Create);                 }                  if (fs_a != null)                 {                     foreach (byte[] data in aac)                     {                         // ASDT header format                         int protection_absent = 1; //                        int profile = 2; // Profile 2 = AAC Low Complexity (LC) //                        int sample_freq = 4; // 4 = 44100 Hz //                        int channel_config = 2; // 2 = Stereo                          Rtsp.BitStream bs = new Rtsp.BitStream();                         bs.AddValue(0xFFF'12); // (a) Start of data                         bs.AddValue(0'1); // (b) Version ID' 0 = MPEG4                         bs.AddValue(0'2); // (c) Layer always 2 bits set to 0                         bs.AddValue(protection_absent'1); // (d) 1 = No CRC                         bs.AddValue((int)ObjectType-1'2); // (e) MPEG Object Type / Profile' minus 1                         bs.AddValue((int)FrequencyIndex'4); // (f)                         bs.AddValue(0' 1); // (g) private bit. Always zero                         bs.AddValue((int)ChannelConfiguration'3); // (h)                         bs.AddValue(0'1); // (i) originality                         bs.AddValue(0'1); // (j) home                         bs.AddValue(0'1); // (k) copyrighted id                         bs.AddValue(0'1); // (l) copyright id start                         bs.AddValue(data.Length + 7'13); // (m) AAC data + size of the ASDT header                         bs.AddValue(2047'11); // (n) buffer fullness ???                         int num_acc_frames = 1;                         bs.AddValue(num_acc_frames-1'1); // (o) num of AAC Frames' minus 1                          // If Protection was On' there would be a 16 bit CRC                         if (protection_absent == 0) bs.AddValue(0xABCD /*CRC*/'16); // (p)                          byte[] header = bs.ToArray();                          fs_a.Write(header' 0' header.Length);                         fs_a.Write(data' 0' data.Length);                     }                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_AAC += (string format' List<byte[]> aac' uint ObjectType' uint FrequencyIndex' uint ChannelConfiguration) => {                 if (fs_a == null)                 {                     String filename = "rtsp_capture_" + now + ".aac";                     fs_a = new FileStream(filename' FileMode.Create);                 }                  if (fs_a != null)                 {                     foreach (byte[] data in aac)                     {                         // ASDT header format                         int protection_absent = 1; //                        int profile = 2; // Profile 2 = AAC Low Complexity (LC) //                        int sample_freq = 4; // 4 = 44100 Hz //                        int channel_config = 2; // 2 = Stereo                          Rtsp.BitStream bs = new Rtsp.BitStream();                         bs.AddValue(0xFFF'12); // (a) Start of data                         bs.AddValue(0'1); // (b) Version ID' 0 = MPEG4                         bs.AddValue(0'2); // (c) Layer always 2 bits set to 0                         bs.AddValue(protection_absent'1); // (d) 1 = No CRC                         bs.AddValue((int)ObjectType-1'2); // (e) MPEG Object Type / Profile' minus 1                         bs.AddValue((int)FrequencyIndex'4); // (f)                         bs.AddValue(0' 1); // (g) private bit. Always zero                         bs.AddValue((int)ChannelConfiguration'3); // (h)                         bs.AddValue(0'1); // (i) originality                         bs.AddValue(0'1); // (j) home                         bs.AddValue(0'1); // (k) copyrighted id                         bs.AddValue(0'1); // (l) copyright id start                         bs.AddValue(data.Length + 7'13); // (m) AAC data + size of the ASDT header                         bs.AddValue(2047'11); // (n) buffer fullness ???                         int num_acc_frames = 1;                         bs.AddValue(num_acc_frames-1'1); // (o) num of AAC Frames' minus 1                          // If Protection was On' there would be a 16 bit CRC                         if (protection_absent == 0) bs.AddValue(0xABCD /*CRC*/'16); // (p)                          byte[] header = bs.ToArray();                          fs_a.Write(header' 0' header.Length);                         fs_a.Write(data' 0' data.Length);                     }                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_AAC += (string format' List<byte[]> aac' uint ObjectType' uint FrequencyIndex' uint ChannelConfiguration) => {                 if (fs_a == null)                 {                     String filename = "rtsp_capture_" + now + ".aac";                     fs_a = new FileStream(filename' FileMode.Create);                 }                  if (fs_a != null)                 {                     foreach (byte[] data in aac)                     {                         // ASDT header format                         int protection_absent = 1; //                        int profile = 2; // Profile 2 = AAC Low Complexity (LC) //                        int sample_freq = 4; // 4 = 44100 Hz //                        int channel_config = 2; // 2 = Stereo                          Rtsp.BitStream bs = new Rtsp.BitStream();                         bs.AddValue(0xFFF'12); // (a) Start of data                         bs.AddValue(0'1); // (b) Version ID' 0 = MPEG4                         bs.AddValue(0'2); // (c) Layer always 2 bits set to 0                         bs.AddValue(protection_absent'1); // (d) 1 = No CRC                         bs.AddValue((int)ObjectType-1'2); // (e) MPEG Object Type / Profile' minus 1                         bs.AddValue((int)FrequencyIndex'4); // (f)                         bs.AddValue(0' 1); // (g) private bit. Always zero                         bs.AddValue((int)ChannelConfiguration'3); // (h)                         bs.AddValue(0'1); // (i) originality                         bs.AddValue(0'1); // (j) home                         bs.AddValue(0'1); // (k) copyrighted id                         bs.AddValue(0'1); // (l) copyright id start                         bs.AddValue(data.Length + 7'13); // (m) AAC data + size of the ASDT header                         bs.AddValue(2047'11); // (n) buffer fullness ???                         int num_acc_frames = 1;                         bs.AddValue(num_acc_frames-1'1); // (o) num of AAC Frames' minus 1                          // If Protection was On' there would be a 16 bit CRC                         if (protection_absent == 0) bs.AddValue(0xABCD /*CRC*/'16); // (p)                          byte[] header = bs.ToArray();                          fs_a.Write(header' 0' header.Length);                         fs_a.Write(data' 0' data.Length);                     }                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_AAC += (string format' List<byte[]> aac' uint ObjectType' uint FrequencyIndex' uint ChannelConfiguration) => {                 if (fs_a == null)                 {                     String filename = "rtsp_capture_" + now + ".aac";                     fs_a = new FileStream(filename' FileMode.Create);                 }                  if (fs_a != null)                 {                     foreach (byte[] data in aac)                     {                         // ASDT header format                         int protection_absent = 1; //                        int profile = 2; // Profile 2 = AAC Low Complexity (LC) //                        int sample_freq = 4; // 4 = 44100 Hz //                        int channel_config = 2; // 2 = Stereo                          Rtsp.BitStream bs = new Rtsp.BitStream();                         bs.AddValue(0xFFF'12); // (a) Start of data                         bs.AddValue(0'1); // (b) Version ID' 0 = MPEG4                         bs.AddValue(0'2); // (c) Layer always 2 bits set to 0                         bs.AddValue(protection_absent'1); // (d) 1 = No CRC                         bs.AddValue((int)ObjectType-1'2); // (e) MPEG Object Type / Profile' minus 1                         bs.AddValue((int)FrequencyIndex'4); // (f)                         bs.AddValue(0' 1); // (g) private bit. Always zero                         bs.AddValue((int)ChannelConfiguration'3); // (h)                         bs.AddValue(0'1); // (i) originality                         bs.AddValue(0'1); // (j) home                         bs.AddValue(0'1); // (k) copyrighted id                         bs.AddValue(0'1); // (l) copyright id start                         bs.AddValue(data.Length + 7'13); // (m) AAC data + size of the ASDT header                         bs.AddValue(2047'11); // (n) buffer fullness ???                         int num_acc_frames = 1;                         bs.AddValue(num_acc_frames-1'1); // (o) num of AAC Frames' minus 1                          // If Protection was On' there would be a 16 bit CRC                         if (protection_absent == 0) bs.AddValue(0xABCD /*CRC*/'16); // (p)                          byte[] header = bs.ToArray();                          fs_a.Write(header' 0' header.Length);                         fs_a.Write(data' 0' data.Length);                     }                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_AAC += (string format' List<byte[]> aac' uint ObjectType' uint FrequencyIndex' uint ChannelConfiguration) => {                 if (fs_a == null)                 {                     String filename = "rtsp_capture_" + now + ".aac";                     fs_a = new FileStream(filename' FileMode.Create);                 }                  if (fs_a != null)                 {                     foreach (byte[] data in aac)                     {                         // ASDT header format                         int protection_absent = 1; //                        int profile = 2; // Profile 2 = AAC Low Complexity (LC) //                        int sample_freq = 4; // 4 = 44100 Hz //                        int channel_config = 2; // 2 = Stereo                          Rtsp.BitStream bs = new Rtsp.BitStream();                         bs.AddValue(0xFFF'12); // (a) Start of data                         bs.AddValue(0'1); // (b) Version ID' 0 = MPEG4                         bs.AddValue(0'2); // (c) Layer always 2 bits set to 0                         bs.AddValue(protection_absent'1); // (d) 1 = No CRC                         bs.AddValue((int)ObjectType-1'2); // (e) MPEG Object Type / Profile' minus 1                         bs.AddValue((int)FrequencyIndex'4); // (f)                         bs.AddValue(0' 1); // (g) private bit. Always zero                         bs.AddValue((int)ChannelConfiguration'3); // (h)                         bs.AddValue(0'1); // (i) originality                         bs.AddValue(0'1); // (j) home                         bs.AddValue(0'1); // (k) copyrighted id                         bs.AddValue(0'1); // (l) copyright id start                         bs.AddValue(data.Length + 7'13); // (m) AAC data + size of the ASDT header                         bs.AddValue(2047'11); // (n) buffer fullness ???                         int num_acc_frames = 1;                         bs.AddValue(num_acc_frames-1'1); // (o) num of AAC Frames' minus 1                          // If Protection was On' there would be a 16 bit CRC                         if (protection_absent == 0) bs.AddValue(0xABCD /*CRC*/'16); // (p)                          byte[] header = bs.ToArray();                          fs_a.Write(header' 0' header.Length);                         fs_a.Write(data' 0' data.Length);                     }                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_AAC += (string format' List<byte[]> aac' uint ObjectType' uint FrequencyIndex' uint ChannelConfiguration) => {                 if (fs_a == null)                 {                     String filename = "rtsp_capture_" + now + ".aac";                     fs_a = new FileStream(filename' FileMode.Create);                 }                  if (fs_a != null)                 {                     foreach (byte[] data in aac)                     {                         // ASDT header format                         int protection_absent = 1; //                        int profile = 2; // Profile 2 = AAC Low Complexity (LC) //                        int sample_freq = 4; // 4 = 44100 Hz //                        int channel_config = 2; // 2 = Stereo                          Rtsp.BitStream bs = new Rtsp.BitStream();                         bs.AddValue(0xFFF'12); // (a) Start of data                         bs.AddValue(0'1); // (b) Version ID' 0 = MPEG4                         bs.AddValue(0'2); // (c) Layer always 2 bits set to 0                         bs.AddValue(protection_absent'1); // (d) 1 = No CRC                         bs.AddValue((int)ObjectType-1'2); // (e) MPEG Object Type / Profile' minus 1                         bs.AddValue((int)FrequencyIndex'4); // (f)                         bs.AddValue(0' 1); // (g) private bit. Always zero                         bs.AddValue((int)ChannelConfiguration'3); // (h)                         bs.AddValue(0'1); // (i) originality                         bs.AddValue(0'1); // (j) home                         bs.AddValue(0'1); // (k) copyrighted id                         bs.AddValue(0'1); // (l) copyright id start                         bs.AddValue(data.Length + 7'13); // (m) AAC data + size of the ASDT header                         bs.AddValue(2047'11); // (n) buffer fullness ???                         int num_acc_frames = 1;                         bs.AddValue(num_acc_frames-1'1); // (o) num of AAC Frames' minus 1                          // If Protection was On' there would be a 16 bit CRC                         if (protection_absent == 0) bs.AddValue(0xABCD /*CRC*/'16); // (p)                          byte[] header = bs.ToArray();                          fs_a.Write(header' 0' header.Length);                         fs_a.Write(data' 0' data.Length);                     }                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: c.Received_AAC += (string format' List<byte[]> aac' uint ObjectType' uint FrequencyIndex' uint ChannelConfiguration) => {                 if (fs_a == null)                 {                     String filename = "rtsp_capture_" + now + ".aac";                     fs_a = new FileStream(filename' FileMode.Create);                 }                  if (fs_a != null)                 {                     foreach (byte[] data in aac)                     {                         // ASDT header format                         int protection_absent = 1; //                        int profile = 2; // Profile 2 = AAC Low Complexity (LC) //                        int sample_freq = 4; // 4 = 44100 Hz //                        int channel_config = 2; // 2 = Stereo                          Rtsp.BitStream bs = new Rtsp.BitStream();                         bs.AddValue(0xFFF'12); // (a) Start of data                         bs.AddValue(0'1); // (b) Version ID' 0 = MPEG4                         bs.AddValue(0'2); // (c) Layer always 2 bits set to 0                         bs.AddValue(protection_absent'1); // (d) 1 = No CRC                         bs.AddValue((int)ObjectType-1'2); // (e) MPEG Object Type / Profile' minus 1                         bs.AddValue((int)FrequencyIndex'4); // (f)                         bs.AddValue(0' 1); // (g) private bit. Always zero                         bs.AddValue((int)ChannelConfiguration'3); // (h)                         bs.AddValue(0'1); // (i) originality                         bs.AddValue(0'1); // (j) home                         bs.AddValue(0'1); // (k) copyrighted id                         bs.AddValue(0'1); // (l) copyright id start                         bs.AddValue(data.Length + 7'13); // (m) AAC data + size of the ASDT header                         bs.AddValue(2047'11); // (n) buffer fullness ???                         int num_acc_frames = 1;                         bs.AddValue(num_acc_frames-1'1); // (o) num of AAC Frames' minus 1                          // If Protection was On' there would be a 16 bit CRC                         if (protection_absent == 0) bs.AddValue(0xABCD /*CRC*/'16); // (p)                          byte[] header = bs.ToArray();                          fs_a.Write(header' 0' header.Length);                         fs_a.Write(data' 0' data.Length);                     }                 }             };
Magic Number,RtspClientExample,Program,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Connect,The following statement contains a magic number: video_udp_pair = new Rtsp.UDPSocket(50000' 51000);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Connect,The following statement contains a magic number: video_udp_pair = new Rtsp.UDPSocket(50000' 51000);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Connect,The following statement contains a magic number: audio_udp_pair = new Rtsp.UDPSocket(50000' 51000);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Connect,The following statement contains a magic number: audio_udp_pair = new Rtsp.UDPSocket(50000' 51000);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int rtcp_version = (e.Message.Data[packetIndex+0] >> 6);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int rtcp_padding = (e.Message.Data[packetIndex+0] >> 5) & 0x01;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtcp_length = (uint)(e.Message.Data[packetIndex+2] << 8) + (uint)(e.Message.Data[packetIndex+3]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtcp_length = (uint)(e.Message.Data[packetIndex+2] << 8) + (uint)(e.Message.Data[packetIndex+3]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtcp_length = (uint)(e.Message.Data[packetIndex+2] << 8) + (uint)(e.Message.Data[packetIndex+3]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtcp_ssrc = (uint)(e.Message.Data[packetIndex+4] << 24) + (uint)(e.Message.Data[packetIndex+5] << 16)                         + (uint)(e.Message.Data[packetIndex+6] << 8) + (uint)(e.Message.Data[packetIndex+7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtcp_ssrc = (uint)(e.Message.Data[packetIndex+4] << 24) + (uint)(e.Message.Data[packetIndex+5] << 16)                         + (uint)(e.Message.Data[packetIndex+6] << 8) + (uint)(e.Message.Data[packetIndex+7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtcp_ssrc = (uint)(e.Message.Data[packetIndex+4] << 24) + (uint)(e.Message.Data[packetIndex+5] << 16)                         + (uint)(e.Message.Data[packetIndex+6] << 8) + (uint)(e.Message.Data[packetIndex+7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtcp_ssrc = (uint)(e.Message.Data[packetIndex+4] << 24) + (uint)(e.Message.Data[packetIndex+5] << 16)                         + (uint)(e.Message.Data[packetIndex+6] << 8) + (uint)(e.Message.Data[packetIndex+7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtcp_ssrc = (uint)(e.Message.Data[packetIndex+4] << 24) + (uint)(e.Message.Data[packetIndex+5] << 16)                         + (uint)(e.Message.Data[packetIndex+6] << 8) + (uint)(e.Message.Data[packetIndex+7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtcp_ssrc = (uint)(e.Message.Data[packetIndex+4] << 24) + (uint)(e.Message.Data[packetIndex+5] << 16)                         + (uint)(e.Message.Data[packetIndex+6] << 8) + (uint)(e.Message.Data[packetIndex+7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtcp_ssrc = (uint)(e.Message.Data[packetIndex+4] << 24) + (uint)(e.Message.Data[packetIndex+5] << 16)                         + (uint)(e.Message.Data[packetIndex+6] << 8) + (uint)(e.Message.Data[packetIndex+7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_msw_seconds = (uint)(e.Message.Data[packetIndex + 8] << 24) + (uint)(e.Message.Data[packetIndex + 9] << 16)                         + (uint)(e.Message.Data[packetIndex + 10] << 8) + (uint)(e.Message.Data[packetIndex + 11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_msw_seconds = (uint)(e.Message.Data[packetIndex + 8] << 24) + (uint)(e.Message.Data[packetIndex + 9] << 16)                         + (uint)(e.Message.Data[packetIndex + 10] << 8) + (uint)(e.Message.Data[packetIndex + 11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_msw_seconds = (uint)(e.Message.Data[packetIndex + 8] << 24) + (uint)(e.Message.Data[packetIndex + 9] << 16)                         + (uint)(e.Message.Data[packetIndex + 10] << 8) + (uint)(e.Message.Data[packetIndex + 11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_msw_seconds = (uint)(e.Message.Data[packetIndex + 8] << 24) + (uint)(e.Message.Data[packetIndex + 9] << 16)                         + (uint)(e.Message.Data[packetIndex + 10] << 8) + (uint)(e.Message.Data[packetIndex + 11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_msw_seconds = (uint)(e.Message.Data[packetIndex + 8] << 24) + (uint)(e.Message.Data[packetIndex + 9] << 16)                         + (uint)(e.Message.Data[packetIndex + 10] << 8) + (uint)(e.Message.Data[packetIndex + 11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_msw_seconds = (uint)(e.Message.Data[packetIndex + 8] << 24) + (uint)(e.Message.Data[packetIndex + 9] << 16)                         + (uint)(e.Message.Data[packetIndex + 10] << 8) + (uint)(e.Message.Data[packetIndex + 11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_msw_seconds = (uint)(e.Message.Data[packetIndex + 8] << 24) + (uint)(e.Message.Data[packetIndex + 9] << 16)                         + (uint)(e.Message.Data[packetIndex + 10] << 8) + (uint)(e.Message.Data[packetIndex + 11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_lsw_fractions = (uint)(e.Message.Data[packetIndex + 12] << 24) + (uint)(e.Message.Data[packetIndex + 13] << 16)                         + (uint)(e.Message.Data[packetIndex + 14] << 8) + (uint)(e.Message.Data[packetIndex + 15]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_lsw_fractions = (uint)(e.Message.Data[packetIndex + 12] << 24) + (uint)(e.Message.Data[packetIndex + 13] << 16)                         + (uint)(e.Message.Data[packetIndex + 14] << 8) + (uint)(e.Message.Data[packetIndex + 15]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_lsw_fractions = (uint)(e.Message.Data[packetIndex + 12] << 24) + (uint)(e.Message.Data[packetIndex + 13] << 16)                         + (uint)(e.Message.Data[packetIndex + 14] << 8) + (uint)(e.Message.Data[packetIndex + 15]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_lsw_fractions = (uint)(e.Message.Data[packetIndex + 12] << 24) + (uint)(e.Message.Data[packetIndex + 13] << 16)                         + (uint)(e.Message.Data[packetIndex + 14] << 8) + (uint)(e.Message.Data[packetIndex + 15]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_lsw_fractions = (uint)(e.Message.Data[packetIndex + 12] << 24) + (uint)(e.Message.Data[packetIndex + 13] << 16)                         + (uint)(e.Message.Data[packetIndex + 14] << 8) + (uint)(e.Message.Data[packetIndex + 15]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_lsw_fractions = (uint)(e.Message.Data[packetIndex + 12] << 24) + (uint)(e.Message.Data[packetIndex + 13] << 16)                         + (uint)(e.Message.Data[packetIndex + 14] << 8) + (uint)(e.Message.Data[packetIndex + 15]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 ntp_lsw_fractions = (uint)(e.Message.Data[packetIndex + 12] << 24) + (uint)(e.Message.Data[packetIndex + 13] << 16)                         + (uint)(e.Message.Data[packetIndex + 14] << 8) + (uint)(e.Message.Data[packetIndex + 15]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 rtp_timestamp = (uint)(e.Message.Data[packetIndex + 16] << 24) + (uint)(e.Message.Data[packetIndex + 17] << 16)                         + (uint)(e.Message.Data[packetIndex + 18] << 8) + (uint)(e.Message.Data[packetIndex + 19]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 rtp_timestamp = (uint)(e.Message.Data[packetIndex + 16] << 24) + (uint)(e.Message.Data[packetIndex + 17] << 16)                         + (uint)(e.Message.Data[packetIndex + 18] << 8) + (uint)(e.Message.Data[packetIndex + 19]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 rtp_timestamp = (uint)(e.Message.Data[packetIndex + 16] << 24) + (uint)(e.Message.Data[packetIndex + 17] << 16)                         + (uint)(e.Message.Data[packetIndex + 18] << 8) + (uint)(e.Message.Data[packetIndex + 19]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 rtp_timestamp = (uint)(e.Message.Data[packetIndex + 16] << 24) + (uint)(e.Message.Data[packetIndex + 17] << 16)                         + (uint)(e.Message.Data[packetIndex + 18] << 8) + (uint)(e.Message.Data[packetIndex + 19]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 rtp_timestamp = (uint)(e.Message.Data[packetIndex + 16] << 24) + (uint)(e.Message.Data[packetIndex + 17] << 16)                         + (uint)(e.Message.Data[packetIndex + 18] << 8) + (uint)(e.Message.Data[packetIndex + 19]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 rtp_timestamp = (uint)(e.Message.Data[packetIndex + 16] << 24) + (uint)(e.Message.Data[packetIndex + 17] << 16)                         + (uint)(e.Message.Data[packetIndex + 18] << 8) + (uint)(e.Message.Data[packetIndex + 19]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: UInt32 rtp_timestamp = (uint)(e.Message.Data[packetIndex + 16] << 24) + (uint)(e.Message.Data[packetIndex + 17] << 16)                         + (uint)(e.Message.Data[packetIndex + 18] << 8) + (uint)(e.Message.Data[packetIndex + 19]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: DateTime time = new DateTime(1900'1'1'0'0'0'DateTimeKind.Utc);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: byte[] rtcp_receiver_report = new byte[8];
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int version = 2;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int packetType = 201;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int length = (rtcp_receiver_report.Length/4) - 1;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[0] = (byte)((version << 6) + (paddingBit << 5) + reportCount);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[0] = (byte)((version << 6) + (paddingBit << 5) + reportCount);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[2] = (byte)((length >> 8) & 0xFF);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[2] = (byte)((length >> 8) & 0xFF);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[3] = (byte)((length >> 0) & 0XFF);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[4] = (byte)((ssrc >> 24) & 0xFF);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[4] = (byte)((ssrc >> 24) & 0xFF);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[5] = (byte)((ssrc >> 16) & 0xFF);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[5] = (byte)((ssrc >> 16) & 0xFF);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[6] = (byte)((ssrc >> 8) & 0xFF);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[6] = (byte)((ssrc >> 8) & 0xFF);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_receiver_report[7] = (byte)((ssrc >> 0) & 0xFF);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtcp_packet_type == 200
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: packetIndex = packetIndex + ((rtcp_length + 1) * 4);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int rtp_version = (e.Message.Data[0] >> 6);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int rtp_padding = (e.Message.Data[0] >> 5) & 0x01;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int rtp_extension = (e.Message.Data[0] >> 4) & 0x01;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int rtp_marker = (e.Message.Data[1] >> 7) & 0x01;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_sequence_number = ((uint)e.Message.Data[2] << 8) + (uint)(e.Message.Data[3]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_sequence_number = ((uint)e.Message.Data[2] << 8) + (uint)(e.Message.Data[3]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_sequence_number = ((uint)e.Message.Data[2] << 8) + (uint)(e.Message.Data[3]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_timestamp = ((uint)e.Message.Data[4] << 24) + (uint)(e.Message.Data[5] << 16) + (uint)(e.Message.Data[6] << 8) + (uint)(e.Message.Data[7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_timestamp = ((uint)e.Message.Data[4] << 24) + (uint)(e.Message.Data[5] << 16) + (uint)(e.Message.Data[6] << 8) + (uint)(e.Message.Data[7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_timestamp = ((uint)e.Message.Data[4] << 24) + (uint)(e.Message.Data[5] << 16) + (uint)(e.Message.Data[6] << 8) + (uint)(e.Message.Data[7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_timestamp = ((uint)e.Message.Data[4] << 24) + (uint)(e.Message.Data[5] << 16) + (uint)(e.Message.Data[6] << 8) + (uint)(e.Message.Data[7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_timestamp = ((uint)e.Message.Data[4] << 24) + (uint)(e.Message.Data[5] << 16) + (uint)(e.Message.Data[6] << 8) + (uint)(e.Message.Data[7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_timestamp = ((uint)e.Message.Data[4] << 24) + (uint)(e.Message.Data[5] << 16) + (uint)(e.Message.Data[6] << 8) + (uint)(e.Message.Data[7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_timestamp = ((uint)e.Message.Data[4] << 24) + (uint)(e.Message.Data[5] << 16) + (uint)(e.Message.Data[6] << 8) + (uint)(e.Message.Data[7]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_ssrc = ((uint)e.Message.Data[8] << 24) + (uint)(e.Message.Data[9] << 16) + (uint)(e.Message.Data[10] << 8) + (uint)(e.Message.Data[11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_ssrc = ((uint)e.Message.Data[8] << 24) + (uint)(e.Message.Data[9] << 16) + (uint)(e.Message.Data[10] << 8) + (uint)(e.Message.Data[11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_ssrc = ((uint)e.Message.Data[8] << 24) + (uint)(e.Message.Data[9] << 16) + (uint)(e.Message.Data[10] << 8) + (uint)(e.Message.Data[11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_ssrc = ((uint)e.Message.Data[8] << 24) + (uint)(e.Message.Data[9] << 16) + (uint)(e.Message.Data[10] << 8) + (uint)(e.Message.Data[11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_ssrc = ((uint)e.Message.Data[8] << 24) + (uint)(e.Message.Data[9] << 16) + (uint)(e.Message.Data[10] << 8) + (uint)(e.Message.Data[11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_ssrc = ((uint)e.Message.Data[8] << 24) + (uint)(e.Message.Data[9] << 16) + (uint)(e.Message.Data[10] << 8) + (uint)(e.Message.Data[11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: uint rtp_ssrc = ((uint)e.Message.Data[8] << 24) + (uint)(e.Message.Data[9] << 16) + (uint)(e.Message.Data[10] << 8) + (uint)(e.Message.Data[11]);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int rtp_payload_start = 4 // V'P'M'SEQ                                     + 4 // time stamp                                     + 4 // ssrc                                     + (4 * rtp_csrc_count);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int rtp_payload_start = 4 // V'P'M'SEQ                                     + 4 // time stamp                                     + 4 // ssrc                                     + (4 * rtp_csrc_count);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int rtp_payload_start = 4 // V'P'M'SEQ                                     + 4 // time stamp                                     + 4 // ssrc                                     + (4 * rtp_csrc_count);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: int rtp_payload_start = 4 // V'P'M'SEQ                                     + 4 // time stamp                                     + 4 // ssrc                                     + (4 * rtp_csrc_count);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtp_extension_id = ((uint)e.Message.Data[rtp_payload_start + 0] << 8) + (uint)(e.Message.Data[rtp_payload_start + 1] << 0);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtp_extension_size = ((uint)e.Message.Data[rtp_payload_start + 2] << 8) + (uint)(e.Message.Data[rtp_payload_start + 3] << 0) * 4;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtp_extension_size = ((uint)e.Message.Data[rtp_payload_start + 2] << 8) + (uint)(e.Message.Data[rtp_payload_start + 3] << 0) * 4;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtp_extension_size = ((uint)e.Message.Data[rtp_payload_start + 2] << 8) + (uint)(e.Message.Data[rtp_payload_start + 3] << 0) * 4;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtp_extension_size = ((uint)e.Message.Data[rtp_payload_start + 2] << 8) + (uint)(e.Message.Data[rtp_payload_start + 3] << 0) * 4;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: rtp_payload_start += 4 + (int)rtp_extension_size;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtp_DataReceived,The following statement contains a magic number: _logger.Debug("RTP Data"                                    + " V=" + rtp_version                                    + " P=" + rtp_padding                                    + " X=" + rtp_extension                                    + " CC=" + rtp_csrc_count                                    + " M=" + rtp_marker                                    + " PT=" + rtp_payload_type                                    + " Seq=" + rtp_sequence_number                                    + " Time (MS)=" + rtp_timestamp / 90 // convert from 90kHZ clock to ms                                    + " SSRC=" + rtp_ssrc                                    + " Size=" + e.Message.Data.Length);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: message.ReturnCode == 401 && (message.OriginalRequest.Headers.ContainsKey(RtspHeaderNames.Authorization)==true)
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: auth_params = www_authenticate.Substring(5);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: auth_params = www_authenticate.Substring(6);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: string[] parts = item.Trim().Split(new char[] {'='}'2);
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: parts.Count() >= 2 && parts[0].Trim().Equals("realm")
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: message.ReturnCode == 401 && message.Headers.ContainsKey(RtspHeaderNames.WWWAuthenticate)
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: keepalive_timer.Interval = 20 * 1000;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: keepalive_timer.Interval = 20 * 1000;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: sps_pps.Count() >= 2
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: byte[] pps = vps_sps_pps[2];
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: vps_sps_pps.Count() >= 3
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: next_free_rtp_channel += 2;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: next_free_rtcp_channel += 2;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: keepalive_timer.Interval = message.Timeout * 1000 / 2;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: keepalive_timer.Interval = message.Timeout * 1000 / 2;
Magic Number,RtspClientExample,RTSPClient,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RtspClientExample\RTSPClient.cs,Rtsp_MessageReceived,The following statement contains a magic number: message.Timeout > 0 && message.Timeout > keepalive_timer.Interval / 1000
