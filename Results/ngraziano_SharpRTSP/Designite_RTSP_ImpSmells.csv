Implementation smell,Namespace,Class,File,Method,Description
Long Method,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,ReadOneMessage,The method has 105 lines of code.
Long Method,Rtsp.Sdp,SdpFile,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\SdpFile.cs,Read,The method has 102 lines of code.
Complex Method,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,ReadOneMessage,Cyclomatic complexity of the method is 8
Complex Method,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,ToString,Cyclomatic complexity of the method is 13
Complex Method,Rtsp.Sdp,SdpFile,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\SdpFile.cs,Read,Cyclomatic complexity of the method is 16
Long Statement,Rtsp.Messages,RtspRequestOptions,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPRequestOptions.cs,CreateResponse,The length of the statement  "            response.Headers.Add(RtspHeaderNames.Public' "OPTIONS'DESCRIBE'ANNOUNCE'SETUP'PLAY'PAUSE'TEARDOWN'GET_PARAMETER'SET_PARAMETER'REDIRECT"); " is 137.
Long Statement,Rtsp.Sdp,Connection,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Connection.cs,Parse,The length of the statement  "                    throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' "Address type {0} not suported"' parts[1])); " is 120.
Long Statement,Rtsp.Sdp,H264Parameters,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\H264Parameter.cs,ToString,The length of the statement  "            return parameters.Select(p => p.Key + (p.Value != null ? "=" + p.Value : string.Empty)).Aggregate((x' y) => x + ";" + y); " is 121.
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,ReadOneMessage,The following statement contains a magic number: List<byte> buffer = new List<byte>(256);
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,ReadOneMessage,The following statement contains a magic number: while (currentReadingState != ReadingState.End)              {                    // if the system is not reading binary data.                  if (currentReadingState != ReadingState.Data && currentReadingState != ReadingState.MoreInterleavedData)                  {                      oneLine = String.Empty;                      bool needMoreChar = true;                      // I do not know to make readline blocking                      while (needMoreChar)                      {                          int currentByte = commandStream.ReadByte();                            switch (currentByte)                          {                              case -1:                                  // the read is blocking' so if we got -1 it is because the client close;                                  currentReadingState = ReadingState.End;                                  needMoreChar = false;                                  break;                              case '\n':                                  oneLine = ASCIIEncoding.UTF8.GetString(buffer.ToArray());                                  buffer.Clear();                                  needMoreChar = false;                                  break;                              case '\r':                                  // simply ignore this                                  break;                              case '$': // if first caracter of packet is $ it is an interleaved data packet                                  if (currentReadingState == ReadingState.NewCommand && buffer.Count == 0)                                  {                                      currentReadingState = ReadingState.InterleavedData;                                      needMoreChar = false;                                  }                                  else                                      goto default;                                  break;                              default:                                  buffer.Add((byte)currentByte);                                  break;                          }                      }                  }                    switch (currentReadingState)                  {                      case ReadingState.NewCommand:                          currentMessage = RtspMessage.GetRtspMessage(oneLine);                          currentReadingState = ReadingState.Headers;                          break;                      case ReadingState.Headers:                          string line = oneLine;                          if (string.IsNullOrEmpty(line))                          {                              currentReadingState = ReadingState.Data;                              ((RtspMessage)currentMessage).InitialiseDataFromContentLength();                          }                          else                          {                              ((RtspMessage)currentMessage).AddHeader(line);                          }                          break;                      case ReadingState.Data:                          if (currentMessage.Data.Length > 0)                          {                              // Read the remaning data                              byteReaden += commandStream.Read(currentMessage.Data' byteReaden'                                  currentMessage.Data.Length - byteReaden);                              _logger.Debug(CultureInfo.InvariantCulture' "Readen {0} byte of data"' byteReaden);                          }                          // if we haven't read all go there again else go to end.                           if (byteReaden >= currentMessage.Data.Length)                              currentReadingState = ReadingState.End;                          break;                      case ReadingState.InterleavedData:                          currentMessage = new RtspData();                          ((RtspData)currentMessage).Channel = commandStream.ReadByte();                          size = (commandStream.ReadByte() << 8) + commandStream.ReadByte();                          currentMessage.Data = new byte[size];                          currentReadingState = ReadingState.MoreInterleavedData;                          break;                      case ReadingState.MoreInterleavedData:                          // apparently non blocking                          byteReaden += commandStream.Read(currentMessage.Data' byteReaden' size - byteReaden);                          if (byteReaden < size)                              currentReadingState = ReadingState.MoreInterleavedData;                          else                              currentReadingState = ReadingState.End;                          break;                      default:                          break;                  }              }
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: byte[] data = new byte[4 + frame.Length];
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: data[0] = 36;
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: data[2] = (byte)((frame.Length & 0xFF00) >> 8);
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: data[2] = (byte)((frame.Length & 0xFF00) >> 8);
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: data[3] = (byte)((frame.Length & 0x00FF));
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: System.Array.Copy(frame'0'data'4'frame.Length);
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: byte[] data = new byte[4 + frame.Length];
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: data[0] = 36;
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: data[2] = (byte)((frame.Length & 0xFF00) >> 8);
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: data[2] = (byte)((frame.Length & 0xFF00) >> 8);
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: data[3] = (byte)((frame.Length & 0x00FF));
Magic Number,Rtsp,RtspListener,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: System.Array.Copy(frame' 0' data' 4' frame.Length);
Magic Number,Rtsp,RtspUtils,C:\repos\ngraziano_SharpRTSP\RTSP\RTSPUtils.cs,RegisterUri,The following statement contains a magic number: if (!UriParser.IsKnownScheme("rtsp"))                  UriParser.Register(new HttpStyleUriParser()' "rtsp"' 554);
Magic Number,Rtsp.Messages,RtspMessage,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPMessage.cs,GetRtspMessage,The following statement contains a magic number: string[] requestParts = aRequestLine.Split(new char[] { ' ' }' 3);
Magic Number,Rtsp.Messages,RtspMessage,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPMessage.cs,GetRtspMessage,The following statement contains a magic number: if (requestParts.Length == 3)              {                  // A request is : Method SP Request-URI SP RTSP-Version                  // A response is : RTSP-Version SP Status-Code SP Reason-Phrase                  // RTSP-Version = "RTSP" "/" 1*DIGIT "." 1*DIGIT                  if (_rtspVersionTest.IsMatch(requestParts[2]))                      returnValue = RtspRequest.GetRtspRequest(requestParts);                  else if (_rtspVersionTest.IsMatch(requestParts[0]))                      returnValue = new RtspResponse();                  else                  {                      _logger.Warn(CultureInfo.InvariantCulture' "Got a strange message {0}"' aRequestLine);                      returnValue = new RtspMessage();                  }              }              else              {                  _logger.Warn(CultureInfo.InvariantCulture' "Got a strange message {0}"' aRequestLine);                  returnValue = new RtspMessage();              }
Magic Number,Rtsp.Messages,RtspMessage,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPMessage.cs,GetRtspMessage,The following statement contains a magic number: if (requestParts.Length == 3)              {                  // A request is : Method SP Request-URI SP RTSP-Version                  // A response is : RTSP-Version SP Status-Code SP Reason-Phrase                  // RTSP-Version = "RTSP" "/" 1*DIGIT "." 1*DIGIT                  if (_rtspVersionTest.IsMatch(requestParts[2]))                      returnValue = RtspRequest.GetRtspRequest(requestParts);                  else if (_rtspVersionTest.IsMatch(requestParts[0]))                      returnValue = new RtspResponse();                  else                  {                      _logger.Warn(CultureInfo.InvariantCulture' "Got a strange message {0}"' aRequestLine);                      returnValue = new RtspMessage();                  }              }              else              {                  _logger.Warn(CultureInfo.InvariantCulture' "Got a strange message {0}"' aRequestLine);                  returnValue = new RtspMessage();              }
Magic Number,Rtsp.Messages,RtspMessage,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPMessage.cs,AddHeader,The following statement contains a magic number: string[] elements = line.Split(new char[] { ':' }' 2);
Magic Number,Rtsp.Messages,RtspMessage,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPMessage.cs,AddHeader,The following statement contains a magic number: if (elements.Length == 2)              {                  _headers[elements[0].Trim()] = elements[1].TrimStart();              }              else              {                  _logger.Warn(CultureInfo.InvariantCulture' "Invalid Header received : -{0}-"' line);              }
Magic Number,Rtsp.Messages,RtspRequest,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPRequest.cs,CreateResponse,The following statement contains a magic number: returnValue.ReturnCode = 200;
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspResponse,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)              {                    case 100: return "Continue";                    case 200: return "OK";                  case 201: return "Created";                  case 250: return "Low on Storage Space";                    case 300: return "Multiple Choices";                  case 301: return "Moved Permanently";                  case 302: return "Moved Temporarily";                  case 303: return "See Other";                  case 305: return "Use Proxy";                    case 400: return "Bad Request";                  case 401: return "Unauthorized";                  case 402: return "Payment Required";                  case 403: return "Forbidden";                  case 404: return "Not Found";                  case 405: return "Method Not Allowed";                  case 406: return "Not Acceptable";                  case 407: return "Proxy Authentication Required";                  case 408: return "Request Timeout";                  case 410: return "Gone";                  case 411: return "Length Required";                  case 412: return "Precondition Failed";                  case 413: return "Request Entity Too Large";                  case 414: return "Request-URI Too Long";                  case 415: return "Unsupported Media Type";                  case 451: return "Invalid parameter";                  case 452: return "Illegal Conference Identifier";                  case 453: return "Not Enough Bandwidth";                  case 454: return "Session Not Found";                  case 455: return "Method Not Valid In This State";                  case 456: return "Header Field Not Valid";                  case 457: return "Invalid Range";                  case 458: return "Parameter Is Read-Only";                  case 459: return "Aggregate Operation Not Allowed";                  case 460: return "Only Aggregate Operation Allowed";                  case 461: return "Unsupported Transport";                  case 462: return "Destination Unreachable";                    case 500: return "Internal Server Error";                  case 501: return "Not Implemented";                  case 502: return "Bad Gateway";                  case 503: return "Service Unavailable";                  case 504: return "Gateway Timeout";                  case 505: return "RTSP Version Not Supported";                  case 551: return "Option not support";                  default:                      return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: foreach (string part in transportPart)              {                  string[] subPart = part.Split('=');                    switch (subPart[0].ToUpperInvariant())                  {                      case "UNICAST":                          returnValue.IsMulticast = false;                          break;                      case "MULTICAST":                          returnValue.IsMulticast = true;                          break;                      case "DESTINATION":                          if (subPart.Length == 2)                              returnValue.Destination = subPart[1];                          break;                      case "SOURCE":                          if (subPart.Length == 2)                              returnValue.Source = subPart[1];                          break;                      case "INTERLEAVED":                      	returnValue.IsMulticast = false;                          if (subPart.Length < 2)                              throw new ArgumentException("interleaved value invalid"' "aTransportString");                            returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                          break;                      case "APPEND":                          returnValue.IsAppend = true;                          break;                      case "TTL":                          int ttl = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                              throw new ArgumentException("TTL value invalid"' "aTransportString");                          returnValue.TTL = ttl;                          break;                      case "LAYERS":                          int layers = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                              throw new ArgumentException("Layers value invalid"' "aTransportString");                          returnValue.TTL = layers;                          break;                      case "PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("Port value invalid"' "aTransportString");                          returnValue.Port = PortCouple.Parse(subPart[1]);                          break;                      case "CLIENT_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("client_port value invalid"' "aTransportString");                          returnValue.ClientPort = PortCouple.Parse(subPart[1]);                          break;                      case "SERVER_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("server_port value invalid"' "aTransportString");                          returnValue.ServerPort = PortCouple.Parse(subPart[1]);                          break;                      case "SSRC":                          if (subPart.Length < 2)                              throw new ArgumentException("ssrc value invalid"' "aTransportString");                          returnValue.SSrc = subPart[1];                          break;                      case "MODE":                          if (subPart.Length < 2)                              throw new ArgumentException("mode value invalid"' "aTransportString");                          returnValue.Mode = subPart[1];                          break;                      default:                          // TODO log invalid part                          break;                  }              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: foreach (string part in transportPart)              {                  string[] subPart = part.Split('=');                    switch (subPart[0].ToUpperInvariant())                  {                      case "UNICAST":                          returnValue.IsMulticast = false;                          break;                      case "MULTICAST":                          returnValue.IsMulticast = true;                          break;                      case "DESTINATION":                          if (subPart.Length == 2)                              returnValue.Destination = subPart[1];                          break;                      case "SOURCE":                          if (subPart.Length == 2)                              returnValue.Source = subPart[1];                          break;                      case "INTERLEAVED":                      	returnValue.IsMulticast = false;                          if (subPart.Length < 2)                              throw new ArgumentException("interleaved value invalid"' "aTransportString");                            returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                          break;                      case "APPEND":                          returnValue.IsAppend = true;                          break;                      case "TTL":                          int ttl = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                              throw new ArgumentException("TTL value invalid"' "aTransportString");                          returnValue.TTL = ttl;                          break;                      case "LAYERS":                          int layers = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                              throw new ArgumentException("Layers value invalid"' "aTransportString");                          returnValue.TTL = layers;                          break;                      case "PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("Port value invalid"' "aTransportString");                          returnValue.Port = PortCouple.Parse(subPart[1]);                          break;                      case "CLIENT_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("client_port value invalid"' "aTransportString");                          returnValue.ClientPort = PortCouple.Parse(subPart[1]);                          break;                      case "SERVER_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("server_port value invalid"' "aTransportString");                          returnValue.ServerPort = PortCouple.Parse(subPart[1]);                          break;                      case "SSRC":                          if (subPart.Length < 2)                              throw new ArgumentException("ssrc value invalid"' "aTransportString");                          returnValue.SSrc = subPart[1];                          break;                      case "MODE":                          if (subPart.Length < 2)                              throw new ArgumentException("mode value invalid"' "aTransportString");                          returnValue.Mode = subPart[1];                          break;                      default:                          // TODO log invalid part                          break;                  }              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: foreach (string part in transportPart)              {                  string[] subPart = part.Split('=');                    switch (subPart[0].ToUpperInvariant())                  {                      case "UNICAST":                          returnValue.IsMulticast = false;                          break;                      case "MULTICAST":                          returnValue.IsMulticast = true;                          break;                      case "DESTINATION":                          if (subPart.Length == 2)                              returnValue.Destination = subPart[1];                          break;                      case "SOURCE":                          if (subPart.Length == 2)                              returnValue.Source = subPart[1];                          break;                      case "INTERLEAVED":                      	returnValue.IsMulticast = false;                          if (subPart.Length < 2)                              throw new ArgumentException("interleaved value invalid"' "aTransportString");                            returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                          break;                      case "APPEND":                          returnValue.IsAppend = true;                          break;                      case "TTL":                          int ttl = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                              throw new ArgumentException("TTL value invalid"' "aTransportString");                          returnValue.TTL = ttl;                          break;                      case "LAYERS":                          int layers = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                              throw new ArgumentException("Layers value invalid"' "aTransportString");                          returnValue.TTL = layers;                          break;                      case "PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("Port value invalid"' "aTransportString");                          returnValue.Port = PortCouple.Parse(subPart[1]);                          break;                      case "CLIENT_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("client_port value invalid"' "aTransportString");                          returnValue.ClientPort = PortCouple.Parse(subPart[1]);                          break;                      case "SERVER_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("server_port value invalid"' "aTransportString");                          returnValue.ServerPort = PortCouple.Parse(subPart[1]);                          break;                      case "SSRC":                          if (subPart.Length < 2)                              throw new ArgumentException("ssrc value invalid"' "aTransportString");                          returnValue.SSrc = subPart[1];                          break;                      case "MODE":                          if (subPart.Length < 2)                              throw new ArgumentException("mode value invalid"' "aTransportString");                          returnValue.Mode = subPart[1];                          break;                      default:                          // TODO log invalid part                          break;                  }              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: foreach (string part in transportPart)              {                  string[] subPart = part.Split('=');                    switch (subPart[0].ToUpperInvariant())                  {                      case "UNICAST":                          returnValue.IsMulticast = false;                          break;                      case "MULTICAST":                          returnValue.IsMulticast = true;                          break;                      case "DESTINATION":                          if (subPart.Length == 2)                              returnValue.Destination = subPart[1];                          break;                      case "SOURCE":                          if (subPart.Length == 2)                              returnValue.Source = subPart[1];                          break;                      case "INTERLEAVED":                      	returnValue.IsMulticast = false;                          if (subPart.Length < 2)                              throw new ArgumentException("interleaved value invalid"' "aTransportString");                            returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                          break;                      case "APPEND":                          returnValue.IsAppend = true;                          break;                      case "TTL":                          int ttl = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                              throw new ArgumentException("TTL value invalid"' "aTransportString");                          returnValue.TTL = ttl;                          break;                      case "LAYERS":                          int layers = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                              throw new ArgumentException("Layers value invalid"' "aTransportString");                          returnValue.TTL = layers;                          break;                      case "PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("Port value invalid"' "aTransportString");                          returnValue.Port = PortCouple.Parse(subPart[1]);                          break;                      case "CLIENT_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("client_port value invalid"' "aTransportString");                          returnValue.ClientPort = PortCouple.Parse(subPart[1]);                          break;                      case "SERVER_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("server_port value invalid"' "aTransportString");                          returnValue.ServerPort = PortCouple.Parse(subPart[1]);                          break;                      case "SSRC":                          if (subPart.Length < 2)                              throw new ArgumentException("ssrc value invalid"' "aTransportString");                          returnValue.SSrc = subPart[1];                          break;                      case "MODE":                          if (subPart.Length < 2)                              throw new ArgumentException("mode value invalid"' "aTransportString");                          returnValue.Mode = subPart[1];                          break;                      default:                          // TODO log invalid part                          break;                  }              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: foreach (string part in transportPart)              {                  string[] subPart = part.Split('=');                    switch (subPart[0].ToUpperInvariant())                  {                      case "UNICAST":                          returnValue.IsMulticast = false;                          break;                      case "MULTICAST":                          returnValue.IsMulticast = true;                          break;                      case "DESTINATION":                          if (subPart.Length == 2)                              returnValue.Destination = subPart[1];                          break;                      case "SOURCE":                          if (subPart.Length == 2)                              returnValue.Source = subPart[1];                          break;                      case "INTERLEAVED":                      	returnValue.IsMulticast = false;                          if (subPart.Length < 2)                              throw new ArgumentException("interleaved value invalid"' "aTransportString");                            returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                          break;                      case "APPEND":                          returnValue.IsAppend = true;                          break;                      case "TTL":                          int ttl = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                              throw new ArgumentException("TTL value invalid"' "aTransportString");                          returnValue.TTL = ttl;                          break;                      case "LAYERS":                          int layers = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                              throw new ArgumentException("Layers value invalid"' "aTransportString");                          returnValue.TTL = layers;                          break;                      case "PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("Port value invalid"' "aTransportString");                          returnValue.Port = PortCouple.Parse(subPart[1]);                          break;                      case "CLIENT_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("client_port value invalid"' "aTransportString");                          returnValue.ClientPort = PortCouple.Parse(subPart[1]);                          break;                      case "SERVER_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("server_port value invalid"' "aTransportString");                          returnValue.ServerPort = PortCouple.Parse(subPart[1]);                          break;                      case "SSRC":                          if (subPart.Length < 2)                              throw new ArgumentException("ssrc value invalid"' "aTransportString");                          returnValue.SSrc = subPart[1];                          break;                      case "MODE":                          if (subPart.Length < 2)                              throw new ArgumentException("mode value invalid"' "aTransportString");                          returnValue.Mode = subPart[1];                          break;                      default:                          // TODO log invalid part                          break;                  }              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: foreach (string part in transportPart)              {                  string[] subPart = part.Split('=');                    switch (subPart[0].ToUpperInvariant())                  {                      case "UNICAST":                          returnValue.IsMulticast = false;                          break;                      case "MULTICAST":                          returnValue.IsMulticast = true;                          break;                      case "DESTINATION":                          if (subPart.Length == 2)                              returnValue.Destination = subPart[1];                          break;                      case "SOURCE":                          if (subPart.Length == 2)                              returnValue.Source = subPart[1];                          break;                      case "INTERLEAVED":                      	returnValue.IsMulticast = false;                          if (subPart.Length < 2)                              throw new ArgumentException("interleaved value invalid"' "aTransportString");                            returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                          break;                      case "APPEND":                          returnValue.IsAppend = true;                          break;                      case "TTL":                          int ttl = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                              throw new ArgumentException("TTL value invalid"' "aTransportString");                          returnValue.TTL = ttl;                          break;                      case "LAYERS":                          int layers = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                              throw new ArgumentException("Layers value invalid"' "aTransportString");                          returnValue.TTL = layers;                          break;                      case "PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("Port value invalid"' "aTransportString");                          returnValue.Port = PortCouple.Parse(subPart[1]);                          break;                      case "CLIENT_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("client_port value invalid"' "aTransportString");                          returnValue.ClientPort = PortCouple.Parse(subPart[1]);                          break;                      case "SERVER_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("server_port value invalid"' "aTransportString");                          returnValue.ServerPort = PortCouple.Parse(subPart[1]);                          break;                      case "SSRC":                          if (subPart.Length < 2)                              throw new ArgumentException("ssrc value invalid"' "aTransportString");                          returnValue.SSrc = subPart[1];                          break;                      case "MODE":                          if (subPart.Length < 2)                              throw new ArgumentException("mode value invalid"' "aTransportString");                          returnValue.Mode = subPart[1];                          break;                      default:                          // TODO log invalid part                          break;                  }              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: foreach (string part in transportPart)              {                  string[] subPart = part.Split('=');                    switch (subPart[0].ToUpperInvariant())                  {                      case "UNICAST":                          returnValue.IsMulticast = false;                          break;                      case "MULTICAST":                          returnValue.IsMulticast = true;                          break;                      case "DESTINATION":                          if (subPart.Length == 2)                              returnValue.Destination = subPart[1];                          break;                      case "SOURCE":                          if (subPart.Length == 2)                              returnValue.Source = subPart[1];                          break;                      case "INTERLEAVED":                      	returnValue.IsMulticast = false;                          if (subPart.Length < 2)                              throw new ArgumentException("interleaved value invalid"' "aTransportString");                            returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                          break;                      case "APPEND":                          returnValue.IsAppend = true;                          break;                      case "TTL":                          int ttl = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                              throw new ArgumentException("TTL value invalid"' "aTransportString");                          returnValue.TTL = ttl;                          break;                      case "LAYERS":                          int layers = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                              throw new ArgumentException("Layers value invalid"' "aTransportString");                          returnValue.TTL = layers;                          break;                      case "PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("Port value invalid"' "aTransportString");                          returnValue.Port = PortCouple.Parse(subPart[1]);                          break;                      case "CLIENT_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("client_port value invalid"' "aTransportString");                          returnValue.ClientPort = PortCouple.Parse(subPart[1]);                          break;                      case "SERVER_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("server_port value invalid"' "aTransportString");                          returnValue.ServerPort = PortCouple.Parse(subPart[1]);                          break;                      case "SSRC":                          if (subPart.Length < 2)                              throw new ArgumentException("ssrc value invalid"' "aTransportString");                          returnValue.SSrc = subPart[1];                          break;                      case "MODE":                          if (subPart.Length < 2)                              throw new ArgumentException("mode value invalid"' "aTransportString");                          returnValue.Mode = subPart[1];                          break;                      default:                          // TODO log invalid part                          break;                  }              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: foreach (string part in transportPart)              {                  string[] subPart = part.Split('=');                    switch (subPart[0].ToUpperInvariant())                  {                      case "UNICAST":                          returnValue.IsMulticast = false;                          break;                      case "MULTICAST":                          returnValue.IsMulticast = true;                          break;                      case "DESTINATION":                          if (subPart.Length == 2)                              returnValue.Destination = subPart[1];                          break;                      case "SOURCE":                          if (subPart.Length == 2)                              returnValue.Source = subPart[1];                          break;                      case "INTERLEAVED":                      	returnValue.IsMulticast = false;                          if (subPart.Length < 2)                              throw new ArgumentException("interleaved value invalid"' "aTransportString");                            returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                          break;                      case "APPEND":                          returnValue.IsAppend = true;                          break;                      case "TTL":                          int ttl = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                              throw new ArgumentException("TTL value invalid"' "aTransportString");                          returnValue.TTL = ttl;                          break;                      case "LAYERS":                          int layers = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                              throw new ArgumentException("Layers value invalid"' "aTransportString");                          returnValue.TTL = layers;                          break;                      case "PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("Port value invalid"' "aTransportString");                          returnValue.Port = PortCouple.Parse(subPart[1]);                          break;                      case "CLIENT_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("client_port value invalid"' "aTransportString");                          returnValue.ClientPort = PortCouple.Parse(subPart[1]);                          break;                      case "SERVER_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("server_port value invalid"' "aTransportString");                          returnValue.ServerPort = PortCouple.Parse(subPart[1]);                          break;                      case "SSRC":                          if (subPart.Length < 2)                              throw new ArgumentException("ssrc value invalid"' "aTransportString");                          returnValue.SSrc = subPart[1];                          break;                      case "MODE":                          if (subPart.Length < 2)                              throw new ArgumentException("mode value invalid"' "aTransportString");                          returnValue.Mode = subPart[1];                          break;                      default:                          // TODO log invalid part                          break;                  }              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: foreach (string part in transportPart)              {                  string[] subPart = part.Split('=');                    switch (subPart[0].ToUpperInvariant())                  {                      case "UNICAST":                          returnValue.IsMulticast = false;                          break;                      case "MULTICAST":                          returnValue.IsMulticast = true;                          break;                      case "DESTINATION":                          if (subPart.Length == 2)                              returnValue.Destination = subPart[1];                          break;                      case "SOURCE":                          if (subPart.Length == 2)                              returnValue.Source = subPart[1];                          break;                      case "INTERLEAVED":                      	returnValue.IsMulticast = false;                          if (subPart.Length < 2)                              throw new ArgumentException("interleaved value invalid"' "aTransportString");                            returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                          break;                      case "APPEND":                          returnValue.IsAppend = true;                          break;                      case "TTL":                          int ttl = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                              throw new ArgumentException("TTL value invalid"' "aTransportString");                          returnValue.TTL = ttl;                          break;                      case "LAYERS":                          int layers = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                              throw new ArgumentException("Layers value invalid"' "aTransportString");                          returnValue.TTL = layers;                          break;                      case "PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("Port value invalid"' "aTransportString");                          returnValue.Port = PortCouple.Parse(subPart[1]);                          break;                      case "CLIENT_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("client_port value invalid"' "aTransportString");                          returnValue.ClientPort = PortCouple.Parse(subPart[1]);                          break;                      case "SERVER_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("server_port value invalid"' "aTransportString");                          returnValue.ServerPort = PortCouple.Parse(subPart[1]);                          break;                      case "SSRC":                          if (subPart.Length < 2)                              throw new ArgumentException("ssrc value invalid"' "aTransportString");                          returnValue.SSrc = subPart[1];                          break;                      case "MODE":                          if (subPart.Length < 2)                              throw new ArgumentException("mode value invalid"' "aTransportString");                          returnValue.Mode = subPart[1];                          break;                      default:                          // TODO log invalid part                          break;                  }              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: foreach (string part in transportPart)              {                  string[] subPart = part.Split('=');                    switch (subPart[0].ToUpperInvariant())                  {                      case "UNICAST":                          returnValue.IsMulticast = false;                          break;                      case "MULTICAST":                          returnValue.IsMulticast = true;                          break;                      case "DESTINATION":                          if (subPart.Length == 2)                              returnValue.Destination = subPart[1];                          break;                      case "SOURCE":                          if (subPart.Length == 2)                              returnValue.Source = subPart[1];                          break;                      case "INTERLEAVED":                      	returnValue.IsMulticast = false;                          if (subPart.Length < 2)                              throw new ArgumentException("interleaved value invalid"' "aTransportString");                            returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                          break;                      case "APPEND":                          returnValue.IsAppend = true;                          break;                      case "TTL":                          int ttl = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                              throw new ArgumentException("TTL value invalid"' "aTransportString");                          returnValue.TTL = ttl;                          break;                      case "LAYERS":                          int layers = 0;                          if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                              throw new ArgumentException("Layers value invalid"' "aTransportString");                          returnValue.TTL = layers;                          break;                      case "PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("Port value invalid"' "aTransportString");                          returnValue.Port = PortCouple.Parse(subPart[1]);                          break;                      case "CLIENT_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("client_port value invalid"' "aTransportString");                          returnValue.ClientPort = PortCouple.Parse(subPart[1]);                          break;                      case "SERVER_PORT":                          if (subPart.Length < 2)                              throw new ArgumentException("server_port value invalid"' "aTransportString");                          returnValue.ServerPort = PortCouple.Parse(subPart[1]);                          break;                      case "SSRC":                          if (subPart.Length < 2)                              throw new ArgumentException("ssrc value invalid"' "aTransportString");                          returnValue.SSrc = subPart[1];                          break;                      case "MODE":                          if (subPart.Length < 2)                              throw new ArgumentException("mode value invalid"' "aTransportString");                          returnValue.Mode = subPart[1];                          break;                      default:                          // TODO log invalid part                          break;                  }              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,ReadLowerTransport,The following statement contains a magic number: if (transportProtocolPart.Length == 3)              {                  LowerTransportType lowerTransport;                  if (!Enum.TryParse<LowerTransportType>(transportProtocolPart[2]' out lowerTransport))                      throw new ArgumentException("Lower transport type invalid"' "aTransportString");                  returnValue.LowerTransport = lowerTransport;              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,ReadLowerTransport,The following statement contains a magic number: if (transportProtocolPart.Length == 3)              {                  LowerTransportType lowerTransport;                  if (!Enum.TryParse<LowerTransportType>(transportProtocolPart[2]' out lowerTransport))                      throw new ArgumentException("Lower transport type invalid"' "aTransportString");                  returnValue.LowerTransport = lowerTransport;              }
Magic Number,Rtsp.Messages,RtspTransport,C:\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,ReadProfile,The following statement contains a magic number: if (transportProtocolPart.Length < 2 || !Enum.TryParse<ProfileType>(transportProtocolPart[1]' out profile))                  throw new ArgumentException("Transport profile type invalid"' "aTransportString");
Magic Number,Rtsp.Sdp,Attribut,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Attribut.cs,ParseInvariant,The following statement contains a magic number: var listValues = value.Split(new char[] {':'}' 2);
Magic Number,Rtsp.Sdp,AttributFmtp,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\AttributFmtp.cs,ParseValue,The following statement contains a magic number: var parts = value.Split(new char[] { ' ' }' 2);
Magic Number,Rtsp.Sdp,AttributRtpMap,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\AttributRtpMap.cs,ParseValue,The following statement contains a magic number: var parts = value.Split(new char[] { ' ' }' 2);
Magic Number,Rtsp.Sdp,Connection,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Connection.cs,Parse,The following statement contains a magic number: if (parts.Length != 3)                  throw new FormatException("Value do not contain 3 parts as needed.");
Magic Number,Rtsp.Sdp,Connection,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Connection.cs,Parse,The following statement contains a magic number: switch (parts[1])              {                  case "IP4":                      return ConnectionIP4.Parse(parts[2]);                  case "IP6":                      return ConnectionIP6.Parse(parts[2]);                  default:                      throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' "Address type {0} not suported"' parts[1]));              }
Magic Number,Rtsp.Sdp,Connection,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Connection.cs,Parse,The following statement contains a magic number: switch (parts[1])              {                  case "IP4":                      return ConnectionIP4.Parse(parts[2]);                  case "IP6":                      return ConnectionIP6.Parse(parts[2]);                  default:                      throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' "Address type {0} not suported"' parts[1]));              }
Magic Number,Rtsp.Sdp,ConnectionIP4,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\ConnectionIP4.cs,Parse,The following statement contains a magic number: if (parts.Length > 3)                  throw new FormatException("Too much address subpart in " + ipAddress);
Magic Number,Rtsp.Sdp,ConnectionIP4,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\ConnectionIP4.cs,Parse,The following statement contains a magic number: if (parts.Length > 2)              {                  if (!int.TryParse(parts[2]' NumberStyles.Integer' CultureInfo.InvariantCulture' out numberOfAddress))                      throw new FormatException("Invalid number of address : " + parts[2]);                  result.NumberOfAddress = numberOfAddress;              }
Magic Number,Rtsp.Sdp,ConnectionIP4,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\ConnectionIP4.cs,Parse,The following statement contains a magic number: if (parts.Length > 2)              {                  if (!int.TryParse(parts[2]' NumberStyles.Integer' CultureInfo.InvariantCulture' out numberOfAddress))                      throw new FormatException("Invalid number of address : " + parts[2]);                  result.NumberOfAddress = numberOfAddress;              }
Magic Number,Rtsp.Sdp,ConnectionIP4,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\ConnectionIP4.cs,Parse,The following statement contains a magic number: if (parts.Length > 2)              {                  if (!int.TryParse(parts[2]' NumberStyles.Integer' CultureInfo.InvariantCulture' out numberOfAddress))                      throw new FormatException("Invalid number of address : " + parts[2]);                  result.NumberOfAddress = numberOfAddress;              }
Magic Number,Rtsp.Sdp,ConnectionIP6,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\ConnectionIP6.cs,Parse,The following statement contains a magic number: if (parts.Length > 2)                  throw new FormatException("Too much address subpart in " + ipAddress);
Magic Number,Rtsp.Sdp,H264Parameters,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\H264Parameter.cs,Parse,The following statement contains a magic number: foreach (var pair in parameterString.Split(';').Select(x => x.Trim().Split(new char[] { '=' }' 2)))              {                  if(!string.IsNullOrWhiteSpace(pair[0]))                      result[pair[0]] = pair.Length > 1 ? pair[1] : null;              }
Magic Number,Rtsp.Sdp,Media,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Media.cs,Media,The following statement contains a magic number: var parts = mediaString.Split(new char[] { ' ' } ' 4);
Magic Number,Rtsp.Sdp,Media,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Media.cs,Media,The following statement contains a magic number: if (parts.Count() >= 4) {                  if(int.TryParse(parts[3]' out pt))                  {                      PayloadType = pt;                  } else {                      PayloadType = 0;                  }              }
Magic Number,Rtsp.Sdp,Media,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Media.cs,Media,The following statement contains a magic number: if (parts.Count() >= 4) {                  if(int.TryParse(parts[3]' out pt))                  {                      PayloadType = pt;                  } else {                      PayloadType = 0;                  }              }
Magic Number,Rtsp.Sdp,Origin,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Origin.cs,Parse,The following statement contains a magic number: if (parts.Length != 6)                  throw new FormatException("Number of element invalid in origin string.");
Magic Number,Rtsp.Sdp,Origin,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Origin.cs,Parse,The following statement contains a magic number: result.SessionVersion = long.Parse(parts[2]);
Magic Number,Rtsp.Sdp,Origin,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Origin.cs,Parse,The following statement contains a magic number: result.NetType = parts[3];
Magic Number,Rtsp.Sdp,Origin,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Origin.cs,Parse,The following statement contains a magic number: result.AddressType = parts[4];
Magic Number,Rtsp.Sdp,Origin,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\Origin.cs,Parse,The following statement contains a magic number: result.UnicastAddress = parts[5];
Magic Number,Rtsp.Sdp,SdpFile,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\SdpFile.cs,GetKeyValue,The following statement contains a magic number: string[] parts = line.Split(new char[] { '=' }' 2);
Magic Number,Rtsp.Sdp,SdpFile,C:\repos\ngraziano_SharpRTSP\RTSP\Sdp\SdpFile.cs,GetKeyValue,The following statement contains a magic number: if (parts.Length != 2)                  throw new InvalidDataException();
