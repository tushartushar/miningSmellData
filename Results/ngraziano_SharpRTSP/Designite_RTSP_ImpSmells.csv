Implementation smell,Namespace,Class,File,Method,Description
Long Method,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,ReadOneMessage,The method has 138 lines of code.
Long Method,Rtsp,H264Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H264Payload.cs,Process_H264_RTP_Frame,The method has 133 lines of code.
Long Method,Rtsp,H265Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H265Payload.cs,Process_H265_RTP_Frame,The method has 165 lines of code.
Long Method,Rtsp.Sdp,SdpFile,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\SdpFile.cs,Read,The method has 131 lines of code.
Complex Method,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,DoJob,Cyclomatic complexity of the method is 9
Complex Method,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,ReadOneMessage,Cyclomatic complexity of the method is 25
Complex Method,Rtsp,H264Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H264Payload.cs,Process_H264_RTP_Frame,Cyclomatic complexity of the method is 13
Complex Method,Rtsp,Authentication,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Authentication.cs,IsValid,Cyclomatic complexity of the method is 11
Complex Method,Rtsp,H265Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H265Payload.cs,Process_H265_RTP_Frame,Cyclomatic complexity of the method is 13
Complex Method,Rtsp,BitStream,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\BitStream.cs,AddHexString,Cyclomatic complexity of the method is 18
Complex Method,Rtsp.Messages,RtspRequest,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPRequest.cs,GetRtspRequest,Cyclomatic complexity of the method is 10
Complex Method,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,Cyclomatic complexity of the method is 44
Complex Method,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,Cyclomatic complexity of the method is 26
Complex Method,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,ToString,Cyclomatic complexity of the method is 14
Complex Method,Rtsp.Sdp,Media,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Media.cs,Media,Cyclomatic complexity of the method is 9
Complex Method,Rtsp.Sdp,SdpFile,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\SdpFile.cs,Read,Cyclomatic complexity of the method is 17
Long Parameter List,Rtsp,Authentication,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Authentication.cs,GenerateAuthorization,The method has 7 parameters. Parameters: username' password' auth_type' realm' nonce' url' command
Long Statement,Rtsp,H264Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H264Payload.cs,Process_H264_RTP_Packet,The length of the statement  "            temporary_rtp_payloads.Add(rtp_payload); // Todo Could optimise this and go direct to Process Frame if just 1 packet in frame" is 125.
Long Statement,Rtsp,H264Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H264Payload.cs,Process_H264_RTP_Frame,The length of the statement  "            List<byte[]> nal_units = new List<byte[]>(); // Stores the NAL units for a Video Frame. May be more than one NAL unit in a video frame." is 135.
Long Statement,Rtsp,H264Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H264Payload.cs,Process_H264_RTP_Frame,The length of the statement  "            _logger.Debug("Norm=" + norm + " ST-A=" + stap_a + " ST-B=" + stap_b + " M16=" + mtap16 + " M24=" + mtap24 + " FU-A=" + fu_a + " FU-B=" + fu_b);" is 144.
Long Statement,Rtsp,H265Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H265Payload.cs,Process_H265_RTP_Packet,The length of the statement  "            temporary_rtp_payloads.Add(rtp_payload); // Todo Could optimise this and go direct to Process Frame if just 1 packet in frame" is 125.
Long Statement,Rtsp,H265Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H265Payload.cs,Process_H265_RTP_Frame,The length of the statement  "            List<byte[]> nal_units = new List<byte[]>(); // Stores the NAL units for a Video Frame. May be more than one NAL unit in a video frame." is 135.
Long Statement,Rtsp.Messages,RtspRequestOptions,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPRequestOptions.cs,CreateResponse,The length of the statement  "            response.Headers.Add(RtspHeaderNames.Public' "OPTIONS'DESCRIBE'ANNOUNCE'SETUP'PLAY'PAUSE'TEARDOWN'GET_PARAMETER'SET_PARAMETER'REDIRECT");" is 137.
Long Statement,Rtsp.Sdp,Connection,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Connection.cs,Parse,The length of the statement  "                    throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' "Address type {0} not suported"' parts[1]));" is 120.
Long Statement,Rtsp.Sdp,H264Parameters,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\H264Parameter.cs,ToString,The length of the statement  "            return parameters.Select(p => p.Key + (p.Value != null ? "=" + p.Value : string.Empty)).Aggregate((x' y) => x + ";" + y);" is 121.
Long Statement,Rtsp.Sdp,H265Parameters,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\H265Parameter.cs,ToString,The length of the statement  "            return parameters.Select(p => p.Key + (p.Value != null ? "=" + p.Value : string.Empty)).Aggregate((x' y) => x + ";" + y);" is 121.
Complex Conditional,Rtsp,Authentication,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Authentication.cs,IsValid,The conditional expression  "(auth_header_username == this.username) 				    && (auth_header_realm == this.realm) 				    && (auth_header_nonce == this.nonce) 				    && (auth_header_response == expected_response)"  is complex.
Empty Catch Block,Rtsp,UDPSocket,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\UdpSocket.cs,DoWorkerJob,The method has an empty catch block.
Empty Catch Block,Rtsp,UDPSocket,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\UdpSocket.cs,DoWorkerJob,The method has an empty catch block.
Empty Catch Block,Rtsp,Authentication,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Authentication.cs,IsValid,The method has an empty catch block.
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,ReadOneMessage,The following statement contains a magic number: List<byte> buffer = new List<byte>(256);
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,ReadOneMessage,The following statement contains a magic number: switch (currentReadingState)                 {                     case ReadingState.NewCommand:                         currentMessage = RtspMessage.GetRtspMessage(oneLine);                         currentReadingState = ReadingState.Headers;                         break;                     case ReadingState.Headers:                         string line = oneLine;                         if (string.IsNullOrEmpty(line))                         {                             currentReadingState = ReadingState.Data;                             ((RtspMessage)currentMessage).InitialiseDataFromContentLength();                         }                         else                         {                             ((RtspMessage)currentMessage).AddHeader(line);                         }                         break;                     case ReadingState.Data:                         if (currentMessage.Data.Length > 0)                         {                             // Read the remaning data                             int byteCount = commandStream.Read(currentMessage.Data' byteReaden'                                                                currentMessage.Data.Length - byteReaden);                             if (byteCount <= 0) {                                 currentReadingState = ReadingState.End;                                 break;                             }                             byteReaden += byteCount;                             _logger.Debug(CultureInfo.InvariantCulture' "Readen {0} byte of data"' byteReaden);                         }                         // if we haven't read all go there again else go to end.                          if (byteReaden >= currentMessage.Data.Length)                             currentReadingState = ReadingState.End;                         break;                     case ReadingState.InterleavedData:                         currentMessage = new RtspData();                         int channelByte = commandStream.ReadByte();                         if (channelByte == -1) {                             currentReadingState = ReadingState.End;                             break;                         }                         ((RtspData)currentMessage).Channel = channelByte;                          int sizeByte1 = commandStream.ReadByte();                         if (sizeByte1 == -1) {                             currentReadingState = ReadingState.End;                             break;                         }                         int sizeByte2 = commandStream.ReadByte();                         if (sizeByte2 == -1) {                             currentReadingState = ReadingState.End;                             break;                         }                         size = (sizeByte1 << 8) + sizeByte2;                         currentMessage.Data = new byte[size];                         currentReadingState = ReadingState.MoreInterleavedData;                         break;                     case ReadingState.MoreInterleavedData:                         // apparently non blocking                         {                             int byteCount = commandStream.Read(currentMessage.Data' byteReaden' size - byteReaden);                             if (byteCount <= 0) {                                 currentReadingState = ReadingState.End;                                 break;                             }                             byteReaden += byteCount;                             if (byteReaden < size)                                 currentReadingState = ReadingState.MoreInterleavedData;                             else                                 currentReadingState = ReadingState.End;                             break;                         }                     default:                         break;                 }
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: byte[] data = new byte[4 + frame.Length];
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: data[0] = 36;
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: data[2] = (byte)((frame.Length & 0xFF00) >> 8);
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: data[2] = (byte)((frame.Length & 0xFF00) >> 8);
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: data[3] = (byte)((frame.Length & 0x00FF));
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,BeginSendData,The following statement contains a magic number: System.Array.Copy(frame'0'data'4'frame.Length);
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: byte[] data = new byte[4 + frame.Length];
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: data[0] = 36;
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: data[2] = (byte)((frame.Length & 0xFF00) >> 8);
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: data[2] = (byte)((frame.Length & 0xFF00) >> 8);
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: data[3] = (byte)((frame.Length & 0x00FF));
Magic Number,Rtsp,RtspListener,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPListener.cs,SendData,The following statement contains a magic number: System.Array.Copy(frame' 0' data' 4' frame.Length);
Magic Number,Rtsp,RtspUtils,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\RTSPUtils.cs,RegisterUri,The following statement contains a magic number: UriParser.Register(new HttpStyleUriParser()' "rtsp"' 554);
Magic Number,Rtsp,G711Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\G711Payload.cs,Process_G711_1_RTP_Packet,The following statement contains a magic number: switch (mode_index) {                 case 1: size_of_one_frame = 40; break;                 case 2: size_of_one_frame = 50; break;                 case 3: size_of_one_frame = 50; break;                 case 4: size_of_one_frame = 60; break;                 default: return null; // invalid Mode Index             }
Magic Number,Rtsp,G711Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\G711Payload.cs,Process_G711_1_RTP_Packet,The following statement contains a magic number: switch (mode_index) {                 case 1: size_of_one_frame = 40; break;                 case 2: size_of_one_frame = 50; break;                 case 3: size_of_one_frame = 50; break;                 case 4: size_of_one_frame = 60; break;                 default: return null; // invalid Mode Index             }
Magic Number,Rtsp,G711Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\G711Payload.cs,Process_G711_1_RTP_Packet,The following statement contains a magic number: switch (mode_index) {                 case 1: size_of_one_frame = 40; break;                 case 2: size_of_one_frame = 50; break;                 case 3: size_of_one_frame = 50; break;                 case 4: size_of_one_frame = 60; break;                 default: return null; // invalid Mode Index             }
Magic Number,Rtsp,G711Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\G711Payload.cs,Process_G711_1_RTP_Packet,The following statement contains a magic number: switch (mode_index) {                 case 1: size_of_one_frame = 40; break;                 case 2: size_of_one_frame = 50; break;                 case 3: size_of_one_frame = 50; break;                 case 4: size_of_one_frame = 60; break;                 default: return null; // invalid Mode Index             }
Magic Number,Rtsp,G711Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\G711Payload.cs,Process_G711_1_RTP_Packet,The following statement contains a magic number: switch (mode_index) {                 case 1: size_of_one_frame = 40; break;                 case 2: size_of_one_frame = 50; break;                 case 3: size_of_one_frame = 50; break;                 case 4: size_of_one_frame = 60; break;                 default: return null; // invalid Mode Index             }
Magic Number,Rtsp,G711Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\G711Payload.cs,Process_G711_1_RTP_Packet,The following statement contains a magic number: switch (mode_index) {                 case 1: size_of_one_frame = 40; break;                 case 2: size_of_one_frame = 50; break;                 case 3: size_of_one_frame = 50; break;                 case 4: size_of_one_frame = 60; break;                 default: return null; // invalid Mode Index             }
Magic Number,Rtsp,G711Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\G711Payload.cs,Process_G711_1_RTP_Packet,The following statement contains a magic number: switch (mode_index) {                 case 1: size_of_one_frame = 40; break;                 case 2: size_of_one_frame = 50; break;                 case 3: size_of_one_frame = 50; break;                 case 4: size_of_one_frame = 60; break;                 default: return null; // invalid Mode Index             }
Magic Number,Rtsp,G711Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\G711Payload.cs,Process_G711_1_RTP_Packet,The following statement contains a magic number: byte[] layer_0_audio = new byte[40];
Magic Number,Rtsp,G711Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\G711Payload.cs,Process_G711_1_RTP_Packet,The following statement contains a magic number: System.Array.Copy(rtp_payload'frame_start'layer_0_audio'0'40);
Magic Number,Rtsp,H264Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H264Payload.cs,Process_H264_RTP_Frame,The following statement contains a magic number: int nal_header_f_bit = (rtp_payloads[payload_index][0] >> 7) & 0x01;
Magic Number,Rtsp,H264Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H264Payload.cs,Process_H264_RTP_Frame,The following statement contains a magic number: int nal_header_nri = (rtp_payloads[payload_index][0] >> 5) & 0x03;
Magic Number,Rtsp,H264Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H264Payload.cs,Process_H264_RTP_Frame,The following statement contains a magic number: nal_header_type >= 1 && nal_header_type <= 23
Magic Number,Rtsp,UDPSocket,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\UdpSocket.cs,UDPSocket,The following statement contains a magic number: data_socket.Client.ReceiveBufferSize = 100 * 1024;
Magic Number,Rtsp,UDPSocket,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\UdpSocket.cs,UDPSocket,The following statement contains a magic number: data_socket.Client.ReceiveBufferSize = 100 * 1024;
Magic Number,Rtsp,UDPSocket,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\UdpSocket.cs,UDPSocket,The following statement contains a magic number: data_socket.Client.SendBufferSize = 65535;
Magic Number,Rtsp,UDPSocket,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\UdpSocket.cs,UDPSocket,The following statement contains a magic number: data_socket.Client.ReceiveBufferSize = 100 * 1024;
Magic Number,Rtsp,UDPSocket,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\UdpSocket.cs,UDPSocket,The following statement contains a magic number: data_socket.Client.ReceiveBufferSize = 100 * 1024;
Magic Number,Rtsp,UDPSocket,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\UdpSocket.cs,UDPSocket,The following statement contains a magic number: data_socket.Client.SendBufferSize = 65535;
Magic Number,Rtsp,Authentication,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Authentication.cs,Authentication,The following statement contains a magic number: this.nonce = new Random().Next(100000000'999999999).ToString();
Magic Number,Rtsp,Authentication,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Authentication.cs,Authentication,The following statement contains a magic number: this.nonce = new Random().Next(100000000'999999999).ToString();
Magic Number,Rtsp,Authentication,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Authentication.cs,IsValid,The following statement contains a magic number: string base64_str = authorization.Substring(6);
Magic Number,Rtsp,Authentication,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Authentication.cs,IsValid,The following statement contains a magic number: string value_str = authorization.Substring(7);
Magic Number,Rtsp,Authentication,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Authentication.cs,IsValid,The following statement contains a magic number: string[] tuple = value.Trim().Split(new char[] {'='}'2);
Magic Number,Rtsp,Authentication,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Authentication.cs,IsValid,The following statement contains a magic number: tuple.Length == 2 && tuple[0].Equals("username")
Magic Number,Rtsp,H265Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H265Payload.cs,Process_H265_RTP_Frame,The following statement contains a magic number: int payload_header = (rtp_payloads[payload_index][0] << 8) | (rtp_payloads[payload_index][1]);
Magic Number,Rtsp,H265Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H265Payload.cs,Process_H265_RTP_Frame,The following statement contains a magic number: int payload_header_f_bit = (payload_header >> 15) & 0x01;
Magic Number,Rtsp,H265Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H265Payload.cs,Process_H265_RTP_Frame,The following statement contains a magic number: int payload_header_type = (payload_header >> 9) & 0x3F;
Magic Number,Rtsp,H265Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H265Payload.cs,Process_H265_RTP_Frame,The following statement contains a magic number: int payload_header_layer_id = (payload_header >> 3) & 0x3F;
Magic Number,Rtsp,H265Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H265Payload.cs,Process_H265_RTP_Frame,The following statement contains a magic number: payload_header_type != 48 && payload_header_type != 49
Magic Number,Rtsp,H265Payload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\H265Payload.cs,Process_H265_RTP_Frame,The following statement contains a magic number: payload_header_type != 48 && payload_header_type != 49
Magic Number,Rtsp,AACPayload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\AACPayload.cs,AACPayload,The following statement contains a magic number: ObjectType = bs.Read(5);
Magic Number,Rtsp,AACPayload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\AACPayload.cs,AACPayload,The following statement contains a magic number: FrequencyIndex = bs.Read(4);
Magic Number,Rtsp,AACPayload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\AACPayload.cs,AACPayload,The following statement contains a magic number: ChannelConfiguration = bs.Read(4);
Magic Number,Rtsp,AACPayload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\AACPayload.cs,Process_AAC_RTP_Packet,The following statement contains a magic number: ptr + 4 > rtp_payload.Length
Magic Number,Rtsp,AACPayload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\AACPayload.cs,Process_AAC_RTP_Packet,The following statement contains a magic number: int au_headers_length_bits = (((rtp_payload[ptr] << 8) + (rtp_payload[ptr + 1] << 0)));
Magic Number,Rtsp,AACPayload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\AACPayload.cs,Process_AAC_RTP_Packet,The following statement contains a magic number: int au_headers_length = (int)Math.Ceiling((double)au_headers_length_bits / 8.0);
Magic Number,Rtsp,AACPayload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\AACPayload.cs,Process_AAC_RTP_Packet,The following statement contains a magic number: ptr += 2;
Magic Number,Rtsp,AACPayload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\AACPayload.cs,Process_AAC_RTP_Packet,The following statement contains a magic number: int aac_frame_size = (((rtp_payload[ptr] << 8) + (rtp_payload[ptr+1] << 0)) >> 3);
Magic Number,Rtsp,AACPayload,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\AACPayload.cs,Process_AAC_RTP_Packet,The following statement contains a magic number: int aac_frame_size = (((rtp_payload[ptr] << 8) + (rtp_payload[ptr+1] << 0)) >> 3);
Magic Number,Rtsp,BitStream,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\BitStream.cs,AddHexString,The following statement contains a magic number: this.AddValue(0'4);
Magic Number,Rtsp,BitStream,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\BitStream.cs,ToArray,The following statement contains a magic number: int num_bytes = (int)Math.Ceiling((double)data.Count/8.0);
Magic Number,Rtsp,BitStream,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\BitStream.cs,ToArray,The following statement contains a magic number: int shift = 7;
Magic Number,Rtsp,BitStream,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\BitStream.cs,ToArray,The following statement contains a magic number: shift = 7;
Magic Number,Rtsp.Messages,RtspMessage,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPMessage.cs,GetRtspMessage,The following statement contains a magic number: string[] requestParts = aRequestLine.Split(new char[] { ' ' }' 3);
Magic Number,Rtsp.Messages,RtspMessage,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPMessage.cs,GetRtspMessage,The following statement contains a magic number: _rtspVersionTest.IsMatch(requestParts[2])
Magic Number,Rtsp.Messages,RtspMessage,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPMessage.cs,GetRtspMessage,The following statement contains a magic number: requestParts.Length == 3
Magic Number,Rtsp.Messages,RtspMessage,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPMessage.cs,AddHeader,The following statement contains a magic number: string[] elements = line.Split(new char[] { ':' }' 2);
Magic Number,Rtsp.Messages,RtspMessage,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPMessage.cs,AddHeader,The following statement contains a magic number: elements.Length == 2
Magic Number,Rtsp.Messages,RtspRequest,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPRequest.cs,CreateResponse,The following statement contains a magic number: returnValue.ReturnCode = 200;
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspResponse,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPResponse.cs,GetDefaultError,The following statement contains a magic number: switch (aErrorCode)             {                  case 100: return "Continue";                  case 200: return "OK";                 case 201: return "Created";                 case 250: return "Low on Storage Space";                  case 300: return "Multiple Choices";                 case 301: return "Moved Permanently";                 case 302: return "Moved Temporarily";                 case 303: return "See Other";                 case 305: return "Use Proxy";                  case 400: return "Bad Request";                 case 401: return "Unauthorized";                 case 402: return "Payment Required";                 case 403: return "Forbidden";                 case 404: return "Not Found";                 case 405: return "Method Not Allowed";                 case 406: return "Not Acceptable";                 case 407: return "Proxy Authentication Required";                 case 408: return "Request Timeout";                 case 410: return "Gone";                 case 411: return "Length Required";                 case 412: return "Precondition Failed";                 case 413: return "Request Entity Too Large";                 case 414: return "Request-URI Too Long";                 case 415: return "Unsupported Media Type";                 case 451: return "Invalid parameter";                 case 452: return "Illegal Conference Identifier";                 case 453: return "Not Enough Bandwidth";                 case 454: return "Session Not Found";                 case 455: return "Method Not Valid In This State";                 case 456: return "Header Field Not Valid";                 case 457: return "Invalid Range";                 case 458: return "Parameter Is Read-Only";                 case 459: return "Aggregate Operation Not Allowed";                 case 460: return "Only Aggregate Operation Allowed";                 case 461: return "Unsupported Transport";                 case 462: return "Destination Unreachable";                  case 500: return "Internal Server Error";                 case 501: return "Not Implemented";                 case 502: return "Bad Gateway";                 case 503: return "Service Unavailable";                 case 504: return "Gateway Timeout";                 case 505: return "RTSP Version Not Supported";                 case 551: return "Option not support";                 default:                     return "Return: " + aErrorCode.ToString(CultureInfo.InvariantCulture);             }
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: switch (subPart[0].ToUpperInvariant())                 {                     case "UNICAST":                         returnValue.IsMulticast = false;                         break;                     case "MULTICAST":                         returnValue.IsMulticast = true;                         break;                     case "DESTINATION":                         if (subPart.Length == 2)                             returnValue.Destination = subPart[1];                         break;                     case "SOURCE":                         if (subPart.Length == 2)                             returnValue.Source = subPart[1];                         break;                     case "INTERLEAVED":                     	returnValue.IsMulticast = false;                         if (subPart.Length < 2)                             throw new ArgumentException("interleaved value invalid"' "aTransportString");                          returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                         break;                     case "APPEND":                         returnValue.IsAppend = true;                         break;                     case "TTL":                         int ttl = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                             throw new ArgumentException("TTL value invalid"' "aTransportString");                         returnValue.TTL = ttl;                         break;                     case "LAYERS":                         int layers = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                             throw new ArgumentException("Layers value invalid"' "aTransportString");                         returnValue.TTL = layers;                         break;                     case "PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("Port value invalid"' "aTransportString");                         returnValue.Port = PortCouple.Parse(subPart[1]);                         break;                     case "CLIENT_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("client_port value invalid"' "aTransportString");                         returnValue.ClientPort = PortCouple.Parse(subPart[1]);                         break;                     case "SERVER_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("server_port value invalid"' "aTransportString");                         returnValue.ServerPort = PortCouple.Parse(subPart[1]);                         break;                     case "SSRC":                         if (subPart.Length < 2)                             throw new ArgumentException("ssrc value invalid"' "aTransportString");                         returnValue.SSrc = subPart[1];                         break;                     case "MODE":                         if (subPart.Length < 2)                             throw new ArgumentException("mode value invalid"' "aTransportString");                         returnValue.Mode = subPart[1];                         break;                     default:                         // TODO log invalid part                         break;                 }
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: switch (subPart[0].ToUpperInvariant())                 {                     case "UNICAST":                         returnValue.IsMulticast = false;                         break;                     case "MULTICAST":                         returnValue.IsMulticast = true;                         break;                     case "DESTINATION":                         if (subPart.Length == 2)                             returnValue.Destination = subPart[1];                         break;                     case "SOURCE":                         if (subPart.Length == 2)                             returnValue.Source = subPart[1];                         break;                     case "INTERLEAVED":                     	returnValue.IsMulticast = false;                         if (subPart.Length < 2)                             throw new ArgumentException("interleaved value invalid"' "aTransportString");                          returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                         break;                     case "APPEND":                         returnValue.IsAppend = true;                         break;                     case "TTL":                         int ttl = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                             throw new ArgumentException("TTL value invalid"' "aTransportString");                         returnValue.TTL = ttl;                         break;                     case "LAYERS":                         int layers = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                             throw new ArgumentException("Layers value invalid"' "aTransportString");                         returnValue.TTL = layers;                         break;                     case "PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("Port value invalid"' "aTransportString");                         returnValue.Port = PortCouple.Parse(subPart[1]);                         break;                     case "CLIENT_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("client_port value invalid"' "aTransportString");                         returnValue.ClientPort = PortCouple.Parse(subPart[1]);                         break;                     case "SERVER_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("server_port value invalid"' "aTransportString");                         returnValue.ServerPort = PortCouple.Parse(subPart[1]);                         break;                     case "SSRC":                         if (subPart.Length < 2)                             throw new ArgumentException("ssrc value invalid"' "aTransportString");                         returnValue.SSrc = subPart[1];                         break;                     case "MODE":                         if (subPart.Length < 2)                             throw new ArgumentException("mode value invalid"' "aTransportString");                         returnValue.Mode = subPart[1];                         break;                     default:                         // TODO log invalid part                         break;                 }
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: switch (subPart[0].ToUpperInvariant())                 {                     case "UNICAST":                         returnValue.IsMulticast = false;                         break;                     case "MULTICAST":                         returnValue.IsMulticast = true;                         break;                     case "DESTINATION":                         if (subPart.Length == 2)                             returnValue.Destination = subPart[1];                         break;                     case "SOURCE":                         if (subPart.Length == 2)                             returnValue.Source = subPart[1];                         break;                     case "INTERLEAVED":                     	returnValue.IsMulticast = false;                         if (subPart.Length < 2)                             throw new ArgumentException("interleaved value invalid"' "aTransportString");                          returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                         break;                     case "APPEND":                         returnValue.IsAppend = true;                         break;                     case "TTL":                         int ttl = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                             throw new ArgumentException("TTL value invalid"' "aTransportString");                         returnValue.TTL = ttl;                         break;                     case "LAYERS":                         int layers = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                             throw new ArgumentException("Layers value invalid"' "aTransportString");                         returnValue.TTL = layers;                         break;                     case "PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("Port value invalid"' "aTransportString");                         returnValue.Port = PortCouple.Parse(subPart[1]);                         break;                     case "CLIENT_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("client_port value invalid"' "aTransportString");                         returnValue.ClientPort = PortCouple.Parse(subPart[1]);                         break;                     case "SERVER_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("server_port value invalid"' "aTransportString");                         returnValue.ServerPort = PortCouple.Parse(subPart[1]);                         break;                     case "SSRC":                         if (subPart.Length < 2)                             throw new ArgumentException("ssrc value invalid"' "aTransportString");                         returnValue.SSrc = subPart[1];                         break;                     case "MODE":                         if (subPart.Length < 2)                             throw new ArgumentException("mode value invalid"' "aTransportString");                         returnValue.Mode = subPart[1];                         break;                     default:                         // TODO log invalid part                         break;                 }
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: switch (subPart[0].ToUpperInvariant())                 {                     case "UNICAST":                         returnValue.IsMulticast = false;                         break;                     case "MULTICAST":                         returnValue.IsMulticast = true;                         break;                     case "DESTINATION":                         if (subPart.Length == 2)                             returnValue.Destination = subPart[1];                         break;                     case "SOURCE":                         if (subPart.Length == 2)                             returnValue.Source = subPart[1];                         break;                     case "INTERLEAVED":                     	returnValue.IsMulticast = false;                         if (subPart.Length < 2)                             throw new ArgumentException("interleaved value invalid"' "aTransportString");                          returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                         break;                     case "APPEND":                         returnValue.IsAppend = true;                         break;                     case "TTL":                         int ttl = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                             throw new ArgumentException("TTL value invalid"' "aTransportString");                         returnValue.TTL = ttl;                         break;                     case "LAYERS":                         int layers = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                             throw new ArgumentException("Layers value invalid"' "aTransportString");                         returnValue.TTL = layers;                         break;                     case "PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("Port value invalid"' "aTransportString");                         returnValue.Port = PortCouple.Parse(subPart[1]);                         break;                     case "CLIENT_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("client_port value invalid"' "aTransportString");                         returnValue.ClientPort = PortCouple.Parse(subPart[1]);                         break;                     case "SERVER_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("server_port value invalid"' "aTransportString");                         returnValue.ServerPort = PortCouple.Parse(subPart[1]);                         break;                     case "SSRC":                         if (subPart.Length < 2)                             throw new ArgumentException("ssrc value invalid"' "aTransportString");                         returnValue.SSrc = subPart[1];                         break;                     case "MODE":                         if (subPart.Length < 2)                             throw new ArgumentException("mode value invalid"' "aTransportString");                         returnValue.Mode = subPart[1];                         break;                     default:                         // TODO log invalid part                         break;                 }
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: switch (subPart[0].ToUpperInvariant())                 {                     case "UNICAST":                         returnValue.IsMulticast = false;                         break;                     case "MULTICAST":                         returnValue.IsMulticast = true;                         break;                     case "DESTINATION":                         if (subPart.Length == 2)                             returnValue.Destination = subPart[1];                         break;                     case "SOURCE":                         if (subPart.Length == 2)                             returnValue.Source = subPart[1];                         break;                     case "INTERLEAVED":                     	returnValue.IsMulticast = false;                         if (subPart.Length < 2)                             throw new ArgumentException("interleaved value invalid"' "aTransportString");                          returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                         break;                     case "APPEND":                         returnValue.IsAppend = true;                         break;                     case "TTL":                         int ttl = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                             throw new ArgumentException("TTL value invalid"' "aTransportString");                         returnValue.TTL = ttl;                         break;                     case "LAYERS":                         int layers = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                             throw new ArgumentException("Layers value invalid"' "aTransportString");                         returnValue.TTL = layers;                         break;                     case "PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("Port value invalid"' "aTransportString");                         returnValue.Port = PortCouple.Parse(subPart[1]);                         break;                     case "CLIENT_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("client_port value invalid"' "aTransportString");                         returnValue.ClientPort = PortCouple.Parse(subPart[1]);                         break;                     case "SERVER_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("server_port value invalid"' "aTransportString");                         returnValue.ServerPort = PortCouple.Parse(subPart[1]);                         break;                     case "SSRC":                         if (subPart.Length < 2)                             throw new ArgumentException("ssrc value invalid"' "aTransportString");                         returnValue.SSrc = subPart[1];                         break;                     case "MODE":                         if (subPart.Length < 2)                             throw new ArgumentException("mode value invalid"' "aTransportString");                         returnValue.Mode = subPart[1];                         break;                     default:                         // TODO log invalid part                         break;                 }
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: switch (subPart[0].ToUpperInvariant())                 {                     case "UNICAST":                         returnValue.IsMulticast = false;                         break;                     case "MULTICAST":                         returnValue.IsMulticast = true;                         break;                     case "DESTINATION":                         if (subPart.Length == 2)                             returnValue.Destination = subPart[1];                         break;                     case "SOURCE":                         if (subPart.Length == 2)                             returnValue.Source = subPart[1];                         break;                     case "INTERLEAVED":                     	returnValue.IsMulticast = false;                         if (subPart.Length < 2)                             throw new ArgumentException("interleaved value invalid"' "aTransportString");                          returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                         break;                     case "APPEND":                         returnValue.IsAppend = true;                         break;                     case "TTL":                         int ttl = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                             throw new ArgumentException("TTL value invalid"' "aTransportString");                         returnValue.TTL = ttl;                         break;                     case "LAYERS":                         int layers = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                             throw new ArgumentException("Layers value invalid"' "aTransportString");                         returnValue.TTL = layers;                         break;                     case "PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("Port value invalid"' "aTransportString");                         returnValue.Port = PortCouple.Parse(subPart[1]);                         break;                     case "CLIENT_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("client_port value invalid"' "aTransportString");                         returnValue.ClientPort = PortCouple.Parse(subPart[1]);                         break;                     case "SERVER_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("server_port value invalid"' "aTransportString");                         returnValue.ServerPort = PortCouple.Parse(subPart[1]);                         break;                     case "SSRC":                         if (subPart.Length < 2)                             throw new ArgumentException("ssrc value invalid"' "aTransportString");                         returnValue.SSrc = subPart[1];                         break;                     case "MODE":                         if (subPart.Length < 2)                             throw new ArgumentException("mode value invalid"' "aTransportString");                         returnValue.Mode = subPart[1];                         break;                     default:                         // TODO log invalid part                         break;                 }
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: switch (subPart[0].ToUpperInvariant())                 {                     case "UNICAST":                         returnValue.IsMulticast = false;                         break;                     case "MULTICAST":                         returnValue.IsMulticast = true;                         break;                     case "DESTINATION":                         if (subPart.Length == 2)                             returnValue.Destination = subPart[1];                         break;                     case "SOURCE":                         if (subPart.Length == 2)                             returnValue.Source = subPart[1];                         break;                     case "INTERLEAVED":                     	returnValue.IsMulticast = false;                         if (subPart.Length < 2)                             throw new ArgumentException("interleaved value invalid"' "aTransportString");                          returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                         break;                     case "APPEND":                         returnValue.IsAppend = true;                         break;                     case "TTL":                         int ttl = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                             throw new ArgumentException("TTL value invalid"' "aTransportString");                         returnValue.TTL = ttl;                         break;                     case "LAYERS":                         int layers = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                             throw new ArgumentException("Layers value invalid"' "aTransportString");                         returnValue.TTL = layers;                         break;                     case "PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("Port value invalid"' "aTransportString");                         returnValue.Port = PortCouple.Parse(subPart[1]);                         break;                     case "CLIENT_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("client_port value invalid"' "aTransportString");                         returnValue.ClientPort = PortCouple.Parse(subPart[1]);                         break;                     case "SERVER_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("server_port value invalid"' "aTransportString");                         returnValue.ServerPort = PortCouple.Parse(subPart[1]);                         break;                     case "SSRC":                         if (subPart.Length < 2)                             throw new ArgumentException("ssrc value invalid"' "aTransportString");                         returnValue.SSrc = subPart[1];                         break;                     case "MODE":                         if (subPart.Length < 2)                             throw new ArgumentException("mode value invalid"' "aTransportString");                         returnValue.Mode = subPart[1];                         break;                     default:                         // TODO log invalid part                         break;                 }
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: switch (subPart[0].ToUpperInvariant())                 {                     case "UNICAST":                         returnValue.IsMulticast = false;                         break;                     case "MULTICAST":                         returnValue.IsMulticast = true;                         break;                     case "DESTINATION":                         if (subPart.Length == 2)                             returnValue.Destination = subPart[1];                         break;                     case "SOURCE":                         if (subPart.Length == 2)                             returnValue.Source = subPart[1];                         break;                     case "INTERLEAVED":                     	returnValue.IsMulticast = false;                         if (subPart.Length < 2)                             throw new ArgumentException("interleaved value invalid"' "aTransportString");                          returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                         break;                     case "APPEND":                         returnValue.IsAppend = true;                         break;                     case "TTL":                         int ttl = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                             throw new ArgumentException("TTL value invalid"' "aTransportString");                         returnValue.TTL = ttl;                         break;                     case "LAYERS":                         int layers = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                             throw new ArgumentException("Layers value invalid"' "aTransportString");                         returnValue.TTL = layers;                         break;                     case "PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("Port value invalid"' "aTransportString");                         returnValue.Port = PortCouple.Parse(subPart[1]);                         break;                     case "CLIENT_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("client_port value invalid"' "aTransportString");                         returnValue.ClientPort = PortCouple.Parse(subPart[1]);                         break;                     case "SERVER_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("server_port value invalid"' "aTransportString");                         returnValue.ServerPort = PortCouple.Parse(subPart[1]);                         break;                     case "SSRC":                         if (subPart.Length < 2)                             throw new ArgumentException("ssrc value invalid"' "aTransportString");                         returnValue.SSrc = subPart[1];                         break;                     case "MODE":                         if (subPart.Length < 2)                             throw new ArgumentException("mode value invalid"' "aTransportString");                         returnValue.Mode = subPart[1];                         break;                     default:                         // TODO log invalid part                         break;                 }
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: switch (subPart[0].ToUpperInvariant())                 {                     case "UNICAST":                         returnValue.IsMulticast = false;                         break;                     case "MULTICAST":                         returnValue.IsMulticast = true;                         break;                     case "DESTINATION":                         if (subPart.Length == 2)                             returnValue.Destination = subPart[1];                         break;                     case "SOURCE":                         if (subPart.Length == 2)                             returnValue.Source = subPart[1];                         break;                     case "INTERLEAVED":                     	returnValue.IsMulticast = false;                         if (subPart.Length < 2)                             throw new ArgumentException("interleaved value invalid"' "aTransportString");                          returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                         break;                     case "APPEND":                         returnValue.IsAppend = true;                         break;                     case "TTL":                         int ttl = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                             throw new ArgumentException("TTL value invalid"' "aTransportString");                         returnValue.TTL = ttl;                         break;                     case "LAYERS":                         int layers = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                             throw new ArgumentException("Layers value invalid"' "aTransportString");                         returnValue.TTL = layers;                         break;                     case "PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("Port value invalid"' "aTransportString");                         returnValue.Port = PortCouple.Parse(subPart[1]);                         break;                     case "CLIENT_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("client_port value invalid"' "aTransportString");                         returnValue.ClientPort = PortCouple.Parse(subPart[1]);                         break;                     case "SERVER_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("server_port value invalid"' "aTransportString");                         returnValue.ServerPort = PortCouple.Parse(subPart[1]);                         break;                     case "SSRC":                         if (subPart.Length < 2)                             throw new ArgumentException("ssrc value invalid"' "aTransportString");                         returnValue.SSrc = subPart[1];                         break;                     case "MODE":                         if (subPart.Length < 2)                             throw new ArgumentException("mode value invalid"' "aTransportString");                         returnValue.Mode = subPart[1];                         break;                     default:                         // TODO log invalid part                         break;                 }
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,Parse,The following statement contains a magic number: switch (subPart[0].ToUpperInvariant())                 {                     case "UNICAST":                         returnValue.IsMulticast = false;                         break;                     case "MULTICAST":                         returnValue.IsMulticast = true;                         break;                     case "DESTINATION":                         if (subPart.Length == 2)                             returnValue.Destination = subPart[1];                         break;                     case "SOURCE":                         if (subPart.Length == 2)                             returnValue.Source = subPart[1];                         break;                     case "INTERLEAVED":                     	returnValue.IsMulticast = false;                         if (subPart.Length < 2)                             throw new ArgumentException("interleaved value invalid"' "aTransportString");                          returnValue.Interleaved =  PortCouple.Parse(subPart[1]);                         break;                     case "APPEND":                         returnValue.IsAppend = true;                         break;                     case "TTL":                         int ttl = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out ttl))                             throw new ArgumentException("TTL value invalid"' "aTransportString");                         returnValue.TTL = ttl;                         break;                     case "LAYERS":                         int layers = 0;                         if (subPart.Length < 2 || !int.TryParse(subPart[1]' out layers))                             throw new ArgumentException("Layers value invalid"' "aTransportString");                         returnValue.TTL = layers;                         break;                     case "PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("Port value invalid"' "aTransportString");                         returnValue.Port = PortCouple.Parse(subPart[1]);                         break;                     case "CLIENT_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("client_port value invalid"' "aTransportString");                         returnValue.ClientPort = PortCouple.Parse(subPart[1]);                         break;                     case "SERVER_PORT":                         if (subPart.Length < 2)                             throw new ArgumentException("server_port value invalid"' "aTransportString");                         returnValue.ServerPort = PortCouple.Parse(subPart[1]);                         break;                     case "SSRC":                         if (subPart.Length < 2)                             throw new ArgumentException("ssrc value invalid"' "aTransportString");                         returnValue.SSrc = subPart[1];                         break;                     case "MODE":                         if (subPart.Length < 2)                             throw new ArgumentException("mode value invalid"' "aTransportString");                         returnValue.Mode = subPart[1];                         break;                     default:                         // TODO log invalid part                         break;                 }
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,ReadLowerTransport,The following statement contains a magic number: !Enum.TryParse<LowerTransportType>(transportProtocolPart[2]' out lowerTransport)
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,ReadLowerTransport,The following statement contains a magic number: transportProtocolPart.Length == 3
Magic Number,Rtsp.Messages,RtspTransport,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Messages\RTSPTransport.cs,ReadProfile,The following statement contains a magic number: transportProtocolPart.Length < 2 || !Enum.TryParse<ProfileType>(transportProtocolPart[1]' out profile)
Magic Number,Rtsp.Sdp,Attribut,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Attribut.cs,ParseInvariant,The following statement contains a magic number: var listValues = value.Split(new char[] {':'}' 2);
Magic Number,Rtsp.Sdp,AttributFmtp,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\AttributFmtp.cs,ParseValue,The following statement contains a magic number: var parts = value.Split(new char[] { ' ' }' 2);
Magic Number,Rtsp.Sdp,AttributFmtp,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\AttributFmtp.cs,ParseValue,The following statement contains a magic number: parts[1].Split(';').Select(x => x.Trim().Split(new char[] { '=' }' 2))
Magic Number,Rtsp.Sdp,AttributRtpMap,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\AttributRtpMap.cs,ParseValue,The following statement contains a magic number: parts.Length >= 2
Magic Number,Rtsp.Sdp,AttributRtpMap,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\AttributRtpMap.cs,ParseValue,The following statement contains a magic number: ClockRate = parts[2];
Magic Number,Rtsp.Sdp,AttributRtpMap,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\AttributRtpMap.cs,ParseValue,The following statement contains a magic number: parts.Length >= 3
Magic Number,Rtsp.Sdp,AttributRtpMap,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\AttributRtpMap.cs,ParseValue,The following statement contains a magic number: EncodingParameters = parts[3];
Magic Number,Rtsp.Sdp,AttributRtpMap,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\AttributRtpMap.cs,ParseValue,The following statement contains a magic number: parts.Length >= 4
Magic Number,Rtsp.Sdp,Connection,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Connection.cs,Parse,The following statement contains a magic number: parts.Length != 3
Magic Number,Rtsp.Sdp,Connection,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Connection.cs,Parse,The following statement contains a magic number: switch (parts[1])             {                 case "IP4":                     return ConnectionIP4.Parse(parts[2]);                 case "IP6":                     return ConnectionIP6.Parse(parts[2]);                 default:                     throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' "Address type {0} not suported"' parts[1]));             }
Magic Number,Rtsp.Sdp,Connection,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Connection.cs,Parse,The following statement contains a magic number: switch (parts[1])             {                 case "IP4":                     return ConnectionIP4.Parse(parts[2]);                 case "IP6":                     return ConnectionIP6.Parse(parts[2]);                 default:                     throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' "Address type {0} not suported"' parts[1]));             }
Magic Number,Rtsp.Sdp,ConnectionIP4,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\ConnectionIP4.cs,Parse,The following statement contains a magic number: parts.Length > 3
Magic Number,Rtsp.Sdp,ConnectionIP4,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\ConnectionIP4.cs,Parse,The following statement contains a magic number: throw new FormatException("Invalid number of address : " + parts[2]);
Magic Number,Rtsp.Sdp,ConnectionIP4,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\ConnectionIP4.cs,Parse,The following statement contains a magic number: !int.TryParse(parts[2]' NumberStyles.Integer' CultureInfo.InvariantCulture' out numberOfAddress)
Magic Number,Rtsp.Sdp,ConnectionIP4,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\ConnectionIP4.cs,Parse,The following statement contains a magic number: parts.Length > 2
Magic Number,Rtsp.Sdp,ConnectionIP6,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\ConnectionIP6.cs,Parse,The following statement contains a magic number: parts.Length > 2
Magic Number,Rtsp.Sdp,H264Parameters,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\H264Parameter.cs,Parse,The following statement contains a magic number: parameterString.Split(';').Select(x => x.Trim().Split(new char[] { '=' }' 2))
Magic Number,Rtsp.Sdp,Media,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Media.cs,Media,The following statement contains a magic number: var parts = mediaString.Split(new char[] { ' ' } ' 4);
Magic Number,Rtsp.Sdp,Media,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Media.cs,Media,The following statement contains a magic number: int.TryParse(parts[3]' out pt)
Magic Number,Rtsp.Sdp,Media,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Media.cs,Media,The following statement contains a magic number: parts.Count() >= 4
Magic Number,Rtsp.Sdp,Origin,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Origin.cs,Parse,The following statement contains a magic number: parts.Length != 6
Magic Number,Rtsp.Sdp,Origin,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Origin.cs,Parse,The following statement contains a magic number: result.SessionVersion = parts[2];
Magic Number,Rtsp.Sdp,Origin,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Origin.cs,Parse,The following statement contains a magic number: result.NetType = parts[3];
Magic Number,Rtsp.Sdp,Origin,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Origin.cs,Parse,The following statement contains a magic number: result.AddressType = parts[4];
Magic Number,Rtsp.Sdp,Origin,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\Origin.cs,Parse,The following statement contains a magic number: result.UnicastAddress = parts[5];
Magic Number,Rtsp.Sdp,SdpFile,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\SdpFile.cs,GetKeyValue,The following statement contains a magic number: string[] parts = line.Split(new char[] { '=' }' 2);
Magic Number,Rtsp.Sdp,SdpFile,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\SdpFile.cs,GetKeyValue,The following statement contains a magic number: parts.Length != 2
Magic Number,Rtsp.Sdp,H265Parameters,C:\research\architectureSmells\repos\ngraziano_SharpRTSP\RTSP\Sdp\H265Parameter.cs,Parse,The following statement contains a magic number: parameterString.Split(';').Select(x => x.Trim().Split(new char[] { '=' }' 2))
