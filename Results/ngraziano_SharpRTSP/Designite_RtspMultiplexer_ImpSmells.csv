Implementation smell,Namespace,Class,File,Method,Description
Long Statement,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,HandleOneMessage,The length of the statement  "                    message.SourcePort != null ? message.SourcePort.RemoteAdress : "UNKNOWN"'destination != null ? destination.RemoteAdress : "UNKNOWN" ); " is 134.
Long Statement,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,RewriteUri,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.InvariantCulture' "The url {0} do not contain forward part "' originalUri)' "originalUri"); " is 145.
Long Statement,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,HandleRequestSetup,The length of the statement  "            string setupKey = requestSetup.SourcePort.RemoteAdress + "SEQ" + requestSetup.CSeq.ToString(CultureInfo.InvariantCulture); " is 122.
Long Statement,RtspMulticaster,TCPtoUDPForwader,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\TcpToUdpForwader.cs,DoCommandJob,The length of the statement  "                _logger.Debug("Forward Command from multicast  {0}:{1} => TCP interleaved {2}"' this.ForwardHostVideo' ListenCommandPort' ForwardInterleavedCommand); " is 149.
Long Statement,RtspMulticaster,UDPForwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\UdpForwarder.cs,DoCommandJob,The length of the statement  "                _logger.Debug("Forward Command from multicast  {0}:{1} => {2}:{3}"' this.ForwardHostVideo' ListenCommandPort' ForwardHostCommand' ForwardPortCommand); " is 150.
Long Statement,RtspMulticaster,UDPForwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\UdpForwarder.cs,DoCommandJob,The length of the statement  "                _logger.Debug(CultureInfo.InvariantCulture'"Forward Command from {0} => {1}:{2}"' ListenCommandPort' ForwardHostCommand' ForwardPortCommand); " is 141.
Complex Conditional,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,UpdateSessionState,The conditional expression  "message.OriginalRequest == null ||                  (message.Session == null && message.OriginalRequest.Session == null) ||                  message.OriginalRequest.RtspUri == null"  is complex.
Complex Conditional,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,ConfigureTransportAndForwarder,The conditional expression  "(resultForwarder is UDPForwarder && forwarder.ForwardPortCommand == 0)                    || (resultForwarder is TCPtoUDPForwader && (resultForwarder as TCPtoUDPForwader).ForwardInterleavedCommand == 0)"  is complex.
Complex Conditional,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,ConfigureTransportAndForwarder,The conditional expression  "(resultForwarder is UDPForwarder && forwarder.ForwardPortCommand == 0)                    || (resultForwarder is TCPtoUDPForwader && (resultForwarder as TCPtoUDPForwader).ForwardInterleavedCommand == 0)"  is complex.
Empty Catch Block,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,RewriteSDPMessage,The method has an empty catch block.
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,GetNextPort,The following statement contains a magic number: Interlocked.Add(ref _lastOpenPort' 2);
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,Forwarder,The following statement contains a magic number: ForwardVUdpPort.Client.SendBufferSize = 100 * 1024;
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,Forwarder,The following statement contains a magic number: ForwardVUdpPort.Client.SendBufferSize = 100 * 1024;
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,Forwarder,The following statement contains a magic number: ListenCUdpPort.Client.ReceiveBufferSize = 8 * 1024;
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,Forwarder,The following statement contains a magic number: ListenCUdpPort.Client.ReceiveBufferSize = 8 * 1024;
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,InitReceivedFrame,The following statement contains a magic number: int i = (ushort)(aFirstIndex - 10);
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,VideoFrameSended,The following statement contains a magic number: lock (ForwardVUdpPort)              {                  if (_logger.IsDebugEnabled)                  {                      _byteVideoCounter += nbOfByteSend;                      if (_byteVideoCounter > 1024 * 1024 * 10)                      {                          _logger.Debug("10Mo forwarded from {0} => {1}:{2}"' FromForwardVideoPort' ForwardHostVideo' ForwardPortVideo);                          _byteVideoCounter = 0;                      }                  }                    if (_logger.IsWarnEnabled)                  {                      short newRTSPFrameIndex = BitConverter.ToInt16(frame' 2);                      newRTSPFrameIndex = IPAddress.NetworkToHostOrder(newRTSPFrameIndex);                      if (_firstTime)                      {                          InitReceivedFrame((ushort)newRTSPFrameIndex);                          _firstTime = false;                      }                      _receiveRtspFrameIndex[(ushort)newRTSPFrameIndex] = true;                      ushort oldIndex = (ushort)(newRTSPFrameIndex - 10);                      if (!_receiveRtspFrameIndex[oldIndex])                      {                          _logger.Warn("Missing packet {0}"' oldIndex);                      }                      // supress the old packet                      _receiveRtspFrameIndex[oldIndex] = false;                  }              }
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,VideoFrameSended,The following statement contains a magic number: lock (ForwardVUdpPort)              {                  if (_logger.IsDebugEnabled)                  {                      _byteVideoCounter += nbOfByteSend;                      if (_byteVideoCounter > 1024 * 1024 * 10)                      {                          _logger.Debug("10Mo forwarded from {0} => {1}:{2}"' FromForwardVideoPort' ForwardHostVideo' ForwardPortVideo);                          _byteVideoCounter = 0;                      }                  }                    if (_logger.IsWarnEnabled)                  {                      short newRTSPFrameIndex = BitConverter.ToInt16(frame' 2);                      newRTSPFrameIndex = IPAddress.NetworkToHostOrder(newRTSPFrameIndex);                      if (_firstTime)                      {                          InitReceivedFrame((ushort)newRTSPFrameIndex);                          _firstTime = false;                      }                      _receiveRtspFrameIndex[(ushort)newRTSPFrameIndex] = true;                      ushort oldIndex = (ushort)(newRTSPFrameIndex - 10);                      if (!_receiveRtspFrameIndex[oldIndex])                      {                          _logger.Warn("Missing packet {0}"' oldIndex);                      }                      // supress the old packet                      _receiveRtspFrameIndex[oldIndex] = false;                  }              }
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,VideoFrameSended,The following statement contains a magic number: lock (ForwardVUdpPort)              {                  if (_logger.IsDebugEnabled)                  {                      _byteVideoCounter += nbOfByteSend;                      if (_byteVideoCounter > 1024 * 1024 * 10)                      {                          _logger.Debug("10Mo forwarded from {0} => {1}:{2}"' FromForwardVideoPort' ForwardHostVideo' ForwardPortVideo);                          _byteVideoCounter = 0;                      }                  }                    if (_logger.IsWarnEnabled)                  {                      short newRTSPFrameIndex = BitConverter.ToInt16(frame' 2);                      newRTSPFrameIndex = IPAddress.NetworkToHostOrder(newRTSPFrameIndex);                      if (_firstTime)                      {                          InitReceivedFrame((ushort)newRTSPFrameIndex);                          _firstTime = false;                      }                      _receiveRtspFrameIndex[(ushort)newRTSPFrameIndex] = true;                      ushort oldIndex = (ushort)(newRTSPFrameIndex - 10);                      if (!_receiveRtspFrameIndex[oldIndex])                      {                          _logger.Warn("Missing packet {0}"' oldIndex);                      }                      // supress the old packet                      _receiveRtspFrameIndex[oldIndex] = false;                  }              }
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,VideoFrameSended,The following statement contains a magic number: lock (ForwardVUdpPort)              {                  if (_logger.IsDebugEnabled)                  {                      _byteVideoCounter += nbOfByteSend;                      if (_byteVideoCounter > 1024 * 1024 * 10)                      {                          _logger.Debug("10Mo forwarded from {0} => {1}:{2}"' FromForwardVideoPort' ForwardHostVideo' ForwardPortVideo);                          _byteVideoCounter = 0;                      }                  }                    if (_logger.IsWarnEnabled)                  {                      short newRTSPFrameIndex = BitConverter.ToInt16(frame' 2);                      newRTSPFrameIndex = IPAddress.NetworkToHostOrder(newRTSPFrameIndex);                      if (_firstTime)                      {                          InitReceivedFrame((ushort)newRTSPFrameIndex);                          _firstTime = false;                      }                      _receiveRtspFrameIndex[(ushort)newRTSPFrameIndex] = true;                      ushort oldIndex = (ushort)(newRTSPFrameIndex - 10);                      if (!_receiveRtspFrameIndex[oldIndex])                      {                          _logger.Warn("Missing packet {0}"' oldIndex);                      }                      // supress the old packet                      _receiveRtspFrameIndex[oldIndex] = false;                  }              }
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,VideoFrameSended,The following statement contains a magic number: lock (ForwardVUdpPort)              {                  if (_logger.IsDebugEnabled)                  {                      _byteVideoCounter += nbOfByteSend;                      if (_byteVideoCounter > 1024 * 1024 * 10)                      {                          _logger.Debug("10Mo forwarded from {0} => {1}:{2}"' FromForwardVideoPort' ForwardHostVideo' ForwardPortVideo);                          _byteVideoCounter = 0;                      }                  }                    if (_logger.IsWarnEnabled)                  {                      short newRTSPFrameIndex = BitConverter.ToInt16(frame' 2);                      newRTSPFrameIndex = IPAddress.NetworkToHostOrder(newRTSPFrameIndex);                      if (_firstTime)                      {                          InitReceivedFrame((ushort)newRTSPFrameIndex);                          _firstTime = false;                      }                      _receiveRtspFrameIndex[(ushort)newRTSPFrameIndex] = true;                      ushort oldIndex = (ushort)(newRTSPFrameIndex - 10);                      if (!_receiveRtspFrameIndex[oldIndex])                      {                          _logger.Warn("Missing packet {0}"' oldIndex);                      }                      // supress the old packet                      _receiveRtspFrameIndex[oldIndex] = false;                  }              }
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,CommandFrameSended,The following statement contains a magic number: if (_logger.IsDebugEnabled)              {                  lock (ListenCUdpPort)                  {                      // decode the RTCP sended command                      int packetIndex = 0;                      short length;                      while (frame.Length > packetIndex + 4)                      {                          length = BitConverter.ToInt16(frame' 2 + packetIndex);                          length = IPAddress.NetworkToHostOrder(length);                          _logger.Debug("Forward command {0} ' length : {1}'index {2}"' (RTCPType)frame[1 + packetIndex]' length' packetIndex);                          packetIndex += (length + 1) * 4;                      }                  }              }
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,CommandFrameSended,The following statement contains a magic number: if (_logger.IsDebugEnabled)              {                  lock (ListenCUdpPort)                  {                      // decode the RTCP sended command                      int packetIndex = 0;                      short length;                      while (frame.Length > packetIndex + 4)                      {                          length = BitConverter.ToInt16(frame' 2 + packetIndex);                          length = IPAddress.NetworkToHostOrder(length);                          _logger.Debug("Forward command {0} ' length : {1}'index {2}"' (RTCPType)frame[1 + packetIndex]' length' packetIndex);                          packetIndex += (length + 1) * 4;                      }                  }              }
Magic Number,RtspMulticaster,Forwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Fowarder.cs,CommandFrameSended,The following statement contains a magic number: if (_logger.IsDebugEnabled)              {                  lock (ListenCUdpPort)                  {                      // decode the RTCP sended command                      int packetIndex = 0;                      short length;                      while (frame.Length > packetIndex + 4)                      {                          length = BitConverter.ToInt16(frame' 2 + packetIndex);                          length = IPAddress.NetworkToHostOrder(length);                          _logger.Debug("Forward command {0} ' length : {1}'index {2}"' (RTCPType)frame[1 + packetIndex]' length' packetIndex);                          packetIndex += (length + 1) * 4;                      }                  }              }
Magic Number,RtspMulticaster,Program,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\Program.cs,Main,The following statement contains a magic number: RtspServer monServeur = new RtspServer(8554);
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,HandleOneMessage,The following statement contains a magic number: if (destination != null)              {                  bool isGood = destination.SendMessage(message);                    if (!isGood)                  {                        destination.Stop();                      _serverListener.Remove(destination.RemoteAdress);                        // send back a message because we can't forward.                      if (message is RtspRequest && message.SourcePort != null)                      {                          RtspRequest request = message as RtspRequest;                          RtspResponse theDirectResponse = request.CreateResponse();                          _logger.Warn("Error during forward : {0}. So sending back a direct error response"' message.Command);                          theDirectResponse.ReturnCode = 500;                          request.SourcePort.SendMessage(theDirectResponse);                        }                  }              }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,HandleRequest,The following statement contains a magic number: if (request.RtspUri == null || request.RtspUri.AbsolutePath.Split(new char[] { '/' }' 3).Length < 3)              {                  destination = HandleRequestWithoutUrl(ref message);              }              else              {                  try                  {                      // get the real destination                      request.RtspUri = RewriteUri(request.RtspUri);                      destination = GetRtspListenerForDestination(request.RtspUri);                        // Handle setup                      RtspRequestSetup requestSetup = request as RtspRequestSetup;                      if (requestSetup != null)                      {                          message = HandleRequestSetup(ref destination' requestSetup);                      }                                            //Handle Play Reques                      RtspRequestPlay requestPlay = request as RtspRequestPlay;                      if (requestPlay != null)                      {                          message = HandleRequestPlay(ref destination' requestPlay);                      }                                                                    //Update session state and handle special message                      if (request.Session != null && request.RtspUri != null)                      {                          string sessionKey = RtspSession.GetSessionName(request.RtspUri' request.Session);                          if (_activesSession.ContainsKey(sessionKey))                          {                                _activesSession[sessionKey].Handle(request);                              switch (request.RequestTyped)                              {                                  // start here to start early                                  //case RtspRequest.RequestType.PLAY:                                    // _activesSession[sessionKey].Start(request.SourcePort.RemoteAdress);                                    //   break;                                  case RtspRequest.RequestType.TEARDOWN:                                      _activesSession[sessionKey].Stop(request.SourcePort.RemoteAdress);                                      if (!_activesSession[sessionKey].IsNeeded)                                          _activesSession.Remove(sessionKey);                                      else                                      {                                          // system still need the server to send data do not send him the message.                                          // reponds to client directly.                                          destination = request.SourcePort;                                          message = request.CreateResponse();                                      }                                      break;                                }                          }                          else                          {                              _logger.Warn("Command {0} for session {1} which was not found"' request.RequestTyped' sessionKey);                          }                      }                    }                  catch (Exception error)                  {                      _logger.Error("Error during handle of request"' error);                      destination = request.SourcePort;                      RtspResponse theDirectResponse = request.CreateResponse();                      theDirectResponse.ReturnCode = 500;                      message = theDirectResponse;                  }                }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,HandleRequest,The following statement contains a magic number: if (request.RtspUri == null || request.RtspUri.AbsolutePath.Split(new char[] { '/' }' 3).Length < 3)              {                  destination = HandleRequestWithoutUrl(ref message);              }              else              {                  try                  {                      // get the real destination                      request.RtspUri = RewriteUri(request.RtspUri);                      destination = GetRtspListenerForDestination(request.RtspUri);                        // Handle setup                      RtspRequestSetup requestSetup = request as RtspRequestSetup;                      if (requestSetup != null)                      {                          message = HandleRequestSetup(ref destination' requestSetup);                      }                                            //Handle Play Reques                      RtspRequestPlay requestPlay = request as RtspRequestPlay;                      if (requestPlay != null)                      {                          message = HandleRequestPlay(ref destination' requestPlay);                      }                                                                    //Update session state and handle special message                      if (request.Session != null && request.RtspUri != null)                      {                          string sessionKey = RtspSession.GetSessionName(request.RtspUri' request.Session);                          if (_activesSession.ContainsKey(sessionKey))                          {                                _activesSession[sessionKey].Handle(request);                              switch (request.RequestTyped)                              {                                  // start here to start early                                  //case RtspRequest.RequestType.PLAY:                                    // _activesSession[sessionKey].Start(request.SourcePort.RemoteAdress);                                    //   break;                                  case RtspRequest.RequestType.TEARDOWN:                                      _activesSession[sessionKey].Stop(request.SourcePort.RemoteAdress);                                      if (!_activesSession[sessionKey].IsNeeded)                                          _activesSession.Remove(sessionKey);                                      else                                      {                                          // system still need the server to send data do not send him the message.                                          // reponds to client directly.                                          destination = request.SourcePort;                                          message = request.CreateResponse();                                      }                                      break;                                }                          }                          else                          {                              _logger.Warn("Command {0} for session {1} which was not found"' request.RequestTyped' sessionKey);                          }                      }                    }                  catch (Exception error)                  {                      _logger.Error("Error during handle of request"' error);                      destination = request.SourcePort;                      RtspResponse theDirectResponse = request.CreateResponse();                      theDirectResponse.ReturnCode = 500;                      message = theDirectResponse;                  }                }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,HandleRequest,The following statement contains a magic number: if (request.RtspUri == null || request.RtspUri.AbsolutePath.Split(new char[] { '/' }' 3).Length < 3)              {                  destination = HandleRequestWithoutUrl(ref message);              }              else              {                  try                  {                      // get the real destination                      request.RtspUri = RewriteUri(request.RtspUri);                      destination = GetRtspListenerForDestination(request.RtspUri);                        // Handle setup                      RtspRequestSetup requestSetup = request as RtspRequestSetup;                      if (requestSetup != null)                      {                          message = HandleRequestSetup(ref destination' requestSetup);                      }                                            //Handle Play Reques                      RtspRequestPlay requestPlay = request as RtspRequestPlay;                      if (requestPlay != null)                      {                          message = HandleRequestPlay(ref destination' requestPlay);                      }                                                                    //Update session state and handle special message                      if (request.Session != null && request.RtspUri != null)                      {                          string sessionKey = RtspSession.GetSessionName(request.RtspUri' request.Session);                          if (_activesSession.ContainsKey(sessionKey))                          {                                _activesSession[sessionKey].Handle(request);                              switch (request.RequestTyped)                              {                                  // start here to start early                                  //case RtspRequest.RequestType.PLAY:                                    // _activesSession[sessionKey].Start(request.SourcePort.RemoteAdress);                                    //   break;                                  case RtspRequest.RequestType.TEARDOWN:                                      _activesSession[sessionKey].Stop(request.SourcePort.RemoteAdress);                                      if (!_activesSession[sessionKey].IsNeeded)                                          _activesSession.Remove(sessionKey);                                      else                                      {                                          // system still need the server to send data do not send him the message.                                          // reponds to client directly.                                          destination = request.SourcePort;                                          message = request.CreateResponse();                                      }                                      break;                                }                          }                          else                          {                              _logger.Warn("Command {0} for session {1} which was not found"' request.RequestTyped' sessionKey);                          }                      }                    }                  catch (Exception error)                  {                      _logger.Error("Error during handle of request"' error);                      destination = request.SourcePort;                      RtspResponse theDirectResponse = request.CreateResponse();                      theDirectResponse.ReturnCode = 500;                      message = theDirectResponse;                  }                }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,HandleRequestWithoutUrl,The following statement contains a magic number: if (request.RequestTyped == RtspRequest.RequestType.OPTIONS)              {                  // We know what to do...                  theDirectResponse.ReturnCode = 200;                  // But perhaps it is to prevent timeout !!                  // ARG .....                  _logger.Info("I got an OPTION * message' I reply but I do not forward! The end session may timeout.");                  request.LogMessage();              }              else              {                  _logger.Warn("Do not know how to handle : {0}"' message.Command);                  theDirectResponse.ReturnCode = 400;              }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,HandleRequestWithoutUrl,The following statement contains a magic number: if (request.RequestTyped == RtspRequest.RequestType.OPTIONS)              {                  // We know what to do...                  theDirectResponse.ReturnCode = 200;                  // But perhaps it is to prevent timeout !!                  // ARG .....                  _logger.Info("I got an OPTION * message' I reply but I do not forward! The end session may timeout.");                  request.LogMessage();              }              else              {                  _logger.Warn("Do not know how to handle : {0}"' message.Command);                  theDirectResponse.ReturnCode = 400;              }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,RewriteUri,The following statement contains a magic number: string[] pathPart = originalUri.AbsolutePath.Split(new char[] { '/' }' 3);
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,RewriteUri,The following statement contains a magic number: if (pathPart.Length < 3)                  throw new ArgumentException(String.Format(CultureInfo.InvariantCulture' "The url {0} do not contain forward part "' originalUri)' "originalUri");
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,RewriteUri,The following statement contains a magic number: if (destinationPart.Length < 2 || !int.TryParse(destinationPart[1]' out port))              {                  port = -1;              }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,RewriteUri,The following statement contains a magic number: url.Path = pathPart[2];
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,HandleRequestSetup,The following statement contains a magic number: if (selectedTransport == null)              {                  _logger.Info("No transport asked are supported' sorry");                  RtspResponse returnValue = requestSetup.CreateResponse();                  // Unsupported transport;                  returnValue.ReturnCode = 461;                  destination = requestSetup.SourcePort;                  return returnValue;              }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,UpdateSessionState,The following statement contains a magic number: if (_activesSession.ContainsKey(sessionKey))              {                  if (message.ReturnCode >= 300 && message.ReturnCode < 400)                      _activesSession[sessionKey].State = RtspSession.SessionState.Init;                  else if (message.ReturnCode < 300)                  {                      switch (message.OriginalRequest.RequestTyped)                      {                          case RtspRequest.RequestType.SETUP:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Init)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Ready;                              break;                          case RtspRequest.RequestType.PLAY:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Ready)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Playing;                              break;                          case RtspRequest.RequestType.RECORD:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Ready)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Recording;                              break;                          case RtspRequest.RequestType.PAUSE:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Playing ||                                  _activesSession[sessionKey].State == RtspSession.SessionState.Recording)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Ready;                              break;                          case RtspRequest.RequestType.TEARDOWN:                              _activesSession[sessionKey].State = RtspSession.SessionState.Init;                                break;                      }                  }              }              else              {                  _logger.Warn("Command {0} for session {1} which was not found"' message.OriginalRequest.RequestTyped' sessionKey);              }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,UpdateSessionState,The following statement contains a magic number: if (_activesSession.ContainsKey(sessionKey))              {                  if (message.ReturnCode >= 300 && message.ReturnCode < 400)                      _activesSession[sessionKey].State = RtspSession.SessionState.Init;                  else if (message.ReturnCode < 300)                  {                      switch (message.OriginalRequest.RequestTyped)                      {                          case RtspRequest.RequestType.SETUP:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Init)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Ready;                              break;                          case RtspRequest.RequestType.PLAY:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Ready)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Playing;                              break;                          case RtspRequest.RequestType.RECORD:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Ready)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Recording;                              break;                          case RtspRequest.RequestType.PAUSE:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Playing ||                                  _activesSession[sessionKey].State == RtspSession.SessionState.Recording)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Ready;                              break;                          case RtspRequest.RequestType.TEARDOWN:                              _activesSession[sessionKey].State = RtspSession.SessionState.Init;                                break;                      }                  }              }              else              {                  _logger.Warn("Command {0} for session {1} which was not found"' message.OriginalRequest.RequestTyped' sessionKey);              }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,UpdateSessionState,The following statement contains a magic number: if (_activesSession.ContainsKey(sessionKey))              {                  if (message.ReturnCode >= 300 && message.ReturnCode < 400)                      _activesSession[sessionKey].State = RtspSession.SessionState.Init;                  else if (message.ReturnCode < 300)                  {                      switch (message.OriginalRequest.RequestTyped)                      {                          case RtspRequest.RequestType.SETUP:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Init)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Ready;                              break;                          case RtspRequest.RequestType.PLAY:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Ready)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Playing;                              break;                          case RtspRequest.RequestType.RECORD:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Ready)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Recording;                              break;                          case RtspRequest.RequestType.PAUSE:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Playing ||                                  _activesSession[sessionKey].State == RtspSession.SessionState.Recording)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Ready;                              break;                          case RtspRequest.RequestType.TEARDOWN:                              _activesSession[sessionKey].State = RtspSession.SessionState.Init;                                break;                      }                  }              }              else              {                  _logger.Warn("Command {0} for session {1} which was not found"' message.OriginalRequest.RequestTyped' sessionKey);              }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,CreateNextMulticastAddress,The following statement contains a magic number: return String.Format(CultureInfo.InvariantCulture' "{0}.{1}.{2}.{3}"'                  (_multicastAddress >> 24) & 0xFF'                  (_multicastAddress >> 16) & 0xFF'                  (_multicastAddress >> 8) & 0xFF'                  (_multicastAddress >> 0) & 0xFF);
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,CreateNextMulticastAddress,The following statement contains a magic number: return String.Format(CultureInfo.InvariantCulture' "{0}.{1}.{2}.{3}"'                  (_multicastAddress >> 24) & 0xFF'                  (_multicastAddress >> 16) & 0xFF'                  (_multicastAddress >> 8) & 0xFF'                  (_multicastAddress >> 0) & 0xFF);
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,CreateNextMulticastAddress,The following statement contains a magic number: return String.Format(CultureInfo.InvariantCulture' "{0}.{1}.{2}.{3}"'                  (_multicastAddress >> 24) & 0xFF'                  (_multicastAddress >> 16) & 0xFF'                  (_multicastAddress >> 8) & 0xFF'                  (_multicastAddress >> 0) & 0xFF);
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,RewriteSDPMessage,The following statement contains a magic number: using (StringReader readsdp = new StringReader(sdpFile))              {                  StringBuilder newsdp = new StringBuilder();                    string line = readsdp.ReadLine();                  while (line != null)                  {                        if (line.Contains("a=control:rtsp://"))                      {                          string[] lineElement = line.Split(new char[] { ':' }' 2);                          UriBuilder temp = new UriBuilder(lineElement[1]);                          temp.Path = temp.Host + ":" + temp.Port.ToString(CultureInfo.InvariantCulture) + temp.Path;                            string domainName = System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties().DomainName;                          string hostName = Dns.GetHostName();                          string fqdn = String.Empty;                          if (!hostName.Contains(domainName))                              fqdn = hostName + "." + domainName;                          else                              fqdn = hostName;                            temp.Host = fqdn;                          temp.Port = 8554;                          line = lineElement[0] + ":" + temp.ToString();                      }                      if (line.Contains("c=IN IP4 "))                      {                          line = string.Format(CultureInfo.InvariantCulture' "c=IN IP4 {0}"' CreateNextMulticastAddress());                      }                      newsdp.Append(line);                      newsdp.Append("\r\n");                      line = readsdp.ReadLine();                  }                    aMessage.Data = sdpEncoding.GetBytes(newsdp.ToString());              }
Magic Number,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,RewriteSDPMessage,The following statement contains a magic number: using (StringReader readsdp = new StringReader(sdpFile))              {                  StringBuilder newsdp = new StringBuilder();                    string line = readsdp.ReadLine();                  while (line != null)                  {                        if (line.Contains("a=control:rtsp://"))                      {                          string[] lineElement = line.Split(new char[] { ':' }' 2);                          UriBuilder temp = new UriBuilder(lineElement[1]);                          temp.Path = temp.Host + ":" + temp.Port.ToString(CultureInfo.InvariantCulture) + temp.Path;                            string domainName = System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties().DomainName;                          string hostName = Dns.GetHostName();                          string fqdn = String.Empty;                          if (!hostName.Contains(domainName))                              fqdn = hostName + "." + domainName;                          else                              fqdn = hostName;                            temp.Host = fqdn;                          temp.Port = 8554;                          line = lineElement[0] + ":" + temp.ToString();                      }                      if (line.Contains("c=IN IP4 "))                      {                          line = string.Format(CultureInfo.InvariantCulture' "c=IN IP4 {0}"' CreateNextMulticastAddress());                      }                      newsdp.Append(line);                      newsdp.Append("\r\n");                      line = readsdp.ReadLine();                  }                    aMessage.Data = sdpEncoding.GetBytes(newsdp.ToString());              }
Magic Number,RtspMulticaster,RtspSession,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspSession.cs,TimeoutDetecter,The following statement contains a magic number: while (_dataReceive.WaitOne(Timeout * 1000))              {                  if (_stoping)                      break;              }
Magic Number,RtspMulticaster,UDPForwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\UdpForwarder.cs,UDPForwarder,The following statement contains a magic number: _listenVUdpPort.Client.ReceiveBufferSize = 100 * 1024;
Magic Number,RtspMulticaster,UDPForwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\UdpForwarder.cs,UDPForwarder,The following statement contains a magic number: _listenVUdpPort.Client.ReceiveBufferSize = 100 * 1024;
Magic Number,RtspMulticaster,UDPForwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\UdpForwarder.cs,UDPForwarder,The following statement contains a magic number: _forwarCUdpPort.Client.SendBufferSize = 8 * 1024;
Magic Number,RtspMulticaster,UDPForwarder,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\UdpForwarder.cs,UDPForwarder,The following statement contains a magic number: _forwarCUdpPort.Client.SendBufferSize = 8 * 1024;
Missing Default,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,HandleRequest,The following switch statement is missing a default case: switch (request.RequestTyped)                              {                                  // start here to start early                                  //case RtspRequest.RequestType.PLAY:                                    // _activesSession[sessionKey].Start(request.SourcePort.RemoteAdress);                                    //   break;                                  case RtspRequest.RequestType.TEARDOWN:                                      _activesSession[sessionKey].Stop(request.SourcePort.RemoteAdress);                                      if (!_activesSession[sessionKey].IsNeeded)                                          _activesSession.Remove(sessionKey);                                      else                                      {                                          // system still need the server to send data do not send him the message.                                          // reponds to client directly.                                          destination = request.SourcePort;                                          message = request.CreateResponse();                                      }                                      break;                                }
Missing Default,RtspMulticaster,RTSPDispatcher,C:\repos\ngraziano_SharpRTSP\RtspMultiplexer\RtspDispatcher.cs,UpdateSessionState,The following switch statement is missing a default case: switch (message.OriginalRequest.RequestTyped)                      {                          case RtspRequest.RequestType.SETUP:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Init)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Ready;                              break;                          case RtspRequest.RequestType.PLAY:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Ready)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Playing;                              break;                          case RtspRequest.RequestType.RECORD:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Ready)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Recording;                              break;                          case RtspRequest.RequestType.PAUSE:                              if (_activesSession[sessionKey].State == RtspSession.SessionState.Playing ||                                  _activesSession[sessionKey].State == RtspSession.SessionState.Recording)                                  _activesSession[sessionKey].State = RtspSession.SessionState.Ready;                              break;                          case RtspRequest.RequestType.TEARDOWN:                              _activesSession[sessionKey].State = RtspSession.SessionState.Init;                                break;                      }
