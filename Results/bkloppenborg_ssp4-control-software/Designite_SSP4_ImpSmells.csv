Implementation smell,Namespace,Class,File,Method,Description
Long Method,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The method has 170 lines of code.
Complex Method,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,SetPriority,Cyclomatic complexity of the method is 14
Complex Method,SSP4,cCommunication,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommunication.cs,CommunicationThread,Cyclomatic complexity of the method is 15
Complex Method,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,Cyclomatic complexity of the method is 26
Long Parameter List,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,cCommandItem,The method has 5 parameters.
Long Parameter List,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,SendCommand,The method has 5 parameters.
Long Statement,SSP4,cCommunication,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommunication.cs,CommunicationThread,The length of the statement  "			if (!(oCommandItem.CommandType == eCommandType.ScanStart || oCommandItem.CommandType == eCommandType.ScanEnd))// || oCommandItem.CommandType == eCommandType.ScanStop)) " is 167.
Long Statement,SSP4,cCommunication,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommunication.cs,CommunicationThread,The length of the statement  "			//moSSP4.SetCommandWindowText("Waiting for " + oCommandItem.CommandWaitTime);   // Output The Waiting Time before data is read from the SSP-4 " is 141.
Long Statement,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The length of the statement  "		mstrScanStart = "StartScan' " + GetTimeString () + "' " + mstrTargetName + "' " + strRole + "' " + miGain + "' " + mdIntegrationTime.ToString ("0.00") + "' " + mstrFilter; " is 171.
Long Statement,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The length of the statement  "		SetCommandWindowText ("Object: " + mstrTargetName + "\t Gain: " + miGain + "\t Int: " + mdIntegrationTime.ToString ("0.00") + "\t Filt: " + mstrFilter + "\t NPoints: " + iNumPoints + "\t Average: " + dAverage.ToString ("0.00") + "\t StDev: " + Stdev.ToString ("0.00")); " is 269.
Long Statement,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The length of the statement  "		System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK); " is 170.
Long Statement,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The length of the statement  "			System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure."); " is 151.
Long Statement,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,SendCommand,The length of the statement  "	cCommandItem pCommand = new cCommandItem (strCommand' iTimeToWaitMS' bExpectReply' iNumCharsToRead' eCommandType.GeneralCommunication); " is 135.
Long Statement,SSP4,SettingsForm,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\SettingsForm.cs,frmSettings_Load,The length of the statement  "		System.Windows.Forms.MessageBox.Show ("No COMM ports were detected on your computer.  Please verify that a COMM port exists on your system."); " is 142.
Empty Catch Block,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The method has an empty catch block.
Empty Catch Block,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The method has an empty catch block.
Empty Catch Block,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The method has an empty catch block.
Magic Number,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,SetPriority,The following statement contains a magic number: switch (menCommandType) {  // Repeat commands do not get deleted from the queue like one would expect  case eCommandType.Repeat:  	return 6;  // Cover the most standard cases first:  case eCommandType.DataDiscard:  case eCommandType.DataRequest:  case eCommandType.Error:  case eCommandType.GeneralCommunication:  case eCommandType.Rescan:  case eCommandType.ScanEnd:  	return 5;  case eCommandType.ScanStart:  case eCommandType.ScanStop:  	return 3;  case eCommandType.ChangeSetting:  	return 2;  case eCommandType.Reset:  	return 1;  case eCommandType.Startup:  case eCommandType.Termination:  	return 0;  default:  	return 5;  }  
Magic Number,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,SetPriority,The following statement contains a magic number: switch (menCommandType) {  // Repeat commands do not get deleted from the queue like one would expect  case eCommandType.Repeat:  	return 6;  // Cover the most standard cases first:  case eCommandType.DataDiscard:  case eCommandType.DataRequest:  case eCommandType.Error:  case eCommandType.GeneralCommunication:  case eCommandType.Rescan:  case eCommandType.ScanEnd:  	return 5;  case eCommandType.ScanStart:  case eCommandType.ScanStop:  	return 3;  case eCommandType.ChangeSetting:  	return 2;  case eCommandType.Reset:  	return 1;  case eCommandType.Startup:  case eCommandType.Termination:  	return 0;  default:  	return 5;  }  
Magic Number,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,SetPriority,The following statement contains a magic number: switch (menCommandType) {  // Repeat commands do not get deleted from the queue like one would expect  case eCommandType.Repeat:  	return 6;  // Cover the most standard cases first:  case eCommandType.DataDiscard:  case eCommandType.DataRequest:  case eCommandType.Error:  case eCommandType.GeneralCommunication:  case eCommandType.Rescan:  case eCommandType.ScanEnd:  	return 5;  case eCommandType.ScanStart:  case eCommandType.ScanStop:  	return 3;  case eCommandType.ChangeSetting:  	return 2;  case eCommandType.Reset:  	return 1;  case eCommandType.Startup:  case eCommandType.Termination:  	return 0;  default:  	return 5;  }  
Magic Number,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,SetPriority,The following statement contains a magic number: switch (menCommandType) {  // Repeat commands do not get deleted from the queue like one would expect  case eCommandType.Repeat:  	return 6;  // Cover the most standard cases first:  case eCommandType.DataDiscard:  case eCommandType.DataRequest:  case eCommandType.Error:  case eCommandType.GeneralCommunication:  case eCommandType.Rescan:  case eCommandType.ScanEnd:  	return 5;  case eCommandType.ScanStart:  case eCommandType.ScanStop:  	return 3;  case eCommandType.ChangeSetting:  	return 2;  case eCommandType.Reset:  	return 1;  case eCommandType.Startup:  case eCommandType.Termination:  	return 0;  default:  	return 5;  }  
Magic Number,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,SetPriority,The following statement contains a magic number: switch (menCommandType) {  // Repeat commands do not get deleted from the queue like one would expect  case eCommandType.Repeat:  	return 6;  // Cover the most standard cases first:  case eCommandType.DataDiscard:  case eCommandType.DataRequest:  case eCommandType.Error:  case eCommandType.GeneralCommunication:  case eCommandType.Rescan:  case eCommandType.ScanEnd:  	return 5;  case eCommandType.ScanStart:  case eCommandType.ScanStop:  	return 3;  case eCommandType.ChangeSetting:  	return 2;  case eCommandType.Reset:  	return 1;  case eCommandType.Startup:  case eCommandType.Termination:  	return 0;  default:  	return 5;  }  
Magic Number,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,SetPriority,The following statement contains a magic number: return 6;  
Magic Number,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,SetPriority,The following statement contains a magic number: return 5;  
Magic Number,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,SetPriority,The following statement contains a magic number: return 3;  
Magic Number,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,SetPriority,The following statement contains a magic number: return 2;  
Magic Number,SSP4,cCommandItem,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommandItem.cs,SetPriority,The following statement contains a magic number: return 5;  
Magic Number,SSP4,cCommunication,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommunication.cs,cCommunication,The following statement contains a magic number: miBaudRate = 2400;  
Magic Number,SSP4,cCommunication,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommunication.cs,cCommunication,The following statement contains a magic number: miDataBits = 8;  
Magic Number,SSP4,cCommunication,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommunication.cs,cCommunication,The following statement contains a magic number: miCharInputBufferSize = 7;  
Magic Number,SSP4,cCommunication,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cCommunication.cs,cCommunication,The following statement contains a magic number: miTimeout = 1000;  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,cSSP4Base,The following statement contains a magic number: miTemperatureSetting = -25;  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,cSSP4Base,The following statement contains a magic number: miGain = miarrGainValues [2];  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,Disconnect,The following statement contains a magic number: SendCommand ("SEXIT0"' 0' true' 3' eCommandType.GeneralCommunication);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,Reset,The following statement contains a magic number: if (mbOnline)  	SendCommand ("SEXIT0"' 0' true' 3' eCommandType.Reset);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,Reset,The following statement contains a magic number: SendCommand ("SEXIT0"' 0' true' 3' eCommandType.Reset);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.ScanStart) {  	// Reset the Progress Bar' clear the data list.  	ResetProgressBar ();  	mDataList.Clear ();  	// Set the Role of this object according to mObjectRole  	string strRole = "Calibrator";  	if (mObjectRole == ObjectRoles.Target)  		strRole = "Target";  	else if (mObjectRole == ObjectRoles.Dark)  		strRole = "Dark";  	else if (mObjectRole == ObjectRoles.Sky)  		strRole = "Sky";  	// Create the start-of-scan header.  	mstrScanStart = "StartScan' " + GetTimeString () + "' " + mstrTargetName + "' " + strRole + "' " + miGain + "' " + mdIntegrationTime.ToString ("0.00") + "' " + mstrFilter;  }  else if (eType == eCommandType.ScanStop || eType == eCommandType.ScanEnd) {  	// Signal that the SSP-4 is done scanning.  	mbScanning = false;  	UpdateStatus ();  	// Copy the data over to the output string.  	int iNumPoints = mDataList.Count;  	int iValue = 0;  	string strToWrite = iNumPoints.ToString ();  	double dAverage = 0;  	double sumOfDerivation = 0;  	for (int i = 0; i < iNumPoints; i++) {  		iValue = mDataList [i];  		dAverage += iValue;  		sumOfDerivation += (iValue * iValue);  		strToWrite += "' " + iValue;  	}  	// Compute the average and standard deviation.  	dAverage /= iNumPoints;  	double sumOfDerivationAverage = sumOfDerivation / iNumPoints;  	double Stdev = Math.Sqrt (sumOfDerivationAverage - (dAverage * dAverage));  	// Now' write the data out to the file' including the scan header.  	mSaveFile.WriteLine (mstrScanStart);  	mSaveFile.WriteLine (strToWrite);  	mSaveFile.WriteLine ("EndScan' " + GetTimeString ());  	mSaveFile.Flush ();  	// Reset the Progress Bar  	ResetProgressBar ();  	// Output Some Statistics of the data.  Format the double to have two decimal points' automatically rounded.  	SetCommandWindowText ("Object: " + mstrTargetName + "\t Gain: " + miGain + "\t Int: " + mdIntegrationTime.ToString ("0.00") + "\t Filt: " + mstrFilter + "\t NPoints: " + iNumPoints + "\t Average: " + dAverage.ToString ("0.00") + "\t StDev: " + Stdev.ToString ("0.00"));  }  else if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.ScanStart) {  	// Reset the Progress Bar' clear the data list.  	ResetProgressBar ();  	mDataList.Clear ();  	// Set the Role of this object according to mObjectRole  	string strRole = "Calibrator";  	if (mObjectRole == ObjectRoles.Target)  		strRole = "Target";  	else if (mObjectRole == ObjectRoles.Dark)  		strRole = "Dark";  	else if (mObjectRole == ObjectRoles.Sky)  		strRole = "Sky";  	// Create the start-of-scan header.  	mstrScanStart = "StartScan' " + GetTimeString () + "' " + mstrTargetName + "' " + strRole + "' " + miGain + "' " + mdIntegrationTime.ToString ("0.00") + "' " + mstrFilter;  }  else if (eType == eCommandType.ScanStop || eType == eCommandType.ScanEnd) {  	// Signal that the SSP-4 is done scanning.  	mbScanning = false;  	UpdateStatus ();  	// Copy the data over to the output string.  	int iNumPoints = mDataList.Count;  	int iValue = 0;  	string strToWrite = iNumPoints.ToString ();  	double dAverage = 0;  	double sumOfDerivation = 0;  	for (int i = 0; i < iNumPoints; i++) {  		iValue = mDataList [i];  		dAverage += iValue;  		sumOfDerivation += (iValue * iValue);  		strToWrite += "' " + iValue;  	}  	// Compute the average and standard deviation.  	dAverage /= iNumPoints;  	double sumOfDerivationAverage = sumOfDerivation / iNumPoints;  	double Stdev = Math.Sqrt (sumOfDerivationAverage - (dAverage * dAverage));  	// Now' write the data out to the file' including the scan header.  	mSaveFile.WriteLine (mstrScanStart);  	mSaveFile.WriteLine (strToWrite);  	mSaveFile.WriteLine ("EndScan' " + GetTimeString ());  	mSaveFile.Flush ();  	// Reset the Progress Bar  	ResetProgressBar ();  	// Output Some Statistics of the data.  Format the double to have two decimal points' automatically rounded.  	SetCommandWindowText ("Object: " + mstrTargetName + "\t Gain: " + miGain + "\t Int: " + mdIntegrationTime.ToString ("0.00") + "\t Filt: " + mstrFilter + "\t NPoints: " + iNumPoints + "\t Average: " + dAverage.ToString ("0.00") + "\t StDev: " + Stdev.ToString ("0.00"));  }  else if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.ScanStart) {  	// Reset the Progress Bar' clear the data list.  	ResetProgressBar ();  	mDataList.Clear ();  	// Set the Role of this object according to mObjectRole  	string strRole = "Calibrator";  	if (mObjectRole == ObjectRoles.Target)  		strRole = "Target";  	else if (mObjectRole == ObjectRoles.Dark)  		strRole = "Dark";  	else if (mObjectRole == ObjectRoles.Sky)  		strRole = "Sky";  	// Create the start-of-scan header.  	mstrScanStart = "StartScan' " + GetTimeString () + "' " + mstrTargetName + "' " + strRole + "' " + miGain + "' " + mdIntegrationTime.ToString ("0.00") + "' " + mstrFilter;  }  else if (eType == eCommandType.ScanStop || eType == eCommandType.ScanEnd) {  	// Signal that the SSP-4 is done scanning.  	mbScanning = false;  	UpdateStatus ();  	// Copy the data over to the output string.  	int iNumPoints = mDataList.Count;  	int iValue = 0;  	string strToWrite = iNumPoints.ToString ();  	double dAverage = 0;  	double sumOfDerivation = 0;  	for (int i = 0; i < iNumPoints; i++) {  		iValue = mDataList [i];  		dAverage += iValue;  		sumOfDerivation += (iValue * iValue);  		strToWrite += "' " + iValue;  	}  	// Compute the average and standard deviation.  	dAverage /= iNumPoints;  	double sumOfDerivationAverage = sumOfDerivation / iNumPoints;  	double Stdev = Math.Sqrt (sumOfDerivationAverage - (dAverage * dAverage));  	// Now' write the data out to the file' including the scan header.  	mSaveFile.WriteLine (mstrScanStart);  	mSaveFile.WriteLine (strToWrite);  	mSaveFile.WriteLine ("EndScan' " + GetTimeString ());  	mSaveFile.Flush ();  	// Reset the Progress Bar  	ResetProgressBar ();  	// Output Some Statistics of the data.  Format the double to have two decimal points' automatically rounded.  	SetCommandWindowText ("Object: " + mstrTargetName + "\t Gain: " + miGain + "\t Int: " + mdIntegrationTime.ToString ("0.00") + "\t Filt: " + mstrFilter + "\t NPoints: " + iNumPoints + "\t Average: " + dAverage.ToString ("0.00") + "\t StDev: " + Stdev.ToString ("0.00"));  }  else if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.ScanStart) {  	// Reset the Progress Bar' clear the data list.  	ResetProgressBar ();  	mDataList.Clear ();  	// Set the Role of this object according to mObjectRole  	string strRole = "Calibrator";  	if (mObjectRole == ObjectRoles.Target)  		strRole = "Target";  	else if (mObjectRole == ObjectRoles.Dark)  		strRole = "Dark";  	else if (mObjectRole == ObjectRoles.Sky)  		strRole = "Sky";  	// Create the start-of-scan header.  	mstrScanStart = "StartScan' " + GetTimeString () + "' " + mstrTargetName + "' " + strRole + "' " + miGain + "' " + mdIntegrationTime.ToString ("0.00") + "' " + mstrFilter;  }  else if (eType == eCommandType.ScanStop || eType == eCommandType.ScanEnd) {  	// Signal that the SSP-4 is done scanning.  	mbScanning = false;  	UpdateStatus ();  	// Copy the data over to the output string.  	int iNumPoints = mDataList.Count;  	int iValue = 0;  	string strToWrite = iNumPoints.ToString ();  	double dAverage = 0;  	double sumOfDerivation = 0;  	for (int i = 0; i < iNumPoints; i++) {  		iValue = mDataList [i];  		dAverage += iValue;  		sumOfDerivation += (iValue * iValue);  		strToWrite += "' " + iValue;  	}  	// Compute the average and standard deviation.  	dAverage /= iNumPoints;  	double sumOfDerivationAverage = sumOfDerivation / iNumPoints;  	double Stdev = Math.Sqrt (sumOfDerivationAverage - (dAverage * dAverage));  	// Now' write the data out to the file' including the scan header.  	mSaveFile.WriteLine (mstrScanStart);  	mSaveFile.WriteLine (strToWrite);  	mSaveFile.WriteLine ("EndScan' " + GetTimeString ());  	mSaveFile.Flush ();  	// Reset the Progress Bar  	ResetProgressBar ();  	// Output Some Statistics of the data.  Format the double to have two decimal points' automatically rounded.  	SetCommandWindowText ("Object: " + mstrTargetName + "\t Gain: " + miGain + "\t Int: " + mdIntegrationTime.ToString ("0.00") + "\t Filt: " + mstrFilter + "\t NPoints: " + iNumPoints + "\t Average: " + dAverage.ToString ("0.00") + "\t StDev: " + Stdev.ToString ("0.00"));  }  else if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.ScanStart) {  	// Reset the Progress Bar' clear the data list.  	ResetProgressBar ();  	mDataList.Clear ();  	// Set the Role of this object according to mObjectRole  	string strRole = "Calibrator";  	if (mObjectRole == ObjectRoles.Target)  		strRole = "Target";  	else if (mObjectRole == ObjectRoles.Dark)  		strRole = "Dark";  	else if (mObjectRole == ObjectRoles.Sky)  		strRole = "Sky";  	// Create the start-of-scan header.  	mstrScanStart = "StartScan' " + GetTimeString () + "' " + mstrTargetName + "' " + strRole + "' " + miGain + "' " + mdIntegrationTime.ToString ("0.00") + "' " + mstrFilter;  }  else if (eType == eCommandType.ScanStop || eType == eCommandType.ScanEnd) {  	// Signal that the SSP-4 is done scanning.  	mbScanning = false;  	UpdateStatus ();  	// Copy the data over to the output string.  	int iNumPoints = mDataList.Count;  	int iValue = 0;  	string strToWrite = iNumPoints.ToString ();  	double dAverage = 0;  	double sumOfDerivation = 0;  	for (int i = 0; i < iNumPoints; i++) {  		iValue = mDataList [i];  		dAverage += iValue;  		sumOfDerivation += (iValue * iValue);  		strToWrite += "' " + iValue;  	}  	// Compute the average and standard deviation.  	dAverage /= iNumPoints;  	double sumOfDerivationAverage = sumOfDerivation / iNumPoints;  	double Stdev = Math.Sqrt (sumOfDerivationAverage - (dAverage * dAverage));  	// Now' write the data out to the file' including the scan header.  	mSaveFile.WriteLine (mstrScanStart);  	mSaveFile.WriteLine (strToWrite);  	mSaveFile.WriteLine ("EndScan' " + GetTimeString ());  	mSaveFile.Flush ();  	// Reset the Progress Bar  	ResetProgressBar ();  	// Output Some Statistics of the data.  Format the double to have two decimal points' automatically rounded.  	SetCommandWindowText ("Object: " + mstrTargetName + "\t Gain: " + miGain + "\t Int: " + mdIntegrationTime.ToString ("0.00") + "\t Filt: " + mstrFilter + "\t NPoints: " + iNumPoints + "\t Average: " + dAverage.ToString ("0.00") + "\t StDev: " + Stdev.ToString ("0.00"));  }  else if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.ScanStop || eType == eCommandType.ScanEnd) {  	// Signal that the SSP-4 is done scanning.  	mbScanning = false;  	UpdateStatus ();  	// Copy the data over to the output string.  	int iNumPoints = mDataList.Count;  	int iValue = 0;  	string strToWrite = iNumPoints.ToString ();  	double dAverage = 0;  	double sumOfDerivation = 0;  	for (int i = 0; i < iNumPoints; i++) {  		iValue = mDataList [i];  		dAverage += iValue;  		sumOfDerivation += (iValue * iValue);  		strToWrite += "' " + iValue;  	}  	// Compute the average and standard deviation.  	dAverage /= iNumPoints;  	double sumOfDerivationAverage = sumOfDerivation / iNumPoints;  	double Stdev = Math.Sqrt (sumOfDerivationAverage - (dAverage * dAverage));  	// Now' write the data out to the file' including the scan header.  	mSaveFile.WriteLine (mstrScanStart);  	mSaveFile.WriteLine (strToWrite);  	mSaveFile.WriteLine ("EndScan' " + GetTimeString ());  	mSaveFile.Flush ();  	// Reset the Progress Bar  	ResetProgressBar ();  	// Output Some Statistics of the data.  Format the double to have two decimal points' automatically rounded.  	SetCommandWindowText ("Object: " + mstrTargetName + "\t Gain: " + miGain + "\t Int: " + mdIntegrationTime.ToString ("0.00") + "\t Filt: " + mstrFilter + "\t NPoints: " + iNumPoints + "\t Average: " + dAverage.ToString ("0.00") + "\t StDev: " + Stdev.ToString ("0.00"));  }  else if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.ScanStop || eType == eCommandType.ScanEnd) {  	// Signal that the SSP-4 is done scanning.  	mbScanning = false;  	UpdateStatus ();  	// Copy the data over to the output string.  	int iNumPoints = mDataList.Count;  	int iValue = 0;  	string strToWrite = iNumPoints.ToString ();  	double dAverage = 0;  	double sumOfDerivation = 0;  	for (int i = 0; i < iNumPoints; i++) {  		iValue = mDataList [i];  		dAverage += iValue;  		sumOfDerivation += (iValue * iValue);  		strToWrite += "' " + iValue;  	}  	// Compute the average and standard deviation.  	dAverage /= iNumPoints;  	double sumOfDerivationAverage = sumOfDerivation / iNumPoints;  	double Stdev = Math.Sqrt (sumOfDerivationAverage - (dAverage * dAverage));  	// Now' write the data out to the file' including the scan header.  	mSaveFile.WriteLine (mstrScanStart);  	mSaveFile.WriteLine (strToWrite);  	mSaveFile.WriteLine ("EndScan' " + GetTimeString ());  	mSaveFile.Flush ();  	// Reset the Progress Bar  	ResetProgressBar ();  	// Output Some Statistics of the data.  Format the double to have two decimal points' automatically rounded.  	SetCommandWindowText ("Object: " + mstrTargetName + "\t Gain: " + miGain + "\t Int: " + mdIntegrationTime.ToString ("0.00") + "\t Filt: " + mstrFilter + "\t NPoints: " + iNumPoints + "\t Average: " + dAverage.ToString ("0.00") + "\t StDev: " + Stdev.ToString ("0.00"));  }  else if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.ScanStop || eType == eCommandType.ScanEnd) {  	// Signal that the SSP-4 is done scanning.  	mbScanning = false;  	UpdateStatus ();  	// Copy the data over to the output string.  	int iNumPoints = mDataList.Count;  	int iValue = 0;  	string strToWrite = iNumPoints.ToString ();  	double dAverage = 0;  	double sumOfDerivation = 0;  	for (int i = 0; i < iNumPoints; i++) {  		iValue = mDataList [i];  		dAverage += iValue;  		sumOfDerivation += (iValue * iValue);  		strToWrite += "' " + iValue;  	}  	// Compute the average and standard deviation.  	dAverage /= iNumPoints;  	double sumOfDerivationAverage = sumOfDerivation / iNumPoints;  	double Stdev = Math.Sqrt (sumOfDerivationAverage - (dAverage * dAverage));  	// Now' write the data out to the file' including the scan header.  	mSaveFile.WriteLine (mstrScanStart);  	mSaveFile.WriteLine (strToWrite);  	mSaveFile.WriteLine ("EndScan' " + GetTimeString ());  	mSaveFile.Flush ();  	// Reset the Progress Bar  	ResetProgressBar ();  	// Output Some Statistics of the data.  Format the double to have two decimal points' automatically rounded.  	SetCommandWindowText ("Object: " + mstrTargetName + "\t Gain: " + miGain + "\t Int: " + mdIntegrationTime.ToString ("0.00") + "\t Filt: " + mstrFilter + "\t NPoints: " + iNumPoints + "\t Average: " + dAverage.ToString ("0.00") + "\t StDev: " + Stdev.ToString ("0.00"));  }  else if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.ScanStop || eType == eCommandType.ScanEnd) {  	// Signal that the SSP-4 is done scanning.  	mbScanning = false;  	UpdateStatus ();  	// Copy the data over to the output string.  	int iNumPoints = mDataList.Count;  	int iValue = 0;  	string strToWrite = iNumPoints.ToString ();  	double dAverage = 0;  	double sumOfDerivation = 0;  	for (int i = 0; i < iNumPoints; i++) {  		iValue = mDataList [i];  		dAverage += iValue;  		sumOfDerivation += (iValue * iValue);  		strToWrite += "' " + iValue;  	}  	// Compute the average and standard deviation.  	dAverage /= iNumPoints;  	double sumOfDerivationAverage = sumOfDerivation / iNumPoints;  	double Stdev = Math.Sqrt (sumOfDerivationAverage - (dAverage * dAverage));  	// Now' write the data out to the file' including the scan header.  	mSaveFile.WriteLine (mstrScanStart);  	mSaveFile.WriteLine (strToWrite);  	mSaveFile.WriteLine ("EndScan' " + GetTimeString ());  	mSaveFile.Flush ();  	// Reset the Progress Bar  	ResetProgressBar ();  	// Output Some Statistics of the data.  Format the double to have two decimal points' automatically rounded.  	SetCommandWindowText ("Object: " + mstrTargetName + "\t Gain: " + miGain + "\t Int: " + mdIntegrationTime.ToString ("0.00") + "\t Filt: " + mstrFilter + "\t NPoints: " + iNumPoints + "\t Average: " + dAverage.ToString ("0.00") + "\t StDev: " + Stdev.ToString ("0.00"));  }  else if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.ScanStop || eType == eCommandType.ScanEnd) {  	// Signal that the SSP-4 is done scanning.  	mbScanning = false;  	UpdateStatus ();  	// Copy the data over to the output string.  	int iNumPoints = mDataList.Count;  	int iValue = 0;  	string strToWrite = iNumPoints.ToString ();  	double dAverage = 0;  	double sumOfDerivation = 0;  	for (int i = 0; i < iNumPoints; i++) {  		iValue = mDataList [i];  		dAverage += iValue;  		sumOfDerivation += (iValue * iValue);  		strToWrite += "' " + iValue;  	}  	// Compute the average and standard deviation.  	dAverage /= iNumPoints;  	double sumOfDerivationAverage = sumOfDerivation / iNumPoints;  	double Stdev = Math.Sqrt (sumOfDerivationAverage - (dAverage * dAverage));  	// Now' write the data out to the file' including the scan header.  	mSaveFile.WriteLine (mstrScanStart);  	mSaveFile.WriteLine (strToWrite);  	mSaveFile.WriteLine ("EndScan' " + GetTimeString ());  	mSaveFile.Flush ();  	// Reset the Progress Bar  	ResetProgressBar ();  	// Output Some Statistics of the data.  Format the double to have two decimal points' automatically rounded.  	SetCommandWindowText ("Object: " + mstrTargetName + "\t Gain: " + miGain + "\t Int: " + mdIntegrationTime.ToString ("0.00") + "\t Filt: " + mstrFilter + "\t NPoints: " + iNumPoints + "\t Average: " + dAverage.ToString ("0.00") + "\t StDev: " + Stdev.ToString ("0.00"));  }  else if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Rescan) {  	//Scan();  }  else if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Error) {  	// Clearly something is wrong' stop the threads and break communication with the box.  	mSaveFile.WriteLine ("Error' " + GetTimeString () + "' " + strReply);  	SendCommand ("_DISCONNECT"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  	System.Windows.Forms.MessageBox.Show ("An Error Has Occurred: " + strReply + "\n" + "Closing Connection."' "Connection Error"' System.Windows.Forms.MessageBoxButtons.OK);  }  else if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.DataDiscard) {  	// TODO: Clear the buffer or something  }  else if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (eType == eCommandType.Termination) {  	mSaveFile.WriteLine ("SessionEnd");  	mSaveFile.Flush ();  }  else {  	// TODO: Add Processing Capabilities:  	// Init vars  	char cFirstCharacter = strReply [0];  	// If we reach this point' we either have a data point' or a setting change.    	// Ready for a long set of if-statements?  Go!  	if (cFirstCharacter == '!')// The box is up and running  	 {  		SetTemperature (miTemperatureSetting);  		SetIntegrationTime (mdIntegrationTime);  		SetGain (miGain);  		// Start polling for the temperature  		StartTemperaturePolling ();  		mbOnline = true;  		UpdateStatus ();  	}  	else if (cFirstCharacter == 'G')// Gain Setting Change Reply  	 {  		int iIndex = 0;  		strReply = strReply.Remove (0' 4);  		try {  			iIndex = Convert.ToInt32 (strReply) - 1;  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		miGain = miarrGainValues [iIndex];  	}  	else if (cFirstCharacter == 'I')// Integration Setting Change Reply  	 {  		int iIntegrationTime = 0;  		strReply = strReply.Remove (0' 1);  		try {  			iIntegrationTime = Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  	}  	else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.  	 {  		strReply = strReply.Remove (0' 2);  		int iCounts = 0;  		bool bInsertPoint = true;  		try {  			iCounts = Convert.ToInt32 (strReply);  		}  		catch {  			bInsertPoint = false;  		}  		// Append The Data.  		if (bInsertPoint) {  			mDataList.Add (iCounts);  			IncrementProgressBar ();  		}  	}  	else if (cFirstCharacter == 'T')// Temperature Setting Change Reply  	 {  		// TODO: Rewrite since documentation is incorrect.  		strReply = strReply.Remove (0' 3);  		try {  			miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  		}  		catch {  			// If some odd errors start showing up' do something with the error here.  		}  		mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  		mSaveFile.Flush ();  	}  	else if (cFirstCharacter == 'F')// Current System Temperature  	 {  		double dTemp = 0;  		bool bUpdateTemperature = true;  		strReply = strReply.Remove (0' 2);  		try {  			dTemp = -1 * Convert.ToDouble (strReply);  		}  		catch {  			bUpdateTemperature = false;  		}  		// Update the GUI  		if (bUpdateTemperature)  			UpdateTemperature (dTemp);  		// If the temperature has changed' write an entry to data file  		if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  			mdTemperature = dTemp;  			mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  			mSaveFile.Flush ();  		}  	}  	else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface  	 {  		// Tell the threads to stop:  		SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  		mbOnline = false;  		UpdateStatus ();  	}  	else// The command is not implemented.  There is not a settings change associated with this item.  	 {  		// TODO: Re-enable this option  		System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  	}  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == '!')// The box is up and running   {  	SetTemperature (miTemperatureSetting);  	SetIntegrationTime (mdIntegrationTime);  	SetGain (miGain);  	// Start polling for the temperature  	StartTemperaturePolling ();  	mbOnline = true;  	UpdateStatus ();  }  else if (cFirstCharacter == 'G')// Gain Setting Change Reply   {  	int iIndex = 0;  	strReply = strReply.Remove (0' 4);  	try {  		iIndex = Convert.ToInt32 (strReply) - 1;  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	miGain = miarrGainValues [iIndex];  }  else if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == '!')// The box is up and running   {  	SetTemperature (miTemperatureSetting);  	SetIntegrationTime (mdIntegrationTime);  	SetGain (miGain);  	// Start polling for the temperature  	StartTemperaturePolling ();  	mbOnline = true;  	UpdateStatus ();  }  else if (cFirstCharacter == 'G')// Gain Setting Change Reply   {  	int iIndex = 0;  	strReply = strReply.Remove (0' 4);  	try {  		iIndex = Convert.ToInt32 (strReply) - 1;  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	miGain = miarrGainValues [iIndex];  }  else if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == '!')// The box is up and running   {  	SetTemperature (miTemperatureSetting);  	SetIntegrationTime (mdIntegrationTime);  	SetGain (miGain);  	// Start polling for the temperature  	StartTemperaturePolling ();  	mbOnline = true;  	UpdateStatus ();  }  else if (cFirstCharacter == 'G')// Gain Setting Change Reply   {  	int iIndex = 0;  	strReply = strReply.Remove (0' 4);  	try {  		iIndex = Convert.ToInt32 (strReply) - 1;  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	miGain = miarrGainValues [iIndex];  }  else if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == '!')// The box is up and running   {  	SetTemperature (miTemperatureSetting);  	SetIntegrationTime (mdIntegrationTime);  	SetGain (miGain);  	// Start polling for the temperature  	StartTemperaturePolling ();  	mbOnline = true;  	UpdateStatus ();  }  else if (cFirstCharacter == 'G')// Gain Setting Change Reply   {  	int iIndex = 0;  	strReply = strReply.Remove (0' 4);  	try {  		iIndex = Convert.ToInt32 (strReply) - 1;  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	miGain = miarrGainValues [iIndex];  }  else if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == '!')// The box is up and running   {  	SetTemperature (miTemperatureSetting);  	SetIntegrationTime (mdIntegrationTime);  	SetGain (miGain);  	// Start polling for the temperature  	StartTemperaturePolling ();  	mbOnline = true;  	UpdateStatus ();  }  else if (cFirstCharacter == 'G')// Gain Setting Change Reply   {  	int iIndex = 0;  	strReply = strReply.Remove (0' 4);  	try {  		iIndex = Convert.ToInt32 (strReply) - 1;  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	miGain = miarrGainValues [iIndex];  }  else if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'G')// Gain Setting Change Reply   {  	int iIndex = 0;  	strReply = strReply.Remove (0' 4);  	try {  		iIndex = Convert.ToInt32 (strReply) - 1;  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	miGain = miarrGainValues [iIndex];  }  else if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'G')// Gain Setting Change Reply   {  	int iIndex = 0;  	strReply = strReply.Remove (0' 4);  	try {  		iIndex = Convert.ToInt32 (strReply) - 1;  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	miGain = miarrGainValues [iIndex];  }  else if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'G')// Gain Setting Change Reply   {  	int iIndex = 0;  	strReply = strReply.Remove (0' 4);  	try {  		iIndex = Convert.ToInt32 (strReply) - 1;  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	miGain = miarrGainValues [iIndex];  }  else if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'G')// Gain Setting Change Reply   {  	int iIndex = 0;  	strReply = strReply.Remove (0' 4);  	try {  		iIndex = Convert.ToInt32 (strReply) - 1;  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	miGain = miarrGainValues [iIndex];  }  else if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'G')// Gain Setting Change Reply   {  	int iIndex = 0;  	strReply = strReply.Remove (0' 4);  	try {  		iIndex = Convert.ToInt32 (strReply) - 1;  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	miGain = miarrGainValues [iIndex];  }  else if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: strReply = strReply.Remove (0' 4);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'I')// Integration Setting Change Reply   {  	int iIntegrationTime = 0;  	strReply = strReply.Remove (0' 1);  	try {  		iIntegrationTime = Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mdIntegrationTime = iIntegrationTime * mdIntegrationStepSize;  }  else if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (mbScanning && cFirstCharacter == 'C')// Data Point' only valid if a scan is active.   {  	strReply = strReply.Remove (0' 2);  	int iCounts = 0;  	bool bInsertPoint = true;  	try {  		iCounts = Convert.ToInt32 (strReply);  	}  	catch {  		bInsertPoint = false;  	}  	// Append The Data.  	if (bInsertPoint) {  		mDataList.Add (iCounts);  		IncrementProgressBar ();  	}  }  else if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: strReply = strReply.Remove (0' 2);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'T')// Temperature Setting Change Reply   {  	// TODO: Rewrite since documentation is incorrect.  	strReply = strReply.Remove (0' 3);  	try {  		miTemperatureSetting = -1 * Convert.ToInt32 (strReply);  	}  	catch {  		// If some odd errors start showing up' do something with the error here.  	}  	mSaveFile.WriteLine ("SetTemp' " + GetTimeString () + "' " + miTemperatureSetting.ToString ("0.0"));  	mSaveFile.Flush ();  }  else if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: strReply = strReply.Remove (0' 3);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (cFirstCharacter == 'F')// Current System Temperature   {  	double dTemp = 0;  	bool bUpdateTemperature = true;  	strReply = strReply.Remove (0' 2);  	try {  		dTemp = -1 * Convert.ToDouble (strReply);  	}  	catch {  		bUpdateTemperature = false;  	}  	// Update the GUI  	if (bUpdateTemperature)  		UpdateTemperature (dTemp);  	// If the temperature has changed' write an entry to data file  	if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  		mdTemperature = dTemp;  		mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  		mSaveFile.Flush ();  	}  }  else if (cFirstCharacter == 'E')// Control of the box has been returned to the 2-button interface   {  	// Tell the threads to stop:  	SendCommand ("STOP"' 0' false' 0' eCommandType.Termination);  	mbOnline = false;  	UpdateStatus ();  }  else// The command is not implemented.  There is not a settings change associated with this item.   {  	// TODO: Re-enable this option  	System.Windows.Forms.MessageBox.Show ("The specified reply' " + strReply + " is not implemented for this unit.  Please verify the command structure.");  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: strReply = strReply.Remove (0' 2);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,ProcessReply,The following statement contains a magic number: if (bUpdateTemperature && (Math.Abs (dTemp - mdTemperature) > 0.3)) {  	mdTemperature = dTemp;  	mSaveFile.WriteLine ("GotTemp' " + GetTimeString () + "' " + dTemp.ToString ("0.0"));  	mSaveFile.Flush ();  }  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,TakeData,The following statement contains a magic number: iIntegration = Convert.ToInt32 (mdIntegrationTime * 1000);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,TakeData,The following statement contains a magic number: for (int i = 0; i < iNumberOfPoints; i++)  	SendCommand ("SCOUNT"' iIntegration + 100' true' 7' eCommandType.DataRequest);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,TakeData,The following statement contains a magic number: for (int i = 0; i < iNumberOfPoints; i++)  	SendCommand ("SCOUNT"' iIntegration + 100' true' 7' eCommandType.DataRequest);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,TakeData,The following statement contains a magic number: SendCommand ("SCOUNT"' iIntegration + 100' true' 7' eCommandType.DataRequest);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,TakeData,The following statement contains a magic number: SendCommand ("SCOUNT"' iIntegration + 100' true' 7' eCommandType.DataRequest);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,StartTemperaturePolling,The following statement contains a magic number: SendCommand ("SFTEMP"' 1000' true' 6' eCommandType.Repeat);  
Magic Number,SSP4,cSSP4Base,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\cSSP4Base.cs,StartTemperaturePolling,The following statement contains a magic number: SendCommand ("SFTEMP"' 1000' true' 6' eCommandType.Repeat);  
Magic Number,SSP4,frmMain,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\frmMain.cs,Form1_Load,The following statement contains a magic number: nudIntegration.DecimalPlaces = 2;  
Magic Number,SSP4,frmMain,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\frmMain.cs,btnScan_Click,The following statement contains a magic number: progbarScanStatus.Step = Convert.ToInt32 (100 / iExposures);  
Magic Number,SSP4,SettingsForm,C:\repos\bkloppenborg_ssp4-control-software\SSP-4\SettingsForm.cs,frmSettings_Load,The following statement contains a magic number: nudTemperature.Minimum = -40;  
