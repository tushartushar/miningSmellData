Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,FindByCompositeSpecification,The length of the statement  "                new Specification<Product>(p => p.Price < 100).And(new Specification<Product>(p => p.Name == "Windows XP Professional"))); " is 122.
Long Statement,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,FindCategoryWithInclude,The length of the statement  "            var category = repository.GetQuery<Category>(x => x.Name == "Operating System").Include(c => c.Products).SingleOrDefault(); " is 123.
Long Statement,Infrastructure.Tests.Data.Lab,UseMyDbContextTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\UseMyDbContextTest.cs,TearDown,The length of the statement  "            if ((context != null) && (((IObjectContextAdapter)context).ObjectContext.Connection.State == System.Data.ConnectionState.Open)) " is 127.
Long Statement,Infrastructure.Tests.Data.Lab,UseMyDbContextTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\UseMyDbContextTest.cs,FindCategoryWithInclude,The length of the statement  "            var category = repository.GetQuery<Category>(x => x.Name == "Operating System").Include(c => c.Products).SingleOrDefault(); " is 123.
Long Statement,Infrastructure.Tests.Data.Lab,UseMyDbContextTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\UseMyDbContextTest.cs,FindByCompositeSpecification,The length of the statement  "                new Specification<Product>(p => p.Price < 100).And(new Specification<Product>(p => p.Name == "Windows XP Professional"))); " is 122.
Long Statement,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,SetUp,The length of the statement  "            DbContextBuilder<DbContext> builder = new DbContextBuilder<DbContext>("DefaultDb"' new[] { "Infrastructure.Tests" }' true' true); " is 129.
Long Statement,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,TearDown,The length of the statement  "            if ((context != null) && (((IObjectContextAdapter)context).ObjectContext.Connection.State == System.Data.ConnectionState.Open)) " is 127.
Long Statement,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,FindByCompositeSpecification,The length of the statement  "                new Specification<Product>(p => p.Price < 100).And(new Specification<Product>(p => p.Name == "Windows XP Professional"))); " is 122.
Long Statement,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,FindCategoryWithInclude,The length of the statement  "            var category = repository.GetQuery<Category>(x => x.Name == "Operating System").Include(c => c.Products).SingleOrDefault(); " is 123.
Long Statement,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,FindByAndCompositeSpecification,The length of the statement  "                new Specification<Product>(p => p.Price < 100).And(new Specification<Product>(p => p.Name == "Windows XP Professional"))); " is 122.
Long Statement,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,FindByOrCompositeSpecification,The length of the statement  "                new Specification<Product>(p => p.Price < 100).Or(new Specification<Product>(p => p.Name == "Windows XP Professional"))); " is 121.
Long Statement,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,SetUp,The length of the statement  "            ObjectContextBuilder<ObjectContext> builder = new ObjectContextBuilder<ObjectContext>("DefaultDb"' new[] { "Infrastructure.Tests" }' true' true); " is 145.
Long Statement,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,FindByAndCompositeSpecification,The length of the statement  "                new Specification<Product>(p => p.Price < 100).And(new Specification<Product>(p => p.Name == "Windows XP Professional"))); " is 122.
Long Statement,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,FindByOrCompositeSpecification,The length of the statement  "                new Specification<Product>(p => p.Price < 100).Or(new Specification<Product>(p => p.Name == "Windows XP Professional"))); " is 121.
Long Statement,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,FindCategoryWithInclude,The length of the statement  "            var category = repository.GetQuery<Category>(x => x.Name == "Operating System").Include(c => c.Products).SingleOrDefault(); " is 123.
Magic Number,Infrastructure.Tests.Data.Domain.Mapping,CustomerMapping,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Domain\Mapping\CustomerMapping.cs,CustomerMapping,The following statement contains a magic number: Property(x => x.Firstname).IsRequired().HasMaxLength(25);
Magic Number,Infrastructure.Tests.Data.Domain.Mapping,CustomerMapping,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Domain\Mapping\CustomerMapping.cs,CustomerMapping,The following statement contains a magic number: Property(x => x.Lastname).IsRequired().HasMaxLength(25);
Magic Number,Infrastructure.Tests.Data.Lab,DataSeedingInitializer,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\DataSeedingInitializer.cs,CreateProducts,The following statement contains a magic number: var p1 = new Product { Name = "Windows Seven Professional"' Price = 100 };
Magic Number,Infrastructure.Tests.Data.Lab,DataSeedingInitializer,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\DataSeedingInitializer.cs,CreateProducts,The following statement contains a magic number: var p2 = new Product { Name = "Windows XP Professional"' Price = 20 };
Magic Number,Infrastructure.Tests.Data.Lab,DataSeedingInitializer,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\DataSeedingInitializer.cs,CreateProducts,The following statement contains a magic number: var p3 = new Product { Name = "Windows Seven Home"' Price = 80 };
Magic Number,Infrastructure.Tests.Data.Lab,DataSeedingInitializer,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\DataSeedingInitializer.cs,CreateProducts,The following statement contains a magic number: var p4 = new Product { Name = "Windows Seven Ultimate"' Price = 110 };
Magic Number,Infrastructure.Tests.Data.Lab,DataSeedingInitializer,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\DataSeedingInitializer.cs,CreateProducts,The following statement contains a magic number: var p5 = new Product { Name = "Windows Seven Premium"' Price = 150 };
Magic Number,Infrastructure.Tests.Data.Lab,DataSeedingInitializer,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\DataSeedingInitializer.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Lab,DataSeedingInitializer,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\DataSeedingInitializer.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Lab,DataSeedingInitializer,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\DataSeedingInitializer.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,FindBySpecification,The following statement contains a magic number: Specification<Product> specification = new Specification<Product>(p => p.Price < 100);
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,FindBySpecification,The following statement contains a magic number: Assert.AreEqual(2' productsOnSale.Count());
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,FindByCompositeSpecification,The following statement contains a magic number: IEnumerable<Product> products = repository.Find<Product>(                  new Specification<Product>(p => p.Price < 100).And(new Specification<Product>(p => p.Name == "Windows XP Professional")));
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,FindByConcretSpecification,The following statement contains a magic number: Assert.AreEqual(2' productsOnSale.Count());
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,CreateProducts,The following statement contains a magic number: var p1 = new Product { Name = "Windows Seven Professional"' Price = 100 };
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,CreateProducts,The following statement contains a magic number: var p2 = new Product { Name = "Windows XP Professional"' Price = 20 };
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,CreateProducts,The following statement contains a magic number: var p3 = new Product { Name = "Windows Seven Home"' Price = 80 };
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,CreateProducts,The following statement contains a magic number: var p4 = new Product { Name = "Windows Seven Ultimate"' Price = 110 };
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,CreateProducts,The following statement contains a magic number: var p5 = new Product { Name = "Windows Seven Premium"' Price = 150 };
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,GetProductsWithPaging,The following statement contains a magic number: var output = repository.Get<Product' string>(x => x.Name' 0' 5).ToList();
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[2].Name == "Windows Seven Professional");
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[3].Name == "Windows Seven Ultimate");
Magic Number,Infrastructure.Tests.Data.Lab,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\RepositoryTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[4].Name == "Windows XP Professional");
Magic Number,Infrastructure.Tests.Data.Lab,UseMyDbContextTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\UseMyDbContextTest.cs,FindBySpecification,The following statement contains a magic number: Specification<Product> specification = new Specification<Product>(p => p.Price < 100);
Magic Number,Infrastructure.Tests.Data.Lab,UseMyDbContextTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\UseMyDbContextTest.cs,FindBySpecification,The following statement contains a magic number: Assert.AreEqual(2' productsOnSale.Count());
Magic Number,Infrastructure.Tests.Data.Lab,UseMyDbContextTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\UseMyDbContextTest.cs,FindByCompositeSpecification,The following statement contains a magic number: IEnumerable<Product> products = repository.Find<Product>(                  new Specification<Product>(p => p.Price < 100).And(new Specification<Product>(p => p.Name == "Windows XP Professional")));
Magic Number,Infrastructure.Tests.Data.Lab,UseMyDbContextTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\UseMyDbContextTest.cs,FindByConcretSpecification,The following statement contains a magic number: Assert.AreEqual(2' productsOnSale.Count());
Magic Number,Infrastructure.Tests.Data.Lab,UseMyDbContextTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\UseMyDbContextTest.cs,GetProductsWithPaging,The following statement contains a magic number: var output = repository.Get<Product' string>(x => x.Name' 0' 5).ToList();
Magic Number,Infrastructure.Tests.Data.Lab,UseMyDbContextTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\UseMyDbContextTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[2].Name == "Windows Seven Professional");
Magic Number,Infrastructure.Tests.Data.Lab,UseMyDbContextTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\UseMyDbContextTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[3].Name == "Windows Seven Ultimate");
Magic Number,Infrastructure.Tests.Data.Lab,UseMyDbContextTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\UseMyDbContextTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[4].Name == "Windows XP Professional");
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,FindBySpecification,The following statement contains a magic number: Specification<Product> specification = new Specification<Product>(p => p.Price < 100);
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,FindBySpecification,The following statement contains a magic number: Assert.AreEqual(2' productsOnSale.Count());
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,FindByCompositeSpecification,The following statement contains a magic number: IEnumerable<Product> products = repository.Find<Product>(                  new Specification<Product>(p => p.Price < 100).And(new Specification<Product>(p => p.Name == "Windows XP Professional")));
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,FindByConcretSpecification,The following statement contains a magic number: Assert.AreEqual(2' productsOnSale.Count());
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,CreateProducts,The following statement contains a magic number: var p1 = new Product { Name = "Windows Seven Professional"' Price = 100 };
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,CreateProducts,The following statement contains a magic number: var p2 = new Product { Name = "Windows XP Professional"' Price = 20 };
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,CreateProducts,The following statement contains a magic number: var p3 = new Product { Name = "Windows Seven Home"' Price = 80 };
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,CreateProducts,The following statement contains a magic number: var p4 = new Product { Name = "Windows Seven Ultimate"' Price = 110 };
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,CreateProducts,The following statement contains a magic number: var p5 = new Product { Name = "Windows Seven Premium"' Price = 150 };
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,GetProductsWithPaging,The following statement contains a magic number: var output = repository.Get<Product' string>(x => x.Name' 0' 5).ToList();
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[2].Name == "Windows Seven Professional");
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[3].Name == "Windows Seven Ultimate");
Magic Number,Infrastructure.Tests.Data.Lab,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Lab\WithoutStorageTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[4].Name == "Windows XP Professional");
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,FindByAndCompositeSpecification,The following statement contains a magic number: IEnumerable<Product> products = repository.Find<Product>(                  new Specification<Product>(p => p.Price < 100).And(new Specification<Product>(p => p.Name == "Windows XP Professional")));
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,FindByOrCompositeSpecification,The following statement contains a magic number: IEnumerable<Product> products = repository.Find<Product>(                  new Specification<Product>(p => p.Price < 100).Or(new Specification<Product>(p => p.Name == "Windows XP Professional")));
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,FindByOrCompositeSpecification,The following statement contains a magic number: Assert.AreEqual(2' products.Count());
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,FindByConcretSpecification,The following statement contains a magic number: Assert.AreEqual(2' productsOnSale.Count());
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,CreateProducts,The following statement contains a magic number: var p1 = new Product { Name = "Windows Seven Professional"' Price = 100 };
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,CreateProducts,The following statement contains a magic number: var p2 = new Product { Name = "Windows XP Professional"' Price = 20 };
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,CreateProducts,The following statement contains a magic number: var p3 = new Product { Name = "Windows Seven Home"' Price = 80 };
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,CreateProducts,The following statement contains a magic number: var p4 = new Product { Name = "Windows Seven Ultimate"' Price = 110 };
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,CreateProducts,The following statement contains a magic number: var p5 = new Product { Name = "Windows Seven Premium"' Price = 150 };
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,GetProductsWithPaging,The following statement contains a magic number: var output = repository.Get<Product' string>(x => x.Name' 1' 5).ToList();
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[2].Name == "Windows Seven Professional");
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[3].Name == "Windows Seven Ultimate");
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[4].Name == "Windows XP Professional");
Magic Number,Infrastructure.Tests.Data.Repository,RepositoryTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\RepositoryTest.cs,GetCount,The following statement contains a magic number: Assert.AreEqual(5' count);
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,GetCount,The following statement contains a magic number: Assert.AreEqual(5' count);
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,FindByAndCompositeSpecification,The following statement contains a magic number: IEnumerable<Product> products = repository.Find<Product>(                  new Specification<Product>(p => p.Price < 100).And(new Specification<Product>(p => p.Name == "Windows XP Professional")));
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,FindByOrCompositeSpecification,The following statement contains a magic number: IEnumerable<Product> products = repository.Find<Product>(                  new Specification<Product>(p => p.Price < 100).Or(new Specification<Product>(p => p.Name == "Windows XP Professional")));
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,FindByOrCompositeSpecification,The following statement contains a magic number: Assert.AreEqual(2' products.Count());
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,FindByConcretSpecification,The following statement contains a magic number: Assert.AreEqual(2' productsOnSale.Count());
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,CreateProducts,The following statement contains a magic number: var p1 = new Product { Name = "Windows Seven Professional"' Price = 100 };
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,CreateProducts,The following statement contains a magic number: var p2 = new Product { Name = "Windows XP Professional"' Price = 20 };
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,CreateProducts,The following statement contains a magic number: var p3 = new Product { Name = "Windows Seven Home"' Price = 80 };
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,CreateProducts,The following statement contains a magic number: var p4 = new Product { Name = "Windows Seven Ultimate"' Price = 110 };
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,CreateProducts,The following statement contains a magic number: var p5 = new Product { Name = "Windows Seven Premium"' Price = 150 };
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,AddOrders,The following statement contains a magic number: var o = new Order              {                  OrderDate = DateTime.Now'                  Customer = c'                  OrderLines = new List<OrderLine>                  {                      new OrderLine { Price = 200' Product = winXP' Quantity = 1}'                      new OrderLine { Price = 699.99' Product = winSeven' Quantity = 5 }                  }              };
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,GetProductsWithPaging,The following statement contains a magic number: var output = repository.Get<Product' string>(x => x.Name' 0' 5).ToList();
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[2].Name == "Windows Seven Professional");
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[3].Name == "Windows Seven Ultimate");
Magic Number,Infrastructure.Tests.Data.Repository,WithoutStorageTest,D:\research\architectureSmells\repos\huyrua_efprs\net40\Infrastructure.Tests\Data\Repository\WithoutStorageTest.cs,GetProductsWithPaging,The following statement contains a magic number: Assert.IsTrue(output[4].Name == "Windows XP Professional");
